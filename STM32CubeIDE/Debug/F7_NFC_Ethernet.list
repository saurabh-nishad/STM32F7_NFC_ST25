
F7_NFC_Ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d49c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000071c  0800d670  0800d670  0001d670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd8c  0800dd8c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd8c  0800dd8c  0001dd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd94  0800dd94  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd94  0800dd94  0001dd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd98  0800dd98  0001dd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800dd9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ec8  200001e0  0800df7c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  200050a8  0800df7c  000250a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000292e9  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053bb  00000000  00000000  000494f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d58  00000000  00000000  0004e8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b40  00000000  00000000  00050610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d32c  00000000  00000000  00052150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002952d  00000000  00000000  0007f47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106f13  00000000  00000000  000a89a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001af8bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b24  00000000  00000000  001af90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d654 	.word	0x0800d654

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800d654 	.word	0x0800d654

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <green_color_printf>:

static inline void red_color_printf(void) {
	printf("\033[0;31m");
}

static inline void green_color_printf(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	printf("\033[0;32m");
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <green_color_printf+0x10>)
 8000ef2:	f00a fbfb 	bl	800b6ec <iprintf>
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	0800d670 	.word	0x0800d670

08000f00 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <MX_FREERTOS_Init+0x18>)
 8000f06:	2100      	movs	r1, #0
 8000f08:	4804      	ldr	r0, [pc, #16]	; (8000f1c <MX_FREERTOS_Init+0x1c>)
 8000f0a:	f006 fe85 	bl	8007c18 <osThreadNew>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a03      	ldr	r2, [pc, #12]	; (8000f20 <MX_FREERTOS_Init+0x20>)
 8000f12:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	0800d974 	.word	0x0800d974
 8000f1c:	08000f25 	.word	0x08000f25
 8000f20:	200002ac 	.word	0x200002ac

08000f24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(MCU_LED1_TF_GPIO_Port, MCU_LED1_TF_Pin);
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4819      	ldr	r0, [pc, #100]	; (8000f94 <StartDefaultTask+0x70>)
 8000f30:	f001 fb88 	bl	8002644 <HAL_GPIO_TogglePin>
	  osDelay(80);
 8000f34:	2050      	movs	r0, #80	; 0x50
 8000f36:	f006 ff15 	bl	8007d64 <osDelay>
	  HAL_GPIO_TogglePin(MCU_LED2_TB_GPIO_Port, MCU_LED2_TB_Pin);
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	4815      	ldr	r0, [pc, #84]	; (8000f94 <StartDefaultTask+0x70>)
 8000f3e:	f001 fb81 	bl	8002644 <HAL_GPIO_TogglePin>
	  osDelay(80);
 8000f42:	2050      	movs	r0, #80	; 0x50
 8000f44:	f006 ff0e 	bl	8007d64 <osDelay>
	  HAL_GPIO_TogglePin(MCU_LED3_TA_GPIO_Port, MCU_LED3_TA_Pin);
 8000f48:	2108      	movs	r1, #8
 8000f4a:	4813      	ldr	r0, [pc, #76]	; (8000f98 <StartDefaultTask+0x74>)
 8000f4c:	f001 fb7a 	bl	8002644 <HAL_GPIO_TogglePin>
	  osDelay(80);
 8000f50:	2050      	movs	r0, #80	; 0x50
 8000f52:	f006 ff07 	bl	8007d64 <osDelay>
	  HAL_GPIO_TogglePin(MCU_LED4_TV_GPIO_Port, MCU_LED4_TV_Pin);
 8000f56:	2120      	movs	r1, #32
 8000f58:	480f      	ldr	r0, [pc, #60]	; (8000f98 <StartDefaultTask+0x74>)
 8000f5a:	f001 fb73 	bl	8002644 <HAL_GPIO_TogglePin>
	  osDelay(80);
 8000f5e:	2050      	movs	r0, #80	; 0x50
 8000f60:	f006 ff00 	bl	8007d64 <osDelay>
	  HAL_GPIO_TogglePin(MCU_LED5_AP2P_GPIO_Port, MCU_LED5_AP2P_Pin);
 8000f64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <StartDefaultTask+0x74>)
 8000f6a:	f001 fb6b 	bl	8002644 <HAL_GPIO_TogglePin>
	  osDelay(80);
 8000f6e:	2050      	movs	r0, #80	; 0x50
 8000f70:	f006 fef8 	bl	8007d64 <osDelay>
	  HAL_GPIO_TogglePin(MCU_LED6_TX_GPIO_Port, MCU_LED6_TX_Pin);
 8000f74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f78:	4807      	ldr	r0, [pc, #28]	; (8000f98 <StartDefaultTask+0x74>)
 8000f7a:	f001 fb63 	bl	8002644 <HAL_GPIO_TogglePin>
	  green_color_printf();
 8000f7e:	f7ff ffb5 	bl	8000eec <green_color_printf>
	  printf("From default Task...\r\n");
 8000f82:	4806      	ldr	r0, [pc, #24]	; (8000f9c <StartDefaultTask+0x78>)
 8000f84:	f00a fc38 	bl	800b7f8 <puts>
	  osDelay(1000);
 8000f88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f8c:	f006 feea 	bl	8007d64 <osDelay>
	  HAL_GPIO_TogglePin(MCU_LED1_TF_GPIO_Port, MCU_LED1_TF_Pin);
 8000f90:	e7cc      	b.n	8000f2c <StartDefaultTask+0x8>
 8000f92:	bf00      	nop
 8000f94:	40020800 	.word	0x40020800
 8000f98:	40021400 	.word	0x40021400
 8000f9c:	0800d684 	.word	0x0800d684

08000fa0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08c      	sub	sp, #48	; 0x30
 8000fa4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b6b      	ldr	r3, [pc, #428]	; (8001164 <MX_GPIO_Init+0x1c4>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a6a      	ldr	r2, [pc, #424]	; (8001164 <MX_GPIO_Init+0x1c4>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b68      	ldr	r3, [pc, #416]	; (8001164 <MX_GPIO_Init+0x1c4>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	61bb      	str	r3, [r7, #24]
 8000fcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fce:	4b65      	ldr	r3, [pc, #404]	; (8001164 <MX_GPIO_Init+0x1c4>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a64      	ldr	r2, [pc, #400]	; (8001164 <MX_GPIO_Init+0x1c4>)
 8000fd4:	f043 0320 	orr.w	r3, r3, #32
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b62      	ldr	r3, [pc, #392]	; (8001164 <MX_GPIO_Init+0x1c4>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0320 	and.w	r3, r3, #32
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe6:	4b5f      	ldr	r3, [pc, #380]	; (8001164 <MX_GPIO_Init+0x1c4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a5e      	ldr	r2, [pc, #376]	; (8001164 <MX_GPIO_Init+0x1c4>)
 8000fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b5c      	ldr	r3, [pc, #368]	; (8001164 <MX_GPIO_Init+0x1c4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b59      	ldr	r3, [pc, #356]	; (8001164 <MX_GPIO_Init+0x1c4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a58      	ldr	r2, [pc, #352]	; (8001164 <MX_GPIO_Init+0x1c4>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b56      	ldr	r3, [pc, #344]	; (8001164 <MX_GPIO_Init+0x1c4>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b53      	ldr	r3, [pc, #332]	; (8001164 <MX_GPIO_Init+0x1c4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a52      	ldr	r2, [pc, #328]	; (8001164 <MX_GPIO_Init+0x1c4>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b50      	ldr	r3, [pc, #320]	; (8001164 <MX_GPIO_Init+0x1c4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102e:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <MX_GPIO_Init+0x1c4>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a4c      	ldr	r2, [pc, #304]	; (8001164 <MX_GPIO_Init+0x1c4>)
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <MX_GPIO_Init+0x1c4>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001046:	4b47      	ldr	r3, [pc, #284]	; (8001164 <MX_GPIO_Init+0x1c4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a46      	ldr	r2, [pc, #280]	; (8001164 <MX_GPIO_Init+0x1c4>)
 800104c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b44      	ldr	r3, [pc, #272]	; (8001164 <MX_GPIO_Init+0x1c4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MCU_LED3_TA_Pin|MCU_LED4_TV_Pin|MCU_LED5_AP2P_Pin|MCU_LED6_TX_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f242 4128 	movw	r1, #9256	; 0x2428
 8001064:	4840      	ldr	r0, [pc, #256]	; (8001168 <MX_GPIO_Init+0x1c8>)
 8001066:	f001 fac1 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MCU_LED1_TF_Pin|MCU_LED2_TB_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2109      	movs	r1, #9
 800106e:	483f      	ldr	r0, [pc, #252]	; (800116c <MX_GPIO_Init+0x1cc>)
 8001070:	f001 fabc 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f244 0181 	movw	r1, #16513	; 0x4081
 800107a:	483d      	ldr	r0, [pc, #244]	; (8001170 <MX_GPIO_Init+0x1d0>)
 800107c:	f001 fab6 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2140      	movs	r1, #64	; 0x40
 8001084:	483b      	ldr	r0, [pc, #236]	; (8001174 <MX_GPIO_Init+0x1d4>)
 8001086:	f001 fab1 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800108a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800108e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001090:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	4832      	ldr	r0, [pc, #200]	; (800116c <MX_GPIO_Init+0x1cc>)
 80010a2:	f000 ff33 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = MCU_LED3_TA_Pin|MCU_LED4_TV_Pin|MCU_LED5_AP2P_Pin|MCU_LED6_TX_Pin;
 80010a6:	f242 4328 	movw	r3, #9256	; 0x2428
 80010aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4619      	mov	r1, r3
 80010be:	482a      	ldr	r0, [pc, #168]	; (8001168 <MX_GPIO_Init+0x1c8>)
 80010c0:	f000 ff24 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MCU_LED1_TF_Pin|MCU_LED2_TB_Pin;
 80010c4:	2309      	movs	r3, #9
 80010c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	4824      	ldr	r0, [pc, #144]	; (800116c <MX_GPIO_Init+0x1cc>)
 80010dc:	f000 ff16 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_MCU_Pin;
 80010e0:	2308      	movs	r3, #8
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IRQ_MCU_GPIO_Port, &GPIO_InitStruct);
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4619      	mov	r1, r3
 80010f4:	4820      	ldr	r0, [pc, #128]	; (8001178 <MX_GPIO_Init+0x1d8>)
 80010f6:	f000 ff09 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80010fa:	f244 0381 	movw	r3, #16513	; 0x4081
 80010fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001100:	2301      	movs	r3, #1
 8001102:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	4817      	ldr	r0, [pc, #92]	; (8001170 <MX_GPIO_Init+0x1d0>)
 8001114:	f000 fefa 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001118:	2340      	movs	r3, #64	; 0x40
 800111a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111c:	2301      	movs	r3, #1
 800111e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001128:	f107 031c 	add.w	r3, r7, #28
 800112c:	4619      	mov	r1, r3
 800112e:	4811      	ldr	r0, [pc, #68]	; (8001174 <MX_GPIO_Init+0x1d4>)
 8001130:	f000 feec 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	480b      	ldr	r0, [pc, #44]	; (8001174 <MX_GPIO_Init+0x1d4>)
 8001148:	f000 fee0 	bl	8001f0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2105      	movs	r1, #5
 8001150:	2028      	movs	r0, #40	; 0x28
 8001152:	f000 fd11 	bl	8001b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001156:	2028      	movs	r0, #40	; 0x28
 8001158:	f000 fd3a 	bl	8001bd0 <HAL_NVIC_EnableIRQ>

}
 800115c:	bf00      	nop
 800115e:	3730      	adds	r7, #48	; 0x30
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40023800 	.word	0x40023800
 8001168:	40021400 	.word	0x40021400
 800116c:	40020800 	.word	0x40020800
 8001170:	40020400 	.word	0x40020400
 8001174:	40021800 	.word	0x40021800
 8001178:	40020000 	.word	0x40020000

0800117c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	80fb      	strh	r3, [r7, #6]
	assert_failed((uint8_t*)__FILE__,	(uint32_t)__LINE__);
 8001186:	217f      	movs	r1, #127	; 0x7f
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <HAL_GPIO_EXTI_Callback+0x1c>)
 800118a:	f000 f8bd 	bl	8001308 <assert_failed>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	0800d69c 	.word	0x0800d69c

0800119c <red_color_printf>:
static inline void red_color_printf(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	printf("\033[0;31m");
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <red_color_printf+0x10>)
 80011a2:	f00a faa3 	bl	800b6ec <iprintf>
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	0800d6d4 	.word	0x0800d6d4

080011b0 <green_color_printf>:
static inline void green_color_printf(void) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	printf("\033[0;32m");
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <green_color_printf+0x10>)
 80011b6:	f00a fa99 	bl	800b6ec <iprintf>
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	0800d6dc 	.word	0x0800d6dc

080011c4 <white_color_printf>:

static inline void yellow_color_printf(void) {
	printf("\033[0;33m");
}

static inline void white_color_printf(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	printf("\033[0;37m");
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <white_color_printf+0x10>)
 80011ca:	f00a fa8f 	bl	800b6ec <iprintf>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	0800d6e4 	.word	0x0800d6e4

080011d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011dc:	f000 fbd0 	bl	8001980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e0:	f000 f80c 	bl	80011fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e4:	f7ff fedc 	bl	8000fa0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80011e8:	f000 fa58 	bl	800169c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80011ec:	f006 fcaa 	bl	8007b44 <osKernelInitialize>
  MX_FREERTOS_Init();
 80011f0:	f7ff fe86 	bl	8000f00 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80011f4:	f006 fcda 	bl	8007bac <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <main+0x20>
	...

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b094      	sub	sp, #80	; 0x50
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	2230      	movs	r2, #48	; 0x30
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f009 fd1c 	bl	800ac48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001220:	f002 fca6 	bl	8003b70 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001224:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <SystemClock_Config+0xd4>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	4a29      	ldr	r2, [pc, #164]	; (80012d0 <SystemClock_Config+0xd4>)
 800122a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122e:	6413      	str	r3, [r2, #64]	; 0x40
 8001230:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <SystemClock_Config+0xd4>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800123c:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <SystemClock_Config+0xd8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a24      	ldr	r2, [pc, #144]	; (80012d4 <SystemClock_Config+0xd8>)
 8001242:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <SystemClock_Config+0xd8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001254:	2301      	movs	r3, #1
 8001256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001258:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125e:	2302      	movs	r3, #2
 8001260:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001262:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001266:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001268:	2304      	movs	r3, #4
 800126a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800126c:	23d8      	movs	r3, #216	; 0xd8
 800126e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001270:	2302      	movs	r3, #2
 8001272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001274:	2309      	movs	r3, #9
 8001276:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001278:	f107 0320 	add.w	r3, r7, #32
 800127c:	4618      	mov	r0, r3
 800127e:	f002 fcd7 	bl	8003c30 <HAL_RCC_OscConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001288:	f000 f838 	bl	80012fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800128c:	f002 fc80 	bl	8003b90 <HAL_PWREx_EnableOverDrive>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001296:	f000 f831 	bl	80012fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129a:	230f      	movs	r3, #15
 800129c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129e:	2302      	movs	r3, #2
 80012a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	2107      	movs	r1, #7
 80012b8:	4618      	mov	r0, r3
 80012ba:	f003 f813 	bl	80042e4 <HAL_RCC_ClockConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80012c4:	f000 f81a 	bl	80012fc <Error_Handler>
  }
}
 80012c8:	bf00      	nop
 80012ca:	3750      	adds	r7, #80	; 0x50
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40007000 	.word	0x40007000

080012d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d101      	bne.n	80012ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ea:	f000 fb57 	bl	800199c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40001000 	.word	0x40001000

080012fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001300:	b672      	cpsid	i
}
 8001302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001304:	e7fe      	b.n	8001304 <Error_Handler+0x8>
	...

08001308 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	red_color_printf();
 8001312:	f7ff ff43 	bl	800119c <red_color_printf>
	printf("Assert Failed: ");
 8001316:	4808      	ldr	r0, [pc, #32]	; (8001338 <assert_failed+0x30>)
 8001318:	f00a f9e8 	bl	800b6ec <iprintf>
	green_color_printf();
 800131c:	f7ff ff48 	bl	80011b0 <green_color_printf>
	printf("Wrong parameters value: file %s on line %d\r\n", file, (uint)line);
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <assert_failed+0x34>)
 8001326:	f00a f9e1 	bl	800b6ec <iprintf>
	white_color_printf();
 800132a:	f7ff ff4b 	bl	80011c4 <white_color_printf>
  /* USER CODE END 6 */
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	0800d6ec 	.word	0x0800d6ec
 800133c:	0800d6fc 	.word	0x0800d6fc

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_MspInit+0x4c>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <HAL_MspInit+0x4c>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_MspInit+0x4c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <HAL_MspInit+0x4c>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001368:	6453      	str	r3, [r2, #68]	; 0x44
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_MspInit+0x4c>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	210f      	movs	r1, #15
 800137a:	f06f 0001 	mvn.w	r0, #1
 800137e:	f000 fbfb 	bl	8001b78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800

08001390 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08e      	sub	sp, #56	; 0x38
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013a0:	4b33      	ldr	r3, [pc, #204]	; (8001470 <HAL_InitTick+0xe0>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	4a32      	ldr	r2, [pc, #200]	; (8001470 <HAL_InitTick+0xe0>)
 80013a6:	f043 0310 	orr.w	r3, r3, #16
 80013aa:	6413      	str	r3, [r2, #64]	; 0x40
 80013ac:	4b30      	ldr	r3, [pc, #192]	; (8001470 <HAL_InitTick+0xe0>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	f003 0310 	and.w	r3, r3, #16
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013b8:	f107 0210 	add.w	r2, r7, #16
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4611      	mov	r1, r2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 fa70 	bl	80048a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d103      	bne.n	80013da <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013d2:	f003 fa41 	bl	8004858 <HAL_RCC_GetPCLK1Freq>
 80013d6:	6378      	str	r0, [r7, #52]	; 0x34
 80013d8:	e004      	b.n	80013e4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013da:	f003 fa3d 	bl	8004858 <HAL_RCC_GetPCLK1Freq>
 80013de:	4603      	mov	r3, r0
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e6:	4a23      	ldr	r2, [pc, #140]	; (8001474 <HAL_InitTick+0xe4>)
 80013e8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ec:	0c9b      	lsrs	r3, r3, #18
 80013ee:	3b01      	subs	r3, #1
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013f2:	4b21      	ldr	r3, [pc, #132]	; (8001478 <HAL_InitTick+0xe8>)
 80013f4:	4a21      	ldr	r2, [pc, #132]	; (800147c <HAL_InitTick+0xec>)
 80013f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <HAL_InitTick+0xe8>)
 80013fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013fe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001400:	4a1d      	ldr	r2, [pc, #116]	; (8001478 <HAL_InitTick+0xe8>)
 8001402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001404:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <HAL_InitTick+0xe8>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <HAL_InitTick+0xe8>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001412:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_InitTick+0xe8>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001418:	4817      	ldr	r0, [pc, #92]	; (8001478 <HAL_InitTick+0xe8>)
 800141a:	f004 fa5b 	bl	80058d4 <HAL_TIM_Base_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001424:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001428:	2b00      	cmp	r3, #0
 800142a:	d11b      	bne.n	8001464 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800142c:	4812      	ldr	r0, [pc, #72]	; (8001478 <HAL_InitTick+0xe8>)
 800142e:	f004 fb7b 	bl	8005b28 <HAL_TIM_Base_Start_IT>
 8001432:	4603      	mov	r3, r0
 8001434:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001438:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800143c:	2b00      	cmp	r3, #0
 800143e:	d111      	bne.n	8001464 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001440:	2036      	movs	r0, #54	; 0x36
 8001442:	f000 fbc5 	bl	8001bd0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b0f      	cmp	r3, #15
 800144a:	d808      	bhi.n	800145e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800144c:	2200      	movs	r2, #0
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	2036      	movs	r0, #54	; 0x36
 8001452:	f000 fb91 	bl	8001b78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <HAL_InitTick+0xf0>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	e002      	b.n	8001464 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001464:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001468:	4618      	mov	r0, r3
 800146a:	3738      	adds	r7, #56	; 0x38
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40023800 	.word	0x40023800
 8001474:	431bde83 	.word	0x431bde83
 8001478:	200002b0 	.word	0x200002b0
 800147c:	40001000 	.word	0x40001000
 8001480:	20000004 	.word	0x20000004

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler+0x4>

0800148a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <MemManage_Handler+0x4>

08001496 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <USART3_IRQHandler+0x10>)
 80014b6:	f004 ff4f 	bl	8006358 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000300 	.word	0x20000300

080014c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80014c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014cc:	f001 f8dc 	bl	8002688 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <TIM6_DAC_IRQHandler+0x10>)
 80014da:	f004 fbf3 	bl	8005cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200002b0 	.word	0x200002b0

080014e8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <ETH_IRQHandler+0x10>)
 80014ee:	f000 fc19 	bl	8001d24 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200001fc 	.word	0x200001fc

080014fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <OTG_FS_IRQHandler+0x10>)
 8001502:	f001 f8d9 	bl	80026b8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000388 	.word	0x20000388

08001510 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return 1;
 8001514:	2301      	movs	r3, #1
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_kill>:

int _kill(int pid, int sig)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800152a:	f009 fa53 	bl	800a9d4 <__errno>
 800152e:	4603      	mov	r3, r0
 8001530:	2216      	movs	r2, #22
 8001532:	601a      	str	r2, [r3, #0]
  return -1;
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <_exit>:

void _exit (int status)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001548:	f04f 31ff 	mov.w	r1, #4294967295
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ffe7 	bl	8001520 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001552:	e7fe      	b.n	8001552 <_exit+0x12>

08001554 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	e00a      	b.n	800157c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001566:	f3af 8000 	nop.w
 800156a:	4601      	mov	r1, r0
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	60ba      	str	r2, [r7, #8]
 8001572:	b2ca      	uxtb	r2, r1
 8001574:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3301      	adds	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	429a      	cmp	r2, r3
 8001582:	dbf0      	blt.n	8001566 <_read+0x12>
  }

  return len;
 8001584:	687b      	ldr	r3, [r7, #4]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	e009      	b.n	80015b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	60ba      	str	r2, [r7, #8]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f006 fab1 	bl	8007b10 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3301      	adds	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dbf1      	blt.n	80015a0 <_write+0x12>
  }
  return len;
 80015bc:	687b      	ldr	r3, [r7, #4]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_close>:

int _close(int file)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ee:	605a      	str	r2, [r3, #4]
  return 0;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <_isatty>:

int _isatty(int file)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001606:	2301      	movs	r3, #1
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001638:	4a14      	ldr	r2, [pc, #80]	; (800168c <_sbrk+0x5c>)
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <_sbrk+0x60>)
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <_sbrk+0x64>)
 800164e:	4a12      	ldr	r2, [pc, #72]	; (8001698 <_sbrk+0x68>)
 8001650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <_sbrk+0x64>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	429a      	cmp	r2, r3
 800165e:	d207      	bcs.n	8001670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001660:	f009 f9b8 	bl	800a9d4 <__errno>
 8001664:	4603      	mov	r3, r0
 8001666:	220c      	movs	r2, #12
 8001668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	e009      	b.n	8001684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	4a05      	ldr	r2, [pc, #20]	; (8001694 <_sbrk+0x64>)
 8001680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001682:	68fb      	ldr	r3, [r7, #12]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20050000 	.word	0x20050000
 8001690:	00000800 	.word	0x00000800
 8001694:	200002fc 	.word	0x200002fc
 8001698:	200050a8 	.word	0x200050a8

0800169c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <MX_USART3_UART_Init+0x58>)
 80016a2:	4a15      	ldr	r2, [pc, #84]	; (80016f8 <MX_USART3_UART_Init+0x5c>)
 80016a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <MX_USART3_UART_Init+0x58>)
 80016a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_USART3_UART_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <MX_USART3_UART_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_USART3_UART_Init+0x58>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <MX_USART3_UART_Init+0x58>)
 80016c2:	220c      	movs	r2, #12
 80016c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <MX_USART3_UART_Init+0x58>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_USART3_UART_Init+0x58>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <MX_USART3_UART_Init+0x58>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_USART3_UART_Init+0x58>)
 80016da:	2200      	movs	r2, #0
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_USART3_UART_Init+0x58>)
 80016e0:	f004 fcf6 	bl	80060d0 <HAL_UART_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80016ea:	f7ff fe07 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000300 	.word	0x20000300
 80016f8:	40004800 	.word	0x40004800

080016fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b0aa      	sub	sp, #168	; 0xa8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	2284      	movs	r2, #132	; 0x84
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f009 fa93 	bl	800ac48 <memset>
  if(uartHandle->Instance==USART3)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a26      	ldr	r2, [pc, #152]	; (80017c0 <HAL_UART_MspInit+0xc4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d144      	bne.n	80017b6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800172c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001730:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001732:	2300      	movs	r3, #0
 8001734:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001736:	f107 0310 	add.w	r3, r7, #16
 800173a:	4618      	mov	r0, r3
 800173c:	f003 f8e6 	bl	800490c <HAL_RCCEx_PeriphCLKConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001746:	f7ff fdd9 	bl	80012fc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800174a:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <HAL_UART_MspInit+0xc8>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	4a1d      	ldr	r2, [pc, #116]	; (80017c4 <HAL_UART_MspInit+0xc8>)
 8001750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001754:	6413      	str	r3, [r2, #64]	; 0x40
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_UART_MspInit+0xc8>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <HAL_UART_MspInit+0xc8>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a17      	ldr	r2, [pc, #92]	; (80017c4 <HAL_UART_MspInit+0xc8>)
 8001768:	f043 0308 	orr.w	r3, r3, #8
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <HAL_UART_MspInit+0xc8>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800177a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800177e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001788:	2301      	movs	r3, #1
 800178a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001794:	2307      	movs	r3, #7
 8001796:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800179a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800179e:	4619      	mov	r1, r3
 80017a0:	4809      	ldr	r0, [pc, #36]	; (80017c8 <HAL_UART_MspInit+0xcc>)
 80017a2:	f000 fbb3 	bl	8001f0c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2105      	movs	r1, #5
 80017aa:	2027      	movs	r0, #39	; 0x27
 80017ac:	f000 f9e4 	bl	8001b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017b0:	2027      	movs	r0, #39	; 0x27
 80017b2:	f000 fa0d 	bl	8001bd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80017b6:	bf00      	nop
 80017b8:	37a8      	adds	r7, #168	; 0xa8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40004800 	.word	0x40004800
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020c00 	.word	0x40020c00

080017cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001804 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d0:	480d      	ldr	r0, [pc, #52]	; (8001808 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017d2:	490e      	ldr	r1, [pc, #56]	; (800180c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017d4:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d8:	e002      	b.n	80017e0 <LoopCopyDataInit>

080017da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017de:	3304      	adds	r3, #4

080017e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e4:	d3f9      	bcc.n	80017da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e6:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017e8:	4c0b      	ldr	r4, [pc, #44]	; (8001818 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ec:	e001      	b.n	80017f2 <LoopFillZerobss>

080017ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f0:	3204      	adds	r2, #4

080017f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f4:	d3fb      	bcc.n	80017ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017f6:	f000 f8b1 	bl	800195c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017fa:	f009 f9e7 	bl	800abcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fe:	f7ff fceb 	bl	80011d8 <main>
  bx  lr    
 8001802:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001804:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800180c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001810:	0800dd9c 	.word	0x0800dd9c
  ldr r2, =_sbss
 8001814:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001818:	200050a8 	.word	0x200050a8

0800181c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800181c:	e7fe      	b.n	800181c <ADC_IRQHandler>

0800181e <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800182c:	4618      	mov	r0, r3
 800182e:	f008 fff3 	bl	800a818 <USBH_LL_IncTimer>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8001848:	4618      	mov	r0, r3
 800184a:	f009 f837 	bl	800a8bc <USBH_LL_Connect>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8001864:	4618      	mov	r0, r3
 8001866:	f009 f84c 	bl	800a902 <USBH_LL_Disconnect>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	460b      	mov	r3, r1
 800187c:	70fb      	strb	r3, [r7, #3]
 800187e:	4613      	mov	r3, r2
 8001880:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8001888:	4618      	mov	r0, r3
 800188a:	f009 f86c 	bl	800a966 <USBH_LL_NotifyURBChange>
#endif
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80018a4:	4618      	mov	r0, r3
 80018a6:	f008 ffe1 	bl	800a86c <USBH_LL_PortEnabled>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80018c0:	4618      	mov	r0, r3
 80018c2:	f008 ffed 	bl	800a8a0 <USBH_LL_PortDisabled>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b084      	sub	sp, #16
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 fff2 	bl	80028ce <HAL_HCD_Stop>
 80018ea:	4603      	mov	r3, r0
 80018ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 f807 	bl	8001904 <USBH_Get_USB_Status>
 80018f6:	4603      	mov	r3, r0
 80018f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80018fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b03      	cmp	r3, #3
 8001916:	d817      	bhi.n	8001948 <USBH_Get_USB_Status+0x44>
 8001918:	a201      	add	r2, pc, #4	; (adr r2, 8001920 <USBH_Get_USB_Status+0x1c>)
 800191a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191e:	bf00      	nop
 8001920:	08001931 	.word	0x08001931
 8001924:	08001937 	.word	0x08001937
 8001928:	0800193d 	.word	0x0800193d
 800192c:	08001943 	.word	0x08001943
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]
    break;
 8001934:	e00b      	b.n	800194e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8001936:	2302      	movs	r3, #2
 8001938:	73fb      	strb	r3, [r7, #15]
    break;
 800193a:	e008      	b.n	800194e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
    break;
 8001940:	e005      	b.n	800194e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8001942:	2302      	movs	r3, #2
 8001944:	73fb      	strb	r3, [r7, #15]
    break;
 8001946:	e002      	b.n	800194e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8001948:	2302      	movs	r3, #2
 800194a:	73fb      	strb	r3, [r7, #15]
    break;
 800194c:	bf00      	nop
  }
  return usb_status;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <SystemInit+0x20>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <SystemInit+0x20>)
 8001968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800196c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001984:	2003      	movs	r0, #3
 8001986:	f000 f8d7 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198a:	200f      	movs	r0, #15
 800198c:	f7ff fd00 	bl	8001390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001990:	f7ff fcd6 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_IncTick+0x20>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_IncTick+0x24>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <HAL_IncTick+0x24>)
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000008 	.word	0x20000008
 80019c0:	2000068c 	.word	0x2000068c

080019c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return uwTick;
 80019c8:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <HAL_GetTick+0x14>)
 80019ca:	681b      	ldr	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	2000068c 	.word	0x2000068c

080019dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <__NVIC_SetPriorityGrouping+0x40>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f8:	4013      	ands	r3, r2
 80019fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0a:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <__NVIC_SetPriorityGrouping+0x40>)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	60d3      	str	r3, [r2, #12]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00
 8001a20:	05fa0000 	.word	0x05fa0000

08001a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <__NVIC_GetPriorityGrouping+0x18>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	f003 0307 	and.w	r3, r3, #7
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	db0b      	blt.n	8001a6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	f003 021f 	and.w	r2, r3, #31
 8001a58:	4907      	ldr	r1, [pc, #28]	; (8001a78 <__NVIC_EnableIRQ+0x38>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	095b      	lsrs	r3, r3, #5
 8001a60:	2001      	movs	r0, #1
 8001a62:	fa00 f202 	lsl.w	r2, r0, r2
 8001a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000e100 	.word	0xe000e100

08001a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	db0a      	blt.n	8001aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	490c      	ldr	r1, [pc, #48]	; (8001ac8 <__NVIC_SetPriority+0x4c>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	0112      	lsls	r2, r2, #4
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa4:	e00a      	b.n	8001abc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4908      	ldr	r1, [pc, #32]	; (8001acc <__NVIC_SetPriority+0x50>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	3b04      	subs	r3, #4
 8001ab4:	0112      	lsls	r2, r2, #4
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	761a      	strb	r2, [r3, #24]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000e100 	.word	0xe000e100
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f1c3 0307 	rsb	r3, r3, #7
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	bf28      	it	cs
 8001aee:	2304      	movcs	r3, #4
 8001af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3304      	adds	r3, #4
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d902      	bls.n	8001b00 <NVIC_EncodePriority+0x30>
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3b03      	subs	r3, #3
 8001afe:	e000      	b.n	8001b02 <NVIC_EncodePriority+0x32>
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	f04f 32ff 	mov.w	r2, #4294967295
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	401a      	ands	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43d9      	mvns	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	4313      	orrs	r3, r2
         );
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3724      	adds	r7, #36	; 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b07      	cmp	r3, #7
 8001b44:	d00f      	beq.n	8001b66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b06      	cmp	r3, #6
 8001b4a:	d00c      	beq.n	8001b66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b05      	cmp	r3, #5
 8001b50:	d009      	beq.n	8001b66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d006      	beq.n	8001b66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d003      	beq.n	8001b66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001b5e:	2191      	movs	r1, #145	; 0x91
 8001b60:	4804      	ldr	r0, [pc, #16]	; (8001b74 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001b62:	f7ff fbd1 	bl	8001308 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ff38 	bl	80019dc <__NVIC_SetPriorityGrouping>
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	0800d72c 	.word	0x0800d72c

08001b78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d903      	bls.n	8001b98 <HAL_NVIC_SetPriority+0x20>
 8001b90:	21a9      	movs	r1, #169	; 0xa9
 8001b92:	480e      	ldr	r0, [pc, #56]	; (8001bcc <HAL_NVIC_SetPriority+0x54>)
 8001b94:	f7ff fbb8 	bl	8001308 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b0f      	cmp	r3, #15
 8001b9c:	d903      	bls.n	8001ba6 <HAL_NVIC_SetPriority+0x2e>
 8001b9e:	21aa      	movs	r1, #170	; 0xaa
 8001ba0:	480a      	ldr	r0, [pc, #40]	; (8001bcc <HAL_NVIC_SetPriority+0x54>)
 8001ba2:	f7ff fbb1 	bl	8001308 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba6:	f7ff ff3d 	bl	8001a24 <__NVIC_GetPriorityGrouping>
 8001baa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	68b9      	ldr	r1, [r7, #8]
 8001bb0:	6978      	ldr	r0, [r7, #20]
 8001bb2:	f7ff ff8d 	bl	8001ad0 <NVIC_EncodePriority>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff ff5c 	bl	8001a7c <__NVIC_SetPriority>
}
 8001bc4:	bf00      	nop
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	0800d72c 	.word	0x0800d72c

08001bd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	da03      	bge.n	8001bea <HAL_NVIC_EnableIRQ+0x1a>
 8001be2:	21bd      	movs	r1, #189	; 0xbd
 8001be4:	4805      	ldr	r0, [pc, #20]	; (8001bfc <HAL_NVIC_EnableIRQ+0x2c>)
 8001be6:	f7ff fb8f 	bl	8001308 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff ff26 	bl	8001a40 <__NVIC_EnableIRQ>
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	0800d72c 	.word	0x0800d72c

08001c00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c0e:	f7ff fed9 	bl	80019c4 <HAL_GetTick>
 8001c12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d008      	beq.n	8001c32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2280      	movs	r2, #128	; 0x80
 8001c24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e052      	b.n	8001cd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0216 	bic.w	r2, r2, #22
 8001c40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	695a      	ldr	r2, [r3, #20]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d103      	bne.n	8001c62 <HAL_DMA_Abort+0x62>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0208 	bic.w	r2, r2, #8
 8001c70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0201 	bic.w	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c82:	e013      	b.n	8001cac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c84:	f7ff fe9e 	bl	80019c4 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d90c      	bls.n	8001cac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2220      	movs	r2, #32
 8001c96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e015      	b.n	8001cd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1e4      	bne.n	8001c84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbe:	223f      	movs	r2, #63	; 0x3f
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d004      	beq.n	8001cfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2280      	movs	r2, #128	; 0x80
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00c      	b.n	8001d18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2205      	movs	r2, #5
 8001d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0201 	bic.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3a:	2b40      	cmp	r3, #64	; 0x40
 8001d3c:	d112      	bne.n	8001d64 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4c:	2b40      	cmp	r3, #64	; 0x40
 8001d4e:	d109      	bne.n	8001d64 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b50      	ldr	r3, [pc, #320]	; (8001e9c <HAL_ETH_IRQHandler+0x178>)
 8001d5c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f8ac 	bl	8001ebc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d113      	bne.n	8001d9e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d10a      	bne.n	8001d9e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d90:	461a      	mov	r2, r3
 8001d92:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001d96:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f885 	bl	8001ea8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001db0:	d14c      	bne.n	8001e4c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dc4:	d142      	bne.n	8001e4c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dcc:	f043 0208 	orr.w	r2, r3, #8
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001de8:	d11a      	bne.n	8001e20 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df2:	695a      	ldr	r2, [r3, #20]
 8001df4:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <HAL_ETH_IRQHandler+0x17c>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001e10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e14:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	22e0      	movs	r2, #224	; 0xe0
 8001e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001e1e:	e012      	b.n	8001e46 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e28:	695a      	ldr	r2, [r3, #20]
 8001e2a:	f248 6380 	movw	r3, #34432	; 0x8680
 8001e2e:	4013      	ands	r3, r2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f248 6380 	movw	r3, #34432	; 0x8680
 8001e44:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f842 	bl	8001ed0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d10e      	bne.n	8001e78 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f83a 	bl	8001ee4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_ETH_IRQHandler+0x180>)
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d006      	beq.n	8001e92 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <HAL_ETH_IRQHandler+0x180>)
 8001e86:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e8a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f833 	bl	8001ef8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	00010040 	.word	0x00010040
 8001ea0:	007e2000 	.word	0x007e2000
 8001ea4:	40013c00 	.word	0x40013c00

08001ea8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a3a      	ldr	r2, [pc, #232]	; (8002014 <HAL_GPIO_Init+0x108>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d02b      	beq.n	8001f86 <HAL_GPIO_Init+0x7a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a39      	ldr	r2, [pc, #228]	; (8002018 <HAL_GPIO_Init+0x10c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d027      	beq.n	8001f86 <HAL_GPIO_Init+0x7a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a38      	ldr	r2, [pc, #224]	; (800201c <HAL_GPIO_Init+0x110>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d023      	beq.n	8001f86 <HAL_GPIO_Init+0x7a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a37      	ldr	r2, [pc, #220]	; (8002020 <HAL_GPIO_Init+0x114>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d01f      	beq.n	8001f86 <HAL_GPIO_Init+0x7a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a36      	ldr	r2, [pc, #216]	; (8002024 <HAL_GPIO_Init+0x118>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d01b      	beq.n	8001f86 <HAL_GPIO_Init+0x7a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a35      	ldr	r2, [pc, #212]	; (8002028 <HAL_GPIO_Init+0x11c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d017      	beq.n	8001f86 <HAL_GPIO_Init+0x7a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a34      	ldr	r2, [pc, #208]	; (800202c <HAL_GPIO_Init+0x120>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d013      	beq.n	8001f86 <HAL_GPIO_Init+0x7a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a33      	ldr	r2, [pc, #204]	; (8002030 <HAL_GPIO_Init+0x124>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00f      	beq.n	8001f86 <HAL_GPIO_Init+0x7a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a32      	ldr	r2, [pc, #200]	; (8002034 <HAL_GPIO_Init+0x128>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00b      	beq.n	8001f86 <HAL_GPIO_Init+0x7a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a31      	ldr	r2, [pc, #196]	; (8002038 <HAL_GPIO_Init+0x12c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d007      	beq.n	8001f86 <HAL_GPIO_Init+0x7a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a30      	ldr	r2, [pc, #192]	; (800203c <HAL_GPIO_Init+0x130>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x7a>
 8001f7e:	21aa      	movs	r1, #170	; 0xaa
 8001f80:	482f      	ldr	r0, [pc, #188]	; (8002040 <HAL_GPIO_Init+0x134>)
 8001f82:	f7ff f9c1 	bl	8001308 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d103      	bne.n	8001f98 <HAL_GPIO_Init+0x8c>
 8001f90:	21ab      	movs	r1, #171	; 0xab
 8001f92:	482b      	ldr	r0, [pc, #172]	; (8002040 <HAL_GPIO_Init+0x134>)
 8001f94:	f7ff f9b8 	bl	8001308 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d035      	beq.n	800200c <HAL_GPIO_Init+0x100>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d031      	beq.n	800200c <HAL_GPIO_Init+0x100>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b11      	cmp	r3, #17
 8001fae:	d02d      	beq.n	800200c <HAL_GPIO_Init+0x100>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d029      	beq.n	800200c <HAL_GPIO_Init+0x100>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b12      	cmp	r3, #18
 8001fbe:	d025      	beq.n	800200c <HAL_GPIO_Init+0x100>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001fc8:	d020      	beq.n	800200c <HAL_GPIO_Init+0x100>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001fd2:	d01b      	beq.n	800200c <HAL_GPIO_Init+0x100>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001fdc:	d016      	beq.n	800200c <HAL_GPIO_Init+0x100>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001fe6:	d011      	beq.n	800200c <HAL_GPIO_Init+0x100>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001ff0:	d00c      	beq.n	800200c <HAL_GPIO_Init+0x100>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001ffa:	d007      	beq.n	800200c <HAL_GPIO_Init+0x100>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d003      	beq.n	800200c <HAL_GPIO_Init+0x100>
 8002004:	21ac      	movs	r1, #172	; 0xac
 8002006:	480e      	ldr	r0, [pc, #56]	; (8002040 <HAL_GPIO_Init+0x134>)
 8002008:	f7ff f97e 	bl	8001308 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800200c:	2300      	movs	r3, #0
 800200e:	61fb      	str	r3, [r7, #28]
 8002010:	e2c7      	b.n	80025a2 <HAL_GPIO_Init+0x696>
 8002012:	bf00      	nop
 8002014:	40020000 	.word	0x40020000
 8002018:	40020400 	.word	0x40020400
 800201c:	40020800 	.word	0x40020800
 8002020:	40020c00 	.word	0x40020c00
 8002024:	40021000 	.word	0x40021000
 8002028:	40021400 	.word	0x40021400
 800202c:	40021800 	.word	0x40021800
 8002030:	40021c00 	.word	0x40021c00
 8002034:	40022000 	.word	0x40022000
 8002038:	40022400 	.word	0x40022400
 800203c:	40022800 	.word	0x40022800
 8002040:	0800d78c 	.word	0x0800d78c
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002044:	2201      	movs	r2, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	429a      	cmp	r2, r3
 800205e:	f040 829d 	bne.w	800259c <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b01      	cmp	r3, #1
 800206c:	d005      	beq.n	800207a <HAL_GPIO_Init+0x16e>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d144      	bne.n	8002104 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00f      	beq.n	80020a2 <HAL_GPIO_Init+0x196>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d00b      	beq.n	80020a2 <HAL_GPIO_Init+0x196>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d007      	beq.n	80020a2 <HAL_GPIO_Init+0x196>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2b03      	cmp	r3, #3
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x196>
 800209a:	21bd      	movs	r1, #189	; 0xbd
 800209c:	4831      	ldr	r0, [pc, #196]	; (8002164 <HAL_GPIO_Init+0x258>)
 800209e:	f7ff f933 	bl	8001308 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	2203      	movs	r2, #3
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d8:	2201      	movs	r2, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 0201 	and.w	r2, r3, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b03      	cmp	r3, #3
 800210e:	d02b      	beq.n	8002168 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00b      	beq.n	8002130 <HAL_GPIO_Init+0x224>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d007      	beq.n	8002130 <HAL_GPIO_Init+0x224>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x224>
 8002128:	21ce      	movs	r1, #206	; 0xce
 800212a:	480e      	ldr	r0, [pc, #56]	; (8002164 <HAL_GPIO_Init+0x258>)
 800212c:	f7ff f8ec 	bl	8001308 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	60da      	str	r2, [r3, #12]
 8002160:	e002      	b.n	8002168 <HAL_GPIO_Init+0x25c>
 8002162:	bf00      	nop
 8002164:	0800d78c 	.word	0x0800d78c
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b02      	cmp	r3, #2
 8002172:	f040 8134 	bne.w	80023de <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 810b 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	2b01      	cmp	r3, #1
 8002186:	f000 8106 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 8101 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80fc 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 80f7 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	f000 80f2 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	f000 80ed 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	f000 80e8 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	f000 80e3 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	f000 80de 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b03      	cmp	r3, #3
 80021e0:	f000 80d9 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	f000 80d4 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	f000 80cf 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	f000 80ca 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b03      	cmp	r3, #3
 8002208:	f000 80c5 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	2b04      	cmp	r3, #4
 8002212:	f000 80c0 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b04      	cmp	r3, #4
 800221c:	f000 80bb 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	2b04      	cmp	r3, #4
 8002226:	f000 80b6 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	2b04      	cmp	r3, #4
 8002230:	f000 80b1 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	2b04      	cmp	r3, #4
 800223a:	f000 80ac 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b05      	cmp	r3, #5
 8002244:	f000 80a7 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	2b05      	cmp	r3, #5
 800224e:	f000 80a2 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b05      	cmp	r3, #5
 8002258:	f000 809d 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	2b05      	cmp	r3, #5
 8002262:	f000 8098 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b05      	cmp	r3, #5
 800226c:	f000 8093 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b05      	cmp	r3, #5
 8002276:	f000 808e 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	2b06      	cmp	r3, #6
 8002280:	f000 8089 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b06      	cmp	r3, #6
 800228a:	f000 8084 	beq.w	8002396 <HAL_GPIO_Init+0x48a>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b07      	cmp	r3, #7
 8002294:	d07f      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b07      	cmp	r3, #7
 800229c:	d07b      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b07      	cmp	r3, #7
 80022a4:	d077      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b07      	cmp	r3, #7
 80022ac:	d073      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2b07      	cmp	r3, #7
 80022b4:	d06f      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2b07      	cmp	r3, #7
 80022bc:	d06b      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b07      	cmp	r3, #7
 80022c4:	d067      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d063      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d05f      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d05b      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d057      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d053      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d04f      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d04b      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b09      	cmp	r3, #9
 8002304:	d047      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b09      	cmp	r3, #9
 800230c:	d043      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b09      	cmp	r3, #9
 8002314:	d03f      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b09      	cmp	r3, #9
 800231c:	d03b      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b09      	cmp	r3, #9
 8002324:	d037      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b09      	cmp	r3, #9
 800232c:	d033      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	2b09      	cmp	r3, #9
 8002334:	d02f      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b0a      	cmp	r3, #10
 800233c:	d02b      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b0a      	cmp	r3, #10
 8002344:	d027      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	2b0a      	cmp	r3, #10
 800234c:	d023      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	2b0a      	cmp	r3, #10
 8002354:	d01f      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	2b0b      	cmp	r3, #11
 800235c:	d01b      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b0c      	cmp	r3, #12
 8002364:	d017      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b0c      	cmp	r3, #12
 800236c:	d013      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b0c      	cmp	r3, #12
 8002374:	d00f      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	2b0f      	cmp	r3, #15
 800237c:	d00b      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	2b0d      	cmp	r3, #13
 8002384:	d007      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	2b0e      	cmp	r3, #14
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x48a>
 800238e:	21db      	movs	r1, #219	; 0xdb
 8002390:	4888      	ldr	r0, [pc, #544]	; (80025b4 <HAL_GPIO_Init+0x6a8>)
 8002392:	f7fe ffb9 	bl	8001308 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	08da      	lsrs	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3208      	adds	r2, #8
 800239e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	220f      	movs	r2, #15
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	08da      	lsrs	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3208      	adds	r2, #8
 80023d8:	69b9      	ldr	r1, [r7, #24]
 80023da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	2203      	movs	r2, #3
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0203 	and.w	r2, r3, #3
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 80be 	beq.w	800259c <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002420:	4b65      	ldr	r3, [pc, #404]	; (80025b8 <HAL_GPIO_Init+0x6ac>)
 8002422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002424:	4a64      	ldr	r2, [pc, #400]	; (80025b8 <HAL_GPIO_Init+0x6ac>)
 8002426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800242a:	6453      	str	r3, [r2, #68]	; 0x44
 800242c:	4b62      	ldr	r3, [pc, #392]	; (80025b8 <HAL_GPIO_Init+0x6ac>)
 800242e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002438:	4a60      	ldr	r2, [pc, #384]	; (80025bc <HAL_GPIO_Init+0x6b0>)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	3302      	adds	r3, #2
 8002440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	220f      	movs	r2, #15
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a58      	ldr	r2, [pc, #352]	; (80025c0 <HAL_GPIO_Init+0x6b4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d037      	beq.n	80024d4 <HAL_GPIO_Init+0x5c8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a57      	ldr	r2, [pc, #348]	; (80025c4 <HAL_GPIO_Init+0x6b8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d031      	beq.n	80024d0 <HAL_GPIO_Init+0x5c4>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a56      	ldr	r2, [pc, #344]	; (80025c8 <HAL_GPIO_Init+0x6bc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d02b      	beq.n	80024cc <HAL_GPIO_Init+0x5c0>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a55      	ldr	r2, [pc, #340]	; (80025cc <HAL_GPIO_Init+0x6c0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d025      	beq.n	80024c8 <HAL_GPIO_Init+0x5bc>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a54      	ldr	r2, [pc, #336]	; (80025d0 <HAL_GPIO_Init+0x6c4>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d01f      	beq.n	80024c4 <HAL_GPIO_Init+0x5b8>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a53      	ldr	r2, [pc, #332]	; (80025d4 <HAL_GPIO_Init+0x6c8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d019      	beq.n	80024c0 <HAL_GPIO_Init+0x5b4>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a52      	ldr	r2, [pc, #328]	; (80025d8 <HAL_GPIO_Init+0x6cc>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d013      	beq.n	80024bc <HAL_GPIO_Init+0x5b0>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a51      	ldr	r2, [pc, #324]	; (80025dc <HAL_GPIO_Init+0x6d0>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d00d      	beq.n	80024b8 <HAL_GPIO_Init+0x5ac>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a50      	ldr	r2, [pc, #320]	; (80025e0 <HAL_GPIO_Init+0x6d4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d007      	beq.n	80024b4 <HAL_GPIO_Init+0x5a8>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a4f      	ldr	r2, [pc, #316]	; (80025e4 <HAL_GPIO_Init+0x6d8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d101      	bne.n	80024b0 <HAL_GPIO_Init+0x5a4>
 80024ac:	2309      	movs	r3, #9
 80024ae:	e012      	b.n	80024d6 <HAL_GPIO_Init+0x5ca>
 80024b0:	230a      	movs	r3, #10
 80024b2:	e010      	b.n	80024d6 <HAL_GPIO_Init+0x5ca>
 80024b4:	2308      	movs	r3, #8
 80024b6:	e00e      	b.n	80024d6 <HAL_GPIO_Init+0x5ca>
 80024b8:	2307      	movs	r3, #7
 80024ba:	e00c      	b.n	80024d6 <HAL_GPIO_Init+0x5ca>
 80024bc:	2306      	movs	r3, #6
 80024be:	e00a      	b.n	80024d6 <HAL_GPIO_Init+0x5ca>
 80024c0:	2305      	movs	r3, #5
 80024c2:	e008      	b.n	80024d6 <HAL_GPIO_Init+0x5ca>
 80024c4:	2304      	movs	r3, #4
 80024c6:	e006      	b.n	80024d6 <HAL_GPIO_Init+0x5ca>
 80024c8:	2303      	movs	r3, #3
 80024ca:	e004      	b.n	80024d6 <HAL_GPIO_Init+0x5ca>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e002      	b.n	80024d6 <HAL_GPIO_Init+0x5ca>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <HAL_GPIO_Init+0x5ca>
 80024d4:	2300      	movs	r3, #0
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	f002 0203 	and.w	r2, r2, #3
 80024dc:	0092      	lsls	r2, r2, #2
 80024de:	4093      	lsls	r3, r2
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024e6:	4935      	ldr	r1, [pc, #212]	; (80025bc <HAL_GPIO_Init+0x6b0>)
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	089b      	lsrs	r3, r3, #2
 80024ec:	3302      	adds	r3, #2
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024f4:	4b3c      	ldr	r3, [pc, #240]	; (80025e8 <HAL_GPIO_Init+0x6dc>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002518:	4a33      	ldr	r2, [pc, #204]	; (80025e8 <HAL_GPIO_Init+0x6dc>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800251e:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <HAL_GPIO_Init+0x6dc>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002542:	4a29      	ldr	r2, [pc, #164]	; (80025e8 <HAL_GPIO_Init+0x6dc>)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002548:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <HAL_GPIO_Init+0x6dc>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800256c:	4a1e      	ldr	r2, [pc, #120]	; (80025e8 <HAL_GPIO_Init+0x6dc>)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002572:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_GPIO_Init+0x6dc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002596:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <HAL_GPIO_Init+0x6dc>)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	3301      	adds	r3, #1
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	2b0f      	cmp	r3, #15
 80025a6:	f67f ad4d 	bls.w	8002044 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 80025aa:	bf00      	nop
 80025ac:	bf00      	nop
 80025ae:	3720      	adds	r7, #32
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	0800d78c 	.word	0x0800d78c
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40013800 	.word	0x40013800
 80025c0:	40020000 	.word	0x40020000
 80025c4:	40020400 	.word	0x40020400
 80025c8:	40020800 	.word	0x40020800
 80025cc:	40020c00 	.word	0x40020c00
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40021400 	.word	0x40021400
 80025d8:	40021800 	.word	0x40021800
 80025dc:	40021c00 	.word	0x40021c00
 80025e0:	40022000 	.word	0x40022000
 80025e4:	40022400 	.word	0x40022400
 80025e8:	40013c00 	.word	0x40013c00

080025ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
 80025f8:	4613      	mov	r3, r2
 80025fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80025fc:	887b      	ldrh	r3, [r7, #2]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d104      	bne.n	800260c <HAL_GPIO_WritePin+0x20>
 8002602:	f240 1197 	movw	r1, #407	; 0x197
 8002606:	480e      	ldr	r0, [pc, #56]	; (8002640 <HAL_GPIO_WritePin+0x54>)
 8002608:	f7fe fe7e 	bl	8001308 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800260c:	787b      	ldrb	r3, [r7, #1]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <HAL_GPIO_WritePin+0x36>
 8002612:	787b      	ldrb	r3, [r7, #1]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d004      	beq.n	8002622 <HAL_GPIO_WritePin+0x36>
 8002618:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800261c:	4808      	ldr	r0, [pc, #32]	; (8002640 <HAL_GPIO_WritePin+0x54>)
 800261e:	f7fe fe73 	bl	8001308 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002622:	787b      	ldrb	r3, [r7, #1]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002628:	887a      	ldrh	r2, [r7, #2]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800262e:	e003      	b.n	8002638 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002630:	887b      	ldrh	r3, [r7, #2]
 8002632:	041a      	lsls	r2, r3, #16
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	619a      	str	r2, [r3, #24]
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	0800d78c 	.word	0x0800d78c

08002644 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002650:	887b      	ldrh	r3, [r7, #2]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d104      	bne.n	8002660 <HAL_GPIO_TogglePin+0x1c>
 8002656:	f240 11af 	movw	r1, #431	; 0x1af
 800265a:	480a      	ldr	r0, [pc, #40]	; (8002684 <HAL_GPIO_TogglePin+0x40>)
 800265c:	f7fe fe54 	bl	8001308 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002666:	887a      	ldrh	r2, [r7, #2]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4013      	ands	r3, r2
 800266c:	041a      	lsls	r2, r3, #16
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	43d9      	mvns	r1, r3
 8002672:	887b      	ldrh	r3, [r7, #2]
 8002674:	400b      	ands	r3, r1
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	619a      	str	r2, [r3, #24]
}
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	0800d78c 	.word	0x0800d78c

08002688 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d006      	beq.n	80026ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800269e:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe fd68 	bl	800117c <HAL_GPIO_EXTI_Callback>
  }
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40013c00 	.word	0x40013c00

080026b8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f005 f836 	bl	8007740 <USB_GetMode>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	f040 80f6 	bne.w	80028c8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f004 fff9 	bl	80076d8 <USB_ReadInterrupts>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80ec 	beq.w	80028c6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f004 fff0 	bl	80076d8 <USB_ReadInterrupts>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002702:	d104      	bne.n	800270e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800270c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f004 ffe0 	bl	80076d8 <USB_ReadInterrupts>
 8002718:	4603      	mov	r3, r0
 800271a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800271e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002722:	d104      	bne.n	800272e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800272c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f004 ffd0 	bl	80076d8 <USB_ReadInterrupts>
 8002738:	4603      	mov	r3, r0
 800273a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800273e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002742:	d104      	bne.n	800274e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800274c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f004 ffc0 	bl	80076d8 <USB_ReadInterrupts>
 8002758:	4603      	mov	r3, r0
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b02      	cmp	r3, #2
 8002760:	d103      	bne.n	800276a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2202      	movs	r2, #2
 8002768:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f004 ffb2 	bl	80076d8 <USB_ReadInterrupts>
 8002774:	4603      	mov	r3, r0
 8002776:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800277a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800277e:	d11c      	bne.n	80027ba <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002788:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10f      	bne.n	80027ba <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800279a:	2110      	movs	r1, #16
 800279c:	6938      	ldr	r0, [r7, #16]
 800279e:	f004 fedf 	bl	8007560 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80027a2:	6938      	ldr	r0, [r7, #16]
 80027a4:	f004 ff10 	bl	80075c8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2101      	movs	r1, #1
 80027ae:	4618      	mov	r0, r3
 80027b0:	f004 ffd4 	bl	800775c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff f84e 	bl	8001856 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f004 ff8a 	bl	80076d8 <USB_ReadInterrupts>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ce:	d102      	bne.n	80027d6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f001 f959 	bl	8003a88 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f004 ff7c 	bl	80076d8 <USB_ReadInterrupts>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d106      	bne.n	80027f8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff f817 	bl	800181e <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2208      	movs	r2, #8
 80027f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f004 ff6b 	bl	80076d8 <USB_ReadInterrupts>
 8002802:	4603      	mov	r3, r0
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b10      	cmp	r3, #16
 800280a:	d101      	bne.n	8002810 <HAL_HCD_IRQHandler+0x158>
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <HAL_HCD_IRQHandler+0x15a>
 8002810:	2300      	movs	r3, #0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d012      	beq.n	800283c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0210 	bic.w	r2, r2, #16
 8002824:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f001 f85c 	bl	80038e4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699a      	ldr	r2, [r3, #24]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0210 	orr.w	r2, r2, #16
 800283a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f004 ff49 	bl	80076d8 <USB_ReadInterrupts>
 8002846:	4603      	mov	r3, r0
 8002848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002850:	d13a      	bne.n	80028c8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f004 ffba 	bl	80077d0 <USB_HC_ReadInterrupt>
 800285c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	e025      	b.n	80028b0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	fa22 f303 	lsr.w	r3, r2, r3
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d018      	beq.n	80028aa <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800288a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800288e:	d106      	bne.n	800289e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	4619      	mov	r1, r3
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f836 	bl	8002908 <HCD_HC_IN_IRQHandler>
 800289c:	e005      	b.n	80028aa <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	4619      	mov	r1, r3
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fc51 	bl	800314c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	3301      	adds	r3, #1
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d3d4      	bcc.n	8002864 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c2:	615a      	str	r2, [r3, #20]
 80028c4:	e000      	b.n	80028c8 <HAL_HCD_IRQHandler+0x210>
      return;
 80028c6:	bf00      	nop
    }
  }
}
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_HCD_Stop+0x16>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e00d      	b.n	8002900 <HAL_HCD_Stop+0x32>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f005 f87a 	bl	80079ea <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f004 fee6 	bl	80076fe <USB_ReadChInterrupts>
 8002932:	4603      	mov	r3, r0
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b04      	cmp	r3, #4
 800293a:	d11a      	bne.n	8002972 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	461a      	mov	r2, r3
 800294a:	2304      	movs	r3, #4
 800294c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	3361      	adds	r3, #97	; 0x61
 800295c:	2207      	movs	r2, #7
 800295e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	4611      	mov	r1, r2
 800296a:	4618      	mov	r0, r3
 800296c:	f004 ff41 	bl	80077f2 <USB_HC_Halt>
 8002970:	e0a2      	b.n	8002ab8 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f004 febe 	bl	80076fe <USB_ReadChInterrupts>
 8002982:	4603      	mov	r3, r0
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298c:	d11b      	bne.n	80029c6 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299a:	461a      	mov	r2, r3
 800299c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	212c      	movs	r1, #44	; 0x2c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	3361      	adds	r3, #97	; 0x61
 80029b0:	2208      	movs	r2, #8
 80029b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	4611      	mov	r1, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 ff17 	bl	80077f2 <USB_HC_Halt>
 80029c4:	e078      	b.n	8002ab8 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	4611      	mov	r1, r2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f004 fe94 	bl	80076fe <USB_ReadChInterrupts>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d11a      	bne.n	8002a16 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ec:	461a      	mov	r2, r3
 80029ee:	2308      	movs	r3, #8
 80029f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	3361      	adds	r3, #97	; 0x61
 8002a00:	2206      	movs	r2, #6
 8002a02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f004 feef 	bl	80077f2 <USB_HC_Halt>
 8002a14:	e050      	b.n	8002ab8 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f004 fe6c 	bl	80076fe <USB_ReadChInterrupts>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a30:	d11b      	bne.n	8002a6a <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	015a      	lsls	r2, r3, #5
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a44:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	3361      	adds	r3, #97	; 0x61
 8002a54:	2209      	movs	r2, #9
 8002a56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f004 fec5 	bl	80077f2 <USB_HC_Halt>
 8002a68:	e026      	b.n	8002ab8 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f004 fe42 	bl	80076fe <USB_ReadChInterrupts>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a80:	2b80      	cmp	r3, #128	; 0x80
 8002a82:	d119      	bne.n	8002ab8 <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a90:	461a      	mov	r2, r3
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	212c      	movs	r1, #44	; 0x2c
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3361      	adds	r3, #97	; 0x61
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f004 fe9d 	bl	80077f2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f004 fe1b 	bl	80076fe <USB_ReadChInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad2:	d112      	bne.n	8002afa <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	4611      	mov	r1, r2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f004 fe87 	bl	80077f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af0:	461a      	mov	r2, r3
 8002af2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002af6:	6093      	str	r3, [r2, #8]
 8002af8:	e325      	b.n	8003146 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	4611      	mov	r1, r2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f004 fdfa 	bl	80076fe <USB_ReadChInterrupts>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	f040 80e8 	bne.w	8002ce6 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b22:	461a      	mov	r2, r3
 8002b24:	2320      	movs	r3, #32
 8002b26:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d019      	beq.n	8002b64 <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3348      	adds	r3, #72	; 0x48
 8002b3e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	0159      	lsls	r1, r3, #5
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	440b      	add	r3, r1
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002b52:	1ad2      	subs	r2, r2, r3
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	202c      	movs	r0, #44	; 0x2c
 8002b5a:	fb00 f303 	mul.w	r3, r0, r3
 8002b5e:	440b      	add	r3, r1
 8002b60:	3350      	adds	r3, #80	; 0x50
 8002b62:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	212c      	movs	r1, #44	; 0x2c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3361      	adds	r3, #97	; 0x61
 8002b72:	2201      	movs	r2, #1
 8002b74:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	335c      	adds	r3, #92	; 0x5c
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b94:	461a      	mov	r2, r3
 8002b96:	2301      	movs	r3, #1
 8002b98:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	212c      	movs	r1, #44	; 0x2c
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	333f      	adds	r3, #63	; 0x3f
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	333f      	adds	r3, #63	; 0x3f
 8002bbc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d111      	bne.n	8002be6 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	4611      	mov	r1, r2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f004 fe10 	bl	80077f2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bde:	461a      	mov	r2, r3
 8002be0:	2310      	movs	r3, #16
 8002be2:	6093      	str	r3, [r2, #8]
 8002be4:	e03a      	b.n	8002c5c <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	333f      	adds	r3, #63	; 0x3f
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d009      	beq.n	8002c0e <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	333f      	adds	r3, #63	; 0x3f
 8002c08:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d126      	bne.n	8002c5c <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	0151      	lsls	r1, r2, #5
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	440a      	add	r2, r1
 8002c24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c2c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3360      	adds	r3, #96	; 0x60
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	b2d9      	uxtb	r1, r3
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	202c      	movs	r0, #44	; 0x2c
 8002c4a:	fb00 f303 	mul.w	r3, r0, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	3360      	adds	r3, #96	; 0x60
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fe fe0b 	bl	8001872 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d12b      	bne.n	8002cbc <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	3348      	adds	r3, #72	; 0x48
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	202c      	movs	r0, #44	; 0x2c
 8002c7a:	fb00 f202 	mul.w	r2, r0, r2
 8002c7e:	440a      	add	r2, r1
 8002c80:	3240      	adds	r2, #64	; 0x40
 8002c82:	8812      	ldrh	r2, [r2, #0]
 8002c84:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 825a 	beq.w	8003146 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	212c      	movs	r1, #44	; 0x2c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3354      	adds	r3, #84	; 0x54
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	f083 0301 	eor.w	r3, r3, #1
 8002ca6:	b2d8      	uxtb	r0, r3
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3354      	adds	r3, #84	; 0x54
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	701a      	strb	r2, [r3, #0]
 8002cba:	e244      	b.n	8003146 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	212c      	movs	r1, #44	; 0x2c
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3354      	adds	r3, #84	; 0x54
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	f083 0301 	eor.w	r3, r3, #1
 8002cd0:	b2d8      	uxtb	r0, r3
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	212c      	movs	r1, #44	; 0x2c
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	3354      	adds	r3, #84	; 0x54
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	e22f      	b.n	8003146 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f004 fd04 	bl	80076fe <USB_ReadChInterrupts>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	d109      	bne.n	8002d14 <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2320      	movs	r3, #32
 8002d10:	6093      	str	r3, [r2, #8]
 8002d12:	e218      	b.n	8003146 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f004 fced 	bl	80076fe <USB_ReadChInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	f040 816b 	bne.w	8003006 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	2302      	movs	r3, #2
 8002d40:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3361      	adds	r3, #97	; 0x61
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d112      	bne.n	8002d7c <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	212c      	movs	r1, #44	; 0x2c
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	3361      	adds	r3, #97	; 0x61
 8002d64:	2202      	movs	r2, #2
 8002d66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	212c      	movs	r1, #44	; 0x2c
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	3360      	adds	r3, #96	; 0x60
 8002d76:	2201      	movs	r2, #1
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	e135      	b.n	8002fe8 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	3361      	adds	r3, #97	; 0x61
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b06      	cmp	r3, #6
 8002d8e:	d112      	bne.n	8002db6 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	212c      	movs	r1, #44	; 0x2c
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3361      	adds	r3, #97	; 0x61
 8002d9e:	2202      	movs	r2, #2
 8002da0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	212c      	movs	r1, #44	; 0x2c
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	3360      	adds	r3, #96	; 0x60
 8002db0:	2205      	movs	r2, #5
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e118      	b.n	8002fe8 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3361      	adds	r3, #97	; 0x61
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b07      	cmp	r3, #7
 8002dc8:	d009      	beq.n	8002dde <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3361      	adds	r3, #97	; 0x61
 8002dd8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dda:	2b09      	cmp	r3, #9
 8002ddc:	d159      	bne.n	8002e92 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	3361      	adds	r3, #97	; 0x61
 8002dec:	2202      	movs	r2, #2
 8002dee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	335c      	adds	r3, #92	; 0x5c
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	202c      	movs	r0, #44	; 0x2c
 8002e08:	fb00 f303 	mul.w	r3, r0, r3
 8002e0c:	440b      	add	r3, r1
 8002e0e:	335c      	adds	r3, #92	; 0x5c
 8002e10:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	212c      	movs	r1, #44	; 0x2c
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	335c      	adds	r3, #92	; 0x5c
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d912      	bls.n	8002e4c <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	212c      	movs	r1, #44	; 0x2c
 8002e2c:	fb01 f303 	mul.w	r3, r1, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	335c      	adds	r3, #92	; 0x5c
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	212c      	movs	r1, #44	; 0x2c
 8002e3e:	fb01 f303 	mul.w	r3, r1, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	3360      	adds	r3, #96	; 0x60
 8002e46:	2204      	movs	r2, #4
 8002e48:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e4a:	e0cd      	b.n	8002fe8 <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	212c      	movs	r1, #44	; 0x2c
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	3360      	adds	r3, #96	; 0x60
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e74:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e7c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e90:	e0aa      	b.n	8002fe8 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3361      	adds	r3, #97	; 0x61
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b05      	cmp	r3, #5
 8002ea4:	d109      	bne.n	8002eba <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	212c      	movs	r1, #44	; 0x2c
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3361      	adds	r3, #97	; 0x61
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	701a      	strb	r2, [r3, #0]
 8002eb8:	e096      	b.n	8002fe8 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	212c      	movs	r1, #44	; 0x2c
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3361      	adds	r3, #97	; 0x61
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d109      	bne.n	8002ee2 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	212c      	movs	r1, #44	; 0x2c
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	3361      	adds	r3, #97	; 0x61
 8002edc:	2202      	movs	r2, #2
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e082      	b.n	8002fe8 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	212c      	movs	r1, #44	; 0x2c
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	3361      	adds	r3, #97	; 0x61
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d13f      	bne.n	8002f76 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	212c      	movs	r1, #44	; 0x2c
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	4413      	add	r3, r2
 8002f02:	3361      	adds	r3, #97	; 0x61
 8002f04:	2202      	movs	r2, #2
 8002f06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	212c      	movs	r1, #44	; 0x2c
 8002f0e:	fb01 f303 	mul.w	r3, r1, r3
 8002f12:	4413      	add	r3, r2
 8002f14:	3360      	adds	r3, #96	; 0x60
 8002f16:	2202      	movs	r2, #2
 8002f18:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	212c      	movs	r1, #44	; 0x2c
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	333f      	adds	r3, #63	; 0x3f
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	333f      	adds	r3, #63	; 0x3f
 8002f3c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d152      	bne.n	8002fe8 <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f58:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f60:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	e038      	b.n	8002fe8 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	212c      	movs	r1, #44	; 0x2c
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	3361      	adds	r3, #97	; 0x61
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d123      	bne.n	8002fd2 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	212c      	movs	r1, #44	; 0x2c
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	4413      	add	r3, r2
 8002f96:	3361      	adds	r3, #97	; 0x61
 8002f98:	2202      	movs	r2, #2
 8002f9a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	212c      	movs	r1, #44	; 0x2c
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	335c      	adds	r3, #92	; 0x5c
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	202c      	movs	r0, #44	; 0x2c
 8002fb4:	fb00 f303 	mul.w	r3, r0, r3
 8002fb8:	440b      	add	r3, r1
 8002fba:	335c      	adds	r3, #92	; 0x5c
 8002fbc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	212c      	movs	r1, #44	; 0x2c
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	3360      	adds	r3, #96	; 0x60
 8002fcc:	2204      	movs	r2, #4
 8002fce:	701a      	strb	r2, [r3, #0]
 8002fd0:	e00a      	b.n	8002fe8 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	212c      	movs	r1, #44	; 0x2c
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	3361      	adds	r3, #97	; 0x61
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	f000 80ae 	beq.w	8003144 <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	b2d9      	uxtb	r1, r3
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	202c      	movs	r0, #44	; 0x2c
 8002ff2:	fb00 f303 	mul.w	r3, r0, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3360      	adds	r3, #96	; 0x60
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fe fc37 	bl	8001872 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003004:	e09f      	b.n	8003146 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f004 fb74 	bl	80076fe <USB_ReadChInterrupts>
 8003016:	4603      	mov	r3, r0
 8003018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d123      	bne.n	8003068 <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4413      	add	r3, r2
 8003028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302c:	461a      	mov	r2, r3
 800302e:	2340      	movs	r3, #64	; 0x40
 8003030:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	212c      	movs	r1, #44	; 0x2c
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	4413      	add	r3, r2
 800303e:	3361      	adds	r3, #97	; 0x61
 8003040:	2205      	movs	r2, #5
 8003042:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	212c      	movs	r1, #44	; 0x2c
 800304a:	fb01 f303 	mul.w	r3, r1, r3
 800304e:	4413      	add	r3, r2
 8003050:	335c      	adds	r3, #92	; 0x5c
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f004 fbc6 	bl	80077f2 <USB_HC_Halt>
 8003066:	e06e      	b.n	8003146 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	4611      	mov	r1, r2
 8003072:	4618      	mov	r0, r3
 8003074:	f004 fb43 	bl	80076fe <USB_ReadChInterrupts>
 8003078:	4603      	mov	r3, r0
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b10      	cmp	r3, #16
 8003080:	d161      	bne.n	8003146 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	212c      	movs	r1, #44	; 0x2c
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	4413      	add	r3, r2
 800308e:	333f      	adds	r3, #63	; 0x3f
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b03      	cmp	r3, #3
 8003094:	d11a      	bne.n	80030cc <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	212c      	movs	r1, #44	; 0x2c
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	4413      	add	r3, r2
 80030a2:	335c      	adds	r3, #92	; 0x5c
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	212c      	movs	r1, #44	; 0x2c
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	3361      	adds	r3, #97	; 0x61
 80030b6:	2204      	movs	r2, #4
 80030b8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f004 fb94 	bl	80077f2 <USB_HC_Halt>
 80030ca:	e031      	b.n	8003130 <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	333f      	adds	r3, #63	; 0x3f
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d009      	beq.n	80030f4 <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	212c      	movs	r1, #44	; 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	333f      	adds	r3, #63	; 0x3f
 80030ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d11d      	bne.n	8003130 <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	335c      	adds	r3, #92	; 0x5c
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d110      	bne.n	8003130 <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	212c      	movs	r1, #44	; 0x2c
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	4413      	add	r3, r2
 800311a:	3361      	adds	r3, #97	; 0x61
 800311c:	2204      	movs	r2, #4
 800311e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f004 fb61 	bl	80077f2 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4413      	add	r3, r2
 8003138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313c:	461a      	mov	r2, r3
 800313e:	2310      	movs	r3, #16
 8003140:	6093      	str	r3, [r2, #8]
 8003142:	e000      	b.n	8003146 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 8003144:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f004 fac4 	bl	80076fe <USB_ReadChInterrupts>
 8003176:	4603      	mov	r3, r0
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b04      	cmp	r3, #4
 800317e:	d11a      	bne.n	80031b6 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	4413      	add	r3, r2
 8003188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318c:	461a      	mov	r2, r3
 800318e:	2304      	movs	r3, #4
 8003190:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	212c      	movs	r1, #44	; 0x2c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	3361      	adds	r3, #97	; 0x61
 80031a0:	2207      	movs	r2, #7
 80031a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f004 fb1f 	bl	80077f2 <USB_HC_Halt>
 80031b4:	e393      	b.n	80038de <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f004 fa9c 	bl	80076fe <USB_ReadChInterrupts>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d137      	bne.n	8003240 <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031dc:	461a      	mov	r2, r3
 80031de:	2320      	movs	r3, #32
 80031e0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	212c      	movs	r1, #44	; 0x2c
 80031e8:	fb01 f303 	mul.w	r3, r1, r3
 80031ec:	4413      	add	r3, r2
 80031ee:	333d      	adds	r3, #61	; 0x3d
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	f040 8373 	bne.w	80038de <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	212c      	movs	r1, #44	; 0x2c
 80031fe:	fb01 f303 	mul.w	r3, r1, r3
 8003202:	4413      	add	r3, r2
 8003204:	333d      	adds	r3, #61	; 0x3d
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	212c      	movs	r1, #44	; 0x2c
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	4413      	add	r3, r2
 8003216:	3360      	adds	r3, #96	; 0x60
 8003218:	2202      	movs	r2, #2
 800321a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	212c      	movs	r1, #44	; 0x2c
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	4413      	add	r3, r2
 8003228:	3361      	adds	r3, #97	; 0x61
 800322a:	2203      	movs	r2, #3
 800322c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	4611      	mov	r1, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f004 fada 	bl	80077f2 <USB_HC_Halt>
 800323e:	e34e      	b.n	80038de <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	4611      	mov	r1, r2
 800324a:	4618      	mov	r0, r3
 800324c:	f004 fa57 	bl	80076fe <USB_ReadChInterrupts>
 8003250:	4603      	mov	r3, r0
 8003252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800325a:	d112      	bne.n	8003282 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	4413      	add	r3, r2
 8003264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003268:	461a      	mov	r2, r3
 800326a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800326e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	4611      	mov	r1, r2
 800327a:	4618      	mov	r0, r3
 800327c:	f004 fab9 	bl	80077f2 <USB_HC_Halt>
 8003280:	e32d      	b.n	80038de <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f004 fa36 	bl	80076fe <USB_ReadChInterrupts>
 8003292:	4603      	mov	r3, r0
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b01      	cmp	r3, #1
 800329a:	d142      	bne.n	8003322 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	212c      	movs	r1, #44	; 0x2c
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	335c      	adds	r3, #92	; 0x5c
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	4611      	mov	r1, r2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f004 fa20 	bl	80076fe <USB_ReadChInterrupts>
 80032be:	4603      	mov	r3, r0
 80032c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c4:	2b40      	cmp	r3, #64	; 0x40
 80032c6:	d111      	bne.n	80032ec <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	212c      	movs	r1, #44	; 0x2c
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	4413      	add	r3, r2
 80032d4:	333d      	adds	r3, #61	; 0x3d
 80032d6:	2201      	movs	r2, #1
 80032d8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e6:	461a      	mov	r2, r3
 80032e8:	2340      	movs	r3, #64	; 0x40
 80032ea:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f8:	461a      	mov	r2, r3
 80032fa:	2301      	movs	r3, #1
 80032fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	212c      	movs	r1, #44	; 0x2c
 8003304:	fb01 f303 	mul.w	r3, r1, r3
 8003308:	4413      	add	r3, r2
 800330a:	3361      	adds	r3, #97	; 0x61
 800330c:	2201      	movs	r2, #1
 800330e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f004 fa69 	bl	80077f2 <USB_HC_Halt>
 8003320:	e2dd      	b.n	80038de <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	4611      	mov	r1, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f004 f9e6 	bl	80076fe <USB_ReadChInterrupts>
 8003332:	4603      	mov	r3, r0
 8003334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d12c      	bne.n	8003396 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	3361      	adds	r3, #97	; 0x61
 800334a:	2205      	movs	r2, #5
 800334c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	333d      	adds	r3, #61	; 0x3d
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	212c      	movs	r1, #44	; 0x2c
 8003366:	fb01 f303 	mul.w	r3, r1, r3
 800336a:	4413      	add	r3, r2
 800336c:	335c      	adds	r3, #92	; 0x5c
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f004 fa38 	bl	80077f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	4413      	add	r3, r2
 800338a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338e:	461a      	mov	r2, r3
 8003390:	2340      	movs	r3, #64	; 0x40
 8003392:	6093      	str	r3, [r2, #8]
 8003394:	e2a3      	b.n	80038de <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	4611      	mov	r1, r2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f004 f9ac 	bl	80076fe <USB_ReadChInterrupts>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d11a      	bne.n	80033e6 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033bc:	461a      	mov	r2, r3
 80033be:	2308      	movs	r3, #8
 80033c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	212c      	movs	r1, #44	; 0x2c
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	3361      	adds	r3, #97	; 0x61
 80033d0:	2206      	movs	r2, #6
 80033d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	4611      	mov	r1, r2
 80033de:	4618      	mov	r0, r3
 80033e0:	f004 fa07 	bl	80077f2 <USB_HC_Halt>
 80033e4:	e27b      	b.n	80038de <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f004 f984 	bl	80076fe <USB_ReadChInterrupts>
 80033f6:	4603      	mov	r3, r0
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b10      	cmp	r3, #16
 80033fe:	d140      	bne.n	8003482 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	212c      	movs	r1, #44	; 0x2c
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	4413      	add	r3, r2
 800340c:	335c      	adds	r3, #92	; 0x5c
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	212c      	movs	r1, #44	; 0x2c
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	4413      	add	r3, r2
 800341e:	3361      	adds	r3, #97	; 0x61
 8003420:	2204      	movs	r2, #4
 8003422:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	212c      	movs	r1, #44	; 0x2c
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	4413      	add	r3, r2
 8003430:	333d      	adds	r3, #61	; 0x3d
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d112      	bne.n	800345e <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	212c      	movs	r1, #44	; 0x2c
 800343e:	fb01 f303 	mul.w	r3, r1, r3
 8003442:	4413      	add	r3, r2
 8003444:	333c      	adds	r3, #60	; 0x3c
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d108      	bne.n	800345e <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	212c      	movs	r1, #44	; 0x2c
 8003452:	fb01 f303 	mul.w	r3, r1, r3
 8003456:	4413      	add	r3, r2
 8003458:	333d      	adds	r3, #61	; 0x3d
 800345a:	2201      	movs	r2, #1
 800345c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	4611      	mov	r1, r2
 8003468:	4618      	mov	r0, r3
 800346a:	f004 f9c2 	bl	80077f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	015a      	lsls	r2, r3, #5
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	4413      	add	r3, r2
 8003476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347a:	461a      	mov	r2, r3
 800347c:	2310      	movs	r3, #16
 800347e:	6093      	str	r3, [r2, #8]
 8003480:	e22d      	b.n	80038de <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f004 f936 	bl	80076fe <USB_ReadChInterrupts>
 8003492:	4603      	mov	r3, r0
 8003494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003498:	2b80      	cmp	r3, #128	; 0x80
 800349a:	d164      	bne.n	8003566 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d111      	bne.n	80034c8 <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	212c      	movs	r1, #44	; 0x2c
 80034aa:	fb01 f303 	mul.w	r3, r1, r3
 80034ae:	4413      	add	r3, r2
 80034b0:	3361      	adds	r3, #97	; 0x61
 80034b2:	2207      	movs	r2, #7
 80034b4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	4611      	mov	r1, r2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f004 f996 	bl	80077f2 <USB_HC_Halt>
 80034c6:	e044      	b.n	8003552 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	212c      	movs	r1, #44	; 0x2c
 80034ce:	fb01 f303 	mul.w	r3, r1, r3
 80034d2:	4413      	add	r3, r2
 80034d4:	335c      	adds	r3, #92	; 0x5c
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	202c      	movs	r0, #44	; 0x2c
 80034e0:	fb00 f303 	mul.w	r3, r0, r3
 80034e4:	440b      	add	r3, r1
 80034e6:	335c      	adds	r3, #92	; 0x5c
 80034e8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	212c      	movs	r1, #44	; 0x2c
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	335c      	adds	r3, #92	; 0x5c
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d920      	bls.n	8003540 <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	212c      	movs	r1, #44	; 0x2c
 8003504:	fb01 f303 	mul.w	r3, r1, r3
 8003508:	4413      	add	r3, r2
 800350a:	335c      	adds	r3, #92	; 0x5c
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	212c      	movs	r1, #44	; 0x2c
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	3360      	adds	r3, #96	; 0x60
 800351e:	2204      	movs	r2, #4
 8003520:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	b2d9      	uxtb	r1, r3
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	202c      	movs	r0, #44	; 0x2c
 800352c:	fb00 f303 	mul.w	r3, r0, r3
 8003530:	4413      	add	r3, r2
 8003532:	3360      	adds	r3, #96	; 0x60
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7fe f99a 	bl	8001872 <HAL_HCD_HC_NotifyURBChange_Callback>
 800353e:	e008      	b.n	8003552 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	212c      	movs	r1, #44	; 0x2c
 8003546:	fb01 f303 	mul.w	r3, r1, r3
 800354a:	4413      	add	r3, r2
 800354c:	3360      	adds	r3, #96	; 0x60
 800354e:	2202      	movs	r2, #2
 8003550:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	4413      	add	r3, r2
 800355a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355e:	461a      	mov	r2, r3
 8003560:	2380      	movs	r3, #128	; 0x80
 8003562:	6093      	str	r3, [r2, #8]
 8003564:	e1bb      	b.n	80038de <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	4611      	mov	r1, r2
 8003570:	4618      	mov	r0, r3
 8003572:	f004 f8c4 	bl	80076fe <USB_ReadChInterrupts>
 8003576:	4603      	mov	r3, r0
 8003578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003580:	d11b      	bne.n	80035ba <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	212c      	movs	r1, #44	; 0x2c
 8003588:	fb01 f303 	mul.w	r3, r1, r3
 800358c:	4413      	add	r3, r2
 800358e:	3361      	adds	r3, #97	; 0x61
 8003590:	2209      	movs	r2, #9
 8003592:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	4611      	mov	r1, r2
 800359e:	4618      	mov	r0, r3
 80035a0:	f004 f927 	bl	80077f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b0:	461a      	mov	r2, r3
 80035b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035b6:	6093      	str	r3, [r2, #8]
 80035b8:	e191      	b.n	80038de <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f004 f89a 	bl	80076fe <USB_ReadChInterrupts>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	f040 8184 	bne.w	80038de <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e2:	461a      	mov	r2, r3
 80035e4:	2302      	movs	r3, #2
 80035e6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	212c      	movs	r1, #44	; 0x2c
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	4413      	add	r3, r2
 80035f4:	3361      	adds	r3, #97	; 0x61
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	f040 8087 	bne.w	800370c <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	212c      	movs	r1, #44	; 0x2c
 8003604:	fb01 f303 	mul.w	r3, r1, r3
 8003608:	4413      	add	r3, r2
 800360a:	3361      	adds	r3, #97	; 0x61
 800360c:	2202      	movs	r2, #2
 800360e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	212c      	movs	r1, #44	; 0x2c
 8003616:	fb01 f303 	mul.w	r3, r1, r3
 800361a:	4413      	add	r3, r2
 800361c:	3360      	adds	r3, #96	; 0x60
 800361e:	2201      	movs	r2, #1
 8003620:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	212c      	movs	r1, #44	; 0x2c
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	4413      	add	r3, r2
 800362e:	333f      	adds	r3, #63	; 0x3f
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d00a      	beq.n	800364c <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	212c      	movs	r1, #44	; 0x2c
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	4413      	add	r3, r2
 8003642:	333f      	adds	r3, #63	; 0x3f
 8003644:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003646:	2b03      	cmp	r3, #3
 8003648:	f040 8139 	bne.w	80038be <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d113      	bne.n	800367c <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	212c      	movs	r1, #44	; 0x2c
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	4413      	add	r3, r2
 8003660:	3355      	adds	r3, #85	; 0x55
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	f083 0301 	eor.w	r3, r3, #1
 8003668:	b2d8      	uxtb	r0, r3
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	212c      	movs	r1, #44	; 0x2c
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	4413      	add	r3, r2
 8003676:	3355      	adds	r3, #85	; 0x55
 8003678:	4602      	mov	r2, r0
 800367a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	2b01      	cmp	r3, #1
 8003682:	f040 811c 	bne.w	80038be <HCD_HC_OUT_IRQHandler+0x772>
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	212c      	movs	r1, #44	; 0x2c
 800368c:	fb01 f303 	mul.w	r3, r1, r3
 8003690:	4413      	add	r3, r2
 8003692:	334c      	adds	r3, #76	; 0x4c
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 8111 	beq.w	80038be <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	212c      	movs	r1, #44	; 0x2c
 80036a2:	fb01 f303 	mul.w	r3, r1, r3
 80036a6:	4413      	add	r3, r2
 80036a8:	334c      	adds	r3, #76	; 0x4c
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	202c      	movs	r0, #44	; 0x2c
 80036b2:	fb00 f202 	mul.w	r2, r0, r2
 80036b6:	440a      	add	r2, r1
 80036b8:	3240      	adds	r2, #64	; 0x40
 80036ba:	8812      	ldrh	r2, [r2, #0]
 80036bc:	4413      	add	r3, r2
 80036be:	3b01      	subs	r3, #1
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	202c      	movs	r0, #44	; 0x2c
 80036c6:	fb00 f202 	mul.w	r2, r0, r2
 80036ca:	440a      	add	r2, r1
 80036cc:	3240      	adds	r2, #64	; 0x40
 80036ce:	8812      	ldrh	r2, [r2, #0]
 80036d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80ee 	beq.w	80038be <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	212c      	movs	r1, #44	; 0x2c
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	3355      	adds	r3, #85	; 0x55
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	f083 0301 	eor.w	r3, r3, #1
 80036f6:	b2d8      	uxtb	r0, r3
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	212c      	movs	r1, #44	; 0x2c
 80036fe:	fb01 f303 	mul.w	r3, r1, r3
 8003702:	4413      	add	r3, r2
 8003704:	3355      	adds	r3, #85	; 0x55
 8003706:	4602      	mov	r2, r0
 8003708:	701a      	strb	r2, [r3, #0]
 800370a:	e0d8      	b.n	80038be <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	4413      	add	r3, r2
 8003718:	3361      	adds	r3, #97	; 0x61
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b03      	cmp	r3, #3
 800371e:	d109      	bne.n	8003734 <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	212c      	movs	r1, #44	; 0x2c
 8003726:	fb01 f303 	mul.w	r3, r1, r3
 800372a:	4413      	add	r3, r2
 800372c:	3361      	adds	r3, #97	; 0x61
 800372e:	2202      	movs	r2, #2
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	e0c4      	b.n	80038be <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	212c      	movs	r1, #44	; 0x2c
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	4413      	add	r3, r2
 8003740:	3361      	adds	r3, #97	; 0x61
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b04      	cmp	r3, #4
 8003746:	d112      	bne.n	800376e <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	212c      	movs	r1, #44	; 0x2c
 800374e:	fb01 f303 	mul.w	r3, r1, r3
 8003752:	4413      	add	r3, r2
 8003754:	3361      	adds	r3, #97	; 0x61
 8003756:	2202      	movs	r2, #2
 8003758:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	212c      	movs	r1, #44	; 0x2c
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	4413      	add	r3, r2
 8003766:	3360      	adds	r3, #96	; 0x60
 8003768:	2202      	movs	r2, #2
 800376a:	701a      	strb	r2, [r3, #0]
 800376c:	e0a7      	b.n	80038be <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	212c      	movs	r1, #44	; 0x2c
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	4413      	add	r3, r2
 800377a:	3361      	adds	r3, #97	; 0x61
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b05      	cmp	r3, #5
 8003780:	d112      	bne.n	80037a8 <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	212c      	movs	r1, #44	; 0x2c
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	4413      	add	r3, r2
 800378e:	3361      	adds	r3, #97	; 0x61
 8003790:	2202      	movs	r2, #2
 8003792:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	212c      	movs	r1, #44	; 0x2c
 800379a:	fb01 f303 	mul.w	r3, r1, r3
 800379e:	4413      	add	r3, r2
 80037a0:	3360      	adds	r3, #96	; 0x60
 80037a2:	2202      	movs	r2, #2
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	e08a      	b.n	80038be <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	212c      	movs	r1, #44	; 0x2c
 80037ae:	fb01 f303 	mul.w	r3, r1, r3
 80037b2:	4413      	add	r3, r2
 80037b4:	3361      	adds	r3, #97	; 0x61
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b06      	cmp	r3, #6
 80037ba:	d112      	bne.n	80037e2 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	212c      	movs	r1, #44	; 0x2c
 80037c2:	fb01 f303 	mul.w	r3, r1, r3
 80037c6:	4413      	add	r3, r2
 80037c8:	3361      	adds	r3, #97	; 0x61
 80037ca:	2202      	movs	r2, #2
 80037cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	212c      	movs	r1, #44	; 0x2c
 80037d4:	fb01 f303 	mul.w	r3, r1, r3
 80037d8:	4413      	add	r3, r2
 80037da:	3360      	adds	r3, #96	; 0x60
 80037dc:	2205      	movs	r2, #5
 80037de:	701a      	strb	r2, [r3, #0]
 80037e0:	e06d      	b.n	80038be <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	212c      	movs	r1, #44	; 0x2c
 80037e8:	fb01 f303 	mul.w	r3, r1, r3
 80037ec:	4413      	add	r3, r2
 80037ee:	3361      	adds	r3, #97	; 0x61
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b07      	cmp	r3, #7
 80037f4:	d009      	beq.n	800380a <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	212c      	movs	r1, #44	; 0x2c
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	4413      	add	r3, r2
 8003802:	3361      	adds	r3, #97	; 0x61
 8003804:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003806:	2b09      	cmp	r3, #9
 8003808:	d168      	bne.n	80038dc <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	212c      	movs	r1, #44	; 0x2c
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	4413      	add	r3, r2
 8003816:	3361      	adds	r3, #97	; 0x61
 8003818:	2202      	movs	r2, #2
 800381a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	212c      	movs	r1, #44	; 0x2c
 8003822:	fb01 f303 	mul.w	r3, r1, r3
 8003826:	4413      	add	r3, r2
 8003828:	335c      	adds	r3, #92	; 0x5c
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	202c      	movs	r0, #44	; 0x2c
 8003834:	fb00 f303 	mul.w	r3, r0, r3
 8003838:	440b      	add	r3, r1
 800383a:	335c      	adds	r3, #92	; 0x5c
 800383c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	212c      	movs	r1, #44	; 0x2c
 8003844:	fb01 f303 	mul.w	r3, r1, r3
 8003848:	4413      	add	r3, r2
 800384a:	335c      	adds	r3, #92	; 0x5c
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d912      	bls.n	8003878 <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	212c      	movs	r1, #44	; 0x2c
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	4413      	add	r3, r2
 800385e:	335c      	adds	r3, #92	; 0x5c
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	212c      	movs	r1, #44	; 0x2c
 800386a:	fb01 f303 	mul.w	r3, r1, r3
 800386e:	4413      	add	r3, r2
 8003870:	3360      	adds	r3, #96	; 0x60
 8003872:	2204      	movs	r2, #4
 8003874:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003876:	e021      	b.n	80038bc <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	212c      	movs	r1, #44	; 0x2c
 800387e:	fb01 f303 	mul.w	r3, r1, r3
 8003882:	4413      	add	r3, r2
 8003884:	3360      	adds	r3, #96	; 0x60
 8003886:	2202      	movs	r2, #2
 8003888:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	4413      	add	r3, r2
 8003892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038a0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038a8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b6:	461a      	mov	r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80038bc:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	b2d9      	uxtb	r1, r3
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	202c      	movs	r0, #44	; 0x2c
 80038c8:	fb00 f303 	mul.w	r3, r0, r3
 80038cc:	4413      	add	r3, r2
 80038ce:	3360      	adds	r3, #96	; 0x60
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7fd ffcc 	bl	8001872 <HAL_HCD_HC_NotifyURBChange_Callback>
 80038da:	e000      	b.n	80038de <HCD_HC_OUT_IRQHandler+0x792>
      return;
 80038dc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08a      	sub	sp, #40	; 0x28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	0c5b      	lsrs	r3, r3, #17
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	091b      	lsrs	r3, r3, #4
 8003914:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003918:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d004      	beq.n	800392a <HCD_RXQLVL_IRQHandler+0x46>
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	2b05      	cmp	r3, #5
 8003924:	f000 80a9 	beq.w	8003a7a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003928:	e0aa      	b.n	8003a80 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 80a6 	beq.w	8003a7e <HCD_RXQLVL_IRQHandler+0x19a>
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	212c      	movs	r1, #44	; 0x2c
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	4413      	add	r3, r2
 800393e:	3344      	adds	r3, #68	; 0x44
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 809b 	beq.w	8003a7e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	212c      	movs	r1, #44	; 0x2c
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	4413      	add	r3, r2
 8003954:	3350      	adds	r3, #80	; 0x50
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	441a      	add	r2, r3
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	202c      	movs	r0, #44	; 0x2c
 8003962:	fb00 f303 	mul.w	r3, r0, r3
 8003966:	440b      	add	r3, r1
 8003968:	334c      	adds	r3, #76	; 0x4c
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d87a      	bhi.n	8003a66 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	212c      	movs	r1, #44	; 0x2c
 800397a:	fb01 f303 	mul.w	r3, r1, r3
 800397e:	4413      	add	r3, r2
 8003980:	3344      	adds	r3, #68	; 0x44
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	b292      	uxth	r2, r2
 8003988:	4619      	mov	r1, r3
 800398a:	f003 fe4d 	bl	8007628 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	212c      	movs	r1, #44	; 0x2c
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	4413      	add	r3, r2
 800399a:	3344      	adds	r3, #68	; 0x44
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	441a      	add	r2, r3
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	202c      	movs	r0, #44	; 0x2c
 80039a8:	fb00 f303 	mul.w	r3, r0, r3
 80039ac:	440b      	add	r3, r1
 80039ae:	3344      	adds	r3, #68	; 0x44
 80039b0:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	212c      	movs	r1, #44	; 0x2c
 80039b8:	fb01 f303 	mul.w	r3, r1, r3
 80039bc:	4413      	add	r3, r2
 80039be:	3350      	adds	r3, #80	; 0x50
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	441a      	add	r2, r3
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	202c      	movs	r0, #44	; 0x2c
 80039cc:	fb00 f303 	mul.w	r3, r0, r3
 80039d0:	440b      	add	r3, r1
 80039d2:	3350      	adds	r3, #80	; 0x50
 80039d4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	0cdb      	lsrs	r3, r3, #19
 80039e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ea:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	212c      	movs	r1, #44	; 0x2c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	3340      	adds	r3, #64	; 0x40
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d13c      	bne.n	8003a7e <HCD_RXQLVL_IRQHandler+0x19a>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d039      	beq.n	8003a7e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a20:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a28:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a36:	461a      	mov	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	212c      	movs	r1, #44	; 0x2c
 8003a42:	fb01 f303 	mul.w	r3, r1, r3
 8003a46:	4413      	add	r3, r2
 8003a48:	3354      	adds	r3, #84	; 0x54
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	f083 0301 	eor.w	r3, r3, #1
 8003a50:	b2d8      	uxtb	r0, r3
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	212c      	movs	r1, #44	; 0x2c
 8003a58:	fb01 f303 	mul.w	r3, r1, r3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3354      	adds	r3, #84	; 0x54
 8003a60:	4602      	mov	r2, r0
 8003a62:	701a      	strb	r2, [r3, #0]
      break;
 8003a64:	e00b      	b.n	8003a7e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	212c      	movs	r1, #44	; 0x2c
 8003a6c:	fb01 f303 	mul.w	r3, r1, r3
 8003a70:	4413      	add	r3, r2
 8003a72:	3360      	adds	r3, #96	; 0x60
 8003a74:	2204      	movs	r2, #4
 8003a76:	701a      	strb	r2, [r3, #0]
      break;
 8003a78:	e001      	b.n	8003a7e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003a7a:	bf00      	nop
 8003a7c:	e000      	b.n	8003a80 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003a7e:	bf00      	nop
  }
}
 8003a80:	bf00      	nop
 8003a82:	3728      	adds	r7, #40	; 0x28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ab4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d10b      	bne.n	8003ad8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d102      	bne.n	8003ad0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fd feb5 	bl	800183a <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f043 0302 	orr.w	r3, r3, #2
 8003ad6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d132      	bne.n	8003b48 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f043 0308 	orr.w	r3, r3, #8
 8003ae8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d126      	bne.n	8003b42 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d113      	bne.n	8003b24 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003b02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b06:	d106      	bne.n	8003b16 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2102      	movs	r1, #2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f003 fe24 	bl	800775c <USB_InitFSLSPClkSel>
 8003b14:	e011      	b.n	8003b3a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f003 fe1d 	bl	800775c <USB_InitFSLSPClkSel>
 8003b22:	e00a      	b.n	8003b3a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d106      	bne.n	8003b3a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b32:	461a      	mov	r2, r3
 8003b34:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003b38:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7fd feab 	bl	8001896 <HAL_HCD_PortEnabled_Callback>
 8003b40:	e002      	b.n	8003b48 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fd feb5 	bl	80018b2 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d103      	bne.n	8003b5a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f043 0320 	orr.w	r3, r3, #32
 8003b58:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b60:	461a      	mov	r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	6013      	str	r3, [r2, #0]
}
 8003b66:	bf00      	nop
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a04      	ldr	r2, [pc, #16]	; (8003b8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7e:	6013      	str	r3, [r2, #0]
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40007000 	.word	0x40007000

08003b90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b96:	2300      	movs	r3, #0
 8003b98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b9a:	4b23      	ldr	r3, [pc, #140]	; (8003c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	4a22      	ldr	r2, [pc, #136]	; (8003c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba6:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bb2:	4b1e      	ldr	r3, [pc, #120]	; (8003c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a1d      	ldr	r2, [pc, #116]	; (8003c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bbc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bbe:	f7fd ff01 	bl	80019c4 <HAL_GetTick>
 8003bc2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bc4:	e009      	b.n	8003bda <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bc6:	f7fd fefd 	bl	80019c4 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bd4:	d901      	bls.n	8003bda <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e022      	b.n	8003c20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bda:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be6:	d1ee      	bne.n	8003bc6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003be8:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a0f      	ldr	r2, [pc, #60]	; (8003c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bf4:	f7fd fee6 	bl	80019c4 <HAL_GetTick>
 8003bf8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bfa:	e009      	b.n	8003c10 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bfc:	f7fd fee2 	bl	80019c4 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c0a:	d901      	bls.n	8003c10 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e007      	b.n	8003c20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c1c:	d1ee      	bne.n	8003bfc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	40007000 	.word	0x40007000

08003c30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e345      	b.n	80042d2 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b0f      	cmp	r3, #15
 8003c4c:	d904      	bls.n	8003c58 <HAL_RCC_OscConfig+0x28>
 8003c4e:	f240 1163 	movw	r1, #355	; 0x163
 8003c52:	4892      	ldr	r0, [pc, #584]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c54:	f7fd fb58 	bl	8001308 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 809a 	beq.w	8003d9a <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00e      	beq.n	8003c8c <HAL_RCC_OscConfig+0x5c>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c76:	d009      	beq.n	8003c8c <HAL_RCC_OscConfig+0x5c>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c80:	d004      	beq.n	8003c8c <HAL_RCC_OscConfig+0x5c>
 8003c82:	f240 1169 	movw	r1, #361	; 0x169
 8003c86:	4885      	ldr	r0, [pc, #532]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c88:	f7fd fb3e 	bl	8001308 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c8c:	4b84      	ldr	r3, [pc, #528]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 030c 	and.w	r3, r3, #12
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d00c      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c98:	4b81      	ldr	r3, [pc, #516]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 030c 	and.w	r3, r3, #12
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d112      	bne.n	8003cca <HAL_RCC_OscConfig+0x9a>
 8003ca4:	4b7e      	ldr	r3, [pc, #504]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cb0:	d10b      	bne.n	8003cca <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb2:	4b7b      	ldr	r3, [pc, #492]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d06c      	beq.n	8003d98 <HAL_RCC_OscConfig+0x168>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d168      	bne.n	8003d98 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e303      	b.n	80042d2 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd2:	d106      	bne.n	8003ce2 <HAL_RCC_OscConfig+0xb2>
 8003cd4:	4b72      	ldr	r3, [pc, #456]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a71      	ldr	r2, [pc, #452]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	e02e      	b.n	8003d40 <HAL_RCC_OscConfig+0x110>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10c      	bne.n	8003d04 <HAL_RCC_OscConfig+0xd4>
 8003cea:	4b6d      	ldr	r3, [pc, #436]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a6c      	ldr	r2, [pc, #432]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	4b6a      	ldr	r3, [pc, #424]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a69      	ldr	r2, [pc, #420]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	e01d      	b.n	8003d40 <HAL_RCC_OscConfig+0x110>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d0c:	d10c      	bne.n	8003d28 <HAL_RCC_OscConfig+0xf8>
 8003d0e:	4b64      	ldr	r3, [pc, #400]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a63      	ldr	r2, [pc, #396]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	4b61      	ldr	r3, [pc, #388]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a60      	ldr	r2, [pc, #384]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	e00b      	b.n	8003d40 <HAL_RCC_OscConfig+0x110>
 8003d28:	4b5d      	ldr	r3, [pc, #372]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a5c      	ldr	r2, [pc, #368]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	4b5a      	ldr	r3, [pc, #360]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a59      	ldr	r2, [pc, #356]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d013      	beq.n	8003d70 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fd fe3c 	bl	80019c4 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d50:	f7fd fe38 	bl	80019c4 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b64      	cmp	r3, #100	; 0x64
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e2b7      	b.n	80042d2 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	4b4f      	ldr	r3, [pc, #316]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0f0      	beq.n	8003d50 <HAL_RCC_OscConfig+0x120>
 8003d6e:	e014      	b.n	8003d9a <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fd fe28 	bl	80019c4 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d78:	f7fd fe24 	bl	80019c4 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	; 0x64
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e2a3      	b.n	80042d2 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8a:	4b45      	ldr	r3, [pc, #276]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x148>
 8003d96:	e000      	b.n	8003d9a <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 8084 	beq.w	8003eb0 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x192>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d004      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x192>
 8003db8:	f240 119b 	movw	r1, #411	; 0x19b
 8003dbc:	4837      	ldr	r0, [pc, #220]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003dbe:	f7fd faa3 	bl	8001308 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b1f      	cmp	r3, #31
 8003dc8:	d904      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x1a4>
 8003dca:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8003dce:	4833      	ldr	r0, [pc, #204]	; (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	f7fd fa9a 	bl	8001308 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dd4:	4b32      	ldr	r3, [pc, #200]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 030c 	and.w	r3, r3, #12
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00b      	beq.n	8003df8 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003de0:	4b2f      	ldr	r3, [pc, #188]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 030c 	and.w	r3, r3, #12
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d11c      	bne.n	8003e26 <HAL_RCC_OscConfig+0x1f6>
 8003dec:	4b2c      	ldr	r3, [pc, #176]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d116      	bne.n	8003e26 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003df8:	4b29      	ldr	r3, [pc, #164]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <HAL_RCC_OscConfig+0x1e0>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e260      	b.n	80042d2 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e10:	4b23      	ldr	r3, [pc, #140]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	4920      	ldr	r1, [pc, #128]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e24:	e044      	b.n	8003eb0 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d023      	beq.n	8003e76 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1b      	ldr	r2, [pc, #108]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3a:	f7fd fdc3 	bl	80019c4 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e42:	f7fd fdbf 	bl	80019c4 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e23e      	b.n	80042d2 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e54:	4b12      	ldr	r3, [pc, #72]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e60:	4b0f      	ldr	r3, [pc, #60]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	490c      	ldr	r1, [pc, #48]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	600b      	str	r3, [r1, #0]
 8003e74:	e01c      	b.n	8003eb0 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e82:	f7fd fd9f 	bl	80019c4 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e88:	e00c      	b.n	8003ea4 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e8a:	f7fd fd9b 	bl	80019c4 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d905      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e21a      	b.n	80042d2 <HAL_RCC_OscConfig+0x6a2>
 8003e9c:	0800d7e8 	.word	0x0800d7e8
 8003ea0:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea4:	4b7e      	ldr	r3, [pc, #504]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1ec      	bne.n	8003e8a <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d043      	beq.n	8003f44 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x2a6>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d004      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x2a6>
 8003ecc:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8003ed0:	4874      	ldr	r0, [pc, #464]	; (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003ed2:	f7fd fa19 	bl	8001308 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d019      	beq.n	8003f12 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ede:	4b70      	ldr	r3, [pc, #448]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee2:	4a6f      	ldr	r2, [pc, #444]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eea:	f7fd fd6b 	bl	80019c4 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef2:	f7fd fd67 	bl	80019c4 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e1e6      	b.n	80042d2 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f04:	4b66      	ldr	r3, [pc, #408]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f0      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x2c2>
 8003f10:	e018      	b.n	8003f44 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f12:	4b63      	ldr	r3, [pc, #396]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f16:	4a62      	ldr	r2, [pc, #392]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f18:	f023 0301 	bic.w	r3, r3, #1
 8003f1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1e:	f7fd fd51 	bl	80019c4 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f26:	f7fd fd4d 	bl	80019c4 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e1cc      	b.n	80042d2 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f38:	4b59      	ldr	r3, [pc, #356]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1f0      	bne.n	8003f26 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80bc 	beq.w	80040ca <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00c      	beq.n	8003f74 <HAL_RCC_OscConfig+0x344>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d008      	beq.n	8003f74 <HAL_RCC_OscConfig+0x344>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b05      	cmp	r3, #5
 8003f68:	d004      	beq.n	8003f74 <HAL_RCC_OscConfig+0x344>
 8003f6a:	f240 2106 	movw	r1, #518	; 0x206
 8003f6e:	484d      	ldr	r0, [pc, #308]	; (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003f70:	f7fd f9ca 	bl	8001308 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f74:	4b4a      	ldr	r3, [pc, #296]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10d      	bne.n	8003f9c <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f80:	4b47      	ldr	r3, [pc, #284]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	4a46      	ldr	r2, [pc, #280]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	6413      	str	r3, [r2, #64]	; 0x40
 8003f8c:	4b44      	ldr	r3, [pc, #272]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f9c:	4b42      	ldr	r3, [pc, #264]	; (80040a8 <HAL_RCC_OscConfig+0x478>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d118      	bne.n	8003fda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003fa8:	4b3f      	ldr	r3, [pc, #252]	; (80040a8 <HAL_RCC_OscConfig+0x478>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a3e      	ldr	r2, [pc, #248]	; (80040a8 <HAL_RCC_OscConfig+0x478>)
 8003fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fb4:	f7fd fd06 	bl	80019c4 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fbc:	f7fd fd02 	bl	80019c4 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e181      	b.n	80042d2 <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fce:	4b36      	ldr	r3, [pc, #216]	; (80040a8 <HAL_RCC_OscConfig+0x478>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d106      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x3c0>
 8003fe2:	4b2f      	ldr	r3, [pc, #188]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe6:	4a2e      	ldr	r2, [pc, #184]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	6713      	str	r3, [r2, #112]	; 0x70
 8003fee:	e02d      	b.n	800404c <HAL_RCC_OscConfig+0x41c>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10c      	bne.n	8004012 <HAL_RCC_OscConfig+0x3e2>
 8003ff8:	4b29      	ldr	r3, [pc, #164]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	4a28      	ldr	r2, [pc, #160]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003ffe:	f023 0301 	bic.w	r3, r3, #1
 8004002:	6713      	str	r3, [r2, #112]	; 0x70
 8004004:	4b26      	ldr	r3, [pc, #152]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	4a25      	ldr	r2, [pc, #148]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 800400a:	f023 0304 	bic.w	r3, r3, #4
 800400e:	6713      	str	r3, [r2, #112]	; 0x70
 8004010:	e01c      	b.n	800404c <HAL_RCC_OscConfig+0x41c>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b05      	cmp	r3, #5
 8004018:	d10c      	bne.n	8004034 <HAL_RCC_OscConfig+0x404>
 800401a:	4b21      	ldr	r3, [pc, #132]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	4a20      	ldr	r2, [pc, #128]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004020:	f043 0304 	orr.w	r3, r3, #4
 8004024:	6713      	str	r3, [r2, #112]	; 0x70
 8004026:	4b1e      	ldr	r3, [pc, #120]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	4a1d      	ldr	r2, [pc, #116]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	6713      	str	r3, [r2, #112]	; 0x70
 8004032:	e00b      	b.n	800404c <HAL_RCC_OscConfig+0x41c>
 8004034:	4b1a      	ldr	r3, [pc, #104]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004038:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 800403a:	f023 0301 	bic.w	r3, r3, #1
 800403e:	6713      	str	r3, [r2, #112]	; 0x70
 8004040:	4b17      	ldr	r3, [pc, #92]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004044:	4a16      	ldr	r2, [pc, #88]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004046:	f023 0304 	bic.w	r3, r3, #4
 800404a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d015      	beq.n	8004080 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004054:	f7fd fcb6 	bl	80019c4 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405a:	e00a      	b.n	8004072 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405c:	f7fd fcb2 	bl	80019c4 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	; 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e12f      	b.n	80042d2 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004072:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0ee      	beq.n	800405c <HAL_RCC_OscConfig+0x42c>
 800407e:	e01b      	b.n	80040b8 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004080:	f7fd fca0 	bl	80019c4 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004086:	e011      	b.n	80040ac <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004088:	f7fd fc9c 	bl	80019c4 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f241 3288 	movw	r2, #5000	; 0x1388
 8004096:	4293      	cmp	r3, r2
 8004098:	d908      	bls.n	80040ac <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e119      	b.n	80042d2 <HAL_RCC_OscConfig+0x6a2>
 800409e:	bf00      	nop
 80040a0:	40023800 	.word	0x40023800
 80040a4:	0800d7e8 	.word	0x0800d7e8
 80040a8:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ac:	4b8b      	ldr	r3, [pc, #556]	; (80042dc <HAL_RCC_OscConfig+0x6ac>)
 80040ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1e7      	bne.n	8004088 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040b8:	7dfb      	ldrb	r3, [r7, #23]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d105      	bne.n	80040ca <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040be:	4b87      	ldr	r3, [pc, #540]	; (80042dc <HAL_RCC_OscConfig+0x6ac>)
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	4a86      	ldr	r2, [pc, #536]	; (80042dc <HAL_RCC_OscConfig+0x6ac>)
 80040c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00c      	beq.n	80040ec <HAL_RCC_OscConfig+0x4bc>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d008      	beq.n	80040ec <HAL_RCC_OscConfig+0x4bc>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d004      	beq.n	80040ec <HAL_RCC_OscConfig+0x4bc>
 80040e2:	f240 214a 	movw	r1, #586	; 0x24a
 80040e6:	487e      	ldr	r0, [pc, #504]	; (80042e0 <HAL_RCC_OscConfig+0x6b0>)
 80040e8:	f7fd f90e 	bl	8001308 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80ed 	beq.w	80042d0 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040f6:	4b79      	ldr	r3, [pc, #484]	; (80042dc <HAL_RCC_OscConfig+0x6ac>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 030c 	and.w	r3, r3, #12
 80040fe:	2b08      	cmp	r3, #8
 8004100:	f000 80b4 	beq.w	800426c <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	2b02      	cmp	r3, #2
 800410a:	f040 8095 	bne.w	8004238 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_RCC_OscConfig+0x4fa>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800411e:	d004      	beq.n	800412a <HAL_RCC_OscConfig+0x4fa>
 8004120:	f240 2153 	movw	r1, #595	; 0x253
 8004124:	486e      	ldr	r0, [pc, #440]	; (80042e0 <HAL_RCC_OscConfig+0x6b0>)
 8004126:	f7fd f8ef 	bl	8001308 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d903      	bls.n	800413a <HAL_RCC_OscConfig+0x50a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	2b3f      	cmp	r3, #63	; 0x3f
 8004138:	d904      	bls.n	8004144 <HAL_RCC_OscConfig+0x514>
 800413a:	f44f 7115 	mov.w	r1, #596	; 0x254
 800413e:	4868      	ldr	r0, [pc, #416]	; (80042e0 <HAL_RCC_OscConfig+0x6b0>)
 8004140:	f7fd f8e2 	bl	8001308 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	2b31      	cmp	r3, #49	; 0x31
 800414a:	d904      	bls.n	8004156 <HAL_RCC_OscConfig+0x526>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004154:	d904      	bls.n	8004160 <HAL_RCC_OscConfig+0x530>
 8004156:	f240 2155 	movw	r1, #597	; 0x255
 800415a:	4861      	ldr	r0, [pc, #388]	; (80042e0 <HAL_RCC_OscConfig+0x6b0>)
 800415c:	f7fd f8d4 	bl	8001308 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004164:	2b02      	cmp	r3, #2
 8004166:	d010      	beq.n	800418a <HAL_RCC_OscConfig+0x55a>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416c:	2b04      	cmp	r3, #4
 800416e:	d00c      	beq.n	800418a <HAL_RCC_OscConfig+0x55a>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	2b06      	cmp	r3, #6
 8004176:	d008      	beq.n	800418a <HAL_RCC_OscConfig+0x55a>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417c:	2b08      	cmp	r3, #8
 800417e:	d004      	beq.n	800418a <HAL_RCC_OscConfig+0x55a>
 8004180:	f240 2156 	movw	r1, #598	; 0x256
 8004184:	4856      	ldr	r0, [pc, #344]	; (80042e0 <HAL_RCC_OscConfig+0x6b0>)
 8004186:	f7fd f8bf 	bl	8001308 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	2b01      	cmp	r3, #1
 8004190:	d903      	bls.n	800419a <HAL_RCC_OscConfig+0x56a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	2b0f      	cmp	r3, #15
 8004198:	d904      	bls.n	80041a4 <HAL_RCC_OscConfig+0x574>
 800419a:	f240 2157 	movw	r1, #599	; 0x257
 800419e:	4850      	ldr	r0, [pc, #320]	; (80042e0 <HAL_RCC_OscConfig+0x6b0>)
 80041a0:	f7fd f8b2 	bl	8001308 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a4:	4b4d      	ldr	r3, [pc, #308]	; (80042dc <HAL_RCC_OscConfig+0x6ac>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a4c      	ldr	r2, [pc, #304]	; (80042dc <HAL_RCC_OscConfig+0x6ac>)
 80041aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b0:	f7fd fc08 	bl	80019c4 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b8:	f7fd fc04 	bl	80019c4 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e083      	b.n	80042d2 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ca:	4b44      	ldr	r3, [pc, #272]	; (80042dc <HAL_RCC_OscConfig+0x6ac>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69da      	ldr	r2, [r3, #28]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	019b      	lsls	r3, r3, #6
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	085b      	lsrs	r3, r3, #1
 80041ee:	3b01      	subs	r3, #1
 80041f0:	041b      	lsls	r3, r3, #16
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	061b      	lsls	r3, r3, #24
 80041fa:	4313      	orrs	r3, r2
 80041fc:	4a37      	ldr	r2, [pc, #220]	; (80042dc <HAL_RCC_OscConfig+0x6ac>)
 80041fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004202:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004204:	4b35      	ldr	r3, [pc, #212]	; (80042dc <HAL_RCC_OscConfig+0x6ac>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a34      	ldr	r2, [pc, #208]	; (80042dc <HAL_RCC_OscConfig+0x6ac>)
 800420a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800420e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fd fbd8 	bl	80019c4 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004218:	f7fd fbd4 	bl	80019c4 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e053      	b.n	80042d2 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800422a:	4b2c      	ldr	r3, [pc, #176]	; (80042dc <HAL_RCC_OscConfig+0x6ac>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f0      	beq.n	8004218 <HAL_RCC_OscConfig+0x5e8>
 8004236:	e04b      	b.n	80042d0 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004238:	4b28      	ldr	r3, [pc, #160]	; (80042dc <HAL_RCC_OscConfig+0x6ac>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a27      	ldr	r2, [pc, #156]	; (80042dc <HAL_RCC_OscConfig+0x6ac>)
 800423e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004244:	f7fd fbbe 	bl	80019c4 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800424c:	f7fd fbba 	bl	80019c4 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e039      	b.n	80042d2 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425e:	4b1f      	ldr	r3, [pc, #124]	; (80042dc <HAL_RCC_OscConfig+0x6ac>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x61c>
 800426a:	e031      	b.n	80042d0 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800426c:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <HAL_RCC_OscConfig+0x6ac>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d028      	beq.n	80042cc <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004284:	429a      	cmp	r2, r3
 8004286:	d121      	bne.n	80042cc <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d11a      	bne.n	80042cc <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800429c:	4013      	ands	r3, r2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d111      	bne.n	80042cc <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b2:	085b      	lsrs	r3, r3, #1
 80042b4:	3b01      	subs	r3, #1
 80042b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d107      	bne.n	80042cc <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d001      	beq.n	80042d0 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40023800 	.word	0x40023800
 80042e0:	0800d7e8 	.word	0x0800d7e8

080042e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e18c      	b.n	8004616 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_RCC_ClockConfig+0x28>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b0f      	cmp	r3, #15
 800430a:	d904      	bls.n	8004316 <HAL_RCC_ClockConfig+0x32>
 800430c:	f240 21dd 	movw	r1, #733	; 0x2dd
 8004310:	4887      	ldr	r0, [pc, #540]	; (8004530 <HAL_RCC_ClockConfig+0x24c>)
 8004312:	f7fc fff9 	bl	8001308 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d031      	beq.n	8004380 <HAL_RCC_ClockConfig+0x9c>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d02e      	beq.n	8004380 <HAL_RCC_ClockConfig+0x9c>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d02b      	beq.n	8004380 <HAL_RCC_ClockConfig+0x9c>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b03      	cmp	r3, #3
 800432c:	d028      	beq.n	8004380 <HAL_RCC_ClockConfig+0x9c>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b04      	cmp	r3, #4
 8004332:	d025      	beq.n	8004380 <HAL_RCC_ClockConfig+0x9c>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	2b05      	cmp	r3, #5
 8004338:	d022      	beq.n	8004380 <HAL_RCC_ClockConfig+0x9c>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b06      	cmp	r3, #6
 800433e:	d01f      	beq.n	8004380 <HAL_RCC_ClockConfig+0x9c>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b07      	cmp	r3, #7
 8004344:	d01c      	beq.n	8004380 <HAL_RCC_ClockConfig+0x9c>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b08      	cmp	r3, #8
 800434a:	d019      	beq.n	8004380 <HAL_RCC_ClockConfig+0x9c>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b09      	cmp	r3, #9
 8004350:	d016      	beq.n	8004380 <HAL_RCC_ClockConfig+0x9c>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b0a      	cmp	r3, #10
 8004356:	d013      	beq.n	8004380 <HAL_RCC_ClockConfig+0x9c>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b0b      	cmp	r3, #11
 800435c:	d010      	beq.n	8004380 <HAL_RCC_ClockConfig+0x9c>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b0c      	cmp	r3, #12
 8004362:	d00d      	beq.n	8004380 <HAL_RCC_ClockConfig+0x9c>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2b0d      	cmp	r3, #13
 8004368:	d00a      	beq.n	8004380 <HAL_RCC_ClockConfig+0x9c>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b0e      	cmp	r3, #14
 800436e:	d007      	beq.n	8004380 <HAL_RCC_ClockConfig+0x9c>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2b0f      	cmp	r3, #15
 8004374:	d004      	beq.n	8004380 <HAL_RCC_ClockConfig+0x9c>
 8004376:	f240 21de 	movw	r1, #734	; 0x2de
 800437a:	486d      	ldr	r0, [pc, #436]	; (8004530 <HAL_RCC_ClockConfig+0x24c>)
 800437c:	f7fc ffc4 	bl	8001308 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004380:	4b6c      	ldr	r3, [pc, #432]	; (8004534 <HAL_RCC_ClockConfig+0x250>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d910      	bls.n	80043b0 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438e:	4b69      	ldr	r3, [pc, #420]	; (8004534 <HAL_RCC_ClockConfig+0x250>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f023 020f 	bic.w	r2, r3, #15
 8004396:	4967      	ldr	r1, [pc, #412]	; (8004534 <HAL_RCC_ClockConfig+0x250>)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	4313      	orrs	r3, r2
 800439c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800439e:	4b65      	ldr	r3, [pc, #404]	; (8004534 <HAL_RCC_ClockConfig+0x250>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d001      	beq.n	80043b0 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e132      	b.n	8004616 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d049      	beq.n	8004450 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043c8:	4b5b      	ldr	r3, [pc, #364]	; (8004538 <HAL_RCC_ClockConfig+0x254>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	4a5a      	ldr	r2, [pc, #360]	; (8004538 <HAL_RCC_ClockConfig+0x254>)
 80043ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043e0:	4b55      	ldr	r3, [pc, #340]	; (8004538 <HAL_RCC_ClockConfig+0x254>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	4a54      	ldr	r2, [pc, #336]	; (8004538 <HAL_RCC_ClockConfig+0x254>)
 80043e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d024      	beq.n	800443e <HAL_RCC_ClockConfig+0x15a>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b80      	cmp	r3, #128	; 0x80
 80043fa:	d020      	beq.n	800443e <HAL_RCC_ClockConfig+0x15a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	2b90      	cmp	r3, #144	; 0x90
 8004402:	d01c      	beq.n	800443e <HAL_RCC_ClockConfig+0x15a>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2ba0      	cmp	r3, #160	; 0xa0
 800440a:	d018      	beq.n	800443e <HAL_RCC_ClockConfig+0x15a>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	2bb0      	cmp	r3, #176	; 0xb0
 8004412:	d014      	beq.n	800443e <HAL_RCC_ClockConfig+0x15a>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2bc0      	cmp	r3, #192	; 0xc0
 800441a:	d010      	beq.n	800443e <HAL_RCC_ClockConfig+0x15a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2bd0      	cmp	r3, #208	; 0xd0
 8004422:	d00c      	beq.n	800443e <HAL_RCC_ClockConfig+0x15a>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2be0      	cmp	r3, #224	; 0xe0
 800442a:	d008      	beq.n	800443e <HAL_RCC_ClockConfig+0x15a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2bf0      	cmp	r3, #240	; 0xf0
 8004432:	d004      	beq.n	800443e <HAL_RCC_ClockConfig+0x15a>
 8004434:	f240 3102 	movw	r1, #770	; 0x302
 8004438:	483d      	ldr	r0, [pc, #244]	; (8004530 <HAL_RCC_ClockConfig+0x24c>)
 800443a:	f7fc ff65 	bl	8001308 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800443e:	4b3e      	ldr	r3, [pc, #248]	; (8004538 <HAL_RCC_ClockConfig+0x254>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	493b      	ldr	r1, [pc, #236]	; (8004538 <HAL_RCC_ClockConfig+0x254>)
 800444c:	4313      	orrs	r3, r2
 800444e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d051      	beq.n	8004500 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00c      	beq.n	800447e <HAL_RCC_ClockConfig+0x19a>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d008      	beq.n	800447e <HAL_RCC_ClockConfig+0x19a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b02      	cmp	r3, #2
 8004472:	d004      	beq.n	800447e <HAL_RCC_ClockConfig+0x19a>
 8004474:	f240 3109 	movw	r1, #777	; 0x309
 8004478:	482d      	ldr	r0, [pc, #180]	; (8004530 <HAL_RCC_ClockConfig+0x24c>)
 800447a:	f7fc ff45 	bl	8001308 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d107      	bne.n	8004496 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004486:	4b2c      	ldr	r3, [pc, #176]	; (8004538 <HAL_RCC_ClockConfig+0x254>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d115      	bne.n	80044be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e0bf      	b.n	8004616 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b02      	cmp	r3, #2
 800449c:	d107      	bne.n	80044ae <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449e:	4b26      	ldr	r3, [pc, #152]	; (8004538 <HAL_RCC_ClockConfig+0x254>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e0b3      	b.n	8004616 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ae:	4b22      	ldr	r3, [pc, #136]	; (8004538 <HAL_RCC_ClockConfig+0x254>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e0ab      	b.n	8004616 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044be:	4b1e      	ldr	r3, [pc, #120]	; (8004538 <HAL_RCC_ClockConfig+0x254>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f023 0203 	bic.w	r2, r3, #3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	491b      	ldr	r1, [pc, #108]	; (8004538 <HAL_RCC_ClockConfig+0x254>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d0:	f7fd fa78 	bl	80019c4 <HAL_GetTick>
 80044d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d6:	e00a      	b.n	80044ee <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d8:	f7fd fa74 	bl	80019c4 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e093      	b.n	8004616 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ee:	4b12      	ldr	r3, [pc, #72]	; (8004538 <HAL_RCC_ClockConfig+0x254>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 020c 	and.w	r2, r3, #12
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d1eb      	bne.n	80044d8 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <HAL_RCC_ClockConfig+0x250>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d216      	bcs.n	800453c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450e:	4b09      	ldr	r3, [pc, #36]	; (8004534 <HAL_RCC_ClockConfig+0x250>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 020f 	bic.w	r2, r3, #15
 8004516:	4907      	ldr	r1, [pc, #28]	; (8004534 <HAL_RCC_ClockConfig+0x250>)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	4313      	orrs	r3, r2
 800451c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <HAL_RCC_ClockConfig+0x250>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d007      	beq.n	800453c <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e072      	b.n	8004616 <HAL_RCC_ClockConfig+0x332>
 8004530:	0800d7e8 	.word	0x0800d7e8
 8004534:	40023c00 	.word	0x40023c00
 8004538:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d025      	beq.n	8004594 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d018      	beq.n	8004582 <HAL_RCC_ClockConfig+0x29e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004558:	d013      	beq.n	8004582 <HAL_RCC_ClockConfig+0x29e>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004562:	d00e      	beq.n	8004582 <HAL_RCC_ClockConfig+0x29e>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800456c:	d009      	beq.n	8004582 <HAL_RCC_ClockConfig+0x29e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004576:	d004      	beq.n	8004582 <HAL_RCC_ClockConfig+0x29e>
 8004578:	f240 3146 	movw	r1, #838	; 0x346
 800457c:	4828      	ldr	r0, [pc, #160]	; (8004620 <HAL_RCC_ClockConfig+0x33c>)
 800457e:	f7fc fec3 	bl	8001308 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004582:	4b28      	ldr	r3, [pc, #160]	; (8004624 <HAL_RCC_ClockConfig+0x340>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	4925      	ldr	r1, [pc, #148]	; (8004624 <HAL_RCC_ClockConfig+0x340>)
 8004590:	4313      	orrs	r3, r2
 8004592:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b00      	cmp	r3, #0
 800459e:	d026      	beq.n	80045ee <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d018      	beq.n	80045da <HAL_RCC_ClockConfig+0x2f6>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b0:	d013      	beq.n	80045da <HAL_RCC_ClockConfig+0x2f6>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045ba:	d00e      	beq.n	80045da <HAL_RCC_ClockConfig+0x2f6>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80045c4:	d009      	beq.n	80045da <HAL_RCC_ClockConfig+0x2f6>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80045ce:	d004      	beq.n	80045da <HAL_RCC_ClockConfig+0x2f6>
 80045d0:	f240 314d 	movw	r1, #845	; 0x34d
 80045d4:	4812      	ldr	r0, [pc, #72]	; (8004620 <HAL_RCC_ClockConfig+0x33c>)
 80045d6:	f7fc fe97 	bl	8001308 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <HAL_RCC_ClockConfig+0x340>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	490e      	ldr	r1, [pc, #56]	; (8004624 <HAL_RCC_ClockConfig+0x340>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045ee:	f000 f821 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 80045f2:	4602      	mov	r2, r0
 80045f4:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <HAL_RCC_ClockConfig+0x340>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	490a      	ldr	r1, [pc, #40]	; (8004628 <HAL_RCC_ClockConfig+0x344>)
 8004600:	5ccb      	ldrb	r3, [r1, r3]
 8004602:	fa22 f303 	lsr.w	r3, r2, r3
 8004606:	4a09      	ldr	r2, [pc, #36]	; (800462c <HAL_RCC_ClockConfig+0x348>)
 8004608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800460a:	4b09      	ldr	r3, [pc, #36]	; (8004630 <HAL_RCC_ClockConfig+0x34c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f7fc febe 	bl	8001390 <HAL_InitTick>

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	0800d7e8 	.word	0x0800d7e8
 8004624:	40023800 	.word	0x40023800
 8004628:	0800d998 	.word	0x0800d998
 800462c:	20000000 	.word	0x20000000
 8004630:	20000004 	.word	0x20000004

08004634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004638:	b094      	sub	sp, #80	; 0x50
 800463a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	647b      	str	r3, [r7, #68]	; 0x44
 8004640:	2300      	movs	r3, #0
 8004642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004644:	2300      	movs	r3, #0
 8004646:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800464c:	4b79      	ldr	r3, [pc, #484]	; (8004834 <HAL_RCC_GetSysClockFreq+0x200>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 030c 	and.w	r3, r3, #12
 8004654:	2b08      	cmp	r3, #8
 8004656:	d00d      	beq.n	8004674 <HAL_RCC_GetSysClockFreq+0x40>
 8004658:	2b08      	cmp	r3, #8
 800465a:	f200 80e1 	bhi.w	8004820 <HAL_RCC_GetSysClockFreq+0x1ec>
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_RCC_GetSysClockFreq+0x34>
 8004662:	2b04      	cmp	r3, #4
 8004664:	d003      	beq.n	800466e <HAL_RCC_GetSysClockFreq+0x3a>
 8004666:	e0db      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004668:	4b73      	ldr	r3, [pc, #460]	; (8004838 <HAL_RCC_GetSysClockFreq+0x204>)
 800466a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800466c:	e0db      	b.n	8004826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800466e:	4b73      	ldr	r3, [pc, #460]	; (800483c <HAL_RCC_GetSysClockFreq+0x208>)
 8004670:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004672:	e0d8      	b.n	8004826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004674:	4b6f      	ldr	r3, [pc, #444]	; (8004834 <HAL_RCC_GetSysClockFreq+0x200>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800467c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800467e:	4b6d      	ldr	r3, [pc, #436]	; (8004834 <HAL_RCC_GetSysClockFreq+0x200>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d063      	beq.n	8004752 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800468a:	4b6a      	ldr	r3, [pc, #424]	; (8004834 <HAL_RCC_GetSysClockFreq+0x200>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	099b      	lsrs	r3, r3, #6
 8004690:	2200      	movs	r2, #0
 8004692:	63bb      	str	r3, [r7, #56]	; 0x38
 8004694:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469c:	633b      	str	r3, [r7, #48]	; 0x30
 800469e:	2300      	movs	r3, #0
 80046a0:	637b      	str	r3, [r7, #52]	; 0x34
 80046a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046a6:	4622      	mov	r2, r4
 80046a8:	462b      	mov	r3, r5
 80046aa:	f04f 0000 	mov.w	r0, #0
 80046ae:	f04f 0100 	mov.w	r1, #0
 80046b2:	0159      	lsls	r1, r3, #5
 80046b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046b8:	0150      	lsls	r0, r2, #5
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4621      	mov	r1, r4
 80046c0:	1a51      	subs	r1, r2, r1
 80046c2:	6139      	str	r1, [r7, #16]
 80046c4:	4629      	mov	r1, r5
 80046c6:	eb63 0301 	sbc.w	r3, r3, r1
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046d8:	4659      	mov	r1, fp
 80046da:	018b      	lsls	r3, r1, #6
 80046dc:	4651      	mov	r1, sl
 80046de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046e2:	4651      	mov	r1, sl
 80046e4:	018a      	lsls	r2, r1, #6
 80046e6:	4651      	mov	r1, sl
 80046e8:	ebb2 0801 	subs.w	r8, r2, r1
 80046ec:	4659      	mov	r1, fp
 80046ee:	eb63 0901 	sbc.w	r9, r3, r1
 80046f2:	f04f 0200 	mov.w	r2, #0
 80046f6:	f04f 0300 	mov.w	r3, #0
 80046fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004706:	4690      	mov	r8, r2
 8004708:	4699      	mov	r9, r3
 800470a:	4623      	mov	r3, r4
 800470c:	eb18 0303 	adds.w	r3, r8, r3
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	462b      	mov	r3, r5
 8004714:	eb49 0303 	adc.w	r3, r9, r3
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004726:	4629      	mov	r1, r5
 8004728:	024b      	lsls	r3, r1, #9
 800472a:	4621      	mov	r1, r4
 800472c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004730:	4621      	mov	r1, r4
 8004732:	024a      	lsls	r2, r1, #9
 8004734:	4610      	mov	r0, r2
 8004736:	4619      	mov	r1, r3
 8004738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800473a:	2200      	movs	r2, #0
 800473c:	62bb      	str	r3, [r7, #40]	; 0x28
 800473e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004740:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004744:	f7fc fa50 	bl	8000be8 <__aeabi_uldivmod>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4613      	mov	r3, r2
 800474e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004750:	e058      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004752:	4b38      	ldr	r3, [pc, #224]	; (8004834 <HAL_RCC_GetSysClockFreq+0x200>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	099b      	lsrs	r3, r3, #6
 8004758:	2200      	movs	r2, #0
 800475a:	4618      	mov	r0, r3
 800475c:	4611      	mov	r1, r2
 800475e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004762:	623b      	str	r3, [r7, #32]
 8004764:	2300      	movs	r3, #0
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
 8004768:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800476c:	4642      	mov	r2, r8
 800476e:	464b      	mov	r3, r9
 8004770:	f04f 0000 	mov.w	r0, #0
 8004774:	f04f 0100 	mov.w	r1, #0
 8004778:	0159      	lsls	r1, r3, #5
 800477a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800477e:	0150      	lsls	r0, r2, #5
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4641      	mov	r1, r8
 8004786:	ebb2 0a01 	subs.w	sl, r2, r1
 800478a:	4649      	mov	r1, r9
 800478c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800479c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047a4:	ebb2 040a 	subs.w	r4, r2, sl
 80047a8:	eb63 050b 	sbc.w	r5, r3, fp
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	00eb      	lsls	r3, r5, #3
 80047b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047ba:	00e2      	lsls	r2, r4, #3
 80047bc:	4614      	mov	r4, r2
 80047be:	461d      	mov	r5, r3
 80047c0:	4643      	mov	r3, r8
 80047c2:	18e3      	adds	r3, r4, r3
 80047c4:	603b      	str	r3, [r7, #0]
 80047c6:	464b      	mov	r3, r9
 80047c8:	eb45 0303 	adc.w	r3, r5, r3
 80047cc:	607b      	str	r3, [r7, #4]
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047da:	4629      	mov	r1, r5
 80047dc:	028b      	lsls	r3, r1, #10
 80047de:	4621      	mov	r1, r4
 80047e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047e4:	4621      	mov	r1, r4
 80047e6:	028a      	lsls	r2, r1, #10
 80047e8:	4610      	mov	r0, r2
 80047ea:	4619      	mov	r1, r3
 80047ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ee:	2200      	movs	r2, #0
 80047f0:	61bb      	str	r3, [r7, #24]
 80047f2:	61fa      	str	r2, [r7, #28]
 80047f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047f8:	f7fc f9f6 	bl	8000be8 <__aeabi_uldivmod>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4613      	mov	r3, r2
 8004802:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004804:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <HAL_RCC_GetSysClockFreq+0x200>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	0c1b      	lsrs	r3, r3, #16
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	3301      	adds	r3, #1
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004814:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004818:	fbb2 f3f3 	udiv	r3, r2, r3
 800481c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800481e:	e002      	b.n	8004826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004820:	4b05      	ldr	r3, [pc, #20]	; (8004838 <HAL_RCC_GetSysClockFreq+0x204>)
 8004822:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004828:	4618      	mov	r0, r3
 800482a:	3750      	adds	r7, #80	; 0x50
 800482c:	46bd      	mov	sp, r7
 800482e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004832:	bf00      	nop
 8004834:	40023800 	.word	0x40023800
 8004838:	00f42400 	.word	0x00f42400
 800483c:	007a1200 	.word	0x007a1200

08004840 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004844:	4b03      	ldr	r3, [pc, #12]	; (8004854 <HAL_RCC_GetHCLKFreq+0x14>)
 8004846:	681b      	ldr	r3, [r3, #0]
}
 8004848:	4618      	mov	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	20000000 	.word	0x20000000

08004858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800485c:	f7ff fff0 	bl	8004840 <HAL_RCC_GetHCLKFreq>
 8004860:	4602      	mov	r2, r0
 8004862:	4b05      	ldr	r3, [pc, #20]	; (8004878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	0a9b      	lsrs	r3, r3, #10
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	4903      	ldr	r1, [pc, #12]	; (800487c <HAL_RCC_GetPCLK1Freq+0x24>)
 800486e:	5ccb      	ldrb	r3, [r1, r3]
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004874:	4618      	mov	r0, r3
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40023800 	.word	0x40023800
 800487c:	0800d9a8 	.word	0x0800d9a8

08004880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004884:	f7ff ffdc 	bl	8004840 <HAL_RCC_GetHCLKFreq>
 8004888:	4602      	mov	r2, r0
 800488a:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	0b5b      	lsrs	r3, r3, #13
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	4903      	ldr	r1, [pc, #12]	; (80048a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004896:	5ccb      	ldrb	r3, [r1, r3]
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800489c:	4618      	mov	r0, r3
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40023800 	.word	0x40023800
 80048a4:	0800d9a8 	.word	0x0800d9a8

080048a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	220f      	movs	r2, #15
 80048b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048b8:	4b12      	ldr	r3, [pc, #72]	; (8004904 <HAL_RCC_GetClockConfig+0x5c>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 0203 	and.w	r2, r3, #3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048c4:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <HAL_RCC_GetClockConfig+0x5c>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048d0:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <HAL_RCC_GetClockConfig+0x5c>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80048dc:	4b09      	ldr	r3, [pc, #36]	; (8004904 <HAL_RCC_GetClockConfig+0x5c>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	08db      	lsrs	r3, r3, #3
 80048e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048ea:	4b07      	ldr	r3, [pc, #28]	; (8004908 <HAL_RCC_GetClockConfig+0x60>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 020f 	and.w	r2, r3, #15
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	601a      	str	r2, [r3, #0]
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	40023800 	.word	0x40023800
 8004908:	40023c00 	.word	0x40023c00

0800490c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004914:	2300      	movs	r3, #0
 8004916:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004918:	2300      	movs	r3, #0
 800491a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800491c:	2300      	movs	r3, #0
 800491e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	f040 8089 	bne.w	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	f040 8082 	bne.w	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0310 	and.w	r3, r3, #16
 800494c:	2b00      	cmp	r3, #0
 800494e:	d17b      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004958:	2b00      	cmp	r3, #0
 800495a:	d175      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004964:	2b00      	cmp	r3, #0
 8004966:	d16f      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d169      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800497c:	2b00      	cmp	r3, #0
 800497e:	d163      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004988:	2b00      	cmp	r3, #0
 800498a:	d15d      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004994:	2b00      	cmp	r3, #0
 8004996:	d157      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d151      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d14b      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d145      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d13f      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d139      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d133      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d12d      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d127      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d121      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d11b      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d115      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10f      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d109      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d103      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a40:	2172      	movs	r1, #114	; 0x72
 8004a42:	4895      	ldr	r0, [pc, #596]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a44:	f7fc fc60 	bl	8001308 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d01f      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a64:	d003      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004a66:	2178      	movs	r1, #120	; 0x78
 8004a68:	488b      	ldr	r0, [pc, #556]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a6a:	f7fc fc4d 	bl	8001308 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a6e:	4b8b      	ldr	r3, [pc, #556]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	4a8a      	ldr	r2, [pc, #552]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004a74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004a78:	6093      	str	r3, [r2, #8]
 8004a7a:	4b88      	ldr	r3, [pc, #544]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a82:	4986      	ldr	r1, [pc, #536]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8004a90:	2301      	movs	r3, #1
 8004a92:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d029      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00d      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ab0:	d008      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aba:	d003      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004abc:	2188      	movs	r1, #136	; 0x88
 8004abe:	4876      	ldr	r0, [pc, #472]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004ac0:	f7fc fc22 	bl	8001308 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ac4:	4b75      	ldr	r3, [pc, #468]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad2:	4972      	ldr	r1, [pc, #456]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ae2:	d101      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8004af0:	2301      	movs	r3, #1
 8004af2:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d029      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00d      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b10:	d008      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b1a:	d003      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004b1c:	219c      	movs	r1, #156	; 0x9c
 8004b1e:	485e      	ldr	r0, [pc, #376]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004b20:	f7fc fbf2 	bl	8001308 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b24:	4b5d      	ldr	r3, [pc, #372]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	495a      	ldr	r1, [pc, #360]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b42:	d101      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8004b44:	2301      	movs	r3, #1
 8004b46:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8004b50:	2301      	movs	r3, #1
 8004b52:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8004b60:	2301      	movs	r3, #1
 8004b62:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8186 	beq.w	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7a:	f000 80e4 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b86:	f000 80de 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	4a44      	ldr	r2, [pc, #272]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	f000 80d8 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	4a42      	ldr	r2, [pc, #264]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	f000 80d2 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	4a40      	ldr	r2, [pc, #256]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	f000 80cc 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	4a3e      	ldr	r2, [pc, #248]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	f000 80c6 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	4a3c      	ldr	r2, [pc, #240]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	f000 80c0 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	4a3a      	ldr	r2, [pc, #232]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	f000 80ba 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd6:	4a38      	ldr	r2, [pc, #224]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	f000 80b4 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be2:	4a36      	ldr	r2, [pc, #216]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	f000 80ae 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	4a34      	ldr	r2, [pc, #208]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	f000 80a8 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	4a32      	ldr	r2, [pc, #200]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	f000 80a2 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	4a30      	ldr	r2, [pc, #192]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	f000 809c 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	4a2e      	ldr	r2, [pc, #184]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	f000 8096 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	4a2c      	ldr	r2, [pc, #176]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	f000 8090 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	4a2a      	ldr	r2, [pc, #168]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	f000 808a 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	f000 8084 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	4a26      	ldr	r2, [pc, #152]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d07e      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	4a24      	ldr	r2, [pc, #144]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d079      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	4a23      	ldr	r2, [pc, #140]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d074      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	4a21      	ldr	r2, [pc, #132]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d06f      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	4a20      	ldr	r2, [pc, #128]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d06a      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	4a1e      	ldr	r2, [pc, #120]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d065      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	4a1d      	ldr	r2, [pc, #116]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d060      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c88:	4a1b      	ldr	r2, [pc, #108]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d05b      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c92:	4a1a      	ldr	r2, [pc, #104]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	e033      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004c98:	0800d844 	.word	0x0800d844
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	00020300 	.word	0x00020300
 8004ca4:	00030300 	.word	0x00030300
 8004ca8:	00040300 	.word	0x00040300
 8004cac:	00050300 	.word	0x00050300
 8004cb0:	00060300 	.word	0x00060300
 8004cb4:	00070300 	.word	0x00070300
 8004cb8:	00080300 	.word	0x00080300
 8004cbc:	00090300 	.word	0x00090300
 8004cc0:	000a0300 	.word	0x000a0300
 8004cc4:	000b0300 	.word	0x000b0300
 8004cc8:	000c0300 	.word	0x000c0300
 8004ccc:	000d0300 	.word	0x000d0300
 8004cd0:	000e0300 	.word	0x000e0300
 8004cd4:	000f0300 	.word	0x000f0300
 8004cd8:	00100300 	.word	0x00100300
 8004cdc:	00110300 	.word	0x00110300
 8004ce0:	00120300 	.word	0x00120300
 8004ce4:	00130300 	.word	0x00130300
 8004ce8:	00140300 	.word	0x00140300
 8004cec:	00150300 	.word	0x00150300
 8004cf0:	00160300 	.word	0x00160300
 8004cf4:	00170300 	.word	0x00170300
 8004cf8:	00180300 	.word	0x00180300
 8004cfc:	00190300 	.word	0x00190300
 8004d00:	d021      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d06:	4a4c      	ldr	r2, [pc, #304]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d01c      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	4a4a      	ldr	r2, [pc, #296]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d017      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1a:	4a49      	ldr	r2, [pc, #292]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d012      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d24:	4a47      	ldr	r2, [pc, #284]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00d      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	4a46      	ldr	r2, [pc, #280]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d008      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	4a44      	ldr	r2, [pc, #272]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d003      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004d3e:	21b7      	movs	r1, #183	; 0xb7
 8004d40:	4843      	ldr	r0, [pc, #268]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8004d42:	f7fc fae1 	bl	8001308 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d46:	4b43      	ldr	r3, [pc, #268]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	4a42      	ldr	r2, [pc, #264]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d50:	6413      	str	r3, [r2, #64]	; 0x40
 8004d52:	4b40      	ldr	r3, [pc, #256]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d5e:	4b3e      	ldr	r3, [pc, #248]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a3d      	ldr	r2, [pc, #244]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d6a:	f7fc fe2b 	bl	80019c4 <HAL_GetTick>
 8004d6e:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d70:	e009      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d72:	f7fc fe27 	bl	80019c4 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b64      	cmp	r3, #100	; 0x64
 8004d7e:	d902      	bls.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	f000 bd9f 	b.w	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d86:	4b34      	ldr	r3, [pc, #208]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0ef      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d92:	4b30      	ldr	r3, [pc, #192]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d036      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d02f      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004db0:	4b28      	ldr	r3, [pc, #160]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dba:	4b26      	ldr	r3, [pc, #152]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbe:	4a25      	ldr	r2, [pc, #148]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dc6:	4b23      	ldr	r3, [pc, #140]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dca:	4a22      	ldr	r2, [pc, #136]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004dd2:	4a20      	ldr	r2, [pc, #128]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dd8:	4b1e      	ldr	r3, [pc, #120]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d115      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de4:	f7fc fdee 	bl	80019c4 <HAL_GetTick>
 8004de8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dea:	e00b      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dec:	f7fc fdea 	bl	80019c4 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d902      	bls.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	f000 bd60 	b.w	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e04:	4b13      	ldr	r3, [pc, #76]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0ed      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e1c:	d120      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e2a:	4b0c      	ldr	r3, [pc, #48]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004e2c:	400b      	ands	r3, r1
 8004e2e:	4909      	ldr	r1, [pc, #36]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	608b      	str	r3, [r1, #8]
 8004e34:	e01a      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x560>
 8004e36:	bf00      	nop
 8004e38:	001a0300 	.word	0x001a0300
 8004e3c:	001b0300 	.word	0x001b0300
 8004e40:	001c0300 	.word	0x001c0300
 8004e44:	001d0300 	.word	0x001d0300
 8004e48:	001e0300 	.word	0x001e0300
 8004e4c:	001f0300 	.word	0x001f0300
 8004e50:	0800d844 	.word	0x0800d844
 8004e54:	40023800 	.word	0x40023800
 8004e58:	40007000 	.word	0x40007000
 8004e5c:	0ffffcff 	.word	0x0ffffcff
 8004e60:	4b9a      	ldr	r3, [pc, #616]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	4a99      	ldr	r2, [pc, #612]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004e66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e6a:	6093      	str	r3, [r2, #8]
 8004e6c:	4b97      	ldr	r3, [pc, #604]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004e6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e78:	4994      	ldr	r1, [pc, #592]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0310 	and.w	r3, r3, #16
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d01d      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d008      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e9a:	d003      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004e9c:	21f1      	movs	r1, #241	; 0xf1
 8004e9e:	488c      	ldr	r0, [pc, #560]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004ea0:	f7fc fa32 	bl	8001308 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ea4:	4b89      	ldr	r3, [pc, #548]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eaa:	4a88      	ldr	r2, [pc, #544]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004eac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eb0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004eb4:	4b85      	ldr	r3, [pc, #532]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004eb6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	4983      	ldr	r1, [pc, #524]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d01c      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00d      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee2:	d008      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eec:	d003      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004eee:	21fb      	movs	r1, #251	; 0xfb
 8004ef0:	4877      	ldr	r0, [pc, #476]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004ef2:	f7fc fa09 	bl	8001308 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ef6:	4b75      	ldr	r3, [pc, #468]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f04:	4971      	ldr	r1, [pc, #452]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d01d      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00e      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f28:	d009      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f32:	d004      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004f34:	f240 1105 	movw	r1, #261	; 0x105
 8004f38:	4865      	ldr	r0, [pc, #404]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004f3a:	f7fc f9e5 	bl	8001308 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f3e:	4b63      	ldr	r3, [pc, #396]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f4c:	495f      	ldr	r1, [pc, #380]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01d      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00e      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f70:	d009      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f7a:	d004      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004f7c:	f240 110f 	movw	r1, #271	; 0x10f
 8004f80:	4853      	ldr	r0, [pc, #332]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004f82:	f7fc f9c1 	bl	8001308 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f86:	4b51      	ldr	r3, [pc, #324]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f94:	494d      	ldr	r1, [pc, #308]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01d      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00e      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fb8:	d009      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fc2:	d004      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004fc4:	f240 1119 	movw	r1, #281	; 0x119
 8004fc8:	4841      	ldr	r0, [pc, #260]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004fca:	f7fc f99d 	bl	8001308 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fce:	4b3f      	ldr	r3, [pc, #252]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fdc:	493b      	ldr	r1, [pc, #236]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d01f      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d010      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d00c      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005004:	2b03      	cmp	r3, #3
 8005006:	d008      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500c:	2b02      	cmp	r3, #2
 800500e:	d004      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8005010:	f240 1123 	movw	r1, #291	; 0x123
 8005014:	482e      	ldr	r0, [pc, #184]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005016:	f7fc f977 	bl	8001308 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800501a:	4b2c      	ldr	r3, [pc, #176]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800501c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005020:	f023 0203 	bic.w	r2, r3, #3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005028:	4928      	ldr	r1, [pc, #160]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800502a:	4313      	orrs	r3, r2
 800502c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01f      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005040:	2b00      	cmp	r3, #0
 8005042:	d010      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005048:	2b04      	cmp	r3, #4
 800504a:	d00c      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005050:	2b0c      	cmp	r3, #12
 8005052:	d008      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005058:	2b08      	cmp	r3, #8
 800505a:	d004      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 800505c:	f240 112d 	movw	r1, #301	; 0x12d
 8005060:	481b      	ldr	r0, [pc, #108]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005062:	f7fc f951 	bl	8001308 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005066:	4b19      	ldr	r3, [pc, #100]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506c:	f023 020c 	bic.w	r2, r3, #12
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005074:	4915      	ldr	r1, [pc, #84]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d025      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800508c:	2b00      	cmp	r3, #0
 800508e:	d010      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005094:	2b10      	cmp	r3, #16
 8005096:	d00c      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509c:	2b30      	cmp	r3, #48	; 0x30
 800509e:	d008      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	d004      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80050a8:	f240 1137 	movw	r1, #311	; 0x137
 80050ac:	4808      	ldr	r0, [pc, #32]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80050ae:	f7fc f92b 	bl	8001308 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c0:	4902      	ldr	r1, [pc, #8]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050c8:	e004      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 80050ca:	bf00      	nop
 80050cc:	40023800 	.word	0x40023800
 80050d0:	0800d844 	.word	0x0800d844
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01f      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d010      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ec:	2b40      	cmp	r3, #64	; 0x40
 80050ee:	d00c      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f4:	2bc0      	cmp	r3, #192	; 0xc0
 80050f6:	d008      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050fc:	2b80      	cmp	r3, #128	; 0x80
 80050fe:	d004      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8005100:	f240 1141 	movw	r1, #321	; 0x141
 8005104:	48a0      	ldr	r0, [pc, #640]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005106:	f7fc f8ff 	bl	8001308 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800510a:	4ba0      	ldr	r3, [pc, #640]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800510c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005110:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005118:	499c      	ldr	r1, [pc, #624]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005128:	2b00      	cmp	r3, #0
 800512a:	d022      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005130:	2b00      	cmp	r3, #0
 8005132:	d013      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800513c:	d00e      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x850>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005146:	d009      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005150:	d004      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8005152:	f240 114b 	movw	r1, #331	; 0x14b
 8005156:	488c      	ldr	r0, [pc, #560]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005158:	f7fc f8d6 	bl	8001308 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800515c:	4b8b      	ldr	r3, [pc, #556]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800515e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005162:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516a:	4988      	ldr	r1, [pc, #544]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800517a:	2b00      	cmp	r3, #0
 800517c:	d022      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005182:	2b00      	cmp	r3, #0
 8005184:	d013      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800518e:	d00e      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005194:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005198:	d009      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051a2:	d004      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80051a4:	f240 1155 	movw	r1, #341	; 0x155
 80051a8:	4877      	ldr	r0, [pc, #476]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80051aa:	f7fc f8ad 	bl	8001308 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80051ae:	4b77      	ldr	r3, [pc, #476]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80051b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051bc:	4973      	ldr	r1, [pc, #460]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d022      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d013      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e0:	d00e      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051ea:	d009      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f4:	d004      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80051f6:	f240 115f 	movw	r1, #351	; 0x15f
 80051fa:	4863      	ldr	r0, [pc, #396]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80051fc:	f7fc f884 	bl	8001308 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005200:	4b62      	ldr	r3, [pc, #392]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005206:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800520e:	495f      	ldr	r1, [pc, #380]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d022      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005226:	2b00      	cmp	r3, #0
 8005228:	d013      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800522e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005232:	d00e      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005238:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800523c:	d009      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005246:	d004      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8005248:	f240 1169 	movw	r1, #361	; 0x169
 800524c:	484e      	ldr	r0, [pc, #312]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800524e:	f7fc f85b 	bl	8001308 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005252:	4b4e      	ldr	r3, [pc, #312]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005258:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005260:	494a      	ldr	r1, [pc, #296]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005262:	4313      	orrs	r3, r2
 8005264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d018      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005278:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800527c:	d008      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005282:	2b00      	cmp	r3, #0
 8005284:	d004      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005286:	f240 1173 	movw	r1, #371	; 0x173
 800528a:	483f      	ldr	r0, [pc, #252]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800528c:	f7fc f83c 	bl	8001308 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005290:	4b3e      	ldr	r3, [pc, #248]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005296:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800529e:	493b      	ldr	r1, [pc, #236]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d01f      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052ba:	d008      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d004      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80052c4:	f240 117d 	movw	r1, #381	; 0x17d
 80052c8:	482f      	ldr	r0, [pc, #188]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80052ca:	f7fc f81d 	bl	8001308 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80052ce:	4b2f      	ldr	r3, [pc, #188]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80052d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052dc:	492b      	ldr	r1, [pc, #172]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052ec:	d101      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 80052ee:	2301      	movs	r3, #1
 80052f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 80052fe:	2301      	movs	r3, #1
 8005300:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d022      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005312:	2b00      	cmp	r3, #0
 8005314:	d013      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800531a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800531e:	d00e      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005324:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005328:	d009      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800532e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005332:	d004      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8005334:	f240 1195 	movw	r1, #405	; 0x195
 8005338:	4813      	ldr	r0, [pc, #76]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800533a:	f7fb ffe5 	bl	8001308 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800533e:	4b13      	ldr	r3, [pc, #76]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005344:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800534c:	490f      	ldr	r1, [pc, #60]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800534e:	4313      	orrs	r3, r2
 8005350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d020      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005366:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800536a:	d009      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005372:	2b00      	cmp	r3, #0
 8005374:	d004      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005376:	f240 119f 	movw	r1, #415	; 0x19f
 800537a:	4803      	ldr	r0, [pc, #12]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800537c:	f7fb ffc4 	bl	8001308 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005380:	4b02      	ldr	r3, [pc, #8]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005386:	e003      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8005388:	0800d844 	.word	0x0800d844
 800538c:	40023800 	.word	0x40023800
 8005390:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800539a:	4910      	ldr	r1, [pc, #64]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d006      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8155 	beq.w	8005660 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053b6:	4b09      	ldr	r3, [pc, #36]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a08      	ldr	r2, [pc, #32]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80053bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053c2:	f7fc faff 	bl	80019c4 <HAL_GetTick>
 80053c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053c8:	e00a      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053ca:	f7fc fafb 	bl	80019c4 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b64      	cmp	r3, #100	; 0x64
 80053d6:	d903      	bls.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e273      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 80053dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053e0:	4b9a      	ldr	r3, [pc, #616]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1ee      	bne.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b31      	cmp	r3, #49	; 0x31
 80053f2:	d904      	bls.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80053fc:	d904      	bls.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 80053fe:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8005402:	4893      	ldr	r0, [pc, #588]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005404:	f7fb ff80 	bl	8001308 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d02e      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005418:	2b00      	cmp	r3, #0
 800541a:	d12a      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d903      	bls.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xb20>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	2b07      	cmp	r3, #7
 800542a:	d904      	bls.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800542c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8005430:	4887      	ldr	r0, [pc, #540]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005432:	f7fb ff69 	bl	8001308 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005436:	4b85      	ldr	r3, [pc, #532]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800543c:	0c1b      	lsrs	r3, r3, #16
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005444:	4b81      	ldr	r3, [pc, #516]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800544a:	0e1b      	lsrs	r3, r3, #24
 800544c:	f003 030f 	and.w	r3, r3, #15
 8005450:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	019a      	lsls	r2, r3, #6
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	041b      	lsls	r3, r3, #16
 800545c:	431a      	orrs	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	061b      	lsls	r3, r3, #24
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	071b      	lsls	r3, r3, #28
 800546a:	4978      	ldr	r1, [pc, #480]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d004      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005486:	d00a      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005490:	2b00      	cmp	r3, #0
 8005492:	d048      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800549c:	d143      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d903      	bls.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xba2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	2b0f      	cmp	r3, #15
 80054ac:	d904      	bls.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80054ae:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80054b2:	4867      	ldr	r0, [pc, #412]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80054b4:	f7fb ff28 	bl	8001308 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d904      	bls.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 80054c8:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 80054cc:	4860      	ldr	r0, [pc, #384]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80054ce:	f7fb ff1b 	bl	8001308 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80054d2:	4b5e      	ldr	r3, [pc, #376]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80054d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054d8:	0c1b      	lsrs	r3, r3, #16
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054e0:	4b5a      	ldr	r3, [pc, #360]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80054e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054e6:	0f1b      	lsrs	r3, r3, #28
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	019a      	lsls	r2, r3, #6
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	041b      	lsls	r3, r3, #16
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	061b      	lsls	r3, r3, #24
 8005500:	431a      	orrs	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	071b      	lsls	r3, r3, #28
 8005506:	4951      	ldr	r1, [pc, #324]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800550e:	4b4f      	ldr	r3, [pc, #316]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005514:	f023 021f 	bic.w	r2, r3, #31
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	3b01      	subs	r3, #1
 800551e:	494b      	ldr	r1, [pc, #300]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d032      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d010      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d00c      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	2b02      	cmp	r3, #2
 8005548:	d008      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b03      	cmp	r3, #3
 8005550:	d004      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8005552:	f240 2105 	movw	r1, #517	; 0x205
 8005556:	483e      	ldr	r0, [pc, #248]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005558:	f7fb fed6 	bl	8001308 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800555c:	4b3b      	ldr	r3, [pc, #236]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800555e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005562:	0e1b      	lsrs	r3, r3, #24
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800556a:	4b38      	ldr	r3, [pc, #224]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800556c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005570:	0f1b      	lsrs	r3, r3, #28
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	019a      	lsls	r2, r3, #6
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	041b      	lsls	r3, r3, #16
 8005584:	431a      	orrs	r2, r3
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	061b      	lsls	r3, r3, #24
 800558a:	431a      	orrs	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	071b      	lsls	r3, r3, #28
 8005590:	492e      	ldr	r1, [pc, #184]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d040      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d010      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d00c      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d008      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d004      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80055c4:	f44f 7105 	mov.w	r1, #532	; 0x214
 80055c8:	4821      	ldr	r0, [pc, #132]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80055ca:	f7fb fe9d 	bl	8001308 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d903      	bls.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	2b07      	cmp	r3, #7
 80055dc:	d904      	bls.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80055de:	f240 2115 	movw	r1, #533	; 0x215
 80055e2:	481b      	ldr	r0, [pc, #108]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80055e4:	f7fb fe90 	bl	8001308 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d903      	bls.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	2b0f      	cmp	r3, #15
 80055f6:	d904      	bls.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 80055f8:	f240 2116 	movw	r1, #534	; 0x216
 80055fc:	4814      	ldr	r0, [pc, #80]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80055fe:	f7fb fe83 	bl	8001308 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	019a      	lsls	r2, r3, #6
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	041b      	lsls	r3, r3, #16
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	061b      	lsls	r3, r3, #24
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	071b      	lsls	r3, r3, #28
 800561e:	490b      	ldr	r1, [pc, #44]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005626:	4b09      	ldr	r3, [pc, #36]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a08      	ldr	r2, [pc, #32]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800562c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005632:	f7fc f9c7 	bl	80019c4 <HAL_GetTick>
 8005636:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005638:	e00c      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800563a:	f7fc f9c3 	bl	80019c4 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b64      	cmp	r3, #100	; 0x64
 8005646:	d905      	bls.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e13b      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 800564c:	40023800 	.word	0x40023800
 8005650:	0800d844 	.word	0x0800d844
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005654:	4b9d      	ldr	r3, [pc, #628]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0ec      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	2b01      	cmp	r3, #1
 8005664:	f040 812d 	bne.w	80058c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005668:	4b98      	ldr	r3, [pc, #608]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a97      	ldr	r2, [pc, #604]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800566e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005674:	f7fc f9a6 	bl	80019c4 <HAL_GetTick>
 8005678:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800567a:	e008      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800567c:	f7fc f9a2 	bl	80019c4 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b64      	cmp	r3, #100	; 0x64
 8005688:	d901      	bls.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e11a      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800568e:	4b8f      	ldr	r3, [pc, #572]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800569a:	d0ef      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	2b31      	cmp	r3, #49	; 0x31
 80056a2:	d904      	bls.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xda2>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80056ac:	d904      	bls.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80056ae:	f44f 7111 	mov.w	r1, #580	; 0x244
 80056b2:	4887      	ldr	r0, [pc, #540]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80056b4:	f7fb fe28 	bl	8001308 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d009      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d048      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d144      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d903      	bls.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	2b0f      	cmp	r3, #15
 80056ee:	d904      	bls.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xdee>
 80056f0:	f240 214b 	movw	r1, #587	; 0x24b
 80056f4:	4876      	ldr	r0, [pc, #472]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80056f6:	f7fb fe07 	bl	8001308 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	2b20      	cmp	r3, #32
 8005708:	d904      	bls.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 800570a:	f240 214d 	movw	r1, #589	; 0x24d
 800570e:	4870      	ldr	r0, [pc, #448]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005710:	f7fb fdfa 	bl	8001308 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005714:	4b6d      	ldr	r3, [pc, #436]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571a:	0c1b      	lsrs	r3, r3, #16
 800571c:	f003 0303 	and.w	r3, r3, #3
 8005720:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005722:	4b6a      	ldr	r3, [pc, #424]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005728:	0f1b      	lsrs	r3, r3, #28
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	019a      	lsls	r2, r3, #6
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	041b      	lsls	r3, r3, #16
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	061b      	lsls	r3, r3, #24
 8005742:	431a      	orrs	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	071b      	lsls	r3, r3, #28
 8005748:	4960      	ldr	r1, [pc, #384]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005750:	4b5e      	ldr	r3, [pc, #376]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005752:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005756:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	3b01      	subs	r3, #1
 8005760:	021b      	lsls	r3, r3, #8
 8005762:	495a      	ldr	r1, [pc, #360]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005764:	4313      	orrs	r3, r2
 8005766:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d037      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xeda>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800577a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800577e:	d132      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d010      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d00c      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d008      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	2b03      	cmp	r3, #3
 800579e:	d004      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80057a0:	f44f 7118 	mov.w	r1, #608	; 0x260
 80057a4:	484a      	ldr	r0, [pc, #296]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80057a6:	f7fb fdaf 	bl	8001308 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057aa:	4b48      	ldr	r3, [pc, #288]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80057ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b0:	0e1b      	lsrs	r3, r3, #24
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057b8:	4b44      	ldr	r3, [pc, #272]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80057ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057be:	0f1b      	lsrs	r3, r3, #28
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	019a      	lsls	r2, r3, #6
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	041b      	lsls	r3, r3, #16
 80057d2:	431a      	orrs	r2, r3
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	061b      	lsls	r3, r3, #24
 80057d8:	431a      	orrs	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	071b      	lsls	r3, r3, #28
 80057de:	493b      	ldr	r1, [pc, #236]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d04d      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d903      	bls.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	2b07      	cmp	r3, #7
 8005800:	d904      	bls.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8005802:	f240 216f 	movw	r1, #623	; 0x26f
 8005806:	4832      	ldr	r0, [pc, #200]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005808:	f7fb fd7e 	bl	8001308 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	2b00      	cmp	r3, #0
 8005812:	d013      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800581c:	d00e      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005822:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005826:	d009      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005830:	d004      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8005832:	f44f 711c 	mov.w	r1, #624	; 0x270
 8005836:	4826      	ldr	r0, [pc, #152]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005838:	f7fb fd66 	bl	8001308 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800583c:	4b23      	ldr	r3, [pc, #140]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800583e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005842:	0e1b      	lsrs	r3, r3, #24
 8005844:	f003 030f 	and.w	r3, r3, #15
 8005848:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800584a:	4b20      	ldr	r3, [pc, #128]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800584c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005850:	0c1b      	lsrs	r3, r3, #16
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	019a      	lsls	r2, r3, #6
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	041b      	lsls	r3, r3, #16
 8005862:	431a      	orrs	r2, r3
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	061b      	lsls	r3, r3, #24
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	071b      	lsls	r3, r3, #28
 8005870:	4916      	ldr	r1, [pc, #88]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005872:	4313      	orrs	r3, r2
 8005874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005878:	4b14      	ldr	r3, [pc, #80]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800587a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800587e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005886:	4911      	ldr	r1, [pc, #68]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800588e:	4b0f      	ldr	r3, [pc, #60]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a0e      	ldr	r2, [pc, #56]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005898:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800589a:	f7fc f893 	bl	80019c4 <HAL_GetTick>
 800589e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058a0:	e008      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058a2:	f7fc f88f 	bl	80019c4 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b64      	cmp	r3, #100	; 0x64
 80058ae:	d901      	bls.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e007      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058b4:	4b05      	ldr	r3, [pc, #20]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058c0:	d1ef      	bne.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3720      	adds	r7, #32
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40023800 	.word	0x40023800
 80058d0:	0800d844 	.word	0x0800d844

080058d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e0f5      	b.n	8005ad2 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a7c      	ldr	r2, [pc, #496]	; (8005adc <HAL_TIM_Base_Init+0x208>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d045      	beq.n	800597c <HAL_TIM_Base_Init+0xa8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f8:	d040      	beq.n	800597c <HAL_TIM_Base_Init+0xa8>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a78      	ldr	r2, [pc, #480]	; (8005ae0 <HAL_TIM_Base_Init+0x20c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d03b      	beq.n	800597c <HAL_TIM_Base_Init+0xa8>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a76      	ldr	r2, [pc, #472]	; (8005ae4 <HAL_TIM_Base_Init+0x210>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d036      	beq.n	800597c <HAL_TIM_Base_Init+0xa8>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a75      	ldr	r2, [pc, #468]	; (8005ae8 <HAL_TIM_Base_Init+0x214>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d031      	beq.n	800597c <HAL_TIM_Base_Init+0xa8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a73      	ldr	r2, [pc, #460]	; (8005aec <HAL_TIM_Base_Init+0x218>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d02c      	beq.n	800597c <HAL_TIM_Base_Init+0xa8>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a72      	ldr	r2, [pc, #456]	; (8005af0 <HAL_TIM_Base_Init+0x21c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d027      	beq.n	800597c <HAL_TIM_Base_Init+0xa8>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a70      	ldr	r2, [pc, #448]	; (8005af4 <HAL_TIM_Base_Init+0x220>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d022      	beq.n	800597c <HAL_TIM_Base_Init+0xa8>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a6f      	ldr	r2, [pc, #444]	; (8005af8 <HAL_TIM_Base_Init+0x224>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d01d      	beq.n	800597c <HAL_TIM_Base_Init+0xa8>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a6d      	ldr	r2, [pc, #436]	; (8005afc <HAL_TIM_Base_Init+0x228>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d018      	beq.n	800597c <HAL_TIM_Base_Init+0xa8>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a6c      	ldr	r2, [pc, #432]	; (8005b00 <HAL_TIM_Base_Init+0x22c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d013      	beq.n	800597c <HAL_TIM_Base_Init+0xa8>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a6a      	ldr	r2, [pc, #424]	; (8005b04 <HAL_TIM_Base_Init+0x230>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00e      	beq.n	800597c <HAL_TIM_Base_Init+0xa8>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a69      	ldr	r2, [pc, #420]	; (8005b08 <HAL_TIM_Base_Init+0x234>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d009      	beq.n	800597c <HAL_TIM_Base_Init+0xa8>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a67      	ldr	r2, [pc, #412]	; (8005b0c <HAL_TIM_Base_Init+0x238>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d004      	beq.n	800597c <HAL_TIM_Base_Init+0xa8>
 8005972:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005976:	4866      	ldr	r0, [pc, #408]	; (8005b10 <HAL_TIM_Base_Init+0x23c>)
 8005978:	f7fb fcc6 	bl	8001308 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d014      	beq.n	80059ae <HAL_TIM_Base_Init+0xda>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b10      	cmp	r3, #16
 800598a:	d010      	beq.n	80059ae <HAL_TIM_Base_Init+0xda>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2b20      	cmp	r3, #32
 8005992:	d00c      	beq.n	80059ae <HAL_TIM_Base_Init+0xda>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	2b40      	cmp	r3, #64	; 0x40
 800599a:	d008      	beq.n	80059ae <HAL_TIM_Base_Init+0xda>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	2b60      	cmp	r3, #96	; 0x60
 80059a2:	d004      	beq.n	80059ae <HAL_TIM_Base_Init+0xda>
 80059a4:	f240 1117 	movw	r1, #279	; 0x117
 80059a8:	4859      	ldr	r0, [pc, #356]	; (8005b10 <HAL_TIM_Base_Init+0x23c>)
 80059aa:	f7fb fcad 	bl	8001308 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00e      	beq.n	80059d4 <HAL_TIM_Base_Init+0x100>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059be:	d009      	beq.n	80059d4 <HAL_TIM_Base_Init+0x100>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059c8:	d004      	beq.n	80059d4 <HAL_TIM_Base_Init+0x100>
 80059ca:	f44f 718c 	mov.w	r1, #280	; 0x118
 80059ce:	4850      	ldr	r0, [pc, #320]	; (8005b10 <HAL_TIM_Base_Init+0x23c>)
 80059d0:	f7fb fc9a 	bl	8001308 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059dc:	d004      	beq.n	80059e8 <HAL_TIM_Base_Init+0x114>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a41      	ldr	r2, [pc, #260]	; (8005ae8 <HAL_TIM_Base_Init+0x214>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d107      	bne.n	80059f8 <HAL_TIM_Base_Init+0x124>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	bf14      	ite	ne
 80059f0:	2301      	movne	r3, #1
 80059f2:	2300      	moveq	r3, #0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	e00e      	b.n	8005a16 <HAL_TIM_Base_Init+0x142>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d006      	beq.n	8005a0e <HAL_TIM_Base_Init+0x13a>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a08:	d201      	bcs.n	8005a0e <HAL_TIM_Base_Init+0x13a>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <HAL_TIM_Base_Init+0x13c>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d104      	bne.n	8005a24 <HAL_TIM_Base_Init+0x150>
 8005a1a:	f240 1119 	movw	r1, #281	; 0x119
 8005a1e:	483c      	ldr	r0, [pc, #240]	; (8005b10 <HAL_TIM_Base_Init+0x23c>)
 8005a20:	f7fb fc72 	bl	8001308 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d008      	beq.n	8005a3e <HAL_TIM_Base_Init+0x16a>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	2b80      	cmp	r3, #128	; 0x80
 8005a32:	d004      	beq.n	8005a3e <HAL_TIM_Base_Init+0x16a>
 8005a34:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8005a38:	4835      	ldr	r0, [pc, #212]	; (8005b10 <HAL_TIM_Base_Init+0x23c>)
 8005a3a:	f7fb fc65 	bl	8001308 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f85e 	bl	8005b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3304      	adds	r3, #4
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	f000 fa72 	bl	8005f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	40000400 	.word	0x40000400
 8005ae4:	40000800 	.word	0x40000800
 8005ae8:	40000c00 	.word	0x40000c00
 8005aec:	40001000 	.word	0x40001000
 8005af0:	40001400 	.word	0x40001400
 8005af4:	40010400 	.word	0x40010400
 8005af8:	40014000 	.word	0x40014000
 8005afc:	40014400 	.word	0x40014400
 8005b00:	40014800 	.word	0x40014800
 8005b04:	40001800 	.word	0x40001800
 8005b08:	40001c00 	.word	0x40001c00
 8005b0c:	40002000 	.word	0x40002000
 8005b10:	0800d8a4 	.word	0x0800d8a4

08005b14 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a54      	ldr	r2, [pc, #336]	; (8005c88 <HAL_TIM_Base_Start_IT+0x160>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d045      	beq.n	8005bc6 <HAL_TIM_Base_Start_IT+0x9e>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b42:	d040      	beq.n	8005bc6 <HAL_TIM_Base_Start_IT+0x9e>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a50      	ldr	r2, [pc, #320]	; (8005c8c <HAL_TIM_Base_Start_IT+0x164>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d03b      	beq.n	8005bc6 <HAL_TIM_Base_Start_IT+0x9e>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a4f      	ldr	r2, [pc, #316]	; (8005c90 <HAL_TIM_Base_Start_IT+0x168>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d036      	beq.n	8005bc6 <HAL_TIM_Base_Start_IT+0x9e>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a4d      	ldr	r2, [pc, #308]	; (8005c94 <HAL_TIM_Base_Start_IT+0x16c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d031      	beq.n	8005bc6 <HAL_TIM_Base_Start_IT+0x9e>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a4c      	ldr	r2, [pc, #304]	; (8005c98 <HAL_TIM_Base_Start_IT+0x170>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d02c      	beq.n	8005bc6 <HAL_TIM_Base_Start_IT+0x9e>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a4a      	ldr	r2, [pc, #296]	; (8005c9c <HAL_TIM_Base_Start_IT+0x174>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d027      	beq.n	8005bc6 <HAL_TIM_Base_Start_IT+0x9e>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a49      	ldr	r2, [pc, #292]	; (8005ca0 <HAL_TIM_Base_Start_IT+0x178>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d022      	beq.n	8005bc6 <HAL_TIM_Base_Start_IT+0x9e>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a47      	ldr	r2, [pc, #284]	; (8005ca4 <HAL_TIM_Base_Start_IT+0x17c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d01d      	beq.n	8005bc6 <HAL_TIM_Base_Start_IT+0x9e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a46      	ldr	r2, [pc, #280]	; (8005ca8 <HAL_TIM_Base_Start_IT+0x180>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d018      	beq.n	8005bc6 <HAL_TIM_Base_Start_IT+0x9e>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a44      	ldr	r2, [pc, #272]	; (8005cac <HAL_TIM_Base_Start_IT+0x184>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d013      	beq.n	8005bc6 <HAL_TIM_Base_Start_IT+0x9e>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a43      	ldr	r2, [pc, #268]	; (8005cb0 <HAL_TIM_Base_Start_IT+0x188>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d00e      	beq.n	8005bc6 <HAL_TIM_Base_Start_IT+0x9e>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a41      	ldr	r2, [pc, #260]	; (8005cb4 <HAL_TIM_Base_Start_IT+0x18c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d009      	beq.n	8005bc6 <HAL_TIM_Base_Start_IT+0x9e>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a40      	ldr	r2, [pc, #256]	; (8005cb8 <HAL_TIM_Base_Start_IT+0x190>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d004      	beq.n	8005bc6 <HAL_TIM_Base_Start_IT+0x9e>
 8005bbc:	f240 11d3 	movw	r1, #467	; 0x1d3
 8005bc0:	483e      	ldr	r0, [pc, #248]	; (8005cbc <HAL_TIM_Base_Start_IT+0x194>)
 8005bc2:	f7fb fba1 	bl	8001308 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d001      	beq.n	8005bd6 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e054      	b.n	8005c80 <HAL_TIM_Base_Start_IT+0x158>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f042 0201 	orr.w	r2, r2, #1
 8005bec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a25      	ldr	r2, [pc, #148]	; (8005c88 <HAL_TIM_Base_Start_IT+0x160>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d022      	beq.n	8005c3e <HAL_TIM_Base_Start_IT+0x116>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c00:	d01d      	beq.n	8005c3e <HAL_TIM_Base_Start_IT+0x116>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a21      	ldr	r2, [pc, #132]	; (8005c8c <HAL_TIM_Base_Start_IT+0x164>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d018      	beq.n	8005c3e <HAL_TIM_Base_Start_IT+0x116>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a1f      	ldr	r2, [pc, #124]	; (8005c90 <HAL_TIM_Base_Start_IT+0x168>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d013      	beq.n	8005c3e <HAL_TIM_Base_Start_IT+0x116>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a1e      	ldr	r2, [pc, #120]	; (8005c94 <HAL_TIM_Base_Start_IT+0x16c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00e      	beq.n	8005c3e <HAL_TIM_Base_Start_IT+0x116>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a1e      	ldr	r2, [pc, #120]	; (8005ca0 <HAL_TIM_Base_Start_IT+0x178>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d009      	beq.n	8005c3e <HAL_TIM_Base_Start_IT+0x116>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a1d      	ldr	r2, [pc, #116]	; (8005ca4 <HAL_TIM_Base_Start_IT+0x17c>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d004      	beq.n	8005c3e <HAL_TIM_Base_Start_IT+0x116>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a1d      	ldr	r2, [pc, #116]	; (8005cb0 <HAL_TIM_Base_Start_IT+0x188>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d115      	bne.n	8005c6a <HAL_TIM_Base_Start_IT+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	4b1e      	ldr	r3, [pc, #120]	; (8005cc0 <HAL_TIM_Base_Start_IT+0x198>)
 8005c46:	4013      	ands	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b06      	cmp	r3, #6
 8005c4e:	d015      	beq.n	8005c7c <HAL_TIM_Base_Start_IT+0x154>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c56:	d011      	beq.n	8005c7c <HAL_TIM_Base_Start_IT+0x154>
    {
      __HAL_TIM_ENABLE(htim);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0201 	orr.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c68:	e008      	b.n	8005c7c <HAL_TIM_Base_Start_IT+0x154>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0201 	orr.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	e000      	b.n	8005c7e <HAL_TIM_Base_Start_IT+0x156>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40000c00 	.word	0x40000c00
 8005c98:	40001000 	.word	0x40001000
 8005c9c:	40001400 	.word	0x40001400
 8005ca0:	40010400 	.word	0x40010400
 8005ca4:	40014000 	.word	0x40014000
 8005ca8:	40014400 	.word	0x40014400
 8005cac:	40014800 	.word	0x40014800
 8005cb0:	40001800 	.word	0x40001800
 8005cb4:	40001c00 	.word	0x40001c00
 8005cb8:	40002000 	.word	0x40002000
 8005cbc:	0800d8a4 	.word	0x0800d8a4
 8005cc0:	00010007 	.word	0x00010007

08005cc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d122      	bne.n	8005d20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d11b      	bne.n	8005d20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f06f 0202 	mvn.w	r2, #2
 8005cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f905 	bl	8005f16 <HAL_TIM_IC_CaptureCallback>
 8005d0c:	e005      	b.n	8005d1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f8f7 	bl	8005f02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f908 	bl	8005f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	f003 0304 	and.w	r3, r3, #4
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d122      	bne.n	8005d74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b04      	cmp	r3, #4
 8005d3a:	d11b      	bne.n	8005d74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f06f 0204 	mvn.w	r2, #4
 8005d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2202      	movs	r2, #2
 8005d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f8db 	bl	8005f16 <HAL_TIM_IC_CaptureCallback>
 8005d60:	e005      	b.n	8005d6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f8cd 	bl	8005f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f8de 	bl	8005f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	2b08      	cmp	r3, #8
 8005d80:	d122      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f003 0308 	and.w	r3, r3, #8
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d11b      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f06f 0208 	mvn.w	r2, #8
 8005d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2204      	movs	r2, #4
 8005d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f8b1 	bl	8005f16 <HAL_TIM_IC_CaptureCallback>
 8005db4:	e005      	b.n	8005dc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f8a3 	bl	8005f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f8b4 	bl	8005f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0310 	and.w	r3, r3, #16
 8005dd2:	2b10      	cmp	r3, #16
 8005dd4:	d122      	bne.n	8005e1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 0310 	and.w	r3, r3, #16
 8005de0:	2b10      	cmp	r3, #16
 8005de2:	d11b      	bne.n	8005e1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0210 	mvn.w	r2, #16
 8005dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2208      	movs	r2, #8
 8005df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f887 	bl	8005f16 <HAL_TIM_IC_CaptureCallback>
 8005e08:	e005      	b.n	8005e16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f879 	bl	8005f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f88a 	bl	8005f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d10e      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d107      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f06f 0201 	mvn.w	r2, #1
 8005e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7fb fa48 	bl	80012d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e52:	2b80      	cmp	r3, #128	; 0x80
 8005e54:	d10e      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e60:	2b80      	cmp	r3, #128	; 0x80
 8005e62:	d107      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f91a 	bl	80060a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e82:	d10e      	bne.n	8005ea2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e8e:	2b80      	cmp	r3, #128	; 0x80
 8005e90:	d107      	bne.n	8005ea2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f90d 	bl	80060bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	d10e      	bne.n	8005ece <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eba:	2b40      	cmp	r3, #64	; 0x40
 8005ebc:	d107      	bne.n	8005ece <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f838 	bl	8005f3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	d10e      	bne.n	8005efa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b20      	cmp	r3, #32
 8005ee8:	d107      	bne.n	8005efa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f06f 0220 	mvn.w	r2, #32
 8005ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f8cd 	bl	8006094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005efa:	bf00      	nop
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
	...

08005f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a40      	ldr	r2, [pc, #256]	; (8006068 <TIM_Base_SetConfig+0x114>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d013      	beq.n	8005f94 <TIM_Base_SetConfig+0x40>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f72:	d00f      	beq.n	8005f94 <TIM_Base_SetConfig+0x40>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a3d      	ldr	r2, [pc, #244]	; (800606c <TIM_Base_SetConfig+0x118>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d00b      	beq.n	8005f94 <TIM_Base_SetConfig+0x40>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a3c      	ldr	r2, [pc, #240]	; (8006070 <TIM_Base_SetConfig+0x11c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d007      	beq.n	8005f94 <TIM_Base_SetConfig+0x40>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a3b      	ldr	r2, [pc, #236]	; (8006074 <TIM_Base_SetConfig+0x120>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d003      	beq.n	8005f94 <TIM_Base_SetConfig+0x40>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a3a      	ldr	r2, [pc, #232]	; (8006078 <TIM_Base_SetConfig+0x124>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d108      	bne.n	8005fa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a2f      	ldr	r2, [pc, #188]	; (8006068 <TIM_Base_SetConfig+0x114>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d02b      	beq.n	8006006 <TIM_Base_SetConfig+0xb2>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb4:	d027      	beq.n	8006006 <TIM_Base_SetConfig+0xb2>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a2c      	ldr	r2, [pc, #176]	; (800606c <TIM_Base_SetConfig+0x118>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d023      	beq.n	8006006 <TIM_Base_SetConfig+0xb2>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a2b      	ldr	r2, [pc, #172]	; (8006070 <TIM_Base_SetConfig+0x11c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d01f      	beq.n	8006006 <TIM_Base_SetConfig+0xb2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a2a      	ldr	r2, [pc, #168]	; (8006074 <TIM_Base_SetConfig+0x120>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d01b      	beq.n	8006006 <TIM_Base_SetConfig+0xb2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a29      	ldr	r2, [pc, #164]	; (8006078 <TIM_Base_SetConfig+0x124>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d017      	beq.n	8006006 <TIM_Base_SetConfig+0xb2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a28      	ldr	r2, [pc, #160]	; (800607c <TIM_Base_SetConfig+0x128>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d013      	beq.n	8006006 <TIM_Base_SetConfig+0xb2>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a27      	ldr	r2, [pc, #156]	; (8006080 <TIM_Base_SetConfig+0x12c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00f      	beq.n	8006006 <TIM_Base_SetConfig+0xb2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a26      	ldr	r2, [pc, #152]	; (8006084 <TIM_Base_SetConfig+0x130>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d00b      	beq.n	8006006 <TIM_Base_SetConfig+0xb2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a25      	ldr	r2, [pc, #148]	; (8006088 <TIM_Base_SetConfig+0x134>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d007      	beq.n	8006006 <TIM_Base_SetConfig+0xb2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a24      	ldr	r2, [pc, #144]	; (800608c <TIM_Base_SetConfig+0x138>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d003      	beq.n	8006006 <TIM_Base_SetConfig+0xb2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a23      	ldr	r2, [pc, #140]	; (8006090 <TIM_Base_SetConfig+0x13c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d108      	bne.n	8006018 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800600c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	4313      	orrs	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	4313      	orrs	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a0a      	ldr	r2, [pc, #40]	; (8006068 <TIM_Base_SetConfig+0x114>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d003      	beq.n	800604c <TIM_Base_SetConfig+0xf8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a0c      	ldr	r2, [pc, #48]	; (8006078 <TIM_Base_SetConfig+0x124>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d103      	bne.n	8006054 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	691a      	ldr	r2, [r3, #16]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	615a      	str	r2, [r3, #20]
}
 800605a:	bf00      	nop
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	40010000 	.word	0x40010000
 800606c:	40000400 	.word	0x40000400
 8006070:	40000800 	.word	0x40000800
 8006074:	40000c00 	.word	0x40000c00
 8006078:	40010400 	.word	0x40010400
 800607c:	40014000 	.word	0x40014000
 8006080:	40014400 	.word	0x40014400
 8006084:	40014800 	.word	0x40014800
 8006088:	40001800 	.word	0x40001800
 800608c:	40001c00 	.word	0x40001c00
 8006090:	40002000 	.word	0x40002000

08006094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e09f      	b.n	8006222 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d02d      	beq.n	8006146 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a4f      	ldr	r2, [pc, #316]	; (800622c <HAL_UART_Init+0x15c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d055      	beq.n	80061a0 <HAL_UART_Init+0xd0>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a4d      	ldr	r2, [pc, #308]	; (8006230 <HAL_UART_Init+0x160>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d050      	beq.n	80061a0 <HAL_UART_Init+0xd0>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a4c      	ldr	r2, [pc, #304]	; (8006234 <HAL_UART_Init+0x164>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d04b      	beq.n	80061a0 <HAL_UART_Init+0xd0>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a4a      	ldr	r2, [pc, #296]	; (8006238 <HAL_UART_Init+0x168>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d046      	beq.n	80061a0 <HAL_UART_Init+0xd0>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a49      	ldr	r2, [pc, #292]	; (800623c <HAL_UART_Init+0x16c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d041      	beq.n	80061a0 <HAL_UART_Init+0xd0>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a47      	ldr	r2, [pc, #284]	; (8006240 <HAL_UART_Init+0x170>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d03c      	beq.n	80061a0 <HAL_UART_Init+0xd0>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a46      	ldr	r2, [pc, #280]	; (8006244 <HAL_UART_Init+0x174>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d037      	beq.n	80061a0 <HAL_UART_Init+0xd0>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a44      	ldr	r2, [pc, #272]	; (8006248 <HAL_UART_Init+0x178>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d032      	beq.n	80061a0 <HAL_UART_Init+0xd0>
 800613a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800613e:	4843      	ldr	r0, [pc, #268]	; (800624c <HAL_UART_Init+0x17c>)
 8006140:	f7fb f8e2 	bl	8001308 <assert_failed>
 8006144:	e02c      	b.n	80061a0 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a38      	ldr	r2, [pc, #224]	; (800622c <HAL_UART_Init+0x15c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d027      	beq.n	80061a0 <HAL_UART_Init+0xd0>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a36      	ldr	r2, [pc, #216]	; (8006230 <HAL_UART_Init+0x160>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d022      	beq.n	80061a0 <HAL_UART_Init+0xd0>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a35      	ldr	r2, [pc, #212]	; (8006234 <HAL_UART_Init+0x164>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d01d      	beq.n	80061a0 <HAL_UART_Init+0xd0>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a33      	ldr	r2, [pc, #204]	; (8006238 <HAL_UART_Init+0x168>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d018      	beq.n	80061a0 <HAL_UART_Init+0xd0>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a32      	ldr	r2, [pc, #200]	; (800623c <HAL_UART_Init+0x16c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d013      	beq.n	80061a0 <HAL_UART_Init+0xd0>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a30      	ldr	r2, [pc, #192]	; (8006240 <HAL_UART_Init+0x170>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00e      	beq.n	80061a0 <HAL_UART_Init+0xd0>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a2f      	ldr	r2, [pc, #188]	; (8006244 <HAL_UART_Init+0x174>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d009      	beq.n	80061a0 <HAL_UART_Init+0xd0>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a2d      	ldr	r2, [pc, #180]	; (8006248 <HAL_UART_Init+0x178>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d004      	beq.n	80061a0 <HAL_UART_Init+0xd0>
 8006196:	f240 1131 	movw	r1, #305	; 0x131
 800619a:	482c      	ldr	r0, [pc, #176]	; (800624c <HAL_UART_Init+0x17c>)
 800619c:	f7fb f8b4 	bl	8001308 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d106      	bne.n	80061b6 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7fb faa3 	bl	80016fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2224      	movs	r2, #36	; 0x24
 80061ba:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 0201 	bic.w	r2, r2, #1
 80061ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fbb5 	bl	800693c <UART_SetConfig>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e022      	b.n	8006222 <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d002      	beq.n	80061ea <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fe9f 	bl	8006f28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006208:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f042 0201 	orr.w	r2, r2, #1
 8006218:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 ffdc 	bl	80071d8 <UART_CheckIdleState>
 8006220:	4603      	mov	r3, r0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	40011000 	.word	0x40011000
 8006230:	40004400 	.word	0x40004400
 8006234:	40004800 	.word	0x40004800
 8006238:	40004c00 	.word	0x40004c00
 800623c:	40005000 	.word	0x40005000
 8006240:	40011400 	.word	0x40011400
 8006244:	40007800 	.word	0x40007800
 8006248:	40007c00 	.word	0x40007c00
 800624c:	0800d900 	.word	0x0800d900

08006250 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08a      	sub	sp, #40	; 0x28
 8006254:	af02      	add	r7, sp, #8
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	603b      	str	r3, [r7, #0]
 800625c:	4613      	mov	r3, r2
 800625e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006264:	2b20      	cmp	r3, #32
 8006266:	d171      	bne.n	800634c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d002      	beq.n	8006274 <HAL_UART_Transmit+0x24>
 800626e:	88fb      	ldrh	r3, [r7, #6]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e06a      	b.n	800634e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2221      	movs	r2, #33	; 0x21
 8006284:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006286:	f7fb fb9d 	bl	80019c4 <HAL_GetTick>
 800628a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	88fa      	ldrh	r2, [r7, #6]
 8006290:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	88fa      	ldrh	r2, [r7, #6]
 8006298:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a4:	d108      	bne.n	80062b8 <HAL_UART_Transmit+0x68>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d104      	bne.n	80062b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80062ae:	2300      	movs	r3, #0
 80062b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	61bb      	str	r3, [r7, #24]
 80062b6:	e003      	b.n	80062c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062bc:	2300      	movs	r3, #0
 80062be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062c0:	e02c      	b.n	800631c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2200      	movs	r2, #0
 80062ca:	2180      	movs	r1, #128	; 0x80
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 ffba 	bl	8007246 <UART_WaitOnFlagUntilTimeout>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e038      	b.n	800634e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10b      	bne.n	80062fa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	3302      	adds	r3, #2
 80062f6:	61bb      	str	r3, [r7, #24]
 80062f8:	e007      	b.n	800630a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	781a      	ldrb	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	3301      	adds	r3, #1
 8006308:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006310:	b29b      	uxth	r3, r3
 8006312:	3b01      	subs	r3, #1
 8006314:	b29a      	uxth	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006322:	b29b      	uxth	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1cc      	bne.n	80062c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2200      	movs	r2, #0
 8006330:	2140      	movs	r1, #64	; 0x40
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 ff87 	bl	8007246 <UART_WaitOnFlagUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e005      	b.n	800634e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2220      	movs	r2, #32
 8006346:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	e000      	b.n	800634e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800634c:	2302      	movs	r3, #2
  }
}
 800634e:	4618      	mov	r0, r3
 8006350:	3720      	adds	r7, #32
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b0ba      	sub	sp, #232	; 0xe8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800637e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006382:	f640 030f 	movw	r3, #2063	; 0x80f
 8006386:	4013      	ands	r3, r2
 8006388:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800638c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006390:	2b00      	cmp	r3, #0
 8006392:	d115      	bne.n	80063c0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006398:	f003 0320 	and.w	r3, r3, #32
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00f      	beq.n	80063c0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a4:	f003 0320 	and.w	r3, r3, #32
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d009      	beq.n	80063c0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 8297 	beq.w	80068e4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	4798      	blx	r3
      }
      return;
 80063be:	e291      	b.n	80068e4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80063c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 8117 	beq.w	80065f8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80063ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d106      	bne.n	80063e4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80063d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80063da:	4b85      	ldr	r3, [pc, #532]	; (80065f0 <HAL_UART_IRQHandler+0x298>)
 80063dc:	4013      	ands	r3, r2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 810a 	beq.w	80065f8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d011      	beq.n	8006414 <HAL_UART_IRQHandler+0xbc>
 80063f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00b      	beq.n	8006414 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2201      	movs	r2, #1
 8006402:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800640a:	f043 0201 	orr.w	r2, r3, #1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d011      	beq.n	8006444 <HAL_UART_IRQHandler+0xec>
 8006420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00b      	beq.n	8006444 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2202      	movs	r2, #2
 8006432:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800643a:	f043 0204 	orr.w	r2, r3, #4
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b00      	cmp	r3, #0
 800644e:	d011      	beq.n	8006474 <HAL_UART_IRQHandler+0x11c>
 8006450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00b      	beq.n	8006474 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2204      	movs	r2, #4
 8006462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800646a:	f043 0202 	orr.w	r2, r3, #2
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006478:	f003 0308 	and.w	r3, r3, #8
 800647c:	2b00      	cmp	r3, #0
 800647e:	d017      	beq.n	80064b0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006484:	f003 0320 	and.w	r3, r3, #32
 8006488:	2b00      	cmp	r3, #0
 800648a:	d105      	bne.n	8006498 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800648c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006490:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00b      	beq.n	80064b0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2208      	movs	r2, #8
 800649e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064a6:	f043 0208 	orr.w	r2, r3, #8
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80064b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d012      	beq.n	80064e2 <HAL_UART_IRQHandler+0x18a>
 80064bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00c      	beq.n	80064e2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064d8:	f043 0220 	orr.w	r2, r3, #32
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 81fd 	beq.w	80068e8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80064ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f2:	f003 0320 	and.w	r3, r3, #32
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00d      	beq.n	8006516 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064fe:	f003 0320 	and.w	r3, r3, #32
 8006502:	2b00      	cmp	r3, #0
 8006504:	d007      	beq.n	8006516 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800651c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	d005      	beq.n	800653a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800652e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006532:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006536:	2b00      	cmp	r3, #0
 8006538:	d04f      	beq.n	80065da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 ff49 	bl	80073d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654a:	2b40      	cmp	r3, #64	; 0x40
 800654c:	d141      	bne.n	80065d2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3308      	adds	r3, #8
 8006554:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006558:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006564:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800656c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3308      	adds	r3, #8
 8006576:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800657a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800657e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006586:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800658a:	e841 2300 	strex	r3, r2, [r1]
 800658e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006592:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1d9      	bne.n	800654e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d013      	beq.n	80065ca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a6:	4a13      	ldr	r2, [pc, #76]	; (80065f4 <HAL_UART_IRQHandler+0x29c>)
 80065a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fb fb96 	bl	8001ce0 <HAL_DMA_Abort_IT>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d017      	beq.n	80065ea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80065c4:	4610      	mov	r0, r2
 80065c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c8:	e00f      	b.n	80065ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f9a0 	bl	8006910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d0:	e00b      	b.n	80065ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f99c 	bl	8006910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d8:	e007      	b.n	80065ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f998 	bl	8006910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80065e8:	e17e      	b.n	80068e8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ea:	bf00      	nop
    return;
 80065ec:	e17c      	b.n	80068e8 <HAL_UART_IRQHandler+0x590>
 80065ee:	bf00      	nop
 80065f0:	04000120 	.word	0x04000120
 80065f4:	0800749b 	.word	0x0800749b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	f040 814c 	bne.w	800689a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006606:	f003 0310 	and.w	r3, r3, #16
 800660a:	2b00      	cmp	r3, #0
 800660c:	f000 8145 	beq.w	800689a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006614:	f003 0310 	and.w	r3, r3, #16
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 813e 	beq.w	800689a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2210      	movs	r2, #16
 8006624:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006630:	2b40      	cmp	r3, #64	; 0x40
 8006632:	f040 80b6 	bne.w	80067a2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006642:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 8150 	beq.w	80068ec <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006652:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006656:	429a      	cmp	r2, r3
 8006658:	f080 8148 	bcs.w	80068ec <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006662:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006670:	f000 8086 	beq.w	8006780 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006688:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800668c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006690:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	461a      	mov	r2, r3
 800669a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800669e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80066a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066ae:	e841 2300 	strex	r3, r2, [r1]
 80066b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80066b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1da      	bne.n	8006674 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3308      	adds	r3, #8
 80066c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80066ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066d0:	f023 0301 	bic.w	r3, r3, #1
 80066d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3308      	adds	r3, #8
 80066de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80066e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e1      	bne.n	80066be <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3308      	adds	r3, #8
 8006700:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800670a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800670c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006710:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3308      	adds	r3, #8
 800671a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800671e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006720:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006722:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006724:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006726:	e841 2300 	strex	r3, r2, [r1]
 800672a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800672c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1e3      	bne.n	80066fa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2220      	movs	r2, #32
 8006736:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006748:	e853 3f00 	ldrex	r3, [r3]
 800674c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800674e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006750:	f023 0310 	bic.w	r3, r3, #16
 8006754:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	461a      	mov	r2, r3
 800675e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006762:	65bb      	str	r3, [r7, #88]	; 0x58
 8006764:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006768:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1e4      	bne.n	8006740 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800677a:	4618      	mov	r0, r3
 800677c:	f7fb fa40 	bl	8001c00 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006792:	b29b      	uxth	r3, r3
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	b29b      	uxth	r3, r3
 8006798:	4619      	mov	r1, r3
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f8c2 	bl	8006924 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067a0:	e0a4      	b.n	80068ec <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 8096 	beq.w	80068f0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80067c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 8091 	beq.w	80068f0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d6:	e853 3f00 	ldrex	r3, [r3]
 80067da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067f0:	647b      	str	r3, [r7, #68]	; 0x44
 80067f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e4      	bne.n	80067ce <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3308      	adds	r3, #8
 800680a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	e853 3f00 	ldrex	r3, [r3]
 8006812:	623b      	str	r3, [r7, #32]
   return(result);
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	f023 0301 	bic.w	r3, r3, #1
 800681a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3308      	adds	r3, #8
 8006824:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006828:	633a      	str	r2, [r7, #48]	; 0x30
 800682a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800682e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006830:	e841 2300 	strex	r3, r2, [r1]
 8006834:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1e3      	bne.n	8006804 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2220      	movs	r2, #32
 8006840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	60fb      	str	r3, [r7, #12]
   return(result);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f023 0310 	bic.w	r3, r3, #16
 8006864:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	461a      	mov	r2, r3
 800686e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006872:	61fb      	str	r3, [r7, #28]
 8006874:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	69b9      	ldr	r1, [r7, #24]
 8006878:	69fa      	ldr	r2, [r7, #28]
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	617b      	str	r3, [r7, #20]
   return(result);
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e4      	bne.n	8006850 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2202      	movs	r2, #2
 800688a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800688c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006890:	4619      	mov	r1, r3
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f846 	bl	8006924 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006898:	e02a      	b.n	80068f0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800689a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800689e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00e      	beq.n	80068c4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80068a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d008      	beq.n	80068c4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d01c      	beq.n	80068f4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4798      	blx	r3
    }
    return;
 80068c2:	e017      	b.n	80068f4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d012      	beq.n	80068f6 <HAL_UART_IRQHandler+0x59e>
 80068d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00c      	beq.n	80068f6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fdf2 	bl	80074c6 <UART_EndTransmit_IT>
    return;
 80068e2:	e008      	b.n	80068f6 <HAL_UART_IRQHandler+0x59e>
      return;
 80068e4:	bf00      	nop
 80068e6:	e006      	b.n	80068f6 <HAL_UART_IRQHandler+0x59e>
    return;
 80068e8:	bf00      	nop
 80068ea:	e004      	b.n	80068f6 <HAL_UART_IRQHandler+0x59e>
      return;
 80068ec:	bf00      	nop
 80068ee:	e002      	b.n	80068f6 <HAL_UART_IRQHandler+0x59e>
      return;
 80068f0:	bf00      	nop
 80068f2:	e000      	b.n	80068f6 <HAL_UART_IRQHandler+0x59e>
    return;
 80068f4:	bf00      	nop
  }

}
 80068f6:	37e8      	adds	r7, #232	; 0xe8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006944:	2300      	movs	r3, #0
 8006946:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	4aa0      	ldr	r2, [pc, #640]	; (8006bd0 <UART_SetConfig+0x294>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d904      	bls.n	800695c <UART_SetConfig+0x20>
 8006952:	f640 315d 	movw	r1, #2909	; 0xb5d
 8006956:	489f      	ldr	r0, [pc, #636]	; (8006bd4 <UART_SetConfig+0x298>)
 8006958:	f7fa fcd6 	bl	8001308 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006964:	d00d      	beq.n	8006982 <UART_SetConfig+0x46>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d009      	beq.n	8006982 <UART_SetConfig+0x46>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006976:	d004      	beq.n	8006982 <UART_SetConfig+0x46>
 8006978:	f640 315e 	movw	r1, #2910	; 0xb5e
 800697c:	4895      	ldr	r0, [pc, #596]	; (8006bd4 <UART_SetConfig+0x298>)
 800697e:	f7fa fcc3 	bl	8001308 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800698a:	d012      	beq.n	80069b2 <UART_SetConfig+0x76>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00e      	beq.n	80069b2 <UART_SetConfig+0x76>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800699c:	d009      	beq.n	80069b2 <UART_SetConfig+0x76>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069a6:	d004      	beq.n	80069b2 <UART_SetConfig+0x76>
 80069a8:	f640 315f 	movw	r1, #2911	; 0xb5f
 80069ac:	4889      	ldr	r0, [pc, #548]	; (8006bd4 <UART_SetConfig+0x298>)
 80069ae:	f7fa fcab 	bl	8001308 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d009      	beq.n	80069ce <UART_SetConfig+0x92>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c2:	d004      	beq.n	80069ce <UART_SetConfig+0x92>
 80069c4:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 80069c8:	4882      	ldr	r0, [pc, #520]	; (8006bd4 <UART_SetConfig+0x298>)
 80069ca:	f7fa fc9d 	bl	8001308 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00e      	beq.n	80069f4 <UART_SetConfig+0xb8>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069de:	d009      	beq.n	80069f4 <UART_SetConfig+0xb8>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80069e8:	d004      	beq.n	80069f4 <UART_SetConfig+0xb8>
 80069ea:	f640 3162 	movw	r1, #2914	; 0xb62
 80069ee:	4879      	ldr	r0, [pc, #484]	; (8006bd4 <UART_SetConfig+0x298>)
 80069f0:	f7fa fc8a 	bl	8001308 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	f023 030c 	bic.w	r3, r3, #12
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d103      	bne.n	8006a08 <UART_SetConfig+0xcc>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d104      	bne.n	8006a12 <UART_SetConfig+0xd6>
 8006a08:	f640 3163 	movw	r1, #2915	; 0xb63
 8006a0c:	4871      	ldr	r0, [pc, #452]	; (8006bd4 <UART_SetConfig+0x298>)
 8006a0e:	f7fa fc7b 	bl	8001308 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d013      	beq.n	8006a42 <UART_SetConfig+0x106>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a22:	d00e      	beq.n	8006a42 <UART_SetConfig+0x106>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a2c:	d009      	beq.n	8006a42 <UART_SetConfig+0x106>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a36:	d004      	beq.n	8006a42 <UART_SetConfig+0x106>
 8006a38:	f640 3164 	movw	r1, #2916	; 0xb64
 8006a3c:	4865      	ldr	r0, [pc, #404]	; (8006bd4 <UART_SetConfig+0x298>)
 8006a3e:	f7fa fc63 	bl	8001308 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d009      	beq.n	8006a5e <UART_SetConfig+0x122>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a52:	d004      	beq.n	8006a5e <UART_SetConfig+0x122>
 8006a54:	f640 3165 	movw	r1, #2917	; 0xb65
 8006a58:	485e      	ldr	r0, [pc, #376]	; (8006bd4 <UART_SetConfig+0x298>)
 8006a5a:	f7fa fc55 	bl	8001308 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	4b56      	ldr	r3, [pc, #344]	; (8006bd8 <UART_SetConfig+0x29c>)
 8006a7e:	4013      	ands	r3, r2
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	6812      	ldr	r2, [r2, #0]
 8006a84:	6979      	ldr	r1, [r7, #20]
 8006a86:	430b      	orrs	r3, r1
 8006a88:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a44      	ldr	r2, [pc, #272]	; (8006bdc <UART_SetConfig+0x2a0>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d121      	bne.n	8006b12 <UART_SetConfig+0x1d6>
 8006ace:	4b44      	ldr	r3, [pc, #272]	; (8006be0 <UART_SetConfig+0x2a4>)
 8006ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad4:	f003 0303 	and.w	r3, r3, #3
 8006ad8:	2b03      	cmp	r3, #3
 8006ada:	d817      	bhi.n	8006b0c <UART_SetConfig+0x1d0>
 8006adc:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <UART_SetConfig+0x1a8>)
 8006ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae2:	bf00      	nop
 8006ae4:	08006af5 	.word	0x08006af5
 8006ae8:	08006b01 	.word	0x08006b01
 8006aec:	08006afb 	.word	0x08006afb
 8006af0:	08006b07 	.word	0x08006b07
 8006af4:	2301      	movs	r3, #1
 8006af6:	77fb      	strb	r3, [r7, #31]
 8006af8:	e14c      	b.n	8006d94 <UART_SetConfig+0x458>
 8006afa:	2302      	movs	r3, #2
 8006afc:	77fb      	strb	r3, [r7, #31]
 8006afe:	e149      	b.n	8006d94 <UART_SetConfig+0x458>
 8006b00:	2304      	movs	r3, #4
 8006b02:	77fb      	strb	r3, [r7, #31]
 8006b04:	e146      	b.n	8006d94 <UART_SetConfig+0x458>
 8006b06:	2308      	movs	r3, #8
 8006b08:	77fb      	strb	r3, [r7, #31]
 8006b0a:	e143      	b.n	8006d94 <UART_SetConfig+0x458>
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	77fb      	strb	r3, [r7, #31]
 8006b10:	e140      	b.n	8006d94 <UART_SetConfig+0x458>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a33      	ldr	r2, [pc, #204]	; (8006be4 <UART_SetConfig+0x2a8>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d132      	bne.n	8006b82 <UART_SetConfig+0x246>
 8006b1c:	4b30      	ldr	r3, [pc, #192]	; (8006be0 <UART_SetConfig+0x2a4>)
 8006b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b22:	f003 030c 	and.w	r3, r3, #12
 8006b26:	2b0c      	cmp	r3, #12
 8006b28:	d828      	bhi.n	8006b7c <UART_SetConfig+0x240>
 8006b2a:	a201      	add	r2, pc, #4	; (adr r2, 8006b30 <UART_SetConfig+0x1f4>)
 8006b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b30:	08006b65 	.word	0x08006b65
 8006b34:	08006b7d 	.word	0x08006b7d
 8006b38:	08006b7d 	.word	0x08006b7d
 8006b3c:	08006b7d 	.word	0x08006b7d
 8006b40:	08006b71 	.word	0x08006b71
 8006b44:	08006b7d 	.word	0x08006b7d
 8006b48:	08006b7d 	.word	0x08006b7d
 8006b4c:	08006b7d 	.word	0x08006b7d
 8006b50:	08006b6b 	.word	0x08006b6b
 8006b54:	08006b7d 	.word	0x08006b7d
 8006b58:	08006b7d 	.word	0x08006b7d
 8006b5c:	08006b7d 	.word	0x08006b7d
 8006b60:	08006b77 	.word	0x08006b77
 8006b64:	2300      	movs	r3, #0
 8006b66:	77fb      	strb	r3, [r7, #31]
 8006b68:	e114      	b.n	8006d94 <UART_SetConfig+0x458>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	77fb      	strb	r3, [r7, #31]
 8006b6e:	e111      	b.n	8006d94 <UART_SetConfig+0x458>
 8006b70:	2304      	movs	r3, #4
 8006b72:	77fb      	strb	r3, [r7, #31]
 8006b74:	e10e      	b.n	8006d94 <UART_SetConfig+0x458>
 8006b76:	2308      	movs	r3, #8
 8006b78:	77fb      	strb	r3, [r7, #31]
 8006b7a:	e10b      	b.n	8006d94 <UART_SetConfig+0x458>
 8006b7c:	2310      	movs	r3, #16
 8006b7e:	77fb      	strb	r3, [r7, #31]
 8006b80:	e108      	b.n	8006d94 <UART_SetConfig+0x458>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a18      	ldr	r2, [pc, #96]	; (8006be8 <UART_SetConfig+0x2ac>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d12f      	bne.n	8006bec <UART_SetConfig+0x2b0>
 8006b8c:	4b14      	ldr	r3, [pc, #80]	; (8006be0 <UART_SetConfig+0x2a4>)
 8006b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b96:	2b30      	cmp	r3, #48	; 0x30
 8006b98:	d013      	beq.n	8006bc2 <UART_SetConfig+0x286>
 8006b9a:	2b30      	cmp	r3, #48	; 0x30
 8006b9c:	d814      	bhi.n	8006bc8 <UART_SetConfig+0x28c>
 8006b9e:	2b20      	cmp	r3, #32
 8006ba0:	d009      	beq.n	8006bb6 <UART_SetConfig+0x27a>
 8006ba2:	2b20      	cmp	r3, #32
 8006ba4:	d810      	bhi.n	8006bc8 <UART_SetConfig+0x28c>
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d002      	beq.n	8006bb0 <UART_SetConfig+0x274>
 8006baa:	2b10      	cmp	r3, #16
 8006bac:	d006      	beq.n	8006bbc <UART_SetConfig+0x280>
 8006bae:	e00b      	b.n	8006bc8 <UART_SetConfig+0x28c>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	77fb      	strb	r3, [r7, #31]
 8006bb4:	e0ee      	b.n	8006d94 <UART_SetConfig+0x458>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	77fb      	strb	r3, [r7, #31]
 8006bba:	e0eb      	b.n	8006d94 <UART_SetConfig+0x458>
 8006bbc:	2304      	movs	r3, #4
 8006bbe:	77fb      	strb	r3, [r7, #31]
 8006bc0:	e0e8      	b.n	8006d94 <UART_SetConfig+0x458>
 8006bc2:	2308      	movs	r3, #8
 8006bc4:	77fb      	strb	r3, [r7, #31]
 8006bc6:	e0e5      	b.n	8006d94 <UART_SetConfig+0x458>
 8006bc8:	2310      	movs	r3, #16
 8006bca:	77fb      	strb	r3, [r7, #31]
 8006bcc:	e0e2      	b.n	8006d94 <UART_SetConfig+0x458>
 8006bce:	bf00      	nop
 8006bd0:	019bfcc0 	.word	0x019bfcc0
 8006bd4:	0800d900 	.word	0x0800d900
 8006bd8:	efff69f3 	.word	0xefff69f3
 8006bdc:	40011000 	.word	0x40011000
 8006be0:	40023800 	.word	0x40023800
 8006be4:	40004400 	.word	0x40004400
 8006be8:	40004800 	.word	0x40004800
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4aa5      	ldr	r2, [pc, #660]	; (8006e88 <UART_SetConfig+0x54c>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d120      	bne.n	8006c38 <UART_SetConfig+0x2fc>
 8006bf6:	4ba5      	ldr	r3, [pc, #660]	; (8006e8c <UART_SetConfig+0x550>)
 8006bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c00:	2bc0      	cmp	r3, #192	; 0xc0
 8006c02:	d013      	beq.n	8006c2c <UART_SetConfig+0x2f0>
 8006c04:	2bc0      	cmp	r3, #192	; 0xc0
 8006c06:	d814      	bhi.n	8006c32 <UART_SetConfig+0x2f6>
 8006c08:	2b80      	cmp	r3, #128	; 0x80
 8006c0a:	d009      	beq.n	8006c20 <UART_SetConfig+0x2e4>
 8006c0c:	2b80      	cmp	r3, #128	; 0x80
 8006c0e:	d810      	bhi.n	8006c32 <UART_SetConfig+0x2f6>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <UART_SetConfig+0x2de>
 8006c14:	2b40      	cmp	r3, #64	; 0x40
 8006c16:	d006      	beq.n	8006c26 <UART_SetConfig+0x2ea>
 8006c18:	e00b      	b.n	8006c32 <UART_SetConfig+0x2f6>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	77fb      	strb	r3, [r7, #31]
 8006c1e:	e0b9      	b.n	8006d94 <UART_SetConfig+0x458>
 8006c20:	2302      	movs	r3, #2
 8006c22:	77fb      	strb	r3, [r7, #31]
 8006c24:	e0b6      	b.n	8006d94 <UART_SetConfig+0x458>
 8006c26:	2304      	movs	r3, #4
 8006c28:	77fb      	strb	r3, [r7, #31]
 8006c2a:	e0b3      	b.n	8006d94 <UART_SetConfig+0x458>
 8006c2c:	2308      	movs	r3, #8
 8006c2e:	77fb      	strb	r3, [r7, #31]
 8006c30:	e0b0      	b.n	8006d94 <UART_SetConfig+0x458>
 8006c32:	2310      	movs	r3, #16
 8006c34:	77fb      	strb	r3, [r7, #31]
 8006c36:	e0ad      	b.n	8006d94 <UART_SetConfig+0x458>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a94      	ldr	r2, [pc, #592]	; (8006e90 <UART_SetConfig+0x554>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d125      	bne.n	8006c8e <UART_SetConfig+0x352>
 8006c42:	4b92      	ldr	r3, [pc, #584]	; (8006e8c <UART_SetConfig+0x550>)
 8006c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c50:	d017      	beq.n	8006c82 <UART_SetConfig+0x346>
 8006c52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c56:	d817      	bhi.n	8006c88 <UART_SetConfig+0x34c>
 8006c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c5c:	d00b      	beq.n	8006c76 <UART_SetConfig+0x33a>
 8006c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c62:	d811      	bhi.n	8006c88 <UART_SetConfig+0x34c>
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d003      	beq.n	8006c70 <UART_SetConfig+0x334>
 8006c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c6c:	d006      	beq.n	8006c7c <UART_SetConfig+0x340>
 8006c6e:	e00b      	b.n	8006c88 <UART_SetConfig+0x34c>
 8006c70:	2300      	movs	r3, #0
 8006c72:	77fb      	strb	r3, [r7, #31]
 8006c74:	e08e      	b.n	8006d94 <UART_SetConfig+0x458>
 8006c76:	2302      	movs	r3, #2
 8006c78:	77fb      	strb	r3, [r7, #31]
 8006c7a:	e08b      	b.n	8006d94 <UART_SetConfig+0x458>
 8006c7c:	2304      	movs	r3, #4
 8006c7e:	77fb      	strb	r3, [r7, #31]
 8006c80:	e088      	b.n	8006d94 <UART_SetConfig+0x458>
 8006c82:	2308      	movs	r3, #8
 8006c84:	77fb      	strb	r3, [r7, #31]
 8006c86:	e085      	b.n	8006d94 <UART_SetConfig+0x458>
 8006c88:	2310      	movs	r3, #16
 8006c8a:	77fb      	strb	r3, [r7, #31]
 8006c8c:	e082      	b.n	8006d94 <UART_SetConfig+0x458>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a80      	ldr	r2, [pc, #512]	; (8006e94 <UART_SetConfig+0x558>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d125      	bne.n	8006ce4 <UART_SetConfig+0x3a8>
 8006c98:	4b7c      	ldr	r3, [pc, #496]	; (8006e8c <UART_SetConfig+0x550>)
 8006c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c9e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ca2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ca6:	d017      	beq.n	8006cd8 <UART_SetConfig+0x39c>
 8006ca8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cac:	d817      	bhi.n	8006cde <UART_SetConfig+0x3a2>
 8006cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cb2:	d00b      	beq.n	8006ccc <UART_SetConfig+0x390>
 8006cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cb8:	d811      	bhi.n	8006cde <UART_SetConfig+0x3a2>
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <UART_SetConfig+0x38a>
 8006cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cc2:	d006      	beq.n	8006cd2 <UART_SetConfig+0x396>
 8006cc4:	e00b      	b.n	8006cde <UART_SetConfig+0x3a2>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	77fb      	strb	r3, [r7, #31]
 8006cca:	e063      	b.n	8006d94 <UART_SetConfig+0x458>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	77fb      	strb	r3, [r7, #31]
 8006cd0:	e060      	b.n	8006d94 <UART_SetConfig+0x458>
 8006cd2:	2304      	movs	r3, #4
 8006cd4:	77fb      	strb	r3, [r7, #31]
 8006cd6:	e05d      	b.n	8006d94 <UART_SetConfig+0x458>
 8006cd8:	2308      	movs	r3, #8
 8006cda:	77fb      	strb	r3, [r7, #31]
 8006cdc:	e05a      	b.n	8006d94 <UART_SetConfig+0x458>
 8006cde:	2310      	movs	r3, #16
 8006ce0:	77fb      	strb	r3, [r7, #31]
 8006ce2:	e057      	b.n	8006d94 <UART_SetConfig+0x458>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a6b      	ldr	r2, [pc, #428]	; (8006e98 <UART_SetConfig+0x55c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d125      	bne.n	8006d3a <UART_SetConfig+0x3fe>
 8006cee:	4b67      	ldr	r3, [pc, #412]	; (8006e8c <UART_SetConfig+0x550>)
 8006cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006cf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cfc:	d017      	beq.n	8006d2e <UART_SetConfig+0x3f2>
 8006cfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d02:	d817      	bhi.n	8006d34 <UART_SetConfig+0x3f8>
 8006d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d08:	d00b      	beq.n	8006d22 <UART_SetConfig+0x3e6>
 8006d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d0e:	d811      	bhi.n	8006d34 <UART_SetConfig+0x3f8>
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <UART_SetConfig+0x3e0>
 8006d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d18:	d006      	beq.n	8006d28 <UART_SetConfig+0x3ec>
 8006d1a:	e00b      	b.n	8006d34 <UART_SetConfig+0x3f8>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	77fb      	strb	r3, [r7, #31]
 8006d20:	e038      	b.n	8006d94 <UART_SetConfig+0x458>
 8006d22:	2302      	movs	r3, #2
 8006d24:	77fb      	strb	r3, [r7, #31]
 8006d26:	e035      	b.n	8006d94 <UART_SetConfig+0x458>
 8006d28:	2304      	movs	r3, #4
 8006d2a:	77fb      	strb	r3, [r7, #31]
 8006d2c:	e032      	b.n	8006d94 <UART_SetConfig+0x458>
 8006d2e:	2308      	movs	r3, #8
 8006d30:	77fb      	strb	r3, [r7, #31]
 8006d32:	e02f      	b.n	8006d94 <UART_SetConfig+0x458>
 8006d34:	2310      	movs	r3, #16
 8006d36:	77fb      	strb	r3, [r7, #31]
 8006d38:	e02c      	b.n	8006d94 <UART_SetConfig+0x458>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a57      	ldr	r2, [pc, #348]	; (8006e9c <UART_SetConfig+0x560>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d125      	bne.n	8006d90 <UART_SetConfig+0x454>
 8006d44:	4b51      	ldr	r3, [pc, #324]	; (8006e8c <UART_SetConfig+0x550>)
 8006d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d4e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d52:	d017      	beq.n	8006d84 <UART_SetConfig+0x448>
 8006d54:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d58:	d817      	bhi.n	8006d8a <UART_SetConfig+0x44e>
 8006d5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d5e:	d00b      	beq.n	8006d78 <UART_SetConfig+0x43c>
 8006d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d64:	d811      	bhi.n	8006d8a <UART_SetConfig+0x44e>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <UART_SetConfig+0x436>
 8006d6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d6e:	d006      	beq.n	8006d7e <UART_SetConfig+0x442>
 8006d70:	e00b      	b.n	8006d8a <UART_SetConfig+0x44e>
 8006d72:	2300      	movs	r3, #0
 8006d74:	77fb      	strb	r3, [r7, #31]
 8006d76:	e00d      	b.n	8006d94 <UART_SetConfig+0x458>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	77fb      	strb	r3, [r7, #31]
 8006d7c:	e00a      	b.n	8006d94 <UART_SetConfig+0x458>
 8006d7e:	2304      	movs	r3, #4
 8006d80:	77fb      	strb	r3, [r7, #31]
 8006d82:	e007      	b.n	8006d94 <UART_SetConfig+0x458>
 8006d84:	2308      	movs	r3, #8
 8006d86:	77fb      	strb	r3, [r7, #31]
 8006d88:	e004      	b.n	8006d94 <UART_SetConfig+0x458>
 8006d8a:	2310      	movs	r3, #16
 8006d8c:	77fb      	strb	r3, [r7, #31]
 8006d8e:	e001      	b.n	8006d94 <UART_SetConfig+0x458>
 8006d90:	2310      	movs	r3, #16
 8006d92:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d9c:	d15c      	bne.n	8006e58 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 8006d9e:	7ffb      	ldrb	r3, [r7, #31]
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d828      	bhi.n	8006df6 <UART_SetConfig+0x4ba>
 8006da4:	a201      	add	r2, pc, #4	; (adr r2, 8006dac <UART_SetConfig+0x470>)
 8006da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006daa:	bf00      	nop
 8006dac:	08006dd1 	.word	0x08006dd1
 8006db0:	08006dd9 	.word	0x08006dd9
 8006db4:	08006de1 	.word	0x08006de1
 8006db8:	08006df7 	.word	0x08006df7
 8006dbc:	08006de7 	.word	0x08006de7
 8006dc0:	08006df7 	.word	0x08006df7
 8006dc4:	08006df7 	.word	0x08006df7
 8006dc8:	08006df7 	.word	0x08006df7
 8006dcc:	08006def 	.word	0x08006def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dd0:	f7fd fd42 	bl	8004858 <HAL_RCC_GetPCLK1Freq>
 8006dd4:	61b8      	str	r0, [r7, #24]
        break;
 8006dd6:	e013      	b.n	8006e00 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dd8:	f7fd fd52 	bl	8004880 <HAL_RCC_GetPCLK2Freq>
 8006ddc:	61b8      	str	r0, [r7, #24]
        break;
 8006dde:	e00f      	b.n	8006e00 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006de0:	4b2f      	ldr	r3, [pc, #188]	; (8006ea0 <UART_SetConfig+0x564>)
 8006de2:	61bb      	str	r3, [r7, #24]
        break;
 8006de4:	e00c      	b.n	8006e00 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006de6:	f7fd fc25 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 8006dea:	61b8      	str	r0, [r7, #24]
        break;
 8006dec:	e008      	b.n	8006e00 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006df2:	61bb      	str	r3, [r7, #24]
        break;
 8006df4:	e004      	b.n	8006e00 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	77bb      	strb	r3, [r7, #30]
        break;
 8006dfe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 8082 	beq.w	8006f0c <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	005a      	lsls	r2, r3, #1
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	085b      	lsrs	r3, r3, #1
 8006e12:	441a      	add	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	2b0f      	cmp	r3, #15
 8006e22:	d916      	bls.n	8006e52 <UART_SetConfig+0x516>
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e2a:	d212      	bcs.n	8006e52 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	f023 030f 	bic.w	r3, r3, #15
 8006e34:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	085b      	lsrs	r3, r3, #1
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	f003 0307 	and.w	r3, r3, #7
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	89fb      	ldrh	r3, [r7, #14]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	89fa      	ldrh	r2, [r7, #14]
 8006e4e:	60da      	str	r2, [r3, #12]
 8006e50:	e05c      	b.n	8006f0c <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	77bb      	strb	r3, [r7, #30]
 8006e56:	e059      	b.n	8006f0c <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e58:	7ffb      	ldrb	r3, [r7, #31]
 8006e5a:	2b08      	cmp	r3, #8
 8006e5c:	d835      	bhi.n	8006eca <UART_SetConfig+0x58e>
 8006e5e:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <UART_SetConfig+0x528>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006ea5 	.word	0x08006ea5
 8006e68:	08006ead 	.word	0x08006ead
 8006e6c:	08006eb5 	.word	0x08006eb5
 8006e70:	08006ecb 	.word	0x08006ecb
 8006e74:	08006ebb 	.word	0x08006ebb
 8006e78:	08006ecb 	.word	0x08006ecb
 8006e7c:	08006ecb 	.word	0x08006ecb
 8006e80:	08006ecb 	.word	0x08006ecb
 8006e84:	08006ec3 	.word	0x08006ec3
 8006e88:	40004c00 	.word	0x40004c00
 8006e8c:	40023800 	.word	0x40023800
 8006e90:	40005000 	.word	0x40005000
 8006e94:	40011400 	.word	0x40011400
 8006e98:	40007800 	.word	0x40007800
 8006e9c:	40007c00 	.word	0x40007c00
 8006ea0:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ea4:	f7fd fcd8 	bl	8004858 <HAL_RCC_GetPCLK1Freq>
 8006ea8:	61b8      	str	r0, [r7, #24]
        break;
 8006eaa:	e013      	b.n	8006ed4 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006eac:	f7fd fce8 	bl	8004880 <HAL_RCC_GetPCLK2Freq>
 8006eb0:	61b8      	str	r0, [r7, #24]
        break;
 8006eb2:	e00f      	b.n	8006ed4 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eb4:	4b1b      	ldr	r3, [pc, #108]	; (8006f24 <UART_SetConfig+0x5e8>)
 8006eb6:	61bb      	str	r3, [r7, #24]
        break;
 8006eb8:	e00c      	b.n	8006ed4 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eba:	f7fd fbbb 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 8006ebe:	61b8      	str	r0, [r7, #24]
        break;
 8006ec0:	e008      	b.n	8006ed4 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ec6:	61bb      	str	r3, [r7, #24]
        break;
 8006ec8:	e004      	b.n	8006ed4 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	77bb      	strb	r3, [r7, #30]
        break;
 8006ed2:	bf00      	nop
    }

    if (pclk != 0U)
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d018      	beq.n	8006f0c <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	085a      	lsrs	r2, r3, #1
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	441a      	add	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	2b0f      	cmp	r3, #15
 8006ef2:	d909      	bls.n	8006f08 <UART_SetConfig+0x5cc>
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006efa:	d205      	bcs.n	8006f08 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	60da      	str	r2, [r3, #12]
 8006f06:	e001      	b.n	8006f0c <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006f18:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3720      	adds	r7, #32
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	00f42400 	.word	0x00f42400

08006f28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	2bff      	cmp	r3, #255	; 0xff
 8006f36:	d904      	bls.n	8006f42 <UART_AdvFeatureConfig+0x1a>
 8006f38:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8006f3c:	488e      	ldr	r0, [pc, #568]	; (8007178 <UART_AdvFeatureConfig+0x250>)
 8006f3e:	f7fa f9e3 	bl	8001308 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d018      	beq.n	8006f80 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d009      	beq.n	8006f6a <UART_AdvFeatureConfig+0x42>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f5e:	d004      	beq.n	8006f6a <UART_AdvFeatureConfig+0x42>
 8006f60:	f640 31eb 	movw	r1, #3051	; 0xbeb
 8006f64:	4884      	ldr	r0, [pc, #528]	; (8007178 <UART_AdvFeatureConfig+0x250>)
 8006f66:	f7fa f9cf 	bl	8001308 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d018      	beq.n	8006fbe <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d009      	beq.n	8006fa8 <UART_AdvFeatureConfig+0x80>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f9c:	d004      	beq.n	8006fa8 <UART_AdvFeatureConfig+0x80>
 8006f9e:	f640 31f2 	movw	r1, #3058	; 0xbf2
 8006fa2:	4875      	ldr	r0, [pc, #468]	; (8007178 <UART_AdvFeatureConfig+0x250>)
 8006fa4:	f7fa f9b0 	bl	8001308 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	f003 0304 	and.w	r3, r3, #4
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d018      	beq.n	8006ffc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d009      	beq.n	8006fe6 <UART_AdvFeatureConfig+0xbe>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fda:	d004      	beq.n	8006fe6 <UART_AdvFeatureConfig+0xbe>
 8006fdc:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8006fe0:	4865      	ldr	r0, [pc, #404]	; (8007178 <UART_AdvFeatureConfig+0x250>)
 8006fe2:	f7fa f991 	bl	8001308 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	f003 0308 	and.w	r3, r3, #8
 8007004:	2b00      	cmp	r3, #0
 8007006:	d018      	beq.n	800703a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800700c:	2b00      	cmp	r3, #0
 800700e:	d009      	beq.n	8007024 <UART_AdvFeatureConfig+0xfc>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007018:	d004      	beq.n	8007024 <UART_AdvFeatureConfig+0xfc>
 800701a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800701e:	4856      	ldr	r0, [pc, #344]	; (8007178 <UART_AdvFeatureConfig+0x250>)
 8007020:	f7fa f972 	bl	8001308 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	f003 0310 	and.w	r3, r3, #16
 8007042:	2b00      	cmp	r3, #0
 8007044:	d018      	beq.n	8007078 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704a:	2b00      	cmp	r3, #0
 800704c:	d009      	beq.n	8007062 <UART_AdvFeatureConfig+0x13a>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007056:	d004      	beq.n	8007062 <UART_AdvFeatureConfig+0x13a>
 8007058:	f640 4107 	movw	r1, #3079	; 0xc07
 800705c:	4846      	ldr	r0, [pc, #280]	; (8007178 <UART_AdvFeatureConfig+0x250>)
 800705e:	f7fa f953 	bl	8001308 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	430a      	orrs	r2, r1
 8007076:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	f003 0320 	and.w	r3, r3, #32
 8007080:	2b00      	cmp	r3, #0
 8007082:	d018      	beq.n	80070b6 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007088:	2b00      	cmp	r3, #0
 800708a:	d009      	beq.n	80070a0 <UART_AdvFeatureConfig+0x178>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007094:	d004      	beq.n	80070a0 <UART_AdvFeatureConfig+0x178>
 8007096:	f640 410e 	movw	r1, #3086	; 0xc0e
 800709a:	4837      	ldr	r0, [pc, #220]	; (8007178 <UART_AdvFeatureConfig+0x250>)
 800709c:	f7fa f934 	bl	8001308 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d064      	beq.n	800718c <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a2d      	ldr	r2, [pc, #180]	; (800717c <UART_AdvFeatureConfig+0x254>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d013      	beq.n	80070f4 <UART_AdvFeatureConfig+0x1cc>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a2b      	ldr	r2, [pc, #172]	; (8007180 <UART_AdvFeatureConfig+0x258>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d00e      	beq.n	80070f4 <UART_AdvFeatureConfig+0x1cc>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a2a      	ldr	r2, [pc, #168]	; (8007184 <UART_AdvFeatureConfig+0x25c>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d009      	beq.n	80070f4 <UART_AdvFeatureConfig+0x1cc>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a28      	ldr	r2, [pc, #160]	; (8007188 <UART_AdvFeatureConfig+0x260>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d004      	beq.n	80070f4 <UART_AdvFeatureConfig+0x1cc>
 80070ea:	f640 4115 	movw	r1, #3093	; 0xc15
 80070ee:	4822      	ldr	r0, [pc, #136]	; (8007178 <UART_AdvFeatureConfig+0x250>)
 80070f0:	f7fa f90a 	bl	8001308 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d009      	beq.n	8007110 <UART_AdvFeatureConfig+0x1e8>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007100:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007104:	d004      	beq.n	8007110 <UART_AdvFeatureConfig+0x1e8>
 8007106:	f640 4116 	movw	r1, #3094	; 0xc16
 800710a:	481b      	ldr	r0, [pc, #108]	; (8007178 <UART_AdvFeatureConfig+0x250>)
 800710c:	f7fa f8fc 	bl	8001308 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800712e:	d12d      	bne.n	800718c <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007134:	2b00      	cmp	r3, #0
 8007136:	d013      	beq.n	8007160 <UART_AdvFeatureConfig+0x238>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007140:	d00e      	beq.n	8007160 <UART_AdvFeatureConfig+0x238>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007146:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800714a:	d009      	beq.n	8007160 <UART_AdvFeatureConfig+0x238>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007150:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007154:	d004      	beq.n	8007160 <UART_AdvFeatureConfig+0x238>
 8007156:	f640 411b 	movw	r1, #3099	; 0xc1b
 800715a:	4807      	ldr	r0, [pc, #28]	; (8007178 <UART_AdvFeatureConfig+0x250>)
 800715c:	f7fa f8d4 	bl	8001308 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	605a      	str	r2, [r3, #4]
 8007176:	e009      	b.n	800718c <UART_AdvFeatureConfig+0x264>
 8007178:	0800d900 	.word	0x0800d900
 800717c:	40011000 	.word	0x40011000
 8007180:	40004400 	.word	0x40004400
 8007184:	40004800 	.word	0x40004800
 8007188:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007194:	2b00      	cmp	r3, #0
 8007196:	d018      	beq.n	80071ca <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800719c:	2b00      	cmp	r3, #0
 800719e:	d009      	beq.n	80071b4 <UART_AdvFeatureConfig+0x28c>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80071a8:	d004      	beq.n	80071b4 <UART_AdvFeatureConfig+0x28c>
 80071aa:	f640 4123 	movw	r1, #3107	; 0xc23
 80071ae:	4809      	ldr	r0, [pc, #36]	; (80071d4 <UART_AdvFeatureConfig+0x2ac>)
 80071b0:	f7fa f8aa 	bl	8001308 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	605a      	str	r2, [r3, #4]
  }
}
 80071ca:	bf00      	nop
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	0800d900 	.word	0x0800d900

080071d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af02      	add	r7, sp, #8
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071e8:	f7fa fbec 	bl	80019c4 <HAL_GetTick>
 80071ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0308 	and.w	r3, r3, #8
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d10e      	bne.n	800721a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f81b 	bl	8007246 <UART_WaitOnFlagUntilTimeout>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e011      	b.n	800723e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2220      	movs	r2, #32
 800721e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2220      	movs	r2, #32
 8007224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b09c      	sub	sp, #112	; 0x70
 800724a:	af00      	add	r7, sp, #0
 800724c:	60f8      	str	r0, [r7, #12]
 800724e:	60b9      	str	r1, [r7, #8]
 8007250:	603b      	str	r3, [r7, #0]
 8007252:	4613      	mov	r3, r2
 8007254:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007256:	e0a7      	b.n	80073a8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800725a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725e:	f000 80a3 	beq.w	80073a8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007262:	f7fa fbaf 	bl	80019c4 <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800726e:	429a      	cmp	r2, r3
 8007270:	d302      	bcc.n	8007278 <UART_WaitOnFlagUntilTimeout+0x32>
 8007272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007274:	2b00      	cmp	r3, #0
 8007276:	d13f      	bne.n	80072f8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007288:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800728c:	667b      	str	r3, [r7, #100]	; 0x64
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007296:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007298:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800729c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800729e:	e841 2300 	strex	r3, r2, [r1]
 80072a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1e6      	bne.n	8007278 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3308      	adds	r3, #8
 80072b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b4:	e853 3f00 	ldrex	r3, [r3]
 80072b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072bc:	f023 0301 	bic.w	r3, r3, #1
 80072c0:	663b      	str	r3, [r7, #96]	; 0x60
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3308      	adds	r3, #8
 80072c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80072cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072d2:	e841 2300 	strex	r3, r2, [r1]
 80072d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1e5      	bne.n	80072aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2220      	movs	r2, #32
 80072e2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2220      	movs	r2, #32
 80072e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e068      	b.n	80073ca <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0304 	and.w	r3, r3, #4
 8007302:	2b00      	cmp	r3, #0
 8007304:	d050      	beq.n	80073a8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007314:	d148      	bne.n	80073a8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800731e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007328:	e853 3f00 	ldrex	r3, [r3]
 800732c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007334:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	461a      	mov	r2, r3
 800733c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733e:	637b      	str	r3, [r7, #52]	; 0x34
 8007340:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007342:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007346:	e841 2300 	strex	r3, r2, [r1]
 800734a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800734c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1e6      	bne.n	8007320 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3308      	adds	r3, #8
 8007358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	613b      	str	r3, [r7, #16]
   return(result);
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	f023 0301 	bic.w	r3, r3, #1
 8007368:	66bb      	str	r3, [r7, #104]	; 0x68
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3308      	adds	r3, #8
 8007370:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007372:	623a      	str	r2, [r7, #32]
 8007374:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	69f9      	ldr	r1, [r7, #28]
 8007378:	6a3a      	ldr	r2, [r7, #32]
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e5      	bne.n	8007352 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2220      	movs	r2, #32
 800738a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2220      	movs	r2, #32
 8007390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2220      	movs	r2, #32
 8007398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e010      	b.n	80073ca <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	69da      	ldr	r2, [r3, #28]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	4013      	ands	r3, r2
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	bf0c      	ite	eq
 80073b8:	2301      	moveq	r3, #1
 80073ba:	2300      	movne	r3, #0
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	461a      	mov	r2, r3
 80073c0:	79fb      	ldrb	r3, [r7, #7]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	f43f af48 	beq.w	8007258 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3770      	adds	r7, #112	; 0x70
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b095      	sub	sp, #84	; 0x54
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e2:	e853 3f00 	ldrex	r3, [r3]
 80073e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	461a      	mov	r2, r3
 80073f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073f8:	643b      	str	r3, [r7, #64]	; 0x40
 80073fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e6      	bne.n	80073da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3308      	adds	r3, #8
 8007412:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	e853 3f00 	ldrex	r3, [r3]
 800741a:	61fb      	str	r3, [r7, #28]
   return(result);
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	f023 0301 	bic.w	r3, r3, #1
 8007422:	64bb      	str	r3, [r7, #72]	; 0x48
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3308      	adds	r3, #8
 800742a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800742c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800742e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007430:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007434:	e841 2300 	strex	r3, r2, [r1]
 8007438:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1e5      	bne.n	800740c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007444:	2b01      	cmp	r3, #1
 8007446:	d118      	bne.n	800747a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	e853 3f00 	ldrex	r3, [r3]
 8007454:	60bb      	str	r3, [r7, #8]
   return(result);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f023 0310 	bic.w	r3, r3, #16
 800745c:	647b      	str	r3, [r7, #68]	; 0x44
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007466:	61bb      	str	r3, [r7, #24]
 8007468:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746a:	6979      	ldr	r1, [r7, #20]
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	e841 2300 	strex	r3, r2, [r1]
 8007472:	613b      	str	r3, [r7, #16]
   return(result);
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1e6      	bne.n	8007448 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2220      	movs	r2, #32
 800747e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800748e:	bf00      	nop
 8007490:	3754      	adds	r7, #84	; 0x54
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b084      	sub	sp, #16
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f7ff fa29 	bl	8006910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074be:	bf00      	nop
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b088      	sub	sp, #32
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	e853 3f00 	ldrex	r3, [r3]
 80074da:	60bb      	str	r3, [r7, #8]
   return(result);
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074e2:	61fb      	str	r3, [r7, #28]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	461a      	mov	r2, r3
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	61bb      	str	r3, [r7, #24]
 80074ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f0:	6979      	ldr	r1, [r7, #20]
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	e841 2300 	strex	r3, r2, [r1]
 80074f8:	613b      	str	r3, [r7, #16]
   return(result);
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1e6      	bne.n	80074ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2220      	movs	r2, #32
 8007504:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff f9f5 	bl	80068fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007512:	bf00      	nop
 8007514:	3720      	adds	r7, #32
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f043 0201 	orr.w	r2, r3, #1
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f023 0201 	bic.w	r2, r3, #1
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
	...

08007560 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800756a:	2300      	movs	r3, #0
 800756c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3301      	adds	r3, #1
 8007572:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4a13      	ldr	r2, [pc, #76]	; (80075c4 <USB_FlushTxFifo+0x64>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d901      	bls.n	8007580 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e01b      	b.n	80075b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	2b00      	cmp	r3, #0
 8007586:	daf2      	bge.n	800756e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007588:	2300      	movs	r3, #0
 800758a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	019b      	lsls	r3, r3, #6
 8007590:	f043 0220 	orr.w	r2, r3, #32
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	3301      	adds	r3, #1
 800759c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4a08      	ldr	r2, [pc, #32]	; (80075c4 <USB_FlushTxFifo+0x64>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d901      	bls.n	80075aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e006      	b.n	80075b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	f003 0320 	and.w	r3, r3, #32
 80075b2:	2b20      	cmp	r3, #32
 80075b4:	d0f0      	beq.n	8007598 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	00030d40 	.word	0x00030d40

080075c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3301      	adds	r3, #1
 80075d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4a11      	ldr	r2, [pc, #68]	; (8007624 <USB_FlushRxFifo+0x5c>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d901      	bls.n	80075e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e018      	b.n	8007618 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	daf2      	bge.n	80075d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2210      	movs	r2, #16
 80075f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3301      	adds	r3, #1
 80075fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	4a08      	ldr	r2, [pc, #32]	; (8007624 <USB_FlushRxFifo+0x5c>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d901      	bls.n	800760a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e006      	b.n	8007618 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	f003 0310 	and.w	r3, r3, #16
 8007612:	2b10      	cmp	r3, #16
 8007614:	d0f0      	beq.n	80075f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	00030d40 	.word	0x00030d40

08007628 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007628:	b480      	push	{r7}
 800762a:	b08b      	sub	sp, #44	; 0x2c
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	4613      	mov	r3, r2
 8007634:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800763e:	88fb      	ldrh	r3, [r7, #6]
 8007640:	089b      	lsrs	r3, r3, #2
 8007642:	b29b      	uxth	r3, r3
 8007644:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007646:	88fb      	ldrh	r3, [r7, #6]
 8007648:	f003 0303 	and.w	r3, r3, #3
 800764c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800764e:	2300      	movs	r3, #0
 8007650:	623b      	str	r3, [r7, #32]
 8007652:	e014      	b.n	800767e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	3301      	adds	r3, #1
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	3301      	adds	r3, #1
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	3301      	adds	r3, #1
 8007670:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	3301      	adds	r3, #1
 8007676:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	3301      	adds	r3, #1
 800767c:	623b      	str	r3, [r7, #32]
 800767e:	6a3a      	ldr	r2, [r7, #32]
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	429a      	cmp	r2, r3
 8007684:	d3e6      	bcc.n	8007654 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007686:	8bfb      	ldrh	r3, [r7, #30]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d01e      	beq.n	80076ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800768c:	2300      	movs	r3, #0
 800768e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007696:	461a      	mov	r2, r3
 8007698:	f107 0310 	add.w	r3, r7, #16
 800769c:	6812      	ldr	r2, [r2, #0]
 800769e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	00db      	lsls	r3, r3, #3
 80076a8:	fa22 f303 	lsr.w	r3, r2, r3
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	701a      	strb	r2, [r3, #0]
      i++;
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	3301      	adds	r3, #1
 80076b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	3301      	adds	r3, #1
 80076bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80076be:	8bfb      	ldrh	r3, [r7, #30]
 80076c0:	3b01      	subs	r3, #1
 80076c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80076c4:	8bfb      	ldrh	r3, [r7, #30]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1ea      	bne.n	80076a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	372c      	adds	r7, #44	; 0x2c
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	4013      	ands	r3, r2
 80076ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80076f0:	68fb      	ldr	r3, [r7, #12]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3714      	adds	r7, #20
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80076fe:	b480      	push	{r7}
 8007700:	b085      	sub	sp, #20
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	460b      	mov	r3, r1
 8007708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800770e:	78fb      	ldrb	r3, [r7, #3]
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4413      	add	r3, r2
 8007716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800771e:	78fb      	ldrb	r3, [r7, #3]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	4413      	add	r3, r2
 8007726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	4013      	ands	r3, r2
 8007730:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007732:	68bb      	ldr	r3, [r7, #8]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	f003 0301 	and.w	r3, r3, #1
}
 8007750:	4618      	mov	r0, r3
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800777a:	f023 0303 	bic.w	r3, r3, #3
 800777e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	78fb      	ldrb	r3, [r7, #3]
 800778a:	f003 0303 	and.w	r3, r3, #3
 800778e:	68f9      	ldr	r1, [r7, #12]
 8007790:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007794:	4313      	orrs	r3, r2
 8007796:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007798:	78fb      	ldrb	r3, [r7, #3]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d107      	bne.n	80077ae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077a4:	461a      	mov	r2, r3
 80077a6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80077aa:	6053      	str	r3, [r2, #4]
 80077ac:	e009      	b.n	80077c2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80077ae:	78fb      	ldrb	r3, [r7, #3]
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d106      	bne.n	80077c2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077ba:	461a      	mov	r2, r3
 80077bc:	f241 7370 	movw	r3, #6000	; 0x1770
 80077c0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077e2:	695b      	ldr	r3, [r3, #20]
 80077e4:	b29b      	uxth	r3, r3
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b089      	sub	sp, #36	; 0x24
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	460b      	mov	r3, r1
 80077fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007802:	78fb      	ldrb	r3, [r7, #3]
 8007804:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	4413      	add	r3, r2
 8007812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	0c9b      	lsrs	r3, r3, #18
 800781a:	f003 0303 	and.w	r3, r3, #3
 800781e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	4413      	add	r3, r2
 8007828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	0fdb      	lsrs	r3, r3, #31
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 0320 	and.w	r3, r3, #32
 800783e:	2b20      	cmp	r3, #32
 8007840:	d104      	bne.n	800784c <USB_HC_Halt+0x5a>
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007848:	2300      	movs	r3, #0
 800784a:	e0c8      	b.n	80079de <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d002      	beq.n	8007858 <USB_HC_Halt+0x66>
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	2b02      	cmp	r3, #2
 8007856:	d163      	bne.n	8007920 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	4413      	add	r3, r2
 8007860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	0151      	lsls	r1, r2, #5
 800786a:	69fa      	ldr	r2, [r7, #28]
 800786c:	440a      	add	r2, r1
 800786e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007872:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007876:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f003 0320 	and.w	r3, r3, #32
 8007880:	2b00      	cmp	r3, #0
 8007882:	f040 80ab 	bne.w	80079dc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d133      	bne.n	80078fa <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	015a      	lsls	r2, r3, #5
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	4413      	add	r3, r2
 800789a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	69ba      	ldr	r2, [r7, #24]
 80078a2:	0151      	lsls	r1, r2, #5
 80078a4:	69fa      	ldr	r2, [r7, #28]
 80078a6:	440a      	add	r2, r1
 80078a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078b0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	69ba      	ldr	r2, [r7, #24]
 80078c2:	0151      	lsls	r1, r2, #5
 80078c4:	69fa      	ldr	r2, [r7, #28]
 80078c6:	440a      	add	r2, r1
 80078c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078d0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	3301      	adds	r3, #1
 80078d6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078de:	d81d      	bhi.n	800791c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078f6:	d0ec      	beq.n	80078d2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80078f8:	e070      	b.n	80079dc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	4413      	add	r3, r2
 8007902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	69ba      	ldr	r2, [r7, #24]
 800790a:	0151      	lsls	r1, r2, #5
 800790c:	69fa      	ldr	r2, [r7, #28]
 800790e:	440a      	add	r2, r1
 8007910:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007914:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007918:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800791a:	e05f      	b.n	80079dc <USB_HC_Halt+0x1ea>
            break;
 800791c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800791e:	e05d      	b.n	80079dc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	4413      	add	r3, r2
 8007928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	0151      	lsls	r1, r2, #5
 8007932:	69fa      	ldr	r2, [r7, #28]
 8007934:	440a      	add	r2, r1
 8007936:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800793a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800793e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d133      	bne.n	80079b8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	4413      	add	r3, r2
 8007958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69ba      	ldr	r2, [r7, #24]
 8007960:	0151      	lsls	r1, r2, #5
 8007962:	69fa      	ldr	r2, [r7, #28]
 8007964:	440a      	add	r2, r1
 8007966:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800796a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800796e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	4413      	add	r3, r2
 8007978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	0151      	lsls	r1, r2, #5
 8007982:	69fa      	ldr	r2, [r7, #28]
 8007984:	440a      	add	r2, r1
 8007986:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800798a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800798e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	3301      	adds	r3, #1
 8007994:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800799c:	d81d      	bhi.n	80079da <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079b4:	d0ec      	beq.n	8007990 <USB_HC_Halt+0x19e>
 80079b6:	e011      	b.n	80079dc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	0151      	lsls	r1, r2, #5
 80079ca:	69fa      	ldr	r2, [r7, #28]
 80079cc:	440a      	add	r2, r1
 80079ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079d6:	6013      	str	r3, [r2, #0]
 80079d8:	e000      	b.n	80079dc <USB_HC_Halt+0x1ea>
          break;
 80079da:	bf00      	nop
    }
  }

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3724      	adds	r7, #36	; 0x24
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b088      	sub	sp, #32
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7ff fd9c 	bl	800753c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a04:	2110      	movs	r1, #16
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7ff fdaa 	bl	8007560 <USB_FlushTxFifo>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7ff fdd6 	bl	80075c8 <USB_FlushRxFifo>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007a26:	2300      	movs	r3, #0
 8007a28:	61bb      	str	r3, [r7, #24]
 8007a2a:	e01f      	b.n	8007a6c <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a42:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a4a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a52:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a60:	461a      	mov	r2, r3
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	61bb      	str	r3, [r7, #24]
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	2b0f      	cmp	r3, #15
 8007a70:	d9dc      	bls.n	8007a2c <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007a72:	2300      	movs	r3, #0
 8007a74:	61bb      	str	r3, [r7, #24]
 8007a76:	e034      	b.n	8007ae2 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a8e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a96:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a9e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	015a      	lsls	r2, r3, #5
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aac:	461a      	mov	r2, r3
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007abe:	d80c      	bhi.n	8007ada <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ad6:	d0ec      	beq.n	8007ab2 <USB_StopHost+0xc8>
 8007ad8:	e000      	b.n	8007adc <USB_StopHost+0xf2>
        break;
 8007ada:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	61bb      	str	r3, [r7, #24]
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	2b0f      	cmp	r3, #15
 8007ae6:	d9c7      	bls.n	8007a78 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007aee:	461a      	mov	r2, r3
 8007af0:	f04f 33ff 	mov.w	r3, #4294967295
 8007af4:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f04f 32ff 	mov.w	r2, #4294967295
 8007afc:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff fd0b 	bl	800751a <USB_EnableGlobalInt>

  return ret;
 8007b04:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3720      	adds	r7, #32
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
	...

08007b10 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8007b18:	1d39      	adds	r1, r7, #4
 8007b1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b1e:	2201      	movs	r2, #1
 8007b20:	4803      	ldr	r0, [pc, #12]	; (8007b30 <__io_putchar+0x20>)
 8007b22:	f7fe fb95 	bl	8006250 <HAL_UART_Transmit>

  return ch;
 8007b26:	687b      	ldr	r3, [r7, #4]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	20000300 	.word	0x20000300

08007b34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007b34:	b480      	push	{r7}
 8007b36:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007b38:	bf00      	nop
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
	...

08007b44 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b4a:	f3ef 8305 	mrs	r3, IPSR
 8007b4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10f      	bne.n	8007b76 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b56:	f3ef 8310 	mrs	r3, PRIMASK
 8007b5a:	607b      	str	r3, [r7, #4]
  return(result);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d105      	bne.n	8007b6e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b62:	f3ef 8311 	mrs	r3, BASEPRI
 8007b66:	603b      	str	r3, [r7, #0]
  return(result);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d007      	beq.n	8007b7e <osKernelInitialize+0x3a>
 8007b6e:	4b0e      	ldr	r3, [pc, #56]	; (8007ba8 <osKernelInitialize+0x64>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d103      	bne.n	8007b7e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007b76:	f06f 0305 	mvn.w	r3, #5
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	e00c      	b.n	8007b98 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b7e:	4b0a      	ldr	r3, [pc, #40]	; (8007ba8 <osKernelInitialize+0x64>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d105      	bne.n	8007b92 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b86:	4b08      	ldr	r3, [pc, #32]	; (8007ba8 <osKernelInitialize+0x64>)
 8007b88:	2201      	movs	r2, #1
 8007b8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	60fb      	str	r3, [r7, #12]
 8007b90:	e002      	b.n	8007b98 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007b92:	f04f 33ff 	mov.w	r3, #4294967295
 8007b96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007b98:	68fb      	ldr	r3, [r7, #12]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	20000690 	.word	0x20000690

08007bac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bb2:	f3ef 8305 	mrs	r3, IPSR
 8007bb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bb8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10f      	bne.n	8007bde <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8007bc2:	607b      	str	r3, [r7, #4]
  return(result);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d105      	bne.n	8007bd6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bca:	f3ef 8311 	mrs	r3, BASEPRI
 8007bce:	603b      	str	r3, [r7, #0]
  return(result);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d007      	beq.n	8007be6 <osKernelStart+0x3a>
 8007bd6:	4b0f      	ldr	r3, [pc, #60]	; (8007c14 <osKernelStart+0x68>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d103      	bne.n	8007be6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8007bde:	f06f 0305 	mvn.w	r3, #5
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	e010      	b.n	8007c08 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007be6:	4b0b      	ldr	r3, [pc, #44]	; (8007c14 <osKernelStart+0x68>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d109      	bne.n	8007c02 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007bee:	f7ff ffa1 	bl	8007b34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007bf2:	4b08      	ldr	r3, [pc, #32]	; (8007c14 <osKernelStart+0x68>)
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007bf8:	f001 fd5c 	bl	80096b4 <vTaskStartScheduler>
      stat = osOK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	e002      	b.n	8007c08 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007c02:	f04f 33ff 	mov.w	r3, #4294967295
 8007c06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007c08:	68fb      	ldr	r3, [r7, #12]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	20000690 	.word	0x20000690

08007c18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b090      	sub	sp, #64	; 0x40
 8007c1c:	af04      	add	r7, sp, #16
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007c24:	2300      	movs	r3, #0
 8007c26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c28:	f3ef 8305 	mrs	r3, IPSR
 8007c2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8007c2e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f040 808f 	bne.w	8007d54 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c36:	f3ef 8310 	mrs	r3, PRIMASK
 8007c3a:	61bb      	str	r3, [r7, #24]
  return(result);
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d105      	bne.n	8007c4e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c42:	f3ef 8311 	mrs	r3, BASEPRI
 8007c46:	617b      	str	r3, [r7, #20]
  return(result);
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <osThreadNew+0x3e>
 8007c4e:	4b44      	ldr	r3, [pc, #272]	; (8007d60 <osThreadNew+0x148>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d07e      	beq.n	8007d54 <osThreadNew+0x13c>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d07b      	beq.n	8007d54 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007c5c:	2380      	movs	r3, #128	; 0x80
 8007c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007c60:	2318      	movs	r3, #24
 8007c62:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007c64:	2300      	movs	r3, #0
 8007c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007c68:	f04f 33ff 	mov.w	r3, #4294967295
 8007c6c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d045      	beq.n	8007d00 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <osThreadNew+0x6a>
        name = attr->name;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d008      	beq.n	8007ca8 <osThreadNew+0x90>
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	2b38      	cmp	r3, #56	; 0x38
 8007c9a:	d805      	bhi.n	8007ca8 <osThreadNew+0x90>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <osThreadNew+0x94>
        return (NULL);
 8007ca8:	2300      	movs	r3, #0
 8007caa:	e054      	b.n	8007d56 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d003      	beq.n	8007cbc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	089b      	lsrs	r3, r3, #2
 8007cba:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00e      	beq.n	8007ce2 <osThreadNew+0xca>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	2bbb      	cmp	r3, #187	; 0xbb
 8007cca:	d90a      	bls.n	8007ce2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d006      	beq.n	8007ce2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d002      	beq.n	8007ce2 <osThreadNew+0xca>
        mem = 1;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	623b      	str	r3, [r7, #32]
 8007ce0:	e010      	b.n	8007d04 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10c      	bne.n	8007d04 <osThreadNew+0xec>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d108      	bne.n	8007d04 <osThreadNew+0xec>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d104      	bne.n	8007d04 <osThreadNew+0xec>
          mem = 0;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	623b      	str	r3, [r7, #32]
 8007cfe:	e001      	b.n	8007d04 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007d00:	2300      	movs	r3, #0
 8007d02:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d110      	bne.n	8007d2c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d12:	9202      	str	r2, [sp, #8]
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f001 fad1 	bl	80092c8 <xTaskCreateStatic>
 8007d26:	4603      	mov	r3, r0
 8007d28:	613b      	str	r3, [r7, #16]
 8007d2a:	e013      	b.n	8007d54 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d110      	bne.n	8007d54 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	f107 0310 	add.w	r3, r7, #16
 8007d3a:	9301      	str	r3, [sp, #4]
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f001 fb22 	bl	800938e <xTaskCreate>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d001      	beq.n	8007d54 <osThreadNew+0x13c>
          hTask = NULL;
 8007d50:	2300      	movs	r3, #0
 8007d52:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007d54:	693b      	ldr	r3, [r7, #16]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3730      	adds	r7, #48	; 0x30
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	20000690 	.word	0x20000690

08007d64 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d6c:	f3ef 8305 	mrs	r3, IPSR
 8007d70:	613b      	str	r3, [r7, #16]
  return(result);
 8007d72:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10f      	bne.n	8007d98 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d78:	f3ef 8310 	mrs	r3, PRIMASK
 8007d7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d105      	bne.n	8007d90 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d84:	f3ef 8311 	mrs	r3, BASEPRI
 8007d88:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d007      	beq.n	8007da0 <osDelay+0x3c>
 8007d90:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <osDelay+0x58>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d103      	bne.n	8007da0 <osDelay+0x3c>
    stat = osErrorISR;
 8007d98:	f06f 0305 	mvn.w	r3, #5
 8007d9c:	617b      	str	r3, [r7, #20]
 8007d9e:	e007      	b.n	8007db0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d002      	beq.n	8007db0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f001 fc4c 	bl	8009648 <vTaskDelay>
    }
  }

  return (stat);
 8007db0:	697b      	ldr	r3, [r7, #20]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	20000690 	.word	0x20000690

08007dc0 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b08a      	sub	sp, #40	; 0x28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	603b      	str	r3, [r7, #0]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dd8:	f3ef 8305 	mrs	r3, IPSR
 8007ddc:	61fb      	str	r3, [r7, #28]
  return(result);
 8007dde:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10f      	bne.n	8007e04 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007de4:	f3ef 8310 	mrs	r3, PRIMASK
 8007de8:	61bb      	str	r3, [r7, #24]
  return(result);
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d105      	bne.n	8007dfc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007df0:	f3ef 8311 	mrs	r3, BASEPRI
 8007df4:	617b      	str	r3, [r7, #20]
  return(result);
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d02c      	beq.n	8007e56 <osMessageQueuePut+0x96>
 8007dfc:	4b28      	ldr	r3, [pc, #160]	; (8007ea0 <osMessageQueuePut+0xe0>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d128      	bne.n	8007e56 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d005      	beq.n	8007e16 <osMessageQueuePut+0x56>
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d002      	beq.n	8007e16 <osMessageQueuePut+0x56>
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007e16:	f06f 0303 	mvn.w	r3, #3
 8007e1a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e1c:	e039      	b.n	8007e92 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007e22:	f107 0210 	add.w	r2, r7, #16
 8007e26:	2300      	movs	r3, #0
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	6a38      	ldr	r0, [r7, #32]
 8007e2c:	f000 ff58 	bl	8008ce0 <xQueueGenericSendFromISR>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d003      	beq.n	8007e3e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007e36:	f06f 0302 	mvn.w	r3, #2
 8007e3a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e3c:	e029      	b.n	8007e92 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d026      	beq.n	8007e92 <osMessageQueuePut+0xd2>
 8007e44:	4b17      	ldr	r3, [pc, #92]	; (8007ea4 <osMessageQueuePut+0xe4>)
 8007e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e4a:	601a      	str	r2, [r3, #0]
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e54:	e01d      	b.n	8007e92 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <osMessageQueuePut+0xa2>
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d103      	bne.n	8007e6a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007e62:	f06f 0303 	mvn.w	r3, #3
 8007e66:	627b      	str	r3, [r7, #36]	; 0x24
 8007e68:	e014      	b.n	8007e94 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	68b9      	ldr	r1, [r7, #8]
 8007e70:	6a38      	ldr	r0, [r7, #32]
 8007e72:	f000 fe2f 	bl	8008ad4 <xQueueGenericSend>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d00b      	beq.n	8007e94 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007e82:	f06f 0301 	mvn.w	r3, #1
 8007e86:	627b      	str	r3, [r7, #36]	; 0x24
 8007e88:	e004      	b.n	8007e94 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007e8a:	f06f 0302 	mvn.w	r3, #2
 8007e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e90:	e000      	b.n	8007e94 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e92:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3728      	adds	r7, #40	; 0x28
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	20000690 	.word	0x20000690
 8007ea4:	e000ed04 	.word	0xe000ed04

08007ea8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4a07      	ldr	r2, [pc, #28]	; (8007ed4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007eb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	4a06      	ldr	r2, [pc, #24]	; (8007ed8 <vApplicationGetIdleTaskMemory+0x30>)
 8007ebe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2280      	movs	r2, #128	; 0x80
 8007ec4:	601a      	str	r2, [r3, #0]
}
 8007ec6:	bf00      	nop
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	20000694 	.word	0x20000694
 8007ed8:	20000750 	.word	0x20000750

08007edc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	4a07      	ldr	r2, [pc, #28]	; (8007f08 <vApplicationGetTimerTaskMemory+0x2c>)
 8007eec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	4a06      	ldr	r2, [pc, #24]	; (8007f0c <vApplicationGetTimerTaskMemory+0x30>)
 8007ef2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007efa:	601a      	str	r2, [r3, #0]
}
 8007efc:	bf00      	nop
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	20000950 	.word	0x20000950
 8007f0c:	20000a0c 	.word	0x20000a0c

08007f10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b08a      	sub	sp, #40	; 0x28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f1c:	f001 fc3e 	bl	800979c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f20:	4b5b      	ldr	r3, [pc, #364]	; (8008090 <pvPortMalloc+0x180>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f28:	f000 f91a 	bl	8008160 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f2c:	4b59      	ldr	r3, [pc, #356]	; (8008094 <pvPortMalloc+0x184>)
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4013      	ands	r3, r2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f040 8092 	bne.w	800805e <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d01f      	beq.n	8007f80 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007f40:	2208      	movs	r2, #8
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4413      	add	r3, r2
 8007f46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f003 0307 	and.w	r3, r3, #7
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d016      	beq.n	8007f80 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f023 0307 	bic.w	r3, r3, #7
 8007f58:	3308      	adds	r3, #8
 8007f5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f003 0307 	and.w	r3, r3, #7
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00c      	beq.n	8007f80 <pvPortMalloc+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6a:	b672      	cpsid	i
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	b662      	cpsie	i
 8007f7a:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f7c:	bf00      	nop
 8007f7e:	e7fe      	b.n	8007f7e <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d06b      	beq.n	800805e <pvPortMalloc+0x14e>
 8007f86:	4b44      	ldr	r3, [pc, #272]	; (8008098 <pvPortMalloc+0x188>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d866      	bhi.n	800805e <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f90:	4b42      	ldr	r3, [pc, #264]	; (800809c <pvPortMalloc+0x18c>)
 8007f92:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f94:	4b41      	ldr	r3, [pc, #260]	; (800809c <pvPortMalloc+0x18c>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f9a:	e004      	b.n	8007fa6 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d903      	bls.n	8007fb8 <pvPortMalloc+0xa8>
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1f1      	bne.n	8007f9c <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007fb8:	4b35      	ldr	r3, [pc, #212]	; (8008090 <pvPortMalloc+0x180>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d04d      	beq.n	800805e <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fc2:	6a3b      	ldr	r3, [r7, #32]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2208      	movs	r2, #8
 8007fc8:	4413      	add	r3, r2
 8007fca:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	1ad2      	subs	r2, r2, r3
 8007fdc:	2308      	movs	r3, #8
 8007fde:	005b      	lsls	r3, r3, #1
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d921      	bls.n	8008028 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4413      	add	r3, r2
 8007fea:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	f003 0307 	and.w	r3, r3, #7
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00c      	beq.n	8008010 <pvPortMalloc+0x100>
	__asm volatile
 8007ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffa:	b672      	cpsid	i
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	b662      	cpsie	i
 800800a:	613b      	str	r3, [r7, #16]
}
 800800c:	bf00      	nop
 800800e:	e7fe      	b.n	800800e <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	1ad2      	subs	r2, r2, r3
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008022:	69b8      	ldr	r0, [r7, #24]
 8008024:	f000 f8fe 	bl	8008224 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008028:	4b1b      	ldr	r3, [pc, #108]	; (8008098 <pvPortMalloc+0x188>)
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	4a19      	ldr	r2, [pc, #100]	; (8008098 <pvPortMalloc+0x188>)
 8008034:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008036:	4b18      	ldr	r3, [pc, #96]	; (8008098 <pvPortMalloc+0x188>)
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	4b19      	ldr	r3, [pc, #100]	; (80080a0 <pvPortMalloc+0x190>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	429a      	cmp	r2, r3
 8008040:	d203      	bcs.n	800804a <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008042:	4b15      	ldr	r3, [pc, #84]	; (8008098 <pvPortMalloc+0x188>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a16      	ldr	r2, [pc, #88]	; (80080a0 <pvPortMalloc+0x190>)
 8008048:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	4b11      	ldr	r3, [pc, #68]	; (8008094 <pvPortMalloc+0x184>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	431a      	orrs	r2, r3
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	2200      	movs	r2, #0
 800805c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800805e:	f001 fbab 	bl	80097b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	f003 0307 	and.w	r3, r3, #7
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00c      	beq.n	8008086 <pvPortMalloc+0x176>
	__asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	b672      	cpsid	i
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	b662      	cpsie	i
 8008080:	60fb      	str	r3, [r7, #12]
}
 8008082:	bf00      	nop
 8008084:	e7fe      	b.n	8008084 <pvPortMalloc+0x174>
	return pvReturn;
 8008086:	69fb      	ldr	r3, [r7, #28]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3728      	adds	r7, #40	; 0x28
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	20004a14 	.word	0x20004a14
 8008094:	20004a20 	.word	0x20004a20
 8008098:	20004a18 	.word	0x20004a18
 800809c:	20004a0c 	.word	0x20004a0c
 80080a0:	20004a1c 	.word	0x20004a1c

080080a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d04c      	beq.n	8008150 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080b6:	2308      	movs	r3, #8
 80080b8:	425b      	negs	r3, r3
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4413      	add	r3, r2
 80080be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	4b23      	ldr	r3, [pc, #140]	; (8008158 <vPortFree+0xb4>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4013      	ands	r3, r2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10c      	bne.n	80080ec <vPortFree+0x48>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	b672      	cpsid	i
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	b662      	cpsie	i
 80080e6:	60fb      	str	r3, [r7, #12]
}
 80080e8:	bf00      	nop
 80080ea:	e7fe      	b.n	80080ea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00c      	beq.n	800810e <vPortFree+0x6a>
	__asm volatile
 80080f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f8:	b672      	cpsid	i
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	b662      	cpsie	i
 8008108:	60bb      	str	r3, [r7, #8]
}
 800810a:	bf00      	nop
 800810c:	e7fe      	b.n	800810c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	685a      	ldr	r2, [r3, #4]
 8008112:	4b11      	ldr	r3, [pc, #68]	; (8008158 <vPortFree+0xb4>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4013      	ands	r3, r2
 8008118:	2b00      	cmp	r3, #0
 800811a:	d019      	beq.n	8008150 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d115      	bne.n	8008150 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	685a      	ldr	r2, [r3, #4]
 8008128:	4b0b      	ldr	r3, [pc, #44]	; (8008158 <vPortFree+0xb4>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	43db      	mvns	r3, r3
 800812e:	401a      	ands	r2, r3
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008134:	f001 fb32 	bl	800979c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	4b07      	ldr	r3, [pc, #28]	; (800815c <vPortFree+0xb8>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4413      	add	r3, r2
 8008142:	4a06      	ldr	r2, [pc, #24]	; (800815c <vPortFree+0xb8>)
 8008144:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008146:	6938      	ldr	r0, [r7, #16]
 8008148:	f000 f86c 	bl	8008224 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800814c:	f001 fb34 	bl	80097b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008150:	bf00      	nop
 8008152:	3718      	adds	r7, #24
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	20004a20 	.word	0x20004a20
 800815c:	20004a18 	.word	0x20004a18

08008160 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008166:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800816a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800816c:	4b27      	ldr	r3, [pc, #156]	; (800820c <prvHeapInit+0xac>)
 800816e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f003 0307 	and.w	r3, r3, #7
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00c      	beq.n	8008194 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	3307      	adds	r3, #7
 800817e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f023 0307 	bic.w	r3, r3, #7
 8008186:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	4a1f      	ldr	r2, [pc, #124]	; (800820c <prvHeapInit+0xac>)
 8008190:	4413      	add	r3, r2
 8008192:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008198:	4a1d      	ldr	r2, [pc, #116]	; (8008210 <prvHeapInit+0xb0>)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800819e:	4b1c      	ldr	r3, [pc, #112]	; (8008210 <prvHeapInit+0xb0>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	4413      	add	r3, r2
 80081aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081ac:	2208      	movs	r2, #8
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	1a9b      	subs	r3, r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f023 0307 	bic.w	r3, r3, #7
 80081ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4a15      	ldr	r2, [pc, #84]	; (8008214 <prvHeapInit+0xb4>)
 80081c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081c2:	4b14      	ldr	r3, [pc, #80]	; (8008214 <prvHeapInit+0xb4>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2200      	movs	r2, #0
 80081c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081ca:	4b12      	ldr	r3, [pc, #72]	; (8008214 <prvHeapInit+0xb4>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2200      	movs	r2, #0
 80081d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	1ad2      	subs	r2, r2, r3
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081e0:	4b0c      	ldr	r3, [pc, #48]	; (8008214 <prvHeapInit+0xb4>)
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	4a0a      	ldr	r2, [pc, #40]	; (8008218 <prvHeapInit+0xb8>)
 80081ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	4a09      	ldr	r2, [pc, #36]	; (800821c <prvHeapInit+0xbc>)
 80081f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081f8:	4b09      	ldr	r3, [pc, #36]	; (8008220 <prvHeapInit+0xc0>)
 80081fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081fe:	601a      	str	r2, [r3, #0]
}
 8008200:	bf00      	nop
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	20000e0c 	.word	0x20000e0c
 8008210:	20004a0c 	.word	0x20004a0c
 8008214:	20004a14 	.word	0x20004a14
 8008218:	20004a1c 	.word	0x20004a1c
 800821c:	20004a18 	.word	0x20004a18
 8008220:	20004a20 	.word	0x20004a20

08008224 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800822c:	4b28      	ldr	r3, [pc, #160]	; (80082d0 <prvInsertBlockIntoFreeList+0xac>)
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	e002      	b.n	8008238 <prvInsertBlockIntoFreeList+0x14>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	60fb      	str	r3, [r7, #12]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	429a      	cmp	r2, r3
 8008240:	d8f7      	bhi.n	8008232 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	4413      	add	r3, r2
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	429a      	cmp	r2, r3
 8008252:	d108      	bne.n	8008266 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	441a      	add	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	441a      	add	r2, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	429a      	cmp	r2, r3
 8008278:	d118      	bne.n	80082ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	4b15      	ldr	r3, [pc, #84]	; (80082d4 <prvInsertBlockIntoFreeList+0xb0>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	429a      	cmp	r2, r3
 8008284:	d00d      	beq.n	80082a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	441a      	add	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	e008      	b.n	80082b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082a2:	4b0c      	ldr	r3, [pc, #48]	; (80082d4 <prvInsertBlockIntoFreeList+0xb0>)
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	e003      	b.n	80082b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d002      	beq.n	80082c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082c2:	bf00      	nop
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	20004a0c 	.word	0x20004a0c
 80082d4:	20004a14 	.word	0x20004a14

080082d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f103 0208 	add.w	r2, r3, #8
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f04f 32ff 	mov.w	r2, #4294967295
 80082f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f103 0208 	add.w	r2, r3, #8
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f103 0208 	add.w	r2, r3, #8
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008326:	bf00      	nop
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008332:	b480      	push	{r7}
 8008334:	b085      	sub	sp, #20
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	689a      	ldr	r2, [r3, #8]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	1c5a      	adds	r2, r3, #1
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	601a      	str	r2, [r3, #0]
}
 800836e:	bf00      	nop
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800837a:	b480      	push	{r7}
 800837c:	b085      	sub	sp, #20
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008390:	d103      	bne.n	800839a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	60fb      	str	r3, [r7, #12]
 8008398:	e00c      	b.n	80083b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	3308      	adds	r3, #8
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	e002      	b.n	80083a8 <vListInsert+0x2e>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d2f6      	bcs.n	80083a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	683a      	ldr	r2, [r7, #0]
 80083c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	1c5a      	adds	r2, r3, #1
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	601a      	str	r2, [r3, #0]
}
 80083e0:	bf00      	nop
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	6892      	ldr	r2, [r2, #8]
 8008402:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	6852      	ldr	r2, [r2, #4]
 800840c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	429a      	cmp	r2, r3
 8008416:	d103      	bne.n	8008420 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	689a      	ldr	r2, [r3, #8]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	1e5a      	subs	r2, r3, #1
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	3b04      	subs	r3, #4
 8008450:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008458:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3b04      	subs	r3, #4
 800845e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	f023 0201 	bic.w	r2, r3, #1
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	3b04      	subs	r3, #4
 800846e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008470:	4a0c      	ldr	r2, [pc, #48]	; (80084a4 <pxPortInitialiseStack+0x64>)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3b14      	subs	r3, #20
 800847a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	3b04      	subs	r3, #4
 8008486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f06f 0202 	mvn.w	r2, #2
 800848e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	3b20      	subs	r3, #32
 8008494:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008496:	68fb      	ldr	r3, [r7, #12]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	080084a9 	.word	0x080084a9

080084a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084ae:	2300      	movs	r3, #0
 80084b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084b2:	4b14      	ldr	r3, [pc, #80]	; (8008504 <prvTaskExitError+0x5c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ba:	d00c      	beq.n	80084d6 <prvTaskExitError+0x2e>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c0:	b672      	cpsid	i
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	b662      	cpsie	i
 80084d0:	60fb      	str	r3, [r7, #12]
}
 80084d2:	bf00      	nop
 80084d4:	e7fe      	b.n	80084d4 <prvTaskExitError+0x2c>
	__asm volatile
 80084d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084da:	b672      	cpsid	i
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	b662      	cpsie	i
 80084ea:	60bb      	str	r3, [r7, #8]
}
 80084ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084ee:	bf00      	nop
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d0fc      	beq.n	80084f0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084f6:	bf00      	nop
 80084f8:	bf00      	nop
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr
 8008504:	2000000c 	.word	0x2000000c
	...

08008510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008510:	4b07      	ldr	r3, [pc, #28]	; (8008530 <pxCurrentTCBConst2>)
 8008512:	6819      	ldr	r1, [r3, #0]
 8008514:	6808      	ldr	r0, [r1, #0]
 8008516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851a:	f380 8809 	msr	PSP, r0
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f04f 0000 	mov.w	r0, #0
 8008526:	f380 8811 	msr	BASEPRI, r0
 800852a:	4770      	bx	lr
 800852c:	f3af 8000 	nop.w

08008530 <pxCurrentTCBConst2>:
 8008530:	20004a6c 	.word	0x20004a6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008534:	bf00      	nop
 8008536:	bf00      	nop

08008538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008538:	4808      	ldr	r0, [pc, #32]	; (800855c <prvPortStartFirstTask+0x24>)
 800853a:	6800      	ldr	r0, [r0, #0]
 800853c:	6800      	ldr	r0, [r0, #0]
 800853e:	f380 8808 	msr	MSP, r0
 8008542:	f04f 0000 	mov.w	r0, #0
 8008546:	f380 8814 	msr	CONTROL, r0
 800854a:	b662      	cpsie	i
 800854c:	b661      	cpsie	f
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	df00      	svc	0
 8008558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800855a:	bf00      	nop
 800855c:	e000ed08 	.word	0xe000ed08

08008560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008566:	4b37      	ldr	r3, [pc, #220]	; (8008644 <xPortStartScheduler+0xe4>)
 8008568:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	b2db      	uxtb	r3, r3
 8008570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	22ff      	movs	r2, #255	; 0xff
 8008576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	b2db      	uxtb	r3, r3
 800857e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008580:	78fb      	ldrb	r3, [r7, #3]
 8008582:	b2db      	uxtb	r3, r3
 8008584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008588:	b2da      	uxtb	r2, r3
 800858a:	4b2f      	ldr	r3, [pc, #188]	; (8008648 <xPortStartScheduler+0xe8>)
 800858c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800858e:	4b2f      	ldr	r3, [pc, #188]	; (800864c <xPortStartScheduler+0xec>)
 8008590:	2207      	movs	r2, #7
 8008592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008594:	e009      	b.n	80085aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008596:	4b2d      	ldr	r3, [pc, #180]	; (800864c <xPortStartScheduler+0xec>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3b01      	subs	r3, #1
 800859c:	4a2b      	ldr	r2, [pc, #172]	; (800864c <xPortStartScheduler+0xec>)
 800859e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085a0:	78fb      	ldrb	r3, [r7, #3]
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	005b      	lsls	r3, r3, #1
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085aa:	78fb      	ldrb	r3, [r7, #3]
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085b2:	2b80      	cmp	r3, #128	; 0x80
 80085b4:	d0ef      	beq.n	8008596 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085b6:	4b25      	ldr	r3, [pc, #148]	; (800864c <xPortStartScheduler+0xec>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f1c3 0307 	rsb	r3, r3, #7
 80085be:	2b04      	cmp	r3, #4
 80085c0:	d00c      	beq.n	80085dc <xPortStartScheduler+0x7c>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	b672      	cpsid	i
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	b662      	cpsie	i
 80085d6:	60bb      	str	r3, [r7, #8]
}
 80085d8:	bf00      	nop
 80085da:	e7fe      	b.n	80085da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80085dc:	4b1b      	ldr	r3, [pc, #108]	; (800864c <xPortStartScheduler+0xec>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	021b      	lsls	r3, r3, #8
 80085e2:	4a1a      	ldr	r2, [pc, #104]	; (800864c <xPortStartScheduler+0xec>)
 80085e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80085e6:	4b19      	ldr	r3, [pc, #100]	; (800864c <xPortStartScheduler+0xec>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80085ee:	4a17      	ldr	r2, [pc, #92]	; (800864c <xPortStartScheduler+0xec>)
 80085f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80085fa:	4b15      	ldr	r3, [pc, #84]	; (8008650 <xPortStartScheduler+0xf0>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a14      	ldr	r2, [pc, #80]	; (8008650 <xPortStartScheduler+0xf0>)
 8008600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008604:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008606:	4b12      	ldr	r3, [pc, #72]	; (8008650 <xPortStartScheduler+0xf0>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a11      	ldr	r2, [pc, #68]	; (8008650 <xPortStartScheduler+0xf0>)
 800860c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008610:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008612:	f000 f8dd 	bl	80087d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008616:	4b0f      	ldr	r3, [pc, #60]	; (8008654 <xPortStartScheduler+0xf4>)
 8008618:	2200      	movs	r2, #0
 800861a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800861c:	f000 f8fc 	bl	8008818 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008620:	4b0d      	ldr	r3, [pc, #52]	; (8008658 <xPortStartScheduler+0xf8>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a0c      	ldr	r2, [pc, #48]	; (8008658 <xPortStartScheduler+0xf8>)
 8008626:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800862a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800862c:	f7ff ff84 	bl	8008538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008630:	f001 fa2e 	bl	8009a90 <vTaskSwitchContext>
	prvTaskExitError();
 8008634:	f7ff ff38 	bl	80084a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	e000e400 	.word	0xe000e400
 8008648:	20004a24 	.word	0x20004a24
 800864c:	20004a28 	.word	0x20004a28
 8008650:	e000ed20 	.word	0xe000ed20
 8008654:	2000000c 	.word	0x2000000c
 8008658:	e000ef34 	.word	0xe000ef34

0800865c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008666:	b672      	cpsid	i
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	b662      	cpsie	i
 8008676:	607b      	str	r3, [r7, #4]
}
 8008678:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800867a:	4b10      	ldr	r3, [pc, #64]	; (80086bc <vPortEnterCritical+0x60>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3301      	adds	r3, #1
 8008680:	4a0e      	ldr	r2, [pc, #56]	; (80086bc <vPortEnterCritical+0x60>)
 8008682:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008684:	4b0d      	ldr	r3, [pc, #52]	; (80086bc <vPortEnterCritical+0x60>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d111      	bne.n	80086b0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800868c:	4b0c      	ldr	r3, [pc, #48]	; (80086c0 <vPortEnterCritical+0x64>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00c      	beq.n	80086b0 <vPortEnterCritical+0x54>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869a:	b672      	cpsid	i
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	b662      	cpsie	i
 80086aa:	603b      	str	r3, [r7, #0]
}
 80086ac:	bf00      	nop
 80086ae:	e7fe      	b.n	80086ae <vPortEnterCritical+0x52>
	}
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	2000000c 	.word	0x2000000c
 80086c0:	e000ed04 	.word	0xe000ed04

080086c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086ca:	4b13      	ldr	r3, [pc, #76]	; (8008718 <vPortExitCritical+0x54>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10c      	bne.n	80086ec <vPortExitCritical+0x28>
	__asm volatile
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	b672      	cpsid	i
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	b662      	cpsie	i
 80086e6:	607b      	str	r3, [r7, #4]
}
 80086e8:	bf00      	nop
 80086ea:	e7fe      	b.n	80086ea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80086ec:	4b0a      	ldr	r3, [pc, #40]	; (8008718 <vPortExitCritical+0x54>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	4a09      	ldr	r2, [pc, #36]	; (8008718 <vPortExitCritical+0x54>)
 80086f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80086f6:	4b08      	ldr	r3, [pc, #32]	; (8008718 <vPortExitCritical+0x54>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d105      	bne.n	800870a <vPortExitCritical+0x46>
 80086fe:	2300      	movs	r3, #0
 8008700:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008708:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800870a:	bf00      	nop
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	2000000c 	.word	0x2000000c
 800871c:	00000000 	.word	0x00000000

08008720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008720:	f3ef 8009 	mrs	r0, PSP
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	4b15      	ldr	r3, [pc, #84]	; (8008780 <pxCurrentTCBConst>)
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	f01e 0f10 	tst.w	lr, #16
 8008730:	bf08      	it	eq
 8008732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873a:	6010      	str	r0, [r2, #0]
 800873c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008744:	b672      	cpsid	i
 8008746:	f380 8811 	msr	BASEPRI, r0
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	b662      	cpsie	i
 8008754:	f001 f99c 	bl	8009a90 <vTaskSwitchContext>
 8008758:	f04f 0000 	mov.w	r0, #0
 800875c:	f380 8811 	msr	BASEPRI, r0
 8008760:	bc09      	pop	{r0, r3}
 8008762:	6819      	ldr	r1, [r3, #0]
 8008764:	6808      	ldr	r0, [r1, #0]
 8008766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876a:	f01e 0f10 	tst.w	lr, #16
 800876e:	bf08      	it	eq
 8008770:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008774:	f380 8809 	msr	PSP, r0
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop

08008780 <pxCurrentTCBConst>:
 8008780:	20004a6c 	.word	0x20004a6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008784:	bf00      	nop
 8008786:	bf00      	nop

08008788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008792:	b672      	cpsid	i
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	b662      	cpsie	i
 80087a2:	607b      	str	r3, [r7, #4]
}
 80087a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087a6:	f001 f8b7 	bl	8009918 <xTaskIncrementTick>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d003      	beq.n	80087b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087b0:	4b06      	ldr	r3, [pc, #24]	; (80087cc <SysTick_Handler+0x44>)
 80087b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	2300      	movs	r3, #0
 80087ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	f383 8811 	msr	BASEPRI, r3
}
 80087c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087c4:	bf00      	nop
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	e000ed04 	.word	0xe000ed04

080087d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087d0:	b480      	push	{r7}
 80087d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087d4:	4b0b      	ldr	r3, [pc, #44]	; (8008804 <vPortSetupTimerInterrupt+0x34>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087da:	4b0b      	ldr	r3, [pc, #44]	; (8008808 <vPortSetupTimerInterrupt+0x38>)
 80087dc:	2200      	movs	r2, #0
 80087de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087e0:	4b0a      	ldr	r3, [pc, #40]	; (800880c <vPortSetupTimerInterrupt+0x3c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a0a      	ldr	r2, [pc, #40]	; (8008810 <vPortSetupTimerInterrupt+0x40>)
 80087e6:	fba2 2303 	umull	r2, r3, r2, r3
 80087ea:	099b      	lsrs	r3, r3, #6
 80087ec:	4a09      	ldr	r2, [pc, #36]	; (8008814 <vPortSetupTimerInterrupt+0x44>)
 80087ee:	3b01      	subs	r3, #1
 80087f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80087f2:	4b04      	ldr	r3, [pc, #16]	; (8008804 <vPortSetupTimerInterrupt+0x34>)
 80087f4:	2207      	movs	r2, #7
 80087f6:	601a      	str	r2, [r3, #0]
}
 80087f8:	bf00      	nop
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	e000e010 	.word	0xe000e010
 8008808:	e000e018 	.word	0xe000e018
 800880c:	20000000 	.word	0x20000000
 8008810:	10624dd3 	.word	0x10624dd3
 8008814:	e000e014 	.word	0xe000e014

08008818 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008818:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008828 <vPortEnableVFP+0x10>
 800881c:	6801      	ldr	r1, [r0, #0]
 800881e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008822:	6001      	str	r1, [r0, #0]
 8008824:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008826:	bf00      	nop
 8008828:	e000ed88 	.word	0xe000ed88

0800882c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008832:	f3ef 8305 	mrs	r3, IPSR
 8008836:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b0f      	cmp	r3, #15
 800883c:	d916      	bls.n	800886c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800883e:	4a19      	ldr	r2, [pc, #100]	; (80088a4 <vPortValidateInterruptPriority+0x78>)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4413      	add	r3, r2
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008848:	4b17      	ldr	r3, [pc, #92]	; (80088a8 <vPortValidateInterruptPriority+0x7c>)
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	7afa      	ldrb	r2, [r7, #11]
 800884e:	429a      	cmp	r2, r3
 8008850:	d20c      	bcs.n	800886c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008856:	b672      	cpsid	i
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	b662      	cpsie	i
 8008866:	607b      	str	r3, [r7, #4]
}
 8008868:	bf00      	nop
 800886a:	e7fe      	b.n	800886a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800886c:	4b0f      	ldr	r3, [pc, #60]	; (80088ac <vPortValidateInterruptPriority+0x80>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008874:	4b0e      	ldr	r3, [pc, #56]	; (80088b0 <vPortValidateInterruptPriority+0x84>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	429a      	cmp	r2, r3
 800887a:	d90c      	bls.n	8008896 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008880:	b672      	cpsid	i
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	b662      	cpsie	i
 8008890:	603b      	str	r3, [r7, #0]
}
 8008892:	bf00      	nop
 8008894:	e7fe      	b.n	8008894 <vPortValidateInterruptPriority+0x68>
	}
 8008896:	bf00      	nop
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	e000e3f0 	.word	0xe000e3f0
 80088a8:	20004a24 	.word	0x20004a24
 80088ac:	e000ed0c 	.word	0xe000ed0c
 80088b0:	20004a28 	.word	0x20004a28

080088b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10c      	bne.n	80088e2 <xQueueGenericReset+0x2e>
	__asm volatile
 80088c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088cc:	b672      	cpsid	i
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	b662      	cpsie	i
 80088dc:	60bb      	str	r3, [r7, #8]
}
 80088de:	bf00      	nop
 80088e0:	e7fe      	b.n	80088e0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80088e2:	f7ff febb 	bl	800865c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ee:	68f9      	ldr	r1, [r7, #12]
 80088f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80088f2:	fb01 f303 	mul.w	r3, r1, r3
 80088f6:	441a      	add	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008912:	3b01      	subs	r3, #1
 8008914:	68f9      	ldr	r1, [r7, #12]
 8008916:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008918:	fb01 f303 	mul.w	r3, r1, r3
 800891c:	441a      	add	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	22ff      	movs	r2, #255	; 0xff
 8008926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	22ff      	movs	r2, #255	; 0xff
 800892e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d114      	bne.n	8008962 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d01a      	beq.n	8008976 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	3310      	adds	r3, #16
 8008944:	4618      	mov	r0, r3
 8008946:	f001 f95d 	bl	8009c04 <xTaskRemoveFromEventList>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d012      	beq.n	8008976 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008950:	4b0c      	ldr	r3, [pc, #48]	; (8008984 <xQueueGenericReset+0xd0>)
 8008952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	e009      	b.n	8008976 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	3310      	adds	r3, #16
 8008966:	4618      	mov	r0, r3
 8008968:	f7ff fcb6 	bl	80082d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	3324      	adds	r3, #36	; 0x24
 8008970:	4618      	mov	r0, r3
 8008972:	f7ff fcb1 	bl	80082d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008976:	f7ff fea5 	bl	80086c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800897a:	2301      	movs	r3, #1
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	e000ed04 	.word	0xe000ed04

08008988 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08e      	sub	sp, #56	; 0x38
 800898c:	af02      	add	r7, sp, #8
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
 8008994:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10c      	bne.n	80089b6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800899c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a0:	b672      	cpsid	i
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	b662      	cpsie	i
 80089b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80089b2:	bf00      	nop
 80089b4:	e7fe      	b.n	80089b4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10c      	bne.n	80089d6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c0:	b672      	cpsid	i
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	b662      	cpsie	i
 80089d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80089d2:	bf00      	nop
 80089d4:	e7fe      	b.n	80089d4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d002      	beq.n	80089e2 <xQueueGenericCreateStatic+0x5a>
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <xQueueGenericCreateStatic+0x5e>
 80089e2:	2301      	movs	r3, #1
 80089e4:	e000      	b.n	80089e8 <xQueueGenericCreateStatic+0x60>
 80089e6:	2300      	movs	r3, #0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10c      	bne.n	8008a06 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80089ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f0:	b672      	cpsid	i
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	b662      	cpsie	i
 8008a00:	623b      	str	r3, [r7, #32]
}
 8008a02:	bf00      	nop
 8008a04:	e7fe      	b.n	8008a04 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d102      	bne.n	8008a12 <xQueueGenericCreateStatic+0x8a>
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d101      	bne.n	8008a16 <xQueueGenericCreateStatic+0x8e>
 8008a12:	2301      	movs	r3, #1
 8008a14:	e000      	b.n	8008a18 <xQueueGenericCreateStatic+0x90>
 8008a16:	2300      	movs	r3, #0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10c      	bne.n	8008a36 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a20:	b672      	cpsid	i
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	b662      	cpsie	i
 8008a30:	61fb      	str	r3, [r7, #28]
}
 8008a32:	bf00      	nop
 8008a34:	e7fe      	b.n	8008a34 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008a36:	2350      	movs	r3, #80	; 0x50
 8008a38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2b50      	cmp	r3, #80	; 0x50
 8008a3e:	d00c      	beq.n	8008a5a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	b672      	cpsid	i
 8008a46:	f383 8811 	msr	BASEPRI, r3
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	b662      	cpsie	i
 8008a54:	61bb      	str	r3, [r7, #24]
}
 8008a56:	bf00      	nop
 8008a58:	e7fe      	b.n	8008a58 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008a5a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00d      	beq.n	8008a82 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a6e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	4613      	mov	r3, r2
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	68b9      	ldr	r1, [r7, #8]
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f000 f805 	bl	8008a8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3730      	adds	r7, #48	; 0x30
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d103      	bne.n	8008aa8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	69ba      	ldr	r2, [r7, #24]
 8008aa4:	601a      	str	r2, [r3, #0]
 8008aa6:	e002      	b.n	8008aae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008aba:	2101      	movs	r1, #1
 8008abc:	69b8      	ldr	r0, [r7, #24]
 8008abe:	f7ff fef9 	bl	80088b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	78fa      	ldrb	r2, [r7, #3]
 8008ac6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008aca:	bf00      	nop
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
	...

08008ad4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b08e      	sub	sp, #56	; 0x38
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
 8008ae0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10c      	bne.n	8008b0a <xQueueGenericSend+0x36>
	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	b672      	cpsid	i
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	b662      	cpsie	i
 8008b04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b06:	bf00      	nop
 8008b08:	e7fe      	b.n	8008b08 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d103      	bne.n	8008b18 <xQueueGenericSend+0x44>
 8008b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d101      	bne.n	8008b1c <xQueueGenericSend+0x48>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e000      	b.n	8008b1e <xQueueGenericSend+0x4a>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10c      	bne.n	8008b3c <xQueueGenericSend+0x68>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b26:	b672      	cpsid	i
 8008b28:	f383 8811 	msr	BASEPRI, r3
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	b662      	cpsie	i
 8008b36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b38:	bf00      	nop
 8008b3a:	e7fe      	b.n	8008b3a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d103      	bne.n	8008b4a <xQueueGenericSend+0x76>
 8008b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d101      	bne.n	8008b4e <xQueueGenericSend+0x7a>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e000      	b.n	8008b50 <xQueueGenericSend+0x7c>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10c      	bne.n	8008b6e <xQueueGenericSend+0x9a>
	__asm volatile
 8008b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b58:	b672      	cpsid	i
 8008b5a:	f383 8811 	msr	BASEPRI, r3
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	b662      	cpsie	i
 8008b68:	623b      	str	r3, [r7, #32]
}
 8008b6a:	bf00      	nop
 8008b6c:	e7fe      	b.n	8008b6c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b6e:	f001 fa13 	bl	8009f98 <xTaskGetSchedulerState>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d102      	bne.n	8008b7e <xQueueGenericSend+0xaa>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d101      	bne.n	8008b82 <xQueueGenericSend+0xae>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e000      	b.n	8008b84 <xQueueGenericSend+0xb0>
 8008b82:	2300      	movs	r3, #0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10c      	bne.n	8008ba2 <xQueueGenericSend+0xce>
	__asm volatile
 8008b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8c:	b672      	cpsid	i
 8008b8e:	f383 8811 	msr	BASEPRI, r3
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	b662      	cpsie	i
 8008b9c:	61fb      	str	r3, [r7, #28]
}
 8008b9e:	bf00      	nop
 8008ba0:	e7fe      	b.n	8008ba0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ba2:	f7ff fd5b 	bl	800865c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d302      	bcc.n	8008bb8 <xQueueGenericSend+0xe4>
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d129      	bne.n	8008c0c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bb8:	683a      	ldr	r2, [r7, #0]
 8008bba:	68b9      	ldr	r1, [r7, #8]
 8008bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bbe:	f000 fa15 	bl	8008fec <prvCopyDataToQueue>
 8008bc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d010      	beq.n	8008bee <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bce:	3324      	adds	r3, #36	; 0x24
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f001 f817 	bl	8009c04 <xTaskRemoveFromEventList>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d013      	beq.n	8008c04 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008bdc:	4b3f      	ldr	r3, [pc, #252]	; (8008cdc <xQueueGenericSend+0x208>)
 8008bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008be2:	601a      	str	r2, [r3, #0]
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	e00a      	b.n	8008c04 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d007      	beq.n	8008c04 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008bf4:	4b39      	ldr	r3, [pc, #228]	; (8008cdc <xQueueGenericSend+0x208>)
 8008bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bfa:	601a      	str	r2, [r3, #0]
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008c04:	f7ff fd5e 	bl	80086c4 <vPortExitCritical>
				return pdPASS;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e063      	b.n	8008cd4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d103      	bne.n	8008c1a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c12:	f7ff fd57 	bl	80086c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c16:	2300      	movs	r3, #0
 8008c18:	e05c      	b.n	8008cd4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d106      	bne.n	8008c2e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c20:	f107 0314 	add.w	r3, r7, #20
 8008c24:	4618      	mov	r0, r3
 8008c26:	f001 f853 	bl	8009cd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c2e:	f7ff fd49 	bl	80086c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c32:	f000 fdb3 	bl	800979c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c36:	f7ff fd11 	bl	800865c <vPortEnterCritical>
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c40:	b25b      	sxtb	r3, r3
 8008c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c46:	d103      	bne.n	8008c50 <xQueueGenericSend+0x17c>
 8008c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c56:	b25b      	sxtb	r3, r3
 8008c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5c:	d103      	bne.n	8008c66 <xQueueGenericSend+0x192>
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c66:	f7ff fd2d 	bl	80086c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c6a:	1d3a      	adds	r2, r7, #4
 8008c6c:	f107 0314 	add.w	r3, r7, #20
 8008c70:	4611      	mov	r1, r2
 8008c72:	4618      	mov	r0, r3
 8008c74:	f001 f842 	bl	8009cfc <xTaskCheckForTimeOut>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d124      	bne.n	8008cc8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c80:	f000 faac 	bl	80091dc <prvIsQueueFull>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d018      	beq.n	8008cbc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8c:	3310      	adds	r3, #16
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	4611      	mov	r1, r2
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 ff62 	bl	8009b5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c9a:	f000 fa37 	bl	800910c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008c9e:	f000 fd8b 	bl	80097b8 <xTaskResumeAll>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f47f af7c 	bne.w	8008ba2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8008caa:	4b0c      	ldr	r3, [pc, #48]	; (8008cdc <xQueueGenericSend+0x208>)
 8008cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cb0:	601a      	str	r2, [r3, #0]
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	e772      	b.n	8008ba2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cbe:	f000 fa25 	bl	800910c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cc2:	f000 fd79 	bl	80097b8 <xTaskResumeAll>
 8008cc6:	e76c      	b.n	8008ba2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008cc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cca:	f000 fa1f 	bl	800910c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cce:	f000 fd73 	bl	80097b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008cd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3738      	adds	r7, #56	; 0x38
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	e000ed04 	.word	0xe000ed04

08008ce0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b08e      	sub	sp, #56	; 0x38
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10c      	bne.n	8008d12 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfc:	b672      	cpsid	i
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	b662      	cpsie	i
 8008d0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d0e:	bf00      	nop
 8008d10:	e7fe      	b.n	8008d10 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d103      	bne.n	8008d20 <xQueueGenericSendFromISR+0x40>
 8008d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <xQueueGenericSendFromISR+0x44>
 8008d20:	2301      	movs	r3, #1
 8008d22:	e000      	b.n	8008d26 <xQueueGenericSendFromISR+0x46>
 8008d24:	2300      	movs	r3, #0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10c      	bne.n	8008d44 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8008d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2e:	b672      	cpsid	i
 8008d30:	f383 8811 	msr	BASEPRI, r3
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	b662      	cpsie	i
 8008d3e:	623b      	str	r3, [r7, #32]
}
 8008d40:	bf00      	nop
 8008d42:	e7fe      	b.n	8008d42 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d103      	bne.n	8008d52 <xQueueGenericSendFromISR+0x72>
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d101      	bne.n	8008d56 <xQueueGenericSendFromISR+0x76>
 8008d52:	2301      	movs	r3, #1
 8008d54:	e000      	b.n	8008d58 <xQueueGenericSendFromISR+0x78>
 8008d56:	2300      	movs	r3, #0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d10c      	bne.n	8008d76 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d60:	b672      	cpsid	i
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	b662      	cpsie	i
 8008d70:	61fb      	str	r3, [r7, #28]
}
 8008d72:	bf00      	nop
 8008d74:	e7fe      	b.n	8008d74 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d76:	f7ff fd59 	bl	800882c <vPortValidateInterruptPriority>
	__asm volatile
 8008d7a:	f3ef 8211 	mrs	r2, BASEPRI
 8008d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d82:	b672      	cpsid	i
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	b662      	cpsie	i
 8008d92:	61ba      	str	r2, [r7, #24]
 8008d94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008d96:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d302      	bcc.n	8008dac <xQueueGenericSendFromISR+0xcc>
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d12c      	bne.n	8008e06 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	68b9      	ldr	r1, [r7, #8]
 8008dba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dbc:	f000 f916 	bl	8008fec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008dc0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc8:	d112      	bne.n	8008df0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d016      	beq.n	8008e00 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd4:	3324      	adds	r3, #36	; 0x24
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 ff14 	bl	8009c04 <xTaskRemoveFromEventList>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00e      	beq.n	8008e00 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00b      	beq.n	8008e00 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	e007      	b.n	8008e00 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008df0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008df4:	3301      	adds	r3, #1
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	b25a      	sxtb	r2, r3
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008e00:	2301      	movs	r3, #1
 8008e02:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008e04:	e001      	b.n	8008e0a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	637b      	str	r3, [r7, #52]	; 0x34
 8008e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	f383 8811 	msr	BASEPRI, r3
}
 8008e14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3738      	adds	r7, #56	; 0x38
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08c      	sub	sp, #48	; 0x30
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10c      	bne.n	8008e54 <xQueueReceive+0x34>
	__asm volatile
 8008e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3e:	b672      	cpsid	i
 8008e40:	f383 8811 	msr	BASEPRI, r3
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	b662      	cpsie	i
 8008e4e:	623b      	str	r3, [r7, #32]
}
 8008e50:	bf00      	nop
 8008e52:	e7fe      	b.n	8008e52 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d103      	bne.n	8008e62 <xQueueReceive+0x42>
 8008e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <xQueueReceive+0x46>
 8008e62:	2301      	movs	r3, #1
 8008e64:	e000      	b.n	8008e68 <xQueueReceive+0x48>
 8008e66:	2300      	movs	r3, #0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10c      	bne.n	8008e86 <xQueueReceive+0x66>
	__asm volatile
 8008e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e70:	b672      	cpsid	i
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	b662      	cpsie	i
 8008e80:	61fb      	str	r3, [r7, #28]
}
 8008e82:	bf00      	nop
 8008e84:	e7fe      	b.n	8008e84 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e86:	f001 f887 	bl	8009f98 <xTaskGetSchedulerState>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d102      	bne.n	8008e96 <xQueueReceive+0x76>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <xQueueReceive+0x7a>
 8008e96:	2301      	movs	r3, #1
 8008e98:	e000      	b.n	8008e9c <xQueueReceive+0x7c>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10c      	bne.n	8008eba <xQueueReceive+0x9a>
	__asm volatile
 8008ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea4:	b672      	cpsid	i
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	b662      	cpsie	i
 8008eb4:	61bb      	str	r3, [r7, #24]
}
 8008eb6:	bf00      	nop
 8008eb8:	e7fe      	b.n	8008eb8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008eba:	f7ff fbcf 	bl	800865c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d01f      	beq.n	8008f0a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008eca:	68b9      	ldr	r1, [r7, #8]
 8008ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ece:	f000 f8f7 	bl	80090c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed4:	1e5a      	subs	r2, r3, #1
 8008ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00f      	beq.n	8008f02 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee4:	3310      	adds	r3, #16
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 fe8c 	bl	8009c04 <xTaskRemoveFromEventList>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d007      	beq.n	8008f02 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ef2:	4b3d      	ldr	r3, [pc, #244]	; (8008fe8 <xQueueReceive+0x1c8>)
 8008ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ef8:	601a      	str	r2, [r3, #0]
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f02:	f7ff fbdf 	bl	80086c4 <vPortExitCritical>
				return pdPASS;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e069      	b.n	8008fde <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d103      	bne.n	8008f18 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f10:	f7ff fbd8 	bl	80086c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f14:	2300      	movs	r3, #0
 8008f16:	e062      	b.n	8008fde <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d106      	bne.n	8008f2c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f1e:	f107 0310 	add.w	r3, r7, #16
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 fed4 	bl	8009cd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f2c:	f7ff fbca 	bl	80086c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f30:	f000 fc34 	bl	800979c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f34:	f7ff fb92 	bl	800865c <vPortEnterCritical>
 8008f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f3e:	b25b      	sxtb	r3, r3
 8008f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f44:	d103      	bne.n	8008f4e <xQueueReceive+0x12e>
 8008f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f54:	b25b      	sxtb	r3, r3
 8008f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5a:	d103      	bne.n	8008f64 <xQueueReceive+0x144>
 8008f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f64:	f7ff fbae 	bl	80086c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f68:	1d3a      	adds	r2, r7, #4
 8008f6a:	f107 0310 	add.w	r3, r7, #16
 8008f6e:	4611      	mov	r1, r2
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 fec3 	bl	8009cfc <xTaskCheckForTimeOut>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d123      	bne.n	8008fc4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f7e:	f000 f917 	bl	80091b0 <prvIsQueueEmpty>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d017      	beq.n	8008fb8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8a:	3324      	adds	r3, #36	; 0x24
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	4611      	mov	r1, r2
 8008f90:	4618      	mov	r0, r3
 8008f92:	f000 fde3 	bl	8009b5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f98:	f000 f8b8 	bl	800910c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f9c:	f000 fc0c 	bl	80097b8 <xTaskResumeAll>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d189      	bne.n	8008eba <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008fa6:	4b10      	ldr	r3, [pc, #64]	; (8008fe8 <xQueueReceive+0x1c8>)
 8008fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fac:	601a      	str	r2, [r3, #0]
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	e780      	b.n	8008eba <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fba:	f000 f8a7 	bl	800910c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fbe:	f000 fbfb 	bl	80097b8 <xTaskResumeAll>
 8008fc2:	e77a      	b.n	8008eba <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fc6:	f000 f8a1 	bl	800910c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fca:	f000 fbf5 	bl	80097b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fd0:	f000 f8ee 	bl	80091b0 <prvIsQueueEmpty>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f43f af6f 	beq.w	8008eba <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008fdc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3730      	adds	r7, #48	; 0x30
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	e000ed04 	.word	0xe000ed04

08008fec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b086      	sub	sp, #24
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009000:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009006:	2b00      	cmp	r3, #0
 8009008:	d10d      	bne.n	8009026 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d14d      	bne.n	80090ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	4618      	mov	r0, r3
 8009018:	f000 ffdc 	bl	8009fd4 <xTaskPriorityDisinherit>
 800901c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	609a      	str	r2, [r3, #8]
 8009024:	e043      	b.n	80090ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d119      	bne.n	8009060 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6858      	ldr	r0, [r3, #4]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009034:	461a      	mov	r2, r3
 8009036:	68b9      	ldr	r1, [r7, #8]
 8009038:	f001 fdf8 	bl	800ac2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009044:	441a      	add	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	685a      	ldr	r2, [r3, #4]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	429a      	cmp	r2, r3
 8009054:	d32b      	bcc.n	80090ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	605a      	str	r2, [r3, #4]
 800905e:	e026      	b.n	80090ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	68d8      	ldr	r0, [r3, #12]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009068:	461a      	mov	r2, r3
 800906a:	68b9      	ldr	r1, [r7, #8]
 800906c:	f001 fdde 	bl	800ac2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	68da      	ldr	r2, [r3, #12]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009078:	425b      	negs	r3, r3
 800907a:	441a      	add	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	68da      	ldr	r2, [r3, #12]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	429a      	cmp	r2, r3
 800908a:	d207      	bcs.n	800909c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	689a      	ldr	r2, [r3, #8]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009094:	425b      	negs	r3, r3
 8009096:	441a      	add	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d105      	bne.n	80090ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d002      	beq.n	80090ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	3b01      	subs	r3, #1
 80090ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	1c5a      	adds	r2, r3, #1
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80090b6:	697b      	ldr	r3, [r7, #20]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3718      	adds	r7, #24
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d018      	beq.n	8009104 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	68da      	ldr	r2, [r3, #12]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090da:	441a      	add	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	68da      	ldr	r2, [r3, #12]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d303      	bcc.n	80090f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	68d9      	ldr	r1, [r3, #12]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fc:	461a      	mov	r2, r3
 80090fe:	6838      	ldr	r0, [r7, #0]
 8009100:	f001 fd94 	bl	800ac2c <memcpy>
	}
}
 8009104:	bf00      	nop
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009114:	f7ff faa2 	bl	800865c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800911e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009120:	e011      	b.n	8009146 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009126:	2b00      	cmp	r3, #0
 8009128:	d012      	beq.n	8009150 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	3324      	adds	r3, #36	; 0x24
 800912e:	4618      	mov	r0, r3
 8009130:	f000 fd68 	bl	8009c04 <xTaskRemoveFromEventList>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800913a:	f000 fe45 	bl	8009dc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800913e:	7bfb      	ldrb	r3, [r7, #15]
 8009140:	3b01      	subs	r3, #1
 8009142:	b2db      	uxtb	r3, r3
 8009144:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800914a:	2b00      	cmp	r3, #0
 800914c:	dce9      	bgt.n	8009122 <prvUnlockQueue+0x16>
 800914e:	e000      	b.n	8009152 <prvUnlockQueue+0x46>
					break;
 8009150:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	22ff      	movs	r2, #255	; 0xff
 8009156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800915a:	f7ff fab3 	bl	80086c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800915e:	f7ff fa7d 	bl	800865c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009168:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800916a:	e011      	b.n	8009190 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d012      	beq.n	800919a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	3310      	adds	r3, #16
 8009178:	4618      	mov	r0, r3
 800917a:	f000 fd43 	bl	8009c04 <xTaskRemoveFromEventList>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009184:	f000 fe20 	bl	8009dc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009188:	7bbb      	ldrb	r3, [r7, #14]
 800918a:	3b01      	subs	r3, #1
 800918c:	b2db      	uxtb	r3, r3
 800918e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009194:	2b00      	cmp	r3, #0
 8009196:	dce9      	bgt.n	800916c <prvUnlockQueue+0x60>
 8009198:	e000      	b.n	800919c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800919a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	22ff      	movs	r2, #255	; 0xff
 80091a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80091a4:	f7ff fa8e 	bl	80086c4 <vPortExitCritical>
}
 80091a8:	bf00      	nop
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091b8:	f7ff fa50 	bl	800865c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d102      	bne.n	80091ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80091c4:	2301      	movs	r3, #1
 80091c6:	60fb      	str	r3, [r7, #12]
 80091c8:	e001      	b.n	80091ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80091ca:	2300      	movs	r3, #0
 80091cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091ce:	f7ff fa79 	bl	80086c4 <vPortExitCritical>

	return xReturn;
 80091d2:	68fb      	ldr	r3, [r7, #12]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091e4:	f7ff fa3a 	bl	800865c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d102      	bne.n	80091fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80091f4:	2301      	movs	r3, #1
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	e001      	b.n	80091fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80091fa:	2300      	movs	r3, #0
 80091fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091fe:	f7ff fa61 	bl	80086c4 <vPortExitCritical>

	return xReturn;
 8009202:	68fb      	ldr	r3, [r7, #12]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009216:	2300      	movs	r3, #0
 8009218:	60fb      	str	r3, [r7, #12]
 800921a:	e014      	b.n	8009246 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800921c:	4a0f      	ldr	r2, [pc, #60]	; (800925c <vQueueAddToRegistry+0x50>)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10b      	bne.n	8009240 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009228:	490c      	ldr	r1, [pc, #48]	; (800925c <vQueueAddToRegistry+0x50>)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009232:	4a0a      	ldr	r2, [pc, #40]	; (800925c <vQueueAddToRegistry+0x50>)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	00db      	lsls	r3, r3, #3
 8009238:	4413      	add	r3, r2
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800923e:	e006      	b.n	800924e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	3301      	adds	r3, #1
 8009244:	60fb      	str	r3, [r7, #12]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2b07      	cmp	r3, #7
 800924a:	d9e7      	bls.n	800921c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800924c:	bf00      	nop
 800924e:	bf00      	nop
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	20004a2c 	.word	0x20004a2c

08009260 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009270:	f7ff f9f4 	bl	800865c <vPortEnterCritical>
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800927a:	b25b      	sxtb	r3, r3
 800927c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009280:	d103      	bne.n	800928a <vQueueWaitForMessageRestricted+0x2a>
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009290:	b25b      	sxtb	r3, r3
 8009292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009296:	d103      	bne.n	80092a0 <vQueueWaitForMessageRestricted+0x40>
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	2200      	movs	r2, #0
 800929c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092a0:	f7ff fa10 	bl	80086c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d106      	bne.n	80092ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	3324      	adds	r3, #36	; 0x24
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	68b9      	ldr	r1, [r7, #8]
 80092b4:	4618      	mov	r0, r3
 80092b6:	f000 fc77 	bl	8009ba8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80092ba:	6978      	ldr	r0, [r7, #20]
 80092bc:	f7ff ff26 	bl	800910c <prvUnlockQueue>
	}
 80092c0:	bf00      	nop
 80092c2:	3718      	adds	r7, #24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b08e      	sub	sp, #56	; 0x38
 80092cc:	af04      	add	r7, sp, #16
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]
 80092d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80092d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10c      	bne.n	80092f6 <xTaskCreateStatic+0x2e>
	__asm volatile
 80092dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e0:	b672      	cpsid	i
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	b662      	cpsie	i
 80092f0:	623b      	str	r3, [r7, #32]
}
 80092f2:	bf00      	nop
 80092f4:	e7fe      	b.n	80092f4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80092f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10c      	bne.n	8009316 <xTaskCreateStatic+0x4e>
	__asm volatile
 80092fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009300:	b672      	cpsid	i
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	b662      	cpsie	i
 8009310:	61fb      	str	r3, [r7, #28]
}
 8009312:	bf00      	nop
 8009314:	e7fe      	b.n	8009314 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009316:	23bc      	movs	r3, #188	; 0xbc
 8009318:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	2bbc      	cmp	r3, #188	; 0xbc
 800931e:	d00c      	beq.n	800933a <xTaskCreateStatic+0x72>
	__asm volatile
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	b672      	cpsid	i
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	b662      	cpsie	i
 8009334:	61bb      	str	r3, [r7, #24]
}
 8009336:	bf00      	nop
 8009338:	e7fe      	b.n	8009338 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800933a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933e:	2b00      	cmp	r3, #0
 8009340:	d01e      	beq.n	8009380 <xTaskCreateStatic+0xb8>
 8009342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009344:	2b00      	cmp	r3, #0
 8009346:	d01b      	beq.n	8009380 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009350:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	2202      	movs	r2, #2
 8009356:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800935a:	2300      	movs	r3, #0
 800935c:	9303      	str	r3, [sp, #12]
 800935e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009360:	9302      	str	r3, [sp, #8]
 8009362:	f107 0314 	add.w	r3, r7, #20
 8009366:	9301      	str	r3, [sp, #4]
 8009368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	68b9      	ldr	r1, [r7, #8]
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f000 f850 	bl	8009418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009378:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800937a:	f000 f8f5 	bl	8009568 <prvAddNewTaskToReadyList>
 800937e:	e001      	b.n	8009384 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009380:	2300      	movs	r3, #0
 8009382:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009384:	697b      	ldr	r3, [r7, #20]
	}
 8009386:	4618      	mov	r0, r3
 8009388:	3728      	adds	r7, #40	; 0x28
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800938e:	b580      	push	{r7, lr}
 8009390:	b08c      	sub	sp, #48	; 0x30
 8009392:	af04      	add	r7, sp, #16
 8009394:	60f8      	str	r0, [r7, #12]
 8009396:	60b9      	str	r1, [r7, #8]
 8009398:	603b      	str	r3, [r7, #0]
 800939a:	4613      	mov	r3, r2
 800939c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800939e:	88fb      	ldrh	r3, [r7, #6]
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fe fdb4 	bl	8007f10 <pvPortMalloc>
 80093a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00e      	beq.n	80093ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80093b0:	20bc      	movs	r0, #188	; 0xbc
 80093b2:	f7fe fdad 	bl	8007f10 <pvPortMalloc>
 80093b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d003      	beq.n	80093c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	631a      	str	r2, [r3, #48]	; 0x30
 80093c4:	e005      	b.n	80093d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80093c6:	6978      	ldr	r0, [r7, #20]
 80093c8:	f7fe fe6c 	bl	80080a4 <vPortFree>
 80093cc:	e001      	b.n	80093d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80093ce:	2300      	movs	r3, #0
 80093d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d017      	beq.n	8009408 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80093e0:	88fa      	ldrh	r2, [r7, #6]
 80093e2:	2300      	movs	r3, #0
 80093e4:	9303      	str	r3, [sp, #12]
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	9302      	str	r3, [sp, #8]
 80093ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	68b9      	ldr	r1, [r7, #8]
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f000 f80e 	bl	8009418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093fc:	69f8      	ldr	r0, [r7, #28]
 80093fe:	f000 f8b3 	bl	8009568 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009402:	2301      	movs	r3, #1
 8009404:	61bb      	str	r3, [r7, #24]
 8009406:	e002      	b.n	800940e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009408:	f04f 33ff 	mov.w	r3, #4294967295
 800940c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800940e:	69bb      	ldr	r3, [r7, #24]
	}
 8009410:	4618      	mov	r0, r3
 8009412:	3720      	adds	r7, #32
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b088      	sub	sp, #32
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
 8009424:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009428:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	461a      	mov	r2, r3
 8009430:	21a5      	movs	r1, #165	; 0xa5
 8009432:	f001 fc09 	bl	800ac48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800943a:	6879      	ldr	r1, [r7, #4]
 800943c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009440:	440b      	add	r3, r1
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	4413      	add	r3, r2
 8009446:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	f023 0307 	bic.w	r3, r3, #7
 800944e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	f003 0307 	and.w	r3, r3, #7
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00c      	beq.n	8009474 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800945a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945e:	b672      	cpsid	i
 8009460:	f383 8811 	msr	BASEPRI, r3
 8009464:	f3bf 8f6f 	isb	sy
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	b662      	cpsie	i
 800946e:	617b      	str	r3, [r7, #20]
}
 8009470:	bf00      	nop
 8009472:	e7fe      	b.n	8009472 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d01f      	beq.n	80094ba <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800947a:	2300      	movs	r3, #0
 800947c:	61fb      	str	r3, [r7, #28]
 800947e:	e012      	b.n	80094a6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	4413      	add	r3, r2
 8009486:	7819      	ldrb	r1, [r3, #0]
 8009488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	4413      	add	r3, r2
 800948e:	3334      	adds	r3, #52	; 0x34
 8009490:	460a      	mov	r2, r1
 8009492:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	4413      	add	r3, r2
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d006      	beq.n	80094ae <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	3301      	adds	r3, #1
 80094a4:	61fb      	str	r3, [r7, #28]
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	2b0f      	cmp	r3, #15
 80094aa:	d9e9      	bls.n	8009480 <prvInitialiseNewTask+0x68>
 80094ac:	e000      	b.n	80094b0 <prvInitialiseNewTask+0x98>
			{
				break;
 80094ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80094b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80094b8:	e003      	b.n	80094c2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80094ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094bc:	2200      	movs	r2, #0
 80094be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80094c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c4:	2b37      	cmp	r3, #55	; 0x37
 80094c6:	d901      	bls.n	80094cc <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80094c8:	2337      	movs	r3, #55	; 0x37
 80094ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80094cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80094d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80094d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094da:	2200      	movs	r2, #0
 80094dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80094de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e0:	3304      	adds	r3, #4
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fe ff18 	bl	8008318 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80094e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ea:	3318      	adds	r3, #24
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7fe ff13 	bl	8008318 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80094f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009500:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009506:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950a:	2200      	movs	r2, #0
 800950c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009512:	2200      	movs	r2, #0
 8009514:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951a:	3354      	adds	r3, #84	; 0x54
 800951c:	2260      	movs	r2, #96	; 0x60
 800951e:	2100      	movs	r1, #0
 8009520:	4618      	mov	r0, r3
 8009522:	f001 fb91 	bl	800ac48 <memset>
 8009526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009528:	4a0c      	ldr	r2, [pc, #48]	; (800955c <prvInitialiseNewTask+0x144>)
 800952a:	659a      	str	r2, [r3, #88]	; 0x58
 800952c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952e:	4a0c      	ldr	r2, [pc, #48]	; (8009560 <prvInitialiseNewTask+0x148>)
 8009530:	65da      	str	r2, [r3, #92]	; 0x5c
 8009532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009534:	4a0b      	ldr	r2, [pc, #44]	; (8009564 <prvInitialiseNewTask+0x14c>)
 8009536:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009538:	683a      	ldr	r2, [r7, #0]
 800953a:	68f9      	ldr	r1, [r7, #12]
 800953c:	69b8      	ldr	r0, [r7, #24]
 800953e:	f7fe ff7f 	bl	8008440 <pxPortInitialiseStack>
 8009542:	4602      	mov	r2, r0
 8009544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009546:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954a:	2b00      	cmp	r3, #0
 800954c:	d002      	beq.n	8009554 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800954e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009552:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009554:	bf00      	nop
 8009556:	3720      	adds	r7, #32
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	0800d9d0 	.word	0x0800d9d0
 8009560:	0800d9f0 	.word	0x0800d9f0
 8009564:	0800d9b0 	.word	0x0800d9b0

08009568 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009570:	f7ff f874 	bl	800865c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009574:	4b2d      	ldr	r3, [pc, #180]	; (800962c <prvAddNewTaskToReadyList+0xc4>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	3301      	adds	r3, #1
 800957a:	4a2c      	ldr	r2, [pc, #176]	; (800962c <prvAddNewTaskToReadyList+0xc4>)
 800957c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800957e:	4b2c      	ldr	r3, [pc, #176]	; (8009630 <prvAddNewTaskToReadyList+0xc8>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d109      	bne.n	800959a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009586:	4a2a      	ldr	r2, [pc, #168]	; (8009630 <prvAddNewTaskToReadyList+0xc8>)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800958c:	4b27      	ldr	r3, [pc, #156]	; (800962c <prvAddNewTaskToReadyList+0xc4>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d110      	bne.n	80095b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009594:	f000 fc3c 	bl	8009e10 <prvInitialiseTaskLists>
 8009598:	e00d      	b.n	80095b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800959a:	4b26      	ldr	r3, [pc, #152]	; (8009634 <prvAddNewTaskToReadyList+0xcc>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d109      	bne.n	80095b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80095a2:	4b23      	ldr	r3, [pc, #140]	; (8009630 <prvAddNewTaskToReadyList+0xc8>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d802      	bhi.n	80095b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80095b0:	4a1f      	ldr	r2, [pc, #124]	; (8009630 <prvAddNewTaskToReadyList+0xc8>)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80095b6:	4b20      	ldr	r3, [pc, #128]	; (8009638 <prvAddNewTaskToReadyList+0xd0>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	3301      	adds	r3, #1
 80095bc:	4a1e      	ldr	r2, [pc, #120]	; (8009638 <prvAddNewTaskToReadyList+0xd0>)
 80095be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80095c0:	4b1d      	ldr	r3, [pc, #116]	; (8009638 <prvAddNewTaskToReadyList+0xd0>)
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095cc:	4b1b      	ldr	r3, [pc, #108]	; (800963c <prvAddNewTaskToReadyList+0xd4>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d903      	bls.n	80095dc <prvAddNewTaskToReadyList+0x74>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d8:	4a18      	ldr	r2, [pc, #96]	; (800963c <prvAddNewTaskToReadyList+0xd4>)
 80095da:	6013      	str	r3, [r2, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e0:	4613      	mov	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4413      	add	r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4a15      	ldr	r2, [pc, #84]	; (8009640 <prvAddNewTaskToReadyList+0xd8>)
 80095ea:	441a      	add	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	3304      	adds	r3, #4
 80095f0:	4619      	mov	r1, r3
 80095f2:	4610      	mov	r0, r2
 80095f4:	f7fe fe9d 	bl	8008332 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80095f8:	f7ff f864 	bl	80086c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80095fc:	4b0d      	ldr	r3, [pc, #52]	; (8009634 <prvAddNewTaskToReadyList+0xcc>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00e      	beq.n	8009622 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009604:	4b0a      	ldr	r3, [pc, #40]	; (8009630 <prvAddNewTaskToReadyList+0xc8>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960e:	429a      	cmp	r2, r3
 8009610:	d207      	bcs.n	8009622 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009612:	4b0c      	ldr	r3, [pc, #48]	; (8009644 <prvAddNewTaskToReadyList+0xdc>)
 8009614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009618:	601a      	str	r2, [r3, #0]
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009622:	bf00      	nop
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	20004f40 	.word	0x20004f40
 8009630:	20004a6c 	.word	0x20004a6c
 8009634:	20004f4c 	.word	0x20004f4c
 8009638:	20004f5c 	.word	0x20004f5c
 800963c:	20004f48 	.word	0x20004f48
 8009640:	20004a70 	.word	0x20004a70
 8009644:	e000ed04 	.word	0xe000ed04

08009648 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009650:	2300      	movs	r3, #0
 8009652:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d019      	beq.n	800968e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800965a:	4b14      	ldr	r3, [pc, #80]	; (80096ac <vTaskDelay+0x64>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00c      	beq.n	800967c <vTaskDelay+0x34>
	__asm volatile
 8009662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009666:	b672      	cpsid	i
 8009668:	f383 8811 	msr	BASEPRI, r3
 800966c:	f3bf 8f6f 	isb	sy
 8009670:	f3bf 8f4f 	dsb	sy
 8009674:	b662      	cpsie	i
 8009676:	60bb      	str	r3, [r7, #8]
}
 8009678:	bf00      	nop
 800967a:	e7fe      	b.n	800967a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800967c:	f000 f88e 	bl	800979c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009680:	2100      	movs	r1, #0
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 fd18 	bl	800a0b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009688:	f000 f896 	bl	80097b8 <xTaskResumeAll>
 800968c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d107      	bne.n	80096a4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8009694:	4b06      	ldr	r3, [pc, #24]	; (80096b0 <vTaskDelay+0x68>)
 8009696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800969a:	601a      	str	r2, [r3, #0]
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096a4:	bf00      	nop
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	20004f68 	.word	0x20004f68
 80096b0:	e000ed04 	.word	0xe000ed04

080096b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b08a      	sub	sp, #40	; 0x28
 80096b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096ba:	2300      	movs	r3, #0
 80096bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096be:	2300      	movs	r3, #0
 80096c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096c2:	463a      	mov	r2, r7
 80096c4:	1d39      	adds	r1, r7, #4
 80096c6:	f107 0308 	add.w	r3, r7, #8
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fe fbec 	bl	8007ea8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	9202      	str	r2, [sp, #8]
 80096d8:	9301      	str	r3, [sp, #4]
 80096da:	2300      	movs	r3, #0
 80096dc:	9300      	str	r3, [sp, #0]
 80096de:	2300      	movs	r3, #0
 80096e0:	460a      	mov	r2, r1
 80096e2:	4926      	ldr	r1, [pc, #152]	; (800977c <vTaskStartScheduler+0xc8>)
 80096e4:	4826      	ldr	r0, [pc, #152]	; (8009780 <vTaskStartScheduler+0xcc>)
 80096e6:	f7ff fdef 	bl	80092c8 <xTaskCreateStatic>
 80096ea:	4603      	mov	r3, r0
 80096ec:	4a25      	ldr	r2, [pc, #148]	; (8009784 <vTaskStartScheduler+0xd0>)
 80096ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80096f0:	4b24      	ldr	r3, [pc, #144]	; (8009784 <vTaskStartScheduler+0xd0>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d002      	beq.n	80096fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80096f8:	2301      	movs	r3, #1
 80096fa:	617b      	str	r3, [r7, #20]
 80096fc:	e001      	b.n	8009702 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80096fe:	2300      	movs	r3, #0
 8009700:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d102      	bne.n	800970e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009708:	f000 fd2a 	bl	800a160 <xTimerCreateTimerTask>
 800970c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d11d      	bne.n	8009750 <vTaskStartScheduler+0x9c>
	__asm volatile
 8009714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009718:	b672      	cpsid	i
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	b662      	cpsie	i
 8009728:	613b      	str	r3, [r7, #16]
}
 800972a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800972c:	4b16      	ldr	r3, [pc, #88]	; (8009788 <vTaskStartScheduler+0xd4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3354      	adds	r3, #84	; 0x54
 8009732:	4a16      	ldr	r2, [pc, #88]	; (800978c <vTaskStartScheduler+0xd8>)
 8009734:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009736:	4b16      	ldr	r3, [pc, #88]	; (8009790 <vTaskStartScheduler+0xdc>)
 8009738:	f04f 32ff 	mov.w	r2, #4294967295
 800973c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800973e:	4b15      	ldr	r3, [pc, #84]	; (8009794 <vTaskStartScheduler+0xe0>)
 8009740:	2201      	movs	r2, #1
 8009742:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009744:	4b14      	ldr	r3, [pc, #80]	; (8009798 <vTaskStartScheduler+0xe4>)
 8009746:	2200      	movs	r2, #0
 8009748:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800974a:	f7fe ff09 	bl	8008560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800974e:	e010      	b.n	8009772 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009756:	d10c      	bne.n	8009772 <vTaskStartScheduler+0xbe>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	b672      	cpsid	i
 800975e:	f383 8811 	msr	BASEPRI, r3
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	b662      	cpsie	i
 800976c:	60fb      	str	r3, [r7, #12]
}
 800976e:	bf00      	nop
 8009770:	e7fe      	b.n	8009770 <vTaskStartScheduler+0xbc>
}
 8009772:	bf00      	nop
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	0800d95c 	.word	0x0800d95c
 8009780:	08009de1 	.word	0x08009de1
 8009784:	20004f64 	.word	0x20004f64
 8009788:	20004a6c 	.word	0x20004a6c
 800978c:	20000010 	.word	0x20000010
 8009790:	20004f60 	.word	0x20004f60
 8009794:	20004f4c 	.word	0x20004f4c
 8009798:	20004f44 	.word	0x20004f44

0800979c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80097a0:	4b04      	ldr	r3, [pc, #16]	; (80097b4 <vTaskSuspendAll+0x18>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3301      	adds	r3, #1
 80097a6:	4a03      	ldr	r2, [pc, #12]	; (80097b4 <vTaskSuspendAll+0x18>)
 80097a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80097aa:	bf00      	nop
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr
 80097b4:	20004f68 	.word	0x20004f68

080097b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80097be:	2300      	movs	r3, #0
 80097c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80097c2:	2300      	movs	r3, #0
 80097c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097c6:	4b43      	ldr	r3, [pc, #268]	; (80098d4 <xTaskResumeAll+0x11c>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10c      	bne.n	80097e8 <xTaskResumeAll+0x30>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d2:	b672      	cpsid	i
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	b662      	cpsie	i
 80097e2:	603b      	str	r3, [r7, #0]
}
 80097e4:	bf00      	nop
 80097e6:	e7fe      	b.n	80097e6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097e8:	f7fe ff38 	bl	800865c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097ec:	4b39      	ldr	r3, [pc, #228]	; (80098d4 <xTaskResumeAll+0x11c>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	3b01      	subs	r3, #1
 80097f2:	4a38      	ldr	r2, [pc, #224]	; (80098d4 <xTaskResumeAll+0x11c>)
 80097f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097f6:	4b37      	ldr	r3, [pc, #220]	; (80098d4 <xTaskResumeAll+0x11c>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d162      	bne.n	80098c4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097fe:	4b36      	ldr	r3, [pc, #216]	; (80098d8 <xTaskResumeAll+0x120>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d05e      	beq.n	80098c4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009806:	e02f      	b.n	8009868 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009808:	4b34      	ldr	r3, [pc, #208]	; (80098dc <xTaskResumeAll+0x124>)
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	3318      	adds	r3, #24
 8009814:	4618      	mov	r0, r3
 8009816:	f7fe fde9 	bl	80083ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	3304      	adds	r3, #4
 800981e:	4618      	mov	r0, r3
 8009820:	f7fe fde4 	bl	80083ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009828:	4b2d      	ldr	r3, [pc, #180]	; (80098e0 <xTaskResumeAll+0x128>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	429a      	cmp	r2, r3
 800982e:	d903      	bls.n	8009838 <xTaskResumeAll+0x80>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009834:	4a2a      	ldr	r2, [pc, #168]	; (80098e0 <xTaskResumeAll+0x128>)
 8009836:	6013      	str	r3, [r2, #0]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800983c:	4613      	mov	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4a27      	ldr	r2, [pc, #156]	; (80098e4 <xTaskResumeAll+0x12c>)
 8009846:	441a      	add	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	3304      	adds	r3, #4
 800984c:	4619      	mov	r1, r3
 800984e:	4610      	mov	r0, r2
 8009850:	f7fe fd6f 	bl	8008332 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009858:	4b23      	ldr	r3, [pc, #140]	; (80098e8 <xTaskResumeAll+0x130>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985e:	429a      	cmp	r2, r3
 8009860:	d302      	bcc.n	8009868 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8009862:	4b22      	ldr	r3, [pc, #136]	; (80098ec <xTaskResumeAll+0x134>)
 8009864:	2201      	movs	r2, #1
 8009866:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009868:	4b1c      	ldr	r3, [pc, #112]	; (80098dc <xTaskResumeAll+0x124>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1cb      	bne.n	8009808 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d001      	beq.n	800987a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009876:	f000 fb6f 	bl	8009f58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800987a:	4b1d      	ldr	r3, [pc, #116]	; (80098f0 <xTaskResumeAll+0x138>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d010      	beq.n	80098a8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009886:	f000 f847 	bl	8009918 <xTaskIncrementTick>
 800988a:	4603      	mov	r3, r0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d002      	beq.n	8009896 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8009890:	4b16      	ldr	r3, [pc, #88]	; (80098ec <xTaskResumeAll+0x134>)
 8009892:	2201      	movs	r2, #1
 8009894:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	3b01      	subs	r3, #1
 800989a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1f1      	bne.n	8009886 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80098a2:	4b13      	ldr	r3, [pc, #76]	; (80098f0 <xTaskResumeAll+0x138>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80098a8:	4b10      	ldr	r3, [pc, #64]	; (80098ec <xTaskResumeAll+0x134>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d009      	beq.n	80098c4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80098b0:	2301      	movs	r3, #1
 80098b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80098b4:	4b0f      	ldr	r3, [pc, #60]	; (80098f4 <xTaskResumeAll+0x13c>)
 80098b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ba:	601a      	str	r2, [r3, #0]
 80098bc:	f3bf 8f4f 	dsb	sy
 80098c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098c4:	f7fe fefe 	bl	80086c4 <vPortExitCritical>

	return xAlreadyYielded;
 80098c8:	68bb      	ldr	r3, [r7, #8]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	20004f68 	.word	0x20004f68
 80098d8:	20004f40 	.word	0x20004f40
 80098dc:	20004f00 	.word	0x20004f00
 80098e0:	20004f48 	.word	0x20004f48
 80098e4:	20004a70 	.word	0x20004a70
 80098e8:	20004a6c 	.word	0x20004a6c
 80098ec:	20004f54 	.word	0x20004f54
 80098f0:	20004f50 	.word	0x20004f50
 80098f4:	e000ed04 	.word	0xe000ed04

080098f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80098fe:	4b05      	ldr	r3, [pc, #20]	; (8009914 <xTaskGetTickCount+0x1c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009904:	687b      	ldr	r3, [r7, #4]
}
 8009906:	4618      	mov	r0, r3
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	20004f44 	.word	0x20004f44

08009918 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800991e:	2300      	movs	r3, #0
 8009920:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009922:	4b50      	ldr	r3, [pc, #320]	; (8009a64 <xTaskIncrementTick+0x14c>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	f040 808b 	bne.w	8009a42 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800992c:	4b4e      	ldr	r3, [pc, #312]	; (8009a68 <xTaskIncrementTick+0x150>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	3301      	adds	r3, #1
 8009932:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009934:	4a4c      	ldr	r2, [pc, #304]	; (8009a68 <xTaskIncrementTick+0x150>)
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d122      	bne.n	8009986 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009940:	4b4a      	ldr	r3, [pc, #296]	; (8009a6c <xTaskIncrementTick+0x154>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00c      	beq.n	8009964 <xTaskIncrementTick+0x4c>
	__asm volatile
 800994a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994e:	b672      	cpsid	i
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	b662      	cpsie	i
 800995e:	603b      	str	r3, [r7, #0]
}
 8009960:	bf00      	nop
 8009962:	e7fe      	b.n	8009962 <xTaskIncrementTick+0x4a>
 8009964:	4b41      	ldr	r3, [pc, #260]	; (8009a6c <xTaskIncrementTick+0x154>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	60fb      	str	r3, [r7, #12]
 800996a:	4b41      	ldr	r3, [pc, #260]	; (8009a70 <xTaskIncrementTick+0x158>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a3f      	ldr	r2, [pc, #252]	; (8009a6c <xTaskIncrementTick+0x154>)
 8009970:	6013      	str	r3, [r2, #0]
 8009972:	4a3f      	ldr	r2, [pc, #252]	; (8009a70 <xTaskIncrementTick+0x158>)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6013      	str	r3, [r2, #0]
 8009978:	4b3e      	ldr	r3, [pc, #248]	; (8009a74 <xTaskIncrementTick+0x15c>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3301      	adds	r3, #1
 800997e:	4a3d      	ldr	r2, [pc, #244]	; (8009a74 <xTaskIncrementTick+0x15c>)
 8009980:	6013      	str	r3, [r2, #0]
 8009982:	f000 fae9 	bl	8009f58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009986:	4b3c      	ldr	r3, [pc, #240]	; (8009a78 <xTaskIncrementTick+0x160>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	693a      	ldr	r2, [r7, #16]
 800998c:	429a      	cmp	r2, r3
 800998e:	d349      	bcc.n	8009a24 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009990:	4b36      	ldr	r3, [pc, #216]	; (8009a6c <xTaskIncrementTick+0x154>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d104      	bne.n	80099a4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800999a:	4b37      	ldr	r3, [pc, #220]	; (8009a78 <xTaskIncrementTick+0x160>)
 800999c:	f04f 32ff 	mov.w	r2, #4294967295
 80099a0:	601a      	str	r2, [r3, #0]
					break;
 80099a2:	e03f      	b.n	8009a24 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099a4:	4b31      	ldr	r3, [pc, #196]	; (8009a6c <xTaskIncrementTick+0x154>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d203      	bcs.n	80099c4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80099bc:	4a2e      	ldr	r2, [pc, #184]	; (8009a78 <xTaskIncrementTick+0x160>)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80099c2:	e02f      	b.n	8009a24 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	3304      	adds	r3, #4
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fe fd0f 	bl	80083ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d004      	beq.n	80099e0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	3318      	adds	r3, #24
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fe fd06 	bl	80083ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e4:	4b25      	ldr	r3, [pc, #148]	; (8009a7c <xTaskIncrementTick+0x164>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d903      	bls.n	80099f4 <xTaskIncrementTick+0xdc>
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f0:	4a22      	ldr	r2, [pc, #136]	; (8009a7c <xTaskIncrementTick+0x164>)
 80099f2:	6013      	str	r3, [r2, #0]
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f8:	4613      	mov	r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4413      	add	r3, r2
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4a1f      	ldr	r2, [pc, #124]	; (8009a80 <xTaskIncrementTick+0x168>)
 8009a02:	441a      	add	r2, r3
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	3304      	adds	r3, #4
 8009a08:	4619      	mov	r1, r3
 8009a0a:	4610      	mov	r0, r2
 8009a0c:	f7fe fc91 	bl	8008332 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a14:	4b1b      	ldr	r3, [pc, #108]	; (8009a84 <xTaskIncrementTick+0x16c>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d3b8      	bcc.n	8009990 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a22:	e7b5      	b.n	8009990 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a24:	4b17      	ldr	r3, [pc, #92]	; (8009a84 <xTaskIncrementTick+0x16c>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2a:	4915      	ldr	r1, [pc, #84]	; (8009a80 <xTaskIncrementTick+0x168>)
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	4413      	add	r3, r2
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	440b      	add	r3, r1
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d907      	bls.n	8009a4c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	617b      	str	r3, [r7, #20]
 8009a40:	e004      	b.n	8009a4c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009a42:	4b11      	ldr	r3, [pc, #68]	; (8009a88 <xTaskIncrementTick+0x170>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	3301      	adds	r3, #1
 8009a48:	4a0f      	ldr	r2, [pc, #60]	; (8009a88 <xTaskIncrementTick+0x170>)
 8009a4a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009a4c:	4b0f      	ldr	r3, [pc, #60]	; (8009a8c <xTaskIncrementTick+0x174>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d001      	beq.n	8009a58 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009a54:	2301      	movs	r3, #1
 8009a56:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009a58:	697b      	ldr	r3, [r7, #20]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3718      	adds	r7, #24
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	20004f68 	.word	0x20004f68
 8009a68:	20004f44 	.word	0x20004f44
 8009a6c:	20004ef8 	.word	0x20004ef8
 8009a70:	20004efc 	.word	0x20004efc
 8009a74:	20004f58 	.word	0x20004f58
 8009a78:	20004f60 	.word	0x20004f60
 8009a7c:	20004f48 	.word	0x20004f48
 8009a80:	20004a70 	.word	0x20004a70
 8009a84:	20004a6c 	.word	0x20004a6c
 8009a88:	20004f50 	.word	0x20004f50
 8009a8c:	20004f54 	.word	0x20004f54

08009a90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a96:	4b2b      	ldr	r3, [pc, #172]	; (8009b44 <vTaskSwitchContext+0xb4>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d003      	beq.n	8009aa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a9e:	4b2a      	ldr	r3, [pc, #168]	; (8009b48 <vTaskSwitchContext+0xb8>)
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009aa4:	e048      	b.n	8009b38 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8009aa6:	4b28      	ldr	r3, [pc, #160]	; (8009b48 <vTaskSwitchContext+0xb8>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aac:	4b27      	ldr	r3, [pc, #156]	; (8009b4c <vTaskSwitchContext+0xbc>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	60fb      	str	r3, [r7, #12]
 8009ab2:	e012      	b.n	8009ada <vTaskSwitchContext+0x4a>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d10c      	bne.n	8009ad4 <vTaskSwitchContext+0x44>
	__asm volatile
 8009aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abe:	b672      	cpsid	i
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	b662      	cpsie	i
 8009ace:	607b      	str	r3, [r7, #4]
}
 8009ad0:	bf00      	nop
 8009ad2:	e7fe      	b.n	8009ad2 <vTaskSwitchContext+0x42>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	60fb      	str	r3, [r7, #12]
 8009ada:	491d      	ldr	r1, [pc, #116]	; (8009b50 <vTaskSwitchContext+0xc0>)
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	440b      	add	r3, r1
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d0e2      	beq.n	8009ab4 <vTaskSwitchContext+0x24>
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	4613      	mov	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4413      	add	r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	4a15      	ldr	r2, [pc, #84]	; (8009b50 <vTaskSwitchContext+0xc0>)
 8009afa:	4413      	add	r3, r2
 8009afc:	60bb      	str	r3, [r7, #8]
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	685a      	ldr	r2, [r3, #4]
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	605a      	str	r2, [r3, #4]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	3308      	adds	r3, #8
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d104      	bne.n	8009b1e <vTaskSwitchContext+0x8e>
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	605a      	str	r2, [r3, #4]
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	4a0b      	ldr	r2, [pc, #44]	; (8009b54 <vTaskSwitchContext+0xc4>)
 8009b26:	6013      	str	r3, [r2, #0]
 8009b28:	4a08      	ldr	r2, [pc, #32]	; (8009b4c <vTaskSwitchContext+0xbc>)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b2e:	4b09      	ldr	r3, [pc, #36]	; (8009b54 <vTaskSwitchContext+0xc4>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	3354      	adds	r3, #84	; 0x54
 8009b34:	4a08      	ldr	r2, [pc, #32]	; (8009b58 <vTaskSwitchContext+0xc8>)
 8009b36:	6013      	str	r3, [r2, #0]
}
 8009b38:	bf00      	nop
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	20004f68 	.word	0x20004f68
 8009b48:	20004f54 	.word	0x20004f54
 8009b4c:	20004f48 	.word	0x20004f48
 8009b50:	20004a70 	.word	0x20004a70
 8009b54:	20004a6c 	.word	0x20004a6c
 8009b58:	20000010 	.word	0x20000010

08009b5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10c      	bne.n	8009b86 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b70:	b672      	cpsid	i
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	b662      	cpsie	i
 8009b80:	60fb      	str	r3, [r7, #12]
}
 8009b82:	bf00      	nop
 8009b84:	e7fe      	b.n	8009b84 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b86:	4b07      	ldr	r3, [pc, #28]	; (8009ba4 <vTaskPlaceOnEventList+0x48>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	3318      	adds	r3, #24
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f7fe fbf3 	bl	800837a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b94:	2101      	movs	r1, #1
 8009b96:	6838      	ldr	r0, [r7, #0]
 8009b98:	f000 fa8e 	bl	800a0b8 <prvAddCurrentTaskToDelayedList>
}
 8009b9c:	bf00      	nop
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	20004a6c 	.word	0x20004a6c

08009ba8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10c      	bne.n	8009bd4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8009bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbe:	b672      	cpsid	i
 8009bc0:	f383 8811 	msr	BASEPRI, r3
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	f3bf 8f4f 	dsb	sy
 8009bcc:	b662      	cpsie	i
 8009bce:	617b      	str	r3, [r7, #20]
}
 8009bd0:	bf00      	nop
 8009bd2:	e7fe      	b.n	8009bd2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bd4:	4b0a      	ldr	r3, [pc, #40]	; (8009c00 <vTaskPlaceOnEventListRestricted+0x58>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	3318      	adds	r3, #24
 8009bda:	4619      	mov	r1, r3
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f7fe fba8 	bl	8008332 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d002      	beq.n	8009bee <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8009be8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009bee:	6879      	ldr	r1, [r7, #4]
 8009bf0:	68b8      	ldr	r0, [r7, #8]
 8009bf2:	f000 fa61 	bl	800a0b8 <prvAddCurrentTaskToDelayedList>
	}
 8009bf6:	bf00      	nop
 8009bf8:	3718      	adds	r7, #24
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	20004a6c 	.word	0x20004a6c

08009c04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b086      	sub	sp, #24
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10c      	bne.n	8009c34 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1e:	b672      	cpsid	i
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	b662      	cpsie	i
 8009c2e:	60fb      	str	r3, [r7, #12]
}
 8009c30:	bf00      	nop
 8009c32:	e7fe      	b.n	8009c32 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	3318      	adds	r3, #24
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7fe fbd7 	bl	80083ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c3e:	4b1e      	ldr	r3, [pc, #120]	; (8009cb8 <xTaskRemoveFromEventList+0xb4>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d11d      	bne.n	8009c82 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	3304      	adds	r3, #4
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fe fbce 	bl	80083ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c54:	4b19      	ldr	r3, [pc, #100]	; (8009cbc <xTaskRemoveFromEventList+0xb8>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d903      	bls.n	8009c64 <xTaskRemoveFromEventList+0x60>
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c60:	4a16      	ldr	r2, [pc, #88]	; (8009cbc <xTaskRemoveFromEventList+0xb8>)
 8009c62:	6013      	str	r3, [r2, #0]
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c68:	4613      	mov	r3, r2
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	4413      	add	r3, r2
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	4a13      	ldr	r2, [pc, #76]	; (8009cc0 <xTaskRemoveFromEventList+0xbc>)
 8009c72:	441a      	add	r2, r3
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	3304      	adds	r3, #4
 8009c78:	4619      	mov	r1, r3
 8009c7a:	4610      	mov	r0, r2
 8009c7c:	f7fe fb59 	bl	8008332 <vListInsertEnd>
 8009c80:	e005      	b.n	8009c8e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	3318      	adds	r3, #24
 8009c86:	4619      	mov	r1, r3
 8009c88:	480e      	ldr	r0, [pc, #56]	; (8009cc4 <xTaskRemoveFromEventList+0xc0>)
 8009c8a:	f7fe fb52 	bl	8008332 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c92:	4b0d      	ldr	r3, [pc, #52]	; (8009cc8 <xTaskRemoveFromEventList+0xc4>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d905      	bls.n	8009ca8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ca0:	4b0a      	ldr	r3, [pc, #40]	; (8009ccc <xTaskRemoveFromEventList+0xc8>)
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	e001      	b.n	8009cac <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009cac:	697b      	ldr	r3, [r7, #20]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20004f68 	.word	0x20004f68
 8009cbc:	20004f48 	.word	0x20004f48
 8009cc0:	20004a70 	.word	0x20004a70
 8009cc4:	20004f00 	.word	0x20004f00
 8009cc8:	20004a6c 	.word	0x20004a6c
 8009ccc:	20004f54 	.word	0x20004f54

08009cd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009cd8:	4b06      	ldr	r3, [pc, #24]	; (8009cf4 <vTaskInternalSetTimeOutState+0x24>)
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ce0:	4b05      	ldr	r3, [pc, #20]	; (8009cf8 <vTaskInternalSetTimeOutState+0x28>)
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	605a      	str	r2, [r3, #4]
}
 8009ce8:	bf00      	nop
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr
 8009cf4:	20004f58 	.word	0x20004f58
 8009cf8:	20004f44 	.word	0x20004f44

08009cfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b088      	sub	sp, #32
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10c      	bne.n	8009d26 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d10:	b672      	cpsid	i
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	b662      	cpsie	i
 8009d20:	613b      	str	r3, [r7, #16]
}
 8009d22:	bf00      	nop
 8009d24:	e7fe      	b.n	8009d24 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10c      	bne.n	8009d46 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d30:	b672      	cpsid	i
 8009d32:	f383 8811 	msr	BASEPRI, r3
 8009d36:	f3bf 8f6f 	isb	sy
 8009d3a:	f3bf 8f4f 	dsb	sy
 8009d3e:	b662      	cpsie	i
 8009d40:	60fb      	str	r3, [r7, #12]
}
 8009d42:	bf00      	nop
 8009d44:	e7fe      	b.n	8009d44 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009d46:	f7fe fc89 	bl	800865c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d4a:	4b1d      	ldr	r3, [pc, #116]	; (8009dc0 <xTaskCheckForTimeOut+0xc4>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	69ba      	ldr	r2, [r7, #24]
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d62:	d102      	bne.n	8009d6a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d64:	2300      	movs	r3, #0
 8009d66:	61fb      	str	r3, [r7, #28]
 8009d68:	e023      	b.n	8009db2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	4b15      	ldr	r3, [pc, #84]	; (8009dc4 <xTaskCheckForTimeOut+0xc8>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d007      	beq.n	8009d86 <xTaskCheckForTimeOut+0x8a>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	69ba      	ldr	r2, [r7, #24]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d302      	bcc.n	8009d86 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d80:	2301      	movs	r3, #1
 8009d82:	61fb      	str	r3, [r7, #28]
 8009d84:	e015      	b.n	8009db2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	697a      	ldr	r2, [r7, #20]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d20b      	bcs.n	8009da8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	1ad2      	subs	r2, r2, r3
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f7ff ff97 	bl	8009cd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009da2:	2300      	movs	r3, #0
 8009da4:	61fb      	str	r3, [r7, #28]
 8009da6:	e004      	b.n	8009db2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	2200      	movs	r2, #0
 8009dac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009dae:	2301      	movs	r3, #1
 8009db0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009db2:	f7fe fc87 	bl	80086c4 <vPortExitCritical>

	return xReturn;
 8009db6:	69fb      	ldr	r3, [r7, #28]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3720      	adds	r7, #32
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	20004f44 	.word	0x20004f44
 8009dc4:	20004f58 	.word	0x20004f58

08009dc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009dc8:	b480      	push	{r7}
 8009dca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009dcc:	4b03      	ldr	r3, [pc, #12]	; (8009ddc <vTaskMissedYield+0x14>)
 8009dce:	2201      	movs	r2, #1
 8009dd0:	601a      	str	r2, [r3, #0]
}
 8009dd2:	bf00      	nop
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr
 8009ddc:	20004f54 	.word	0x20004f54

08009de0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009de8:	f000 f852 	bl	8009e90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009dec:	4b06      	ldr	r3, [pc, #24]	; (8009e08 <prvIdleTask+0x28>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d9f9      	bls.n	8009de8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009df4:	4b05      	ldr	r3, [pc, #20]	; (8009e0c <prvIdleTask+0x2c>)
 8009df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dfa:	601a      	str	r2, [r3, #0]
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e04:	e7f0      	b.n	8009de8 <prvIdleTask+0x8>
 8009e06:	bf00      	nop
 8009e08:	20004a70 	.word	0x20004a70
 8009e0c:	e000ed04 	.word	0xe000ed04

08009e10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e16:	2300      	movs	r3, #0
 8009e18:	607b      	str	r3, [r7, #4]
 8009e1a:	e00c      	b.n	8009e36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	4613      	mov	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4413      	add	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	4a12      	ldr	r2, [pc, #72]	; (8009e70 <prvInitialiseTaskLists+0x60>)
 8009e28:	4413      	add	r3, r2
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fe fa54 	bl	80082d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	3301      	adds	r3, #1
 8009e34:	607b      	str	r3, [r7, #4]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b37      	cmp	r3, #55	; 0x37
 8009e3a:	d9ef      	bls.n	8009e1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e3c:	480d      	ldr	r0, [pc, #52]	; (8009e74 <prvInitialiseTaskLists+0x64>)
 8009e3e:	f7fe fa4b 	bl	80082d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e42:	480d      	ldr	r0, [pc, #52]	; (8009e78 <prvInitialiseTaskLists+0x68>)
 8009e44:	f7fe fa48 	bl	80082d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e48:	480c      	ldr	r0, [pc, #48]	; (8009e7c <prvInitialiseTaskLists+0x6c>)
 8009e4a:	f7fe fa45 	bl	80082d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e4e:	480c      	ldr	r0, [pc, #48]	; (8009e80 <prvInitialiseTaskLists+0x70>)
 8009e50:	f7fe fa42 	bl	80082d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e54:	480b      	ldr	r0, [pc, #44]	; (8009e84 <prvInitialiseTaskLists+0x74>)
 8009e56:	f7fe fa3f 	bl	80082d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e5a:	4b0b      	ldr	r3, [pc, #44]	; (8009e88 <prvInitialiseTaskLists+0x78>)
 8009e5c:	4a05      	ldr	r2, [pc, #20]	; (8009e74 <prvInitialiseTaskLists+0x64>)
 8009e5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e60:	4b0a      	ldr	r3, [pc, #40]	; (8009e8c <prvInitialiseTaskLists+0x7c>)
 8009e62:	4a05      	ldr	r2, [pc, #20]	; (8009e78 <prvInitialiseTaskLists+0x68>)
 8009e64:	601a      	str	r2, [r3, #0]
}
 8009e66:	bf00      	nop
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	20004a70 	.word	0x20004a70
 8009e74:	20004ed0 	.word	0x20004ed0
 8009e78:	20004ee4 	.word	0x20004ee4
 8009e7c:	20004f00 	.word	0x20004f00
 8009e80:	20004f14 	.word	0x20004f14
 8009e84:	20004f2c 	.word	0x20004f2c
 8009e88:	20004ef8 	.word	0x20004ef8
 8009e8c:	20004efc 	.word	0x20004efc

08009e90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e96:	e019      	b.n	8009ecc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e98:	f7fe fbe0 	bl	800865c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e9c:	4b10      	ldr	r3, [pc, #64]	; (8009ee0 <prvCheckTasksWaitingTermination+0x50>)
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7fe fa9f 	bl	80083ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009eae:	4b0d      	ldr	r3, [pc, #52]	; (8009ee4 <prvCheckTasksWaitingTermination+0x54>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	4a0b      	ldr	r2, [pc, #44]	; (8009ee4 <prvCheckTasksWaitingTermination+0x54>)
 8009eb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009eb8:	4b0b      	ldr	r3, [pc, #44]	; (8009ee8 <prvCheckTasksWaitingTermination+0x58>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	4a0a      	ldr	r2, [pc, #40]	; (8009ee8 <prvCheckTasksWaitingTermination+0x58>)
 8009ec0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ec2:	f7fe fbff 	bl	80086c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f810 	bl	8009eec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ecc:	4b06      	ldr	r3, [pc, #24]	; (8009ee8 <prvCheckTasksWaitingTermination+0x58>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1e1      	bne.n	8009e98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ed4:	bf00      	nop
 8009ed6:	bf00      	nop
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	20004f14 	.word	0x20004f14
 8009ee4:	20004f40 	.word	0x20004f40
 8009ee8:	20004f28 	.word	0x20004f28

08009eec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	3354      	adds	r3, #84	; 0x54
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f001 fc93 	bl	800b824 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d108      	bne.n	8009f1a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7fe f8c9 	bl	80080a4 <vPortFree>
				vPortFree( pxTCB );
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f7fe f8c6 	bl	80080a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f18:	e01a      	b.n	8009f50 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d103      	bne.n	8009f2c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f7fe f8bd 	bl	80080a4 <vPortFree>
	}
 8009f2a:	e011      	b.n	8009f50 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d00c      	beq.n	8009f50 <prvDeleteTCB+0x64>
	__asm volatile
 8009f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3a:	b672      	cpsid	i
 8009f3c:	f383 8811 	msr	BASEPRI, r3
 8009f40:	f3bf 8f6f 	isb	sy
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	b662      	cpsie	i
 8009f4a:	60fb      	str	r3, [r7, #12]
}
 8009f4c:	bf00      	nop
 8009f4e:	e7fe      	b.n	8009f4e <prvDeleteTCB+0x62>
	}
 8009f50:	bf00      	nop
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f5e:	4b0c      	ldr	r3, [pc, #48]	; (8009f90 <prvResetNextTaskUnblockTime+0x38>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d104      	bne.n	8009f72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f68:	4b0a      	ldr	r3, [pc, #40]	; (8009f94 <prvResetNextTaskUnblockTime+0x3c>)
 8009f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f70:	e008      	b.n	8009f84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f72:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <prvResetNextTaskUnblockTime+0x38>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	4a04      	ldr	r2, [pc, #16]	; (8009f94 <prvResetNextTaskUnblockTime+0x3c>)
 8009f82:	6013      	str	r3, [r2, #0]
}
 8009f84:	bf00      	nop
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr
 8009f90:	20004ef8 	.word	0x20004ef8
 8009f94:	20004f60 	.word	0x20004f60

08009f98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f9e:	4b0b      	ldr	r3, [pc, #44]	; (8009fcc <xTaskGetSchedulerState+0x34>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d102      	bne.n	8009fac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	607b      	str	r3, [r7, #4]
 8009faa:	e008      	b.n	8009fbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fac:	4b08      	ldr	r3, [pc, #32]	; (8009fd0 <xTaskGetSchedulerState+0x38>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d102      	bne.n	8009fba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	607b      	str	r3, [r7, #4]
 8009fb8:	e001      	b.n	8009fbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009fbe:	687b      	ldr	r3, [r7, #4]
	}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr
 8009fcc:	20004f4c 	.word	0x20004f4c
 8009fd0:	20004f68 	.word	0x20004f68

08009fd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d05a      	beq.n	800a0a0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009fea:	4b30      	ldr	r3, [pc, #192]	; (800a0ac <xTaskPriorityDisinherit+0xd8>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	693a      	ldr	r2, [r7, #16]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d00c      	beq.n	800a00e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff8:	b672      	cpsid	i
 8009ffa:	f383 8811 	msr	BASEPRI, r3
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	b662      	cpsie	i
 800a008:	60fb      	str	r3, [r7, #12]
}
 800a00a:	bf00      	nop
 800a00c:	e7fe      	b.n	800a00c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10c      	bne.n	800a030 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01a:	b672      	cpsid	i
 800a01c:	f383 8811 	msr	BASEPRI, r3
 800a020:	f3bf 8f6f 	isb	sy
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	b662      	cpsie	i
 800a02a:	60bb      	str	r3, [r7, #8]
}
 800a02c:	bf00      	nop
 800a02e:	e7fe      	b.n	800a02e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a034:	1e5a      	subs	r2, r3, #1
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a042:	429a      	cmp	r2, r3
 800a044:	d02c      	beq.n	800a0a0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d128      	bne.n	800a0a0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	3304      	adds	r3, #4
 800a052:	4618      	mov	r0, r3
 800a054:	f7fe f9ca 	bl	80083ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a064:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a070:	4b0f      	ldr	r3, [pc, #60]	; (800a0b0 <xTaskPriorityDisinherit+0xdc>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	429a      	cmp	r2, r3
 800a076:	d903      	bls.n	800a080 <xTaskPriorityDisinherit+0xac>
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07c:	4a0c      	ldr	r2, [pc, #48]	; (800a0b0 <xTaskPriorityDisinherit+0xdc>)
 800a07e:	6013      	str	r3, [r2, #0]
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a084:	4613      	mov	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4a09      	ldr	r2, [pc, #36]	; (800a0b4 <xTaskPriorityDisinherit+0xe0>)
 800a08e:	441a      	add	r2, r3
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	3304      	adds	r3, #4
 800a094:	4619      	mov	r1, r3
 800a096:	4610      	mov	r0, r2
 800a098:	f7fe f94b 	bl	8008332 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a09c:	2301      	movs	r3, #1
 800a09e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0a0:	697b      	ldr	r3, [r7, #20]
	}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3718      	adds	r7, #24
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	20004a6c 	.word	0x20004a6c
 800a0b0:	20004f48 	.word	0x20004f48
 800a0b4:	20004a70 	.word	0x20004a70

0800a0b8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a0c2:	4b21      	ldr	r3, [pc, #132]	; (800a148 <prvAddCurrentTaskToDelayedList+0x90>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0c8:	4b20      	ldr	r3, [pc, #128]	; (800a14c <prvAddCurrentTaskToDelayedList+0x94>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	3304      	adds	r3, #4
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fe f98c 	bl	80083ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0da:	d10a      	bne.n	800a0f2 <prvAddCurrentTaskToDelayedList+0x3a>
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d007      	beq.n	800a0f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0e2:	4b1a      	ldr	r3, [pc, #104]	; (800a14c <prvAddCurrentTaskToDelayedList+0x94>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3304      	adds	r3, #4
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	4819      	ldr	r0, [pc, #100]	; (800a150 <prvAddCurrentTaskToDelayedList+0x98>)
 800a0ec:	f7fe f921 	bl	8008332 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a0f0:	e026      	b.n	800a140 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a0fa:	4b14      	ldr	r3, [pc, #80]	; (800a14c <prvAddCurrentTaskToDelayedList+0x94>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	429a      	cmp	r2, r3
 800a108:	d209      	bcs.n	800a11e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a10a:	4b12      	ldr	r3, [pc, #72]	; (800a154 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	4b0f      	ldr	r3, [pc, #60]	; (800a14c <prvAddCurrentTaskToDelayedList+0x94>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	3304      	adds	r3, #4
 800a114:	4619      	mov	r1, r3
 800a116:	4610      	mov	r0, r2
 800a118:	f7fe f92f 	bl	800837a <vListInsert>
}
 800a11c:	e010      	b.n	800a140 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a11e:	4b0e      	ldr	r3, [pc, #56]	; (800a158 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	4b0a      	ldr	r3, [pc, #40]	; (800a14c <prvAddCurrentTaskToDelayedList+0x94>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	3304      	adds	r3, #4
 800a128:	4619      	mov	r1, r3
 800a12a:	4610      	mov	r0, r2
 800a12c:	f7fe f925 	bl	800837a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a130:	4b0a      	ldr	r3, [pc, #40]	; (800a15c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	429a      	cmp	r2, r3
 800a138:	d202      	bcs.n	800a140 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a13a:	4a08      	ldr	r2, [pc, #32]	; (800a15c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	6013      	str	r3, [r2, #0]
}
 800a140:	bf00      	nop
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	20004f44 	.word	0x20004f44
 800a14c:	20004a6c 	.word	0x20004a6c
 800a150:	20004f2c 	.word	0x20004f2c
 800a154:	20004efc 	.word	0x20004efc
 800a158:	20004ef8 	.word	0x20004ef8
 800a15c:	20004f60 	.word	0x20004f60

0800a160 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b08a      	sub	sp, #40	; 0x28
 800a164:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a166:	2300      	movs	r3, #0
 800a168:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a16a:	f000 fb15 	bl	800a798 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a16e:	4b1d      	ldr	r3, [pc, #116]	; (800a1e4 <xTimerCreateTimerTask+0x84>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d021      	beq.n	800a1ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a176:	2300      	movs	r3, #0
 800a178:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a17a:	2300      	movs	r3, #0
 800a17c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a17e:	1d3a      	adds	r2, r7, #4
 800a180:	f107 0108 	add.w	r1, r7, #8
 800a184:	f107 030c 	add.w	r3, r7, #12
 800a188:	4618      	mov	r0, r3
 800a18a:	f7fd fea7 	bl	8007edc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a18e:	6879      	ldr	r1, [r7, #4]
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	9202      	str	r2, [sp, #8]
 800a196:	9301      	str	r3, [sp, #4]
 800a198:	2302      	movs	r3, #2
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	2300      	movs	r3, #0
 800a19e:	460a      	mov	r2, r1
 800a1a0:	4911      	ldr	r1, [pc, #68]	; (800a1e8 <xTimerCreateTimerTask+0x88>)
 800a1a2:	4812      	ldr	r0, [pc, #72]	; (800a1ec <xTimerCreateTimerTask+0x8c>)
 800a1a4:	f7ff f890 	bl	80092c8 <xTaskCreateStatic>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	4a11      	ldr	r2, [pc, #68]	; (800a1f0 <xTimerCreateTimerTask+0x90>)
 800a1ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a1ae:	4b10      	ldr	r3, [pc, #64]	; (800a1f0 <xTimerCreateTimerTask+0x90>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d001      	beq.n	800a1ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d10c      	bne.n	800a1da <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800a1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c4:	b672      	cpsid	i
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	b662      	cpsie	i
 800a1d4:	613b      	str	r3, [r7, #16]
}
 800a1d6:	bf00      	nop
 800a1d8:	e7fe      	b.n	800a1d8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a1da:	697b      	ldr	r3, [r7, #20]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3718      	adds	r7, #24
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	20004f9c 	.word	0x20004f9c
 800a1e8:	0800d964 	.word	0x0800d964
 800a1ec:	0800a331 	.word	0x0800a331
 800a1f0:	20004fa0 	.word	0x20004fa0

0800a1f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b08a      	sub	sp, #40	; 0x28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
 800a200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a202:	2300      	movs	r3, #0
 800a204:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10c      	bne.n	800a226 <xTimerGenericCommand+0x32>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a210:	b672      	cpsid	i
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	b662      	cpsie	i
 800a220:	623b      	str	r3, [r7, #32]
}
 800a222:	bf00      	nop
 800a224:	e7fe      	b.n	800a224 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a226:	4b1a      	ldr	r3, [pc, #104]	; (800a290 <xTimerGenericCommand+0x9c>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d02a      	beq.n	800a284 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	2b05      	cmp	r3, #5
 800a23e:	dc18      	bgt.n	800a272 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a240:	f7ff feaa 	bl	8009f98 <xTaskGetSchedulerState>
 800a244:	4603      	mov	r3, r0
 800a246:	2b02      	cmp	r3, #2
 800a248:	d109      	bne.n	800a25e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a24a:	4b11      	ldr	r3, [pc, #68]	; (800a290 <xTimerGenericCommand+0x9c>)
 800a24c:	6818      	ldr	r0, [r3, #0]
 800a24e:	f107 0110 	add.w	r1, r7, #16
 800a252:	2300      	movs	r3, #0
 800a254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a256:	f7fe fc3d 	bl	8008ad4 <xQueueGenericSend>
 800a25a:	6278      	str	r0, [r7, #36]	; 0x24
 800a25c:	e012      	b.n	800a284 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a25e:	4b0c      	ldr	r3, [pc, #48]	; (800a290 <xTimerGenericCommand+0x9c>)
 800a260:	6818      	ldr	r0, [r3, #0]
 800a262:	f107 0110 	add.w	r1, r7, #16
 800a266:	2300      	movs	r3, #0
 800a268:	2200      	movs	r2, #0
 800a26a:	f7fe fc33 	bl	8008ad4 <xQueueGenericSend>
 800a26e:	6278      	str	r0, [r7, #36]	; 0x24
 800a270:	e008      	b.n	800a284 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a272:	4b07      	ldr	r3, [pc, #28]	; (800a290 <xTimerGenericCommand+0x9c>)
 800a274:	6818      	ldr	r0, [r3, #0]
 800a276:	f107 0110 	add.w	r1, r7, #16
 800a27a:	2300      	movs	r3, #0
 800a27c:	683a      	ldr	r2, [r7, #0]
 800a27e:	f7fe fd2f 	bl	8008ce0 <xQueueGenericSendFromISR>
 800a282:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a286:	4618      	mov	r0, r3
 800a288:	3728      	adds	r7, #40	; 0x28
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	20004f9c 	.word	0x20004f9c

0800a294 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b088      	sub	sp, #32
 800a298:	af02      	add	r7, sp, #8
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a29e:	4b23      	ldr	r3, [pc, #140]	; (800a32c <prvProcessExpiredTimer+0x98>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	3304      	adds	r3, #4
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fe f89d 	bl	80083ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2b8:	f003 0304 	and.w	r3, r3, #4
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d024      	beq.n	800a30a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	699a      	ldr	r2, [r3, #24]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	18d1      	adds	r1, r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	6978      	ldr	r0, [r7, #20]
 800a2ce:	f000 f8d3 	bl	800a478 <prvInsertTimerInActiveList>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d021      	beq.n	800a31c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a2d8:	2300      	movs	r3, #0
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	2300      	movs	r3, #0
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	6978      	ldr	r0, [r7, #20]
 800a2e4:	f7ff ff86 	bl	800a1f4 <xTimerGenericCommand>
 800a2e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d115      	bne.n	800a31c <prvProcessExpiredTimer+0x88>
	__asm volatile
 800a2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f4:	b672      	cpsid	i
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	b662      	cpsie	i
 800a304:	60fb      	str	r3, [r7, #12]
}
 800a306:	bf00      	nop
 800a308:	e7fe      	b.n	800a308 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a310:	f023 0301 	bic.w	r3, r3, #1
 800a314:	b2da      	uxtb	r2, r3
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	6a1b      	ldr	r3, [r3, #32]
 800a320:	6978      	ldr	r0, [r7, #20]
 800a322:	4798      	blx	r3
}
 800a324:	bf00      	nop
 800a326:	3718      	adds	r7, #24
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	20004f94 	.word	0x20004f94

0800a330 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a338:	f107 0308 	add.w	r3, r7, #8
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 f857 	bl	800a3f0 <prvGetNextExpireTime>
 800a342:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	4619      	mov	r1, r3
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f000 f803 	bl	800a354 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a34e:	f000 f8d5 	bl	800a4fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a352:	e7f1      	b.n	800a338 <prvTimerTask+0x8>

0800a354 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a35e:	f7ff fa1d 	bl	800979c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a362:	f107 0308 	add.w	r3, r7, #8
 800a366:	4618      	mov	r0, r3
 800a368:	f000 f866 	bl	800a438 <prvSampleTimeNow>
 800a36c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d130      	bne.n	800a3d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10a      	bne.n	800a390 <prvProcessTimerOrBlockTask+0x3c>
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d806      	bhi.n	800a390 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a382:	f7ff fa19 	bl	80097b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a386:	68f9      	ldr	r1, [r7, #12]
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f7ff ff83 	bl	800a294 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a38e:	e024      	b.n	800a3da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d008      	beq.n	800a3a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a396:	4b13      	ldr	r3, [pc, #76]	; (800a3e4 <prvProcessTimerOrBlockTask+0x90>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d101      	bne.n	800a3a4 <prvProcessTimerOrBlockTask+0x50>
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e000      	b.n	800a3a6 <prvProcessTimerOrBlockTask+0x52>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a3a8:	4b0f      	ldr	r3, [pc, #60]	; (800a3e8 <prvProcessTimerOrBlockTask+0x94>)
 800a3aa:	6818      	ldr	r0, [r3, #0]
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	1ad3      	subs	r3, r2, r3
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	f7fe ff53 	bl	8009260 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a3ba:	f7ff f9fd 	bl	80097b8 <xTaskResumeAll>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d10a      	bne.n	800a3da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a3c4:	4b09      	ldr	r3, [pc, #36]	; (800a3ec <prvProcessTimerOrBlockTask+0x98>)
 800a3c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ca:	601a      	str	r2, [r3, #0]
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	f3bf 8f6f 	isb	sy
}
 800a3d4:	e001      	b.n	800a3da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a3d6:	f7ff f9ef 	bl	80097b8 <xTaskResumeAll>
}
 800a3da:	bf00      	nop
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	20004f98 	.word	0x20004f98
 800a3e8:	20004f9c 	.word	0x20004f9c
 800a3ec:	e000ed04 	.word	0xe000ed04

0800a3f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a3f8:	4b0e      	ldr	r3, [pc, #56]	; (800a434 <prvGetNextExpireTime+0x44>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d101      	bne.n	800a406 <prvGetNextExpireTime+0x16>
 800a402:	2201      	movs	r2, #1
 800a404:	e000      	b.n	800a408 <prvGetNextExpireTime+0x18>
 800a406:	2200      	movs	r2, #0
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d105      	bne.n	800a420 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a414:	4b07      	ldr	r3, [pc, #28]	; (800a434 <prvGetNextExpireTime+0x44>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	60fb      	str	r3, [r7, #12]
 800a41e:	e001      	b.n	800a424 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a420:	2300      	movs	r3, #0
 800a422:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a424:	68fb      	ldr	r3, [r7, #12]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3714      	adds	r7, #20
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	20004f94 	.word	0x20004f94

0800a438 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a440:	f7ff fa5a 	bl	80098f8 <xTaskGetTickCount>
 800a444:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a446:	4b0b      	ldr	r3, [pc, #44]	; (800a474 <prvSampleTimeNow+0x3c>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d205      	bcs.n	800a45c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a450:	f000 f93c 	bl	800a6cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	601a      	str	r2, [r3, #0]
 800a45a:	e002      	b.n	800a462 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a462:	4a04      	ldr	r2, [pc, #16]	; (800a474 <prvSampleTimeNow+0x3c>)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a468:	68fb      	ldr	r3, [r7, #12]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	20004fa4 	.word	0x20004fa4

0800a478 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b086      	sub	sp, #24
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
 800a484:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a486:	2300      	movs	r3, #0
 800a488:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d812      	bhi.n	800a4c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	1ad2      	subs	r2, r2, r3
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	699b      	ldr	r3, [r3, #24]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d302      	bcc.n	800a4b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	617b      	str	r3, [r7, #20]
 800a4b0:	e01b      	b.n	800a4ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a4b2:	4b10      	ldr	r3, [pc, #64]	; (800a4f4 <prvInsertTimerInActiveList+0x7c>)
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	3304      	adds	r3, #4
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	4610      	mov	r0, r2
 800a4be:	f7fd ff5c 	bl	800837a <vListInsert>
 800a4c2:	e012      	b.n	800a4ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d206      	bcs.n	800a4da <prvInsertTimerInActiveList+0x62>
 800a4cc:	68ba      	ldr	r2, [r7, #8]
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d302      	bcc.n	800a4da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	617b      	str	r3, [r7, #20]
 800a4d8:	e007      	b.n	800a4ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4da:	4b07      	ldr	r3, [pc, #28]	; (800a4f8 <prvInsertTimerInActiveList+0x80>)
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3304      	adds	r3, #4
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	4610      	mov	r0, r2
 800a4e6:	f7fd ff48 	bl	800837a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a4ea:	697b      	ldr	r3, [r7, #20]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3718      	adds	r7, #24
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	20004f98 	.word	0x20004f98
 800a4f8:	20004f94 	.word	0x20004f94

0800a4fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b08e      	sub	sp, #56	; 0x38
 800a500:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a502:	e0d0      	b.n	800a6a6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2b00      	cmp	r3, #0
 800a508:	da1a      	bge.n	800a540 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a50a:	1d3b      	adds	r3, r7, #4
 800a50c:	3304      	adds	r3, #4
 800a50e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10c      	bne.n	800a530 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800a516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51a:	b672      	cpsid	i
 800a51c:	f383 8811 	msr	BASEPRI, r3
 800a520:	f3bf 8f6f 	isb	sy
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	b662      	cpsie	i
 800a52a:	61fb      	str	r3, [r7, #28]
}
 800a52c:	bf00      	nop
 800a52e:	e7fe      	b.n	800a52e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a536:	6850      	ldr	r0, [r2, #4]
 800a538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a53a:	6892      	ldr	r2, [r2, #8]
 800a53c:	4611      	mov	r1, r2
 800a53e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	f2c0 80ae 	blt.w	800a6a4 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54e:	695b      	ldr	r3, [r3, #20]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d004      	beq.n	800a55e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a556:	3304      	adds	r3, #4
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fd ff47 	bl	80083ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a55e:	463b      	mov	r3, r7
 800a560:	4618      	mov	r0, r3
 800a562:	f7ff ff69 	bl	800a438 <prvSampleTimeNow>
 800a566:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2b09      	cmp	r3, #9
 800a56c:	f200 809b 	bhi.w	800a6a6 <prvProcessReceivedCommands+0x1aa>
 800a570:	a201      	add	r2, pc, #4	; (adr r2, 800a578 <prvProcessReceivedCommands+0x7c>)
 800a572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a576:	bf00      	nop
 800a578:	0800a5a1 	.word	0x0800a5a1
 800a57c:	0800a5a1 	.word	0x0800a5a1
 800a580:	0800a5a1 	.word	0x0800a5a1
 800a584:	0800a619 	.word	0x0800a619
 800a588:	0800a62d 	.word	0x0800a62d
 800a58c:	0800a67b 	.word	0x0800a67b
 800a590:	0800a5a1 	.word	0x0800a5a1
 800a594:	0800a5a1 	.word	0x0800a5a1
 800a598:	0800a619 	.word	0x0800a619
 800a59c:	0800a62d 	.word	0x0800a62d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5a6:	f043 0301 	orr.w	r3, r3, #1
 800a5aa:	b2da      	uxtb	r2, r3
 800a5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a5b2:	68ba      	ldr	r2, [r7, #8]
 800a5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	18d1      	adds	r1, r2, r3
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5c0:	f7ff ff5a 	bl	800a478 <prvInsertTimerInActiveList>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d06d      	beq.n	800a6a6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5cc:	6a1b      	ldr	r3, [r3, #32]
 800a5ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5d8:	f003 0304 	and.w	r3, r3, #4
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d062      	beq.n	800a6a6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e4:	699b      	ldr	r3, [r3, #24]
 800a5e6:	441a      	add	r2, r3
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5f2:	f7ff fdff 	bl	800a1f4 <xTimerGenericCommand>
 800a5f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a5f8:	6a3b      	ldr	r3, [r7, #32]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d153      	bne.n	800a6a6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a602:	b672      	cpsid	i
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	b662      	cpsie	i
 800a612:	61bb      	str	r3, [r7, #24]
}
 800a614:	bf00      	nop
 800a616:	e7fe      	b.n	800a616 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a61e:	f023 0301 	bic.w	r3, r3, #1
 800a622:	b2da      	uxtb	r2, r3
 800a624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a62a:	e03c      	b.n	800a6a6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a632:	f043 0301 	orr.w	r3, r3, #1
 800a636:	b2da      	uxtb	r2, r3
 800a638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a63e:	68ba      	ldr	r2, [r7, #8]
 800a640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a642:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a646:	699b      	ldr	r3, [r3, #24]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10c      	bne.n	800a666 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800a64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a650:	b672      	cpsid	i
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	b662      	cpsie	i
 800a660:	617b      	str	r3, [r7, #20]
}
 800a662:	bf00      	nop
 800a664:	e7fe      	b.n	800a664 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a668:	699a      	ldr	r2, [r3, #24]
 800a66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66c:	18d1      	adds	r1, r2, r3
 800a66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a674:	f7ff ff00 	bl	800a478 <prvInsertTimerInActiveList>
					break;
 800a678:	e015      	b.n	800a6a6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a680:	f003 0302 	and.w	r3, r3, #2
 800a684:	2b00      	cmp	r3, #0
 800a686:	d103      	bne.n	800a690 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800a688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a68a:	f7fd fd0b 	bl	80080a4 <vPortFree>
 800a68e:	e00a      	b.n	800a6a6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a696:	f023 0301 	bic.w	r3, r3, #1
 800a69a:	b2da      	uxtb	r2, r3
 800a69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a6a2:	e000      	b.n	800a6a6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a6a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6a6:	4b08      	ldr	r3, [pc, #32]	; (800a6c8 <prvProcessReceivedCommands+0x1cc>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	1d39      	adds	r1, r7, #4
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7fe fbb6 	bl	8008e20 <xQueueReceive>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f47f af24 	bne.w	800a504 <prvProcessReceivedCommands+0x8>
	}
}
 800a6bc:	bf00      	nop
 800a6be:	bf00      	nop
 800a6c0:	3730      	adds	r7, #48	; 0x30
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20004f9c 	.word	0x20004f9c

0800a6cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b088      	sub	sp, #32
 800a6d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6d2:	e04a      	b.n	800a76a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6d4:	4b2e      	ldr	r3, [pc, #184]	; (800a790 <prvSwitchTimerLists+0xc4>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6de:	4b2c      	ldr	r3, [pc, #176]	; (800a790 <prvSwitchTimerLists+0xc4>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	3304      	adds	r3, #4
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7fd fe7d 	bl	80083ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6a1b      	ldr	r3, [r3, #32]
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a700:	f003 0304 	and.w	r3, r3, #4
 800a704:	2b00      	cmp	r3, #0
 800a706:	d030      	beq.n	800a76a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	699b      	ldr	r3, [r3, #24]
 800a70c:	693a      	ldr	r2, [r7, #16]
 800a70e:	4413      	add	r3, r2
 800a710:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	429a      	cmp	r2, r3
 800a718:	d90e      	bls.n	800a738 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	68ba      	ldr	r2, [r7, #8]
 800a71e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	68fa      	ldr	r2, [r7, #12]
 800a724:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a726:	4b1a      	ldr	r3, [pc, #104]	; (800a790 <prvSwitchTimerLists+0xc4>)
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	3304      	adds	r3, #4
 800a72e:	4619      	mov	r1, r3
 800a730:	4610      	mov	r0, r2
 800a732:	f7fd fe22 	bl	800837a <vListInsert>
 800a736:	e018      	b.n	800a76a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a738:	2300      	movs	r3, #0
 800a73a:	9300      	str	r3, [sp, #0]
 800a73c:	2300      	movs	r3, #0
 800a73e:	693a      	ldr	r2, [r7, #16]
 800a740:	2100      	movs	r1, #0
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f7ff fd56 	bl	800a1f4 <xTimerGenericCommand>
 800a748:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10c      	bne.n	800a76a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800a750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a754:	b672      	cpsid	i
 800a756:	f383 8811 	msr	BASEPRI, r3
 800a75a:	f3bf 8f6f 	isb	sy
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	b662      	cpsie	i
 800a764:	603b      	str	r3, [r7, #0]
}
 800a766:	bf00      	nop
 800a768:	e7fe      	b.n	800a768 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a76a:	4b09      	ldr	r3, [pc, #36]	; (800a790 <prvSwitchTimerLists+0xc4>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1af      	bne.n	800a6d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a774:	4b06      	ldr	r3, [pc, #24]	; (800a790 <prvSwitchTimerLists+0xc4>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a77a:	4b06      	ldr	r3, [pc, #24]	; (800a794 <prvSwitchTimerLists+0xc8>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a04      	ldr	r2, [pc, #16]	; (800a790 <prvSwitchTimerLists+0xc4>)
 800a780:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a782:	4a04      	ldr	r2, [pc, #16]	; (800a794 <prvSwitchTimerLists+0xc8>)
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	6013      	str	r3, [r2, #0]
}
 800a788:	bf00      	nop
 800a78a:	3718      	adds	r7, #24
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	20004f94 	.word	0x20004f94
 800a794:	20004f98 	.word	0x20004f98

0800a798 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a79e:	f7fd ff5d 	bl	800865c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a7a2:	4b15      	ldr	r3, [pc, #84]	; (800a7f8 <prvCheckForValidListAndQueue+0x60>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d120      	bne.n	800a7ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a7aa:	4814      	ldr	r0, [pc, #80]	; (800a7fc <prvCheckForValidListAndQueue+0x64>)
 800a7ac:	f7fd fd94 	bl	80082d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a7b0:	4813      	ldr	r0, [pc, #76]	; (800a800 <prvCheckForValidListAndQueue+0x68>)
 800a7b2:	f7fd fd91 	bl	80082d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a7b6:	4b13      	ldr	r3, [pc, #76]	; (800a804 <prvCheckForValidListAndQueue+0x6c>)
 800a7b8:	4a10      	ldr	r2, [pc, #64]	; (800a7fc <prvCheckForValidListAndQueue+0x64>)
 800a7ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a7bc:	4b12      	ldr	r3, [pc, #72]	; (800a808 <prvCheckForValidListAndQueue+0x70>)
 800a7be:	4a10      	ldr	r2, [pc, #64]	; (800a800 <prvCheckForValidListAndQueue+0x68>)
 800a7c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	9300      	str	r3, [sp, #0]
 800a7c6:	4b11      	ldr	r3, [pc, #68]	; (800a80c <prvCheckForValidListAndQueue+0x74>)
 800a7c8:	4a11      	ldr	r2, [pc, #68]	; (800a810 <prvCheckForValidListAndQueue+0x78>)
 800a7ca:	2110      	movs	r1, #16
 800a7cc:	200a      	movs	r0, #10
 800a7ce:	f7fe f8db 	bl	8008988 <xQueueGenericCreateStatic>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	4a08      	ldr	r2, [pc, #32]	; (800a7f8 <prvCheckForValidListAndQueue+0x60>)
 800a7d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a7d8:	4b07      	ldr	r3, [pc, #28]	; (800a7f8 <prvCheckForValidListAndQueue+0x60>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d005      	beq.n	800a7ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a7e0:	4b05      	ldr	r3, [pc, #20]	; (800a7f8 <prvCheckForValidListAndQueue+0x60>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	490b      	ldr	r1, [pc, #44]	; (800a814 <prvCheckForValidListAndQueue+0x7c>)
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fe fd10 	bl	800920c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7ec:	f7fd ff6a 	bl	80086c4 <vPortExitCritical>
}
 800a7f0:	bf00      	nop
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	20004f9c 	.word	0x20004f9c
 800a7fc:	20004f6c 	.word	0x20004f6c
 800a800:	20004f80 	.word	0x20004f80
 800a804:	20004f94 	.word	0x20004f94
 800a808:	20004f98 	.word	0x20004f98
 800a80c:	20005048 	.word	0x20005048
 800a810:	20004fa8 	.word	0x20004fa8
 800a814:	0800d96c 	.word	0x0800d96c

0800a818 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 800a826:	1c5a      	adds	r2, r3, #1
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8c3 2594 	str.w	r2, [r3, #1428]	; 0x594
  USBH_HandleSof(phost);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 f804 	bl	800a83c <USBH_HandleSof>
}
 800a834:	bf00      	nop
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b0b      	cmp	r3, #11
 800a84c:	d10a      	bne.n	800a864 <USBH_HandleSof+0x28>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800a854:	2b00      	cmp	r3, #0
 800a856:	d005      	beq.n	800a864 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800a85e:	699b      	ldr	r3, [r3, #24]
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	4798      	blx	r3
  }
}
 800a864:	bf00      	nop
 800a866:	3708      	adds	r7, #8
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 05a8 	ldr.w	r0, [r3, #1448]	; 0x5a8
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f503 61b6 	add.w	r1, r3, #1456	; 0x5b0
 800a890:	2300      	movs	r3, #0
 800a892:	2200      	movs	r2, #0
 800a894:	f7fd fa94 	bl	8007dc0 <osMessageQueuePut>
#endif
#endif

  return;
 800a898:	bf00      	nop
}
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a8b0:	bf00      	nop
}
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b082      	sub	sp, #8
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 05a8 	ldr.w	r0, [r3, #1448]	; 0x5a8
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f503 61b6 	add.w	r1, r3, #1456	; 0x5b0
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f7fd fa64 	bl	8007dc0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b082      	sub	sp, #8
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2201      	movs	r2, #1
 800a90e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f7f6 ffd3 	bl	80018ce <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	791b      	ldrb	r3, [r3, #4]
 800a92c:	4619      	mov	r1, r3
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f830 	bl	800a994 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	795b      	ldrb	r3, [r3, #5]
 800a938:	4619      	mov	r1, r3
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f82a 	bl	800a994 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 05a8 	ldr.w	r0, [r3, #1448]	; 0x5a8
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f503 61b6 	add.w	r1, r3, #1456	; 0x5b0
 800a954:	2300      	movs	r3, #0
 800a956:	2200      	movs	r2, #0
 800a958:	f7fd fa32 	bl	8007dc0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b082      	sub	sp, #8
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2201      	movs	r2, #1
 800a972:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 05a8 	ldr.w	r0, [r3, #1448]	; 0x5a8
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f503 61b6 	add.w	r1, r3, #1456	; 0x5b0
 800a982:	2300      	movs	r3, #0
 800a984:	2200      	movs	r2, #0
 800a986:	f7fd fa1b 	bl	8007dc0 <osMessageQueuePut>
#endif

  return USBH_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	460b      	mov	r3, r1
 800a99e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a9a0:	78fb      	ldrb	r3, [r7, #3]
 800a9a2:	2b0f      	cmp	r3, #15
 800a9a4:	d80f      	bhi.n	800a9c6 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a9a6:	78fb      	ldrb	r3, [r7, #3]
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4413      	add	r3, r2
 800a9b2:	685a      	ldr	r2, [r3, #4]
 800a9b4:	78fb      	ldrb	r3, [r7, #3]
 800a9b6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a9ba:	6879      	ldr	r1, [r7, #4]
 800a9bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	440b      	add	r3, r1
 800a9c4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <__errno>:
 800a9d4:	4b01      	ldr	r3, [pc, #4]	; (800a9dc <__errno+0x8>)
 800a9d6:	6818      	ldr	r0, [r3, #0]
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	20000010 	.word	0x20000010

0800a9e0 <std>:
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	b510      	push	{r4, lr}
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	e9c0 3300 	strd	r3, r3, [r0]
 800a9ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9ee:	6083      	str	r3, [r0, #8]
 800a9f0:	8181      	strh	r1, [r0, #12]
 800a9f2:	6643      	str	r3, [r0, #100]	; 0x64
 800a9f4:	81c2      	strh	r2, [r0, #14]
 800a9f6:	6183      	str	r3, [r0, #24]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	2208      	movs	r2, #8
 800a9fc:	305c      	adds	r0, #92	; 0x5c
 800a9fe:	f000 f923 	bl	800ac48 <memset>
 800aa02:	4b05      	ldr	r3, [pc, #20]	; (800aa18 <std+0x38>)
 800aa04:	6263      	str	r3, [r4, #36]	; 0x24
 800aa06:	4b05      	ldr	r3, [pc, #20]	; (800aa1c <std+0x3c>)
 800aa08:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa0a:	4b05      	ldr	r3, [pc, #20]	; (800aa20 <std+0x40>)
 800aa0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa0e:	4b05      	ldr	r3, [pc, #20]	; (800aa24 <std+0x44>)
 800aa10:	6224      	str	r4, [r4, #32]
 800aa12:	6323      	str	r3, [r4, #48]	; 0x30
 800aa14:	bd10      	pop	{r4, pc}
 800aa16:	bf00      	nop
 800aa18:	0800b8fd 	.word	0x0800b8fd
 800aa1c:	0800b91f 	.word	0x0800b91f
 800aa20:	0800b957 	.word	0x0800b957
 800aa24:	0800b97b 	.word	0x0800b97b

0800aa28 <_cleanup_r>:
 800aa28:	4901      	ldr	r1, [pc, #4]	; (800aa30 <_cleanup_r+0x8>)
 800aa2a:	f000 b8af 	b.w	800ab8c <_fwalk_reent>
 800aa2e:	bf00      	nop
 800aa30:	0800c949 	.word	0x0800c949

0800aa34 <__sfmoreglue>:
 800aa34:	b570      	push	{r4, r5, r6, lr}
 800aa36:	2268      	movs	r2, #104	; 0x68
 800aa38:	1e4d      	subs	r5, r1, #1
 800aa3a:	4355      	muls	r5, r2
 800aa3c:	460e      	mov	r6, r1
 800aa3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa42:	f000 f975 	bl	800ad30 <_malloc_r>
 800aa46:	4604      	mov	r4, r0
 800aa48:	b140      	cbz	r0, 800aa5c <__sfmoreglue+0x28>
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	e9c0 1600 	strd	r1, r6, [r0]
 800aa50:	300c      	adds	r0, #12
 800aa52:	60a0      	str	r0, [r4, #8]
 800aa54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa58:	f000 f8f6 	bl	800ac48 <memset>
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	bd70      	pop	{r4, r5, r6, pc}

0800aa60 <__sfp_lock_acquire>:
 800aa60:	4801      	ldr	r0, [pc, #4]	; (800aa68 <__sfp_lock_acquire+0x8>)
 800aa62:	f000 b8d8 	b.w	800ac16 <__retarget_lock_acquire_recursive>
 800aa66:	bf00      	nop
 800aa68:	20005099 	.word	0x20005099

0800aa6c <__sfp_lock_release>:
 800aa6c:	4801      	ldr	r0, [pc, #4]	; (800aa74 <__sfp_lock_release+0x8>)
 800aa6e:	f000 b8d3 	b.w	800ac18 <__retarget_lock_release_recursive>
 800aa72:	bf00      	nop
 800aa74:	20005099 	.word	0x20005099

0800aa78 <__sinit_lock_acquire>:
 800aa78:	4801      	ldr	r0, [pc, #4]	; (800aa80 <__sinit_lock_acquire+0x8>)
 800aa7a:	f000 b8cc 	b.w	800ac16 <__retarget_lock_acquire_recursive>
 800aa7e:	bf00      	nop
 800aa80:	2000509a 	.word	0x2000509a

0800aa84 <__sinit_lock_release>:
 800aa84:	4801      	ldr	r0, [pc, #4]	; (800aa8c <__sinit_lock_release+0x8>)
 800aa86:	f000 b8c7 	b.w	800ac18 <__retarget_lock_release_recursive>
 800aa8a:	bf00      	nop
 800aa8c:	2000509a 	.word	0x2000509a

0800aa90 <__sinit>:
 800aa90:	b510      	push	{r4, lr}
 800aa92:	4604      	mov	r4, r0
 800aa94:	f7ff fff0 	bl	800aa78 <__sinit_lock_acquire>
 800aa98:	69a3      	ldr	r3, [r4, #24]
 800aa9a:	b11b      	cbz	r3, 800aaa4 <__sinit+0x14>
 800aa9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaa0:	f7ff bff0 	b.w	800aa84 <__sinit_lock_release>
 800aaa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aaa8:	6523      	str	r3, [r4, #80]	; 0x50
 800aaaa:	4b13      	ldr	r3, [pc, #76]	; (800aaf8 <__sinit+0x68>)
 800aaac:	4a13      	ldr	r2, [pc, #76]	; (800aafc <__sinit+0x6c>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	62a2      	str	r2, [r4, #40]	; 0x28
 800aab2:	42a3      	cmp	r3, r4
 800aab4:	bf04      	itt	eq
 800aab6:	2301      	moveq	r3, #1
 800aab8:	61a3      	streq	r3, [r4, #24]
 800aaba:	4620      	mov	r0, r4
 800aabc:	f000 f820 	bl	800ab00 <__sfp>
 800aac0:	6060      	str	r0, [r4, #4]
 800aac2:	4620      	mov	r0, r4
 800aac4:	f000 f81c 	bl	800ab00 <__sfp>
 800aac8:	60a0      	str	r0, [r4, #8]
 800aaca:	4620      	mov	r0, r4
 800aacc:	f000 f818 	bl	800ab00 <__sfp>
 800aad0:	2200      	movs	r2, #0
 800aad2:	60e0      	str	r0, [r4, #12]
 800aad4:	2104      	movs	r1, #4
 800aad6:	6860      	ldr	r0, [r4, #4]
 800aad8:	f7ff ff82 	bl	800a9e0 <std>
 800aadc:	68a0      	ldr	r0, [r4, #8]
 800aade:	2201      	movs	r2, #1
 800aae0:	2109      	movs	r1, #9
 800aae2:	f7ff ff7d 	bl	800a9e0 <std>
 800aae6:	68e0      	ldr	r0, [r4, #12]
 800aae8:	2202      	movs	r2, #2
 800aaea:	2112      	movs	r1, #18
 800aaec:	f7ff ff78 	bl	800a9e0 <std>
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	61a3      	str	r3, [r4, #24]
 800aaf4:	e7d2      	b.n	800aa9c <__sinit+0xc>
 800aaf6:	bf00      	nop
 800aaf8:	0800da10 	.word	0x0800da10
 800aafc:	0800aa29 	.word	0x0800aa29

0800ab00 <__sfp>:
 800ab00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab02:	4607      	mov	r7, r0
 800ab04:	f7ff ffac 	bl	800aa60 <__sfp_lock_acquire>
 800ab08:	4b1e      	ldr	r3, [pc, #120]	; (800ab84 <__sfp+0x84>)
 800ab0a:	681e      	ldr	r6, [r3, #0]
 800ab0c:	69b3      	ldr	r3, [r6, #24]
 800ab0e:	b913      	cbnz	r3, 800ab16 <__sfp+0x16>
 800ab10:	4630      	mov	r0, r6
 800ab12:	f7ff ffbd 	bl	800aa90 <__sinit>
 800ab16:	3648      	adds	r6, #72	; 0x48
 800ab18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab1c:	3b01      	subs	r3, #1
 800ab1e:	d503      	bpl.n	800ab28 <__sfp+0x28>
 800ab20:	6833      	ldr	r3, [r6, #0]
 800ab22:	b30b      	cbz	r3, 800ab68 <__sfp+0x68>
 800ab24:	6836      	ldr	r6, [r6, #0]
 800ab26:	e7f7      	b.n	800ab18 <__sfp+0x18>
 800ab28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab2c:	b9d5      	cbnz	r5, 800ab64 <__sfp+0x64>
 800ab2e:	4b16      	ldr	r3, [pc, #88]	; (800ab88 <__sfp+0x88>)
 800ab30:	60e3      	str	r3, [r4, #12]
 800ab32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab36:	6665      	str	r5, [r4, #100]	; 0x64
 800ab38:	f000 f86c 	bl	800ac14 <__retarget_lock_init_recursive>
 800ab3c:	f7ff ff96 	bl	800aa6c <__sfp_lock_release>
 800ab40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab48:	6025      	str	r5, [r4, #0]
 800ab4a:	61a5      	str	r5, [r4, #24]
 800ab4c:	2208      	movs	r2, #8
 800ab4e:	4629      	mov	r1, r5
 800ab50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab54:	f000 f878 	bl	800ac48 <memset>
 800ab58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab60:	4620      	mov	r0, r4
 800ab62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab64:	3468      	adds	r4, #104	; 0x68
 800ab66:	e7d9      	b.n	800ab1c <__sfp+0x1c>
 800ab68:	2104      	movs	r1, #4
 800ab6a:	4638      	mov	r0, r7
 800ab6c:	f7ff ff62 	bl	800aa34 <__sfmoreglue>
 800ab70:	4604      	mov	r4, r0
 800ab72:	6030      	str	r0, [r6, #0]
 800ab74:	2800      	cmp	r0, #0
 800ab76:	d1d5      	bne.n	800ab24 <__sfp+0x24>
 800ab78:	f7ff ff78 	bl	800aa6c <__sfp_lock_release>
 800ab7c:	230c      	movs	r3, #12
 800ab7e:	603b      	str	r3, [r7, #0]
 800ab80:	e7ee      	b.n	800ab60 <__sfp+0x60>
 800ab82:	bf00      	nop
 800ab84:	0800da10 	.word	0x0800da10
 800ab88:	ffff0001 	.word	0xffff0001

0800ab8c <_fwalk_reent>:
 800ab8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab90:	4606      	mov	r6, r0
 800ab92:	4688      	mov	r8, r1
 800ab94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab98:	2700      	movs	r7, #0
 800ab9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab9e:	f1b9 0901 	subs.w	r9, r9, #1
 800aba2:	d505      	bpl.n	800abb0 <_fwalk_reent+0x24>
 800aba4:	6824      	ldr	r4, [r4, #0]
 800aba6:	2c00      	cmp	r4, #0
 800aba8:	d1f7      	bne.n	800ab9a <_fwalk_reent+0xe>
 800abaa:	4638      	mov	r0, r7
 800abac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abb0:	89ab      	ldrh	r3, [r5, #12]
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d907      	bls.n	800abc6 <_fwalk_reent+0x3a>
 800abb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abba:	3301      	adds	r3, #1
 800abbc:	d003      	beq.n	800abc6 <_fwalk_reent+0x3a>
 800abbe:	4629      	mov	r1, r5
 800abc0:	4630      	mov	r0, r6
 800abc2:	47c0      	blx	r8
 800abc4:	4307      	orrs	r7, r0
 800abc6:	3568      	adds	r5, #104	; 0x68
 800abc8:	e7e9      	b.n	800ab9e <_fwalk_reent+0x12>
	...

0800abcc <__libc_init_array>:
 800abcc:	b570      	push	{r4, r5, r6, lr}
 800abce:	4d0d      	ldr	r5, [pc, #52]	; (800ac04 <__libc_init_array+0x38>)
 800abd0:	4c0d      	ldr	r4, [pc, #52]	; (800ac08 <__libc_init_array+0x3c>)
 800abd2:	1b64      	subs	r4, r4, r5
 800abd4:	10a4      	asrs	r4, r4, #2
 800abd6:	2600      	movs	r6, #0
 800abd8:	42a6      	cmp	r6, r4
 800abda:	d109      	bne.n	800abf0 <__libc_init_array+0x24>
 800abdc:	4d0b      	ldr	r5, [pc, #44]	; (800ac0c <__libc_init_array+0x40>)
 800abde:	4c0c      	ldr	r4, [pc, #48]	; (800ac10 <__libc_init_array+0x44>)
 800abe0:	f002 fd38 	bl	800d654 <_init>
 800abe4:	1b64      	subs	r4, r4, r5
 800abe6:	10a4      	asrs	r4, r4, #2
 800abe8:	2600      	movs	r6, #0
 800abea:	42a6      	cmp	r6, r4
 800abec:	d105      	bne.n	800abfa <__libc_init_array+0x2e>
 800abee:	bd70      	pop	{r4, r5, r6, pc}
 800abf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800abf4:	4798      	blx	r3
 800abf6:	3601      	adds	r6, #1
 800abf8:	e7ee      	b.n	800abd8 <__libc_init_array+0xc>
 800abfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800abfe:	4798      	blx	r3
 800ac00:	3601      	adds	r6, #1
 800ac02:	e7f2      	b.n	800abea <__libc_init_array+0x1e>
 800ac04:	0800dd94 	.word	0x0800dd94
 800ac08:	0800dd94 	.word	0x0800dd94
 800ac0c:	0800dd94 	.word	0x0800dd94
 800ac10:	0800dd98 	.word	0x0800dd98

0800ac14 <__retarget_lock_init_recursive>:
 800ac14:	4770      	bx	lr

0800ac16 <__retarget_lock_acquire_recursive>:
 800ac16:	4770      	bx	lr

0800ac18 <__retarget_lock_release_recursive>:
 800ac18:	4770      	bx	lr
	...

0800ac1c <malloc>:
 800ac1c:	4b02      	ldr	r3, [pc, #8]	; (800ac28 <malloc+0xc>)
 800ac1e:	4601      	mov	r1, r0
 800ac20:	6818      	ldr	r0, [r3, #0]
 800ac22:	f000 b885 	b.w	800ad30 <_malloc_r>
 800ac26:	bf00      	nop
 800ac28:	20000010 	.word	0x20000010

0800ac2c <memcpy>:
 800ac2c:	440a      	add	r2, r1
 800ac2e:	4291      	cmp	r1, r2
 800ac30:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac34:	d100      	bne.n	800ac38 <memcpy+0xc>
 800ac36:	4770      	bx	lr
 800ac38:	b510      	push	{r4, lr}
 800ac3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac42:	4291      	cmp	r1, r2
 800ac44:	d1f9      	bne.n	800ac3a <memcpy+0xe>
 800ac46:	bd10      	pop	{r4, pc}

0800ac48 <memset>:
 800ac48:	4402      	add	r2, r0
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d100      	bne.n	800ac52 <memset+0xa>
 800ac50:	4770      	bx	lr
 800ac52:	f803 1b01 	strb.w	r1, [r3], #1
 800ac56:	e7f9      	b.n	800ac4c <memset+0x4>

0800ac58 <_free_r>:
 800ac58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac5a:	2900      	cmp	r1, #0
 800ac5c:	d044      	beq.n	800ace8 <_free_r+0x90>
 800ac5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac62:	9001      	str	r0, [sp, #4]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f1a1 0404 	sub.w	r4, r1, #4
 800ac6a:	bfb8      	it	lt
 800ac6c:	18e4      	addlt	r4, r4, r3
 800ac6e:	f001 ff23 	bl	800cab8 <__malloc_lock>
 800ac72:	4a1e      	ldr	r2, [pc, #120]	; (800acec <_free_r+0x94>)
 800ac74:	9801      	ldr	r0, [sp, #4]
 800ac76:	6813      	ldr	r3, [r2, #0]
 800ac78:	b933      	cbnz	r3, 800ac88 <_free_r+0x30>
 800ac7a:	6063      	str	r3, [r4, #4]
 800ac7c:	6014      	str	r4, [r2, #0]
 800ac7e:	b003      	add	sp, #12
 800ac80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac84:	f001 bf1e 	b.w	800cac4 <__malloc_unlock>
 800ac88:	42a3      	cmp	r3, r4
 800ac8a:	d908      	bls.n	800ac9e <_free_r+0x46>
 800ac8c:	6825      	ldr	r5, [r4, #0]
 800ac8e:	1961      	adds	r1, r4, r5
 800ac90:	428b      	cmp	r3, r1
 800ac92:	bf01      	itttt	eq
 800ac94:	6819      	ldreq	r1, [r3, #0]
 800ac96:	685b      	ldreq	r3, [r3, #4]
 800ac98:	1949      	addeq	r1, r1, r5
 800ac9a:	6021      	streq	r1, [r4, #0]
 800ac9c:	e7ed      	b.n	800ac7a <_free_r+0x22>
 800ac9e:	461a      	mov	r2, r3
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	b10b      	cbz	r3, 800aca8 <_free_r+0x50>
 800aca4:	42a3      	cmp	r3, r4
 800aca6:	d9fa      	bls.n	800ac9e <_free_r+0x46>
 800aca8:	6811      	ldr	r1, [r2, #0]
 800acaa:	1855      	adds	r5, r2, r1
 800acac:	42a5      	cmp	r5, r4
 800acae:	d10b      	bne.n	800acc8 <_free_r+0x70>
 800acb0:	6824      	ldr	r4, [r4, #0]
 800acb2:	4421      	add	r1, r4
 800acb4:	1854      	adds	r4, r2, r1
 800acb6:	42a3      	cmp	r3, r4
 800acb8:	6011      	str	r1, [r2, #0]
 800acba:	d1e0      	bne.n	800ac7e <_free_r+0x26>
 800acbc:	681c      	ldr	r4, [r3, #0]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	6053      	str	r3, [r2, #4]
 800acc2:	4421      	add	r1, r4
 800acc4:	6011      	str	r1, [r2, #0]
 800acc6:	e7da      	b.n	800ac7e <_free_r+0x26>
 800acc8:	d902      	bls.n	800acd0 <_free_r+0x78>
 800acca:	230c      	movs	r3, #12
 800accc:	6003      	str	r3, [r0, #0]
 800acce:	e7d6      	b.n	800ac7e <_free_r+0x26>
 800acd0:	6825      	ldr	r5, [r4, #0]
 800acd2:	1961      	adds	r1, r4, r5
 800acd4:	428b      	cmp	r3, r1
 800acd6:	bf04      	itt	eq
 800acd8:	6819      	ldreq	r1, [r3, #0]
 800acda:	685b      	ldreq	r3, [r3, #4]
 800acdc:	6063      	str	r3, [r4, #4]
 800acde:	bf04      	itt	eq
 800ace0:	1949      	addeq	r1, r1, r5
 800ace2:	6021      	streq	r1, [r4, #0]
 800ace4:	6054      	str	r4, [r2, #4]
 800ace6:	e7ca      	b.n	800ac7e <_free_r+0x26>
 800ace8:	b003      	add	sp, #12
 800acea:	bd30      	pop	{r4, r5, pc}
 800acec:	2000509c 	.word	0x2000509c

0800acf0 <sbrk_aligned>:
 800acf0:	b570      	push	{r4, r5, r6, lr}
 800acf2:	4e0e      	ldr	r6, [pc, #56]	; (800ad2c <sbrk_aligned+0x3c>)
 800acf4:	460c      	mov	r4, r1
 800acf6:	6831      	ldr	r1, [r6, #0]
 800acf8:	4605      	mov	r5, r0
 800acfa:	b911      	cbnz	r1, 800ad02 <sbrk_aligned+0x12>
 800acfc:	f000 fdee 	bl	800b8dc <_sbrk_r>
 800ad00:	6030      	str	r0, [r6, #0]
 800ad02:	4621      	mov	r1, r4
 800ad04:	4628      	mov	r0, r5
 800ad06:	f000 fde9 	bl	800b8dc <_sbrk_r>
 800ad0a:	1c43      	adds	r3, r0, #1
 800ad0c:	d00a      	beq.n	800ad24 <sbrk_aligned+0x34>
 800ad0e:	1cc4      	adds	r4, r0, #3
 800ad10:	f024 0403 	bic.w	r4, r4, #3
 800ad14:	42a0      	cmp	r0, r4
 800ad16:	d007      	beq.n	800ad28 <sbrk_aligned+0x38>
 800ad18:	1a21      	subs	r1, r4, r0
 800ad1a:	4628      	mov	r0, r5
 800ad1c:	f000 fdde 	bl	800b8dc <_sbrk_r>
 800ad20:	3001      	adds	r0, #1
 800ad22:	d101      	bne.n	800ad28 <sbrk_aligned+0x38>
 800ad24:	f04f 34ff 	mov.w	r4, #4294967295
 800ad28:	4620      	mov	r0, r4
 800ad2a:	bd70      	pop	{r4, r5, r6, pc}
 800ad2c:	200050a0 	.word	0x200050a0

0800ad30 <_malloc_r>:
 800ad30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad34:	1ccd      	adds	r5, r1, #3
 800ad36:	f025 0503 	bic.w	r5, r5, #3
 800ad3a:	3508      	adds	r5, #8
 800ad3c:	2d0c      	cmp	r5, #12
 800ad3e:	bf38      	it	cc
 800ad40:	250c      	movcc	r5, #12
 800ad42:	2d00      	cmp	r5, #0
 800ad44:	4607      	mov	r7, r0
 800ad46:	db01      	blt.n	800ad4c <_malloc_r+0x1c>
 800ad48:	42a9      	cmp	r1, r5
 800ad4a:	d905      	bls.n	800ad58 <_malloc_r+0x28>
 800ad4c:	230c      	movs	r3, #12
 800ad4e:	603b      	str	r3, [r7, #0]
 800ad50:	2600      	movs	r6, #0
 800ad52:	4630      	mov	r0, r6
 800ad54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad58:	4e2e      	ldr	r6, [pc, #184]	; (800ae14 <_malloc_r+0xe4>)
 800ad5a:	f001 fead 	bl	800cab8 <__malloc_lock>
 800ad5e:	6833      	ldr	r3, [r6, #0]
 800ad60:	461c      	mov	r4, r3
 800ad62:	bb34      	cbnz	r4, 800adb2 <_malloc_r+0x82>
 800ad64:	4629      	mov	r1, r5
 800ad66:	4638      	mov	r0, r7
 800ad68:	f7ff ffc2 	bl	800acf0 <sbrk_aligned>
 800ad6c:	1c43      	adds	r3, r0, #1
 800ad6e:	4604      	mov	r4, r0
 800ad70:	d14d      	bne.n	800ae0e <_malloc_r+0xde>
 800ad72:	6834      	ldr	r4, [r6, #0]
 800ad74:	4626      	mov	r6, r4
 800ad76:	2e00      	cmp	r6, #0
 800ad78:	d140      	bne.n	800adfc <_malloc_r+0xcc>
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	4631      	mov	r1, r6
 800ad7e:	4638      	mov	r0, r7
 800ad80:	eb04 0803 	add.w	r8, r4, r3
 800ad84:	f000 fdaa 	bl	800b8dc <_sbrk_r>
 800ad88:	4580      	cmp	r8, r0
 800ad8a:	d13a      	bne.n	800ae02 <_malloc_r+0xd2>
 800ad8c:	6821      	ldr	r1, [r4, #0]
 800ad8e:	3503      	adds	r5, #3
 800ad90:	1a6d      	subs	r5, r5, r1
 800ad92:	f025 0503 	bic.w	r5, r5, #3
 800ad96:	3508      	adds	r5, #8
 800ad98:	2d0c      	cmp	r5, #12
 800ad9a:	bf38      	it	cc
 800ad9c:	250c      	movcc	r5, #12
 800ad9e:	4629      	mov	r1, r5
 800ada0:	4638      	mov	r0, r7
 800ada2:	f7ff ffa5 	bl	800acf0 <sbrk_aligned>
 800ada6:	3001      	adds	r0, #1
 800ada8:	d02b      	beq.n	800ae02 <_malloc_r+0xd2>
 800adaa:	6823      	ldr	r3, [r4, #0]
 800adac:	442b      	add	r3, r5
 800adae:	6023      	str	r3, [r4, #0]
 800adb0:	e00e      	b.n	800add0 <_malloc_r+0xa0>
 800adb2:	6822      	ldr	r2, [r4, #0]
 800adb4:	1b52      	subs	r2, r2, r5
 800adb6:	d41e      	bmi.n	800adf6 <_malloc_r+0xc6>
 800adb8:	2a0b      	cmp	r2, #11
 800adba:	d916      	bls.n	800adea <_malloc_r+0xba>
 800adbc:	1961      	adds	r1, r4, r5
 800adbe:	42a3      	cmp	r3, r4
 800adc0:	6025      	str	r5, [r4, #0]
 800adc2:	bf18      	it	ne
 800adc4:	6059      	strne	r1, [r3, #4]
 800adc6:	6863      	ldr	r3, [r4, #4]
 800adc8:	bf08      	it	eq
 800adca:	6031      	streq	r1, [r6, #0]
 800adcc:	5162      	str	r2, [r4, r5]
 800adce:	604b      	str	r3, [r1, #4]
 800add0:	4638      	mov	r0, r7
 800add2:	f104 060b 	add.w	r6, r4, #11
 800add6:	f001 fe75 	bl	800cac4 <__malloc_unlock>
 800adda:	f026 0607 	bic.w	r6, r6, #7
 800adde:	1d23      	adds	r3, r4, #4
 800ade0:	1af2      	subs	r2, r6, r3
 800ade2:	d0b6      	beq.n	800ad52 <_malloc_r+0x22>
 800ade4:	1b9b      	subs	r3, r3, r6
 800ade6:	50a3      	str	r3, [r4, r2]
 800ade8:	e7b3      	b.n	800ad52 <_malloc_r+0x22>
 800adea:	6862      	ldr	r2, [r4, #4]
 800adec:	42a3      	cmp	r3, r4
 800adee:	bf0c      	ite	eq
 800adf0:	6032      	streq	r2, [r6, #0]
 800adf2:	605a      	strne	r2, [r3, #4]
 800adf4:	e7ec      	b.n	800add0 <_malloc_r+0xa0>
 800adf6:	4623      	mov	r3, r4
 800adf8:	6864      	ldr	r4, [r4, #4]
 800adfa:	e7b2      	b.n	800ad62 <_malloc_r+0x32>
 800adfc:	4634      	mov	r4, r6
 800adfe:	6876      	ldr	r6, [r6, #4]
 800ae00:	e7b9      	b.n	800ad76 <_malloc_r+0x46>
 800ae02:	230c      	movs	r3, #12
 800ae04:	603b      	str	r3, [r7, #0]
 800ae06:	4638      	mov	r0, r7
 800ae08:	f001 fe5c 	bl	800cac4 <__malloc_unlock>
 800ae0c:	e7a1      	b.n	800ad52 <_malloc_r+0x22>
 800ae0e:	6025      	str	r5, [r4, #0]
 800ae10:	e7de      	b.n	800add0 <_malloc_r+0xa0>
 800ae12:	bf00      	nop
 800ae14:	2000509c 	.word	0x2000509c

0800ae18 <__cvt>:
 800ae18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae1c:	ec55 4b10 	vmov	r4, r5, d0
 800ae20:	2d00      	cmp	r5, #0
 800ae22:	460e      	mov	r6, r1
 800ae24:	4619      	mov	r1, r3
 800ae26:	462b      	mov	r3, r5
 800ae28:	bfbb      	ittet	lt
 800ae2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ae2e:	461d      	movlt	r5, r3
 800ae30:	2300      	movge	r3, #0
 800ae32:	232d      	movlt	r3, #45	; 0x2d
 800ae34:	700b      	strb	r3, [r1, #0]
 800ae36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ae3c:	4691      	mov	r9, r2
 800ae3e:	f023 0820 	bic.w	r8, r3, #32
 800ae42:	bfbc      	itt	lt
 800ae44:	4622      	movlt	r2, r4
 800ae46:	4614      	movlt	r4, r2
 800ae48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae4c:	d005      	beq.n	800ae5a <__cvt+0x42>
 800ae4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae52:	d100      	bne.n	800ae56 <__cvt+0x3e>
 800ae54:	3601      	adds	r6, #1
 800ae56:	2102      	movs	r1, #2
 800ae58:	e000      	b.n	800ae5c <__cvt+0x44>
 800ae5a:	2103      	movs	r1, #3
 800ae5c:	ab03      	add	r3, sp, #12
 800ae5e:	9301      	str	r3, [sp, #4]
 800ae60:	ab02      	add	r3, sp, #8
 800ae62:	9300      	str	r3, [sp, #0]
 800ae64:	ec45 4b10 	vmov	d0, r4, r5
 800ae68:	4653      	mov	r3, sl
 800ae6a:	4632      	mov	r2, r6
 800ae6c:	f000 fef8 	bl	800bc60 <_dtoa_r>
 800ae70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ae74:	4607      	mov	r7, r0
 800ae76:	d102      	bne.n	800ae7e <__cvt+0x66>
 800ae78:	f019 0f01 	tst.w	r9, #1
 800ae7c:	d022      	beq.n	800aec4 <__cvt+0xac>
 800ae7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae82:	eb07 0906 	add.w	r9, r7, r6
 800ae86:	d110      	bne.n	800aeaa <__cvt+0x92>
 800ae88:	783b      	ldrb	r3, [r7, #0]
 800ae8a:	2b30      	cmp	r3, #48	; 0x30
 800ae8c:	d10a      	bne.n	800aea4 <__cvt+0x8c>
 800ae8e:	2200      	movs	r2, #0
 800ae90:	2300      	movs	r3, #0
 800ae92:	4620      	mov	r0, r4
 800ae94:	4629      	mov	r1, r5
 800ae96:	f7f5 fe37 	bl	8000b08 <__aeabi_dcmpeq>
 800ae9a:	b918      	cbnz	r0, 800aea4 <__cvt+0x8c>
 800ae9c:	f1c6 0601 	rsb	r6, r6, #1
 800aea0:	f8ca 6000 	str.w	r6, [sl]
 800aea4:	f8da 3000 	ldr.w	r3, [sl]
 800aea8:	4499      	add	r9, r3
 800aeaa:	2200      	movs	r2, #0
 800aeac:	2300      	movs	r3, #0
 800aeae:	4620      	mov	r0, r4
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	f7f5 fe29 	bl	8000b08 <__aeabi_dcmpeq>
 800aeb6:	b108      	cbz	r0, 800aebc <__cvt+0xa4>
 800aeb8:	f8cd 900c 	str.w	r9, [sp, #12]
 800aebc:	2230      	movs	r2, #48	; 0x30
 800aebe:	9b03      	ldr	r3, [sp, #12]
 800aec0:	454b      	cmp	r3, r9
 800aec2:	d307      	bcc.n	800aed4 <__cvt+0xbc>
 800aec4:	9b03      	ldr	r3, [sp, #12]
 800aec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aec8:	1bdb      	subs	r3, r3, r7
 800aeca:	4638      	mov	r0, r7
 800aecc:	6013      	str	r3, [r2, #0]
 800aece:	b004      	add	sp, #16
 800aed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed4:	1c59      	adds	r1, r3, #1
 800aed6:	9103      	str	r1, [sp, #12]
 800aed8:	701a      	strb	r2, [r3, #0]
 800aeda:	e7f0      	b.n	800aebe <__cvt+0xa6>

0800aedc <__exponent>:
 800aedc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aede:	4603      	mov	r3, r0
 800aee0:	2900      	cmp	r1, #0
 800aee2:	bfb8      	it	lt
 800aee4:	4249      	neglt	r1, r1
 800aee6:	f803 2b02 	strb.w	r2, [r3], #2
 800aeea:	bfb4      	ite	lt
 800aeec:	222d      	movlt	r2, #45	; 0x2d
 800aeee:	222b      	movge	r2, #43	; 0x2b
 800aef0:	2909      	cmp	r1, #9
 800aef2:	7042      	strb	r2, [r0, #1]
 800aef4:	dd2a      	ble.n	800af4c <__exponent+0x70>
 800aef6:	f10d 0407 	add.w	r4, sp, #7
 800aefa:	46a4      	mov	ip, r4
 800aefc:	270a      	movs	r7, #10
 800aefe:	46a6      	mov	lr, r4
 800af00:	460a      	mov	r2, r1
 800af02:	fb91 f6f7 	sdiv	r6, r1, r7
 800af06:	fb07 1516 	mls	r5, r7, r6, r1
 800af0a:	3530      	adds	r5, #48	; 0x30
 800af0c:	2a63      	cmp	r2, #99	; 0x63
 800af0e:	f104 34ff 	add.w	r4, r4, #4294967295
 800af12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800af16:	4631      	mov	r1, r6
 800af18:	dcf1      	bgt.n	800aefe <__exponent+0x22>
 800af1a:	3130      	adds	r1, #48	; 0x30
 800af1c:	f1ae 0502 	sub.w	r5, lr, #2
 800af20:	f804 1c01 	strb.w	r1, [r4, #-1]
 800af24:	1c44      	adds	r4, r0, #1
 800af26:	4629      	mov	r1, r5
 800af28:	4561      	cmp	r1, ip
 800af2a:	d30a      	bcc.n	800af42 <__exponent+0x66>
 800af2c:	f10d 0209 	add.w	r2, sp, #9
 800af30:	eba2 020e 	sub.w	r2, r2, lr
 800af34:	4565      	cmp	r5, ip
 800af36:	bf88      	it	hi
 800af38:	2200      	movhi	r2, #0
 800af3a:	4413      	add	r3, r2
 800af3c:	1a18      	subs	r0, r3, r0
 800af3e:	b003      	add	sp, #12
 800af40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af46:	f804 2f01 	strb.w	r2, [r4, #1]!
 800af4a:	e7ed      	b.n	800af28 <__exponent+0x4c>
 800af4c:	2330      	movs	r3, #48	; 0x30
 800af4e:	3130      	adds	r1, #48	; 0x30
 800af50:	7083      	strb	r3, [r0, #2]
 800af52:	70c1      	strb	r1, [r0, #3]
 800af54:	1d03      	adds	r3, r0, #4
 800af56:	e7f1      	b.n	800af3c <__exponent+0x60>

0800af58 <_printf_float>:
 800af58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af5c:	ed2d 8b02 	vpush	{d8}
 800af60:	b08d      	sub	sp, #52	; 0x34
 800af62:	460c      	mov	r4, r1
 800af64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800af68:	4616      	mov	r6, r2
 800af6a:	461f      	mov	r7, r3
 800af6c:	4605      	mov	r5, r0
 800af6e:	f001 fd27 	bl	800c9c0 <_localeconv_r>
 800af72:	f8d0 a000 	ldr.w	sl, [r0]
 800af76:	4650      	mov	r0, sl
 800af78:	f7f5 f94a 	bl	8000210 <strlen>
 800af7c:	2300      	movs	r3, #0
 800af7e:	930a      	str	r3, [sp, #40]	; 0x28
 800af80:	6823      	ldr	r3, [r4, #0]
 800af82:	9305      	str	r3, [sp, #20]
 800af84:	f8d8 3000 	ldr.w	r3, [r8]
 800af88:	f894 b018 	ldrb.w	fp, [r4, #24]
 800af8c:	3307      	adds	r3, #7
 800af8e:	f023 0307 	bic.w	r3, r3, #7
 800af92:	f103 0208 	add.w	r2, r3, #8
 800af96:	f8c8 2000 	str.w	r2, [r8]
 800af9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800afa2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800afa6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800afaa:	9307      	str	r3, [sp, #28]
 800afac:	f8cd 8018 	str.w	r8, [sp, #24]
 800afb0:	ee08 0a10 	vmov	s16, r0
 800afb4:	4b9f      	ldr	r3, [pc, #636]	; (800b234 <_printf_float+0x2dc>)
 800afb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afba:	f04f 32ff 	mov.w	r2, #4294967295
 800afbe:	f7f5 fdd5 	bl	8000b6c <__aeabi_dcmpun>
 800afc2:	bb88      	cbnz	r0, 800b028 <_printf_float+0xd0>
 800afc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afc8:	4b9a      	ldr	r3, [pc, #616]	; (800b234 <_printf_float+0x2dc>)
 800afca:	f04f 32ff 	mov.w	r2, #4294967295
 800afce:	f7f5 fdaf 	bl	8000b30 <__aeabi_dcmple>
 800afd2:	bb48      	cbnz	r0, 800b028 <_printf_float+0xd0>
 800afd4:	2200      	movs	r2, #0
 800afd6:	2300      	movs	r3, #0
 800afd8:	4640      	mov	r0, r8
 800afda:	4649      	mov	r1, r9
 800afdc:	f7f5 fd9e 	bl	8000b1c <__aeabi_dcmplt>
 800afe0:	b110      	cbz	r0, 800afe8 <_printf_float+0x90>
 800afe2:	232d      	movs	r3, #45	; 0x2d
 800afe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afe8:	4b93      	ldr	r3, [pc, #588]	; (800b238 <_printf_float+0x2e0>)
 800afea:	4894      	ldr	r0, [pc, #592]	; (800b23c <_printf_float+0x2e4>)
 800afec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aff0:	bf94      	ite	ls
 800aff2:	4698      	movls	r8, r3
 800aff4:	4680      	movhi	r8, r0
 800aff6:	2303      	movs	r3, #3
 800aff8:	6123      	str	r3, [r4, #16]
 800affa:	9b05      	ldr	r3, [sp, #20]
 800affc:	f023 0204 	bic.w	r2, r3, #4
 800b000:	6022      	str	r2, [r4, #0]
 800b002:	f04f 0900 	mov.w	r9, #0
 800b006:	9700      	str	r7, [sp, #0]
 800b008:	4633      	mov	r3, r6
 800b00a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b00c:	4621      	mov	r1, r4
 800b00e:	4628      	mov	r0, r5
 800b010:	f000 f9d8 	bl	800b3c4 <_printf_common>
 800b014:	3001      	adds	r0, #1
 800b016:	f040 8090 	bne.w	800b13a <_printf_float+0x1e2>
 800b01a:	f04f 30ff 	mov.w	r0, #4294967295
 800b01e:	b00d      	add	sp, #52	; 0x34
 800b020:	ecbd 8b02 	vpop	{d8}
 800b024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b028:	4642      	mov	r2, r8
 800b02a:	464b      	mov	r3, r9
 800b02c:	4640      	mov	r0, r8
 800b02e:	4649      	mov	r1, r9
 800b030:	f7f5 fd9c 	bl	8000b6c <__aeabi_dcmpun>
 800b034:	b140      	cbz	r0, 800b048 <_printf_float+0xf0>
 800b036:	464b      	mov	r3, r9
 800b038:	2b00      	cmp	r3, #0
 800b03a:	bfbc      	itt	lt
 800b03c:	232d      	movlt	r3, #45	; 0x2d
 800b03e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b042:	487f      	ldr	r0, [pc, #508]	; (800b240 <_printf_float+0x2e8>)
 800b044:	4b7f      	ldr	r3, [pc, #508]	; (800b244 <_printf_float+0x2ec>)
 800b046:	e7d1      	b.n	800afec <_printf_float+0x94>
 800b048:	6863      	ldr	r3, [r4, #4]
 800b04a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b04e:	9206      	str	r2, [sp, #24]
 800b050:	1c5a      	adds	r2, r3, #1
 800b052:	d13f      	bne.n	800b0d4 <_printf_float+0x17c>
 800b054:	2306      	movs	r3, #6
 800b056:	6063      	str	r3, [r4, #4]
 800b058:	9b05      	ldr	r3, [sp, #20]
 800b05a:	6861      	ldr	r1, [r4, #4]
 800b05c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b060:	2300      	movs	r3, #0
 800b062:	9303      	str	r3, [sp, #12]
 800b064:	ab0a      	add	r3, sp, #40	; 0x28
 800b066:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b06a:	ab09      	add	r3, sp, #36	; 0x24
 800b06c:	ec49 8b10 	vmov	d0, r8, r9
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	6022      	str	r2, [r4, #0]
 800b074:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b078:	4628      	mov	r0, r5
 800b07a:	f7ff fecd 	bl	800ae18 <__cvt>
 800b07e:	9b06      	ldr	r3, [sp, #24]
 800b080:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b082:	2b47      	cmp	r3, #71	; 0x47
 800b084:	4680      	mov	r8, r0
 800b086:	d108      	bne.n	800b09a <_printf_float+0x142>
 800b088:	1cc8      	adds	r0, r1, #3
 800b08a:	db02      	blt.n	800b092 <_printf_float+0x13a>
 800b08c:	6863      	ldr	r3, [r4, #4]
 800b08e:	4299      	cmp	r1, r3
 800b090:	dd41      	ble.n	800b116 <_printf_float+0x1be>
 800b092:	f1ab 0b02 	sub.w	fp, fp, #2
 800b096:	fa5f fb8b 	uxtb.w	fp, fp
 800b09a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b09e:	d820      	bhi.n	800b0e2 <_printf_float+0x18a>
 800b0a0:	3901      	subs	r1, #1
 800b0a2:	465a      	mov	r2, fp
 800b0a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b0a8:	9109      	str	r1, [sp, #36]	; 0x24
 800b0aa:	f7ff ff17 	bl	800aedc <__exponent>
 800b0ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0b0:	1813      	adds	r3, r2, r0
 800b0b2:	2a01      	cmp	r2, #1
 800b0b4:	4681      	mov	r9, r0
 800b0b6:	6123      	str	r3, [r4, #16]
 800b0b8:	dc02      	bgt.n	800b0c0 <_printf_float+0x168>
 800b0ba:	6822      	ldr	r2, [r4, #0]
 800b0bc:	07d2      	lsls	r2, r2, #31
 800b0be:	d501      	bpl.n	800b0c4 <_printf_float+0x16c>
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	6123      	str	r3, [r4, #16]
 800b0c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d09c      	beq.n	800b006 <_printf_float+0xae>
 800b0cc:	232d      	movs	r3, #45	; 0x2d
 800b0ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0d2:	e798      	b.n	800b006 <_printf_float+0xae>
 800b0d4:	9a06      	ldr	r2, [sp, #24]
 800b0d6:	2a47      	cmp	r2, #71	; 0x47
 800b0d8:	d1be      	bne.n	800b058 <_printf_float+0x100>
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d1bc      	bne.n	800b058 <_printf_float+0x100>
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e7b9      	b.n	800b056 <_printf_float+0xfe>
 800b0e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b0e6:	d118      	bne.n	800b11a <_printf_float+0x1c2>
 800b0e8:	2900      	cmp	r1, #0
 800b0ea:	6863      	ldr	r3, [r4, #4]
 800b0ec:	dd0b      	ble.n	800b106 <_printf_float+0x1ae>
 800b0ee:	6121      	str	r1, [r4, #16]
 800b0f0:	b913      	cbnz	r3, 800b0f8 <_printf_float+0x1a0>
 800b0f2:	6822      	ldr	r2, [r4, #0]
 800b0f4:	07d0      	lsls	r0, r2, #31
 800b0f6:	d502      	bpl.n	800b0fe <_printf_float+0x1a6>
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	440b      	add	r3, r1
 800b0fc:	6123      	str	r3, [r4, #16]
 800b0fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800b100:	f04f 0900 	mov.w	r9, #0
 800b104:	e7de      	b.n	800b0c4 <_printf_float+0x16c>
 800b106:	b913      	cbnz	r3, 800b10e <_printf_float+0x1b6>
 800b108:	6822      	ldr	r2, [r4, #0]
 800b10a:	07d2      	lsls	r2, r2, #31
 800b10c:	d501      	bpl.n	800b112 <_printf_float+0x1ba>
 800b10e:	3302      	adds	r3, #2
 800b110:	e7f4      	b.n	800b0fc <_printf_float+0x1a4>
 800b112:	2301      	movs	r3, #1
 800b114:	e7f2      	b.n	800b0fc <_printf_float+0x1a4>
 800b116:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b11a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b11c:	4299      	cmp	r1, r3
 800b11e:	db05      	blt.n	800b12c <_printf_float+0x1d4>
 800b120:	6823      	ldr	r3, [r4, #0]
 800b122:	6121      	str	r1, [r4, #16]
 800b124:	07d8      	lsls	r0, r3, #31
 800b126:	d5ea      	bpl.n	800b0fe <_printf_float+0x1a6>
 800b128:	1c4b      	adds	r3, r1, #1
 800b12a:	e7e7      	b.n	800b0fc <_printf_float+0x1a4>
 800b12c:	2900      	cmp	r1, #0
 800b12e:	bfd4      	ite	le
 800b130:	f1c1 0202 	rsble	r2, r1, #2
 800b134:	2201      	movgt	r2, #1
 800b136:	4413      	add	r3, r2
 800b138:	e7e0      	b.n	800b0fc <_printf_float+0x1a4>
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	055a      	lsls	r2, r3, #21
 800b13e:	d407      	bmi.n	800b150 <_printf_float+0x1f8>
 800b140:	6923      	ldr	r3, [r4, #16]
 800b142:	4642      	mov	r2, r8
 800b144:	4631      	mov	r1, r6
 800b146:	4628      	mov	r0, r5
 800b148:	47b8      	blx	r7
 800b14a:	3001      	adds	r0, #1
 800b14c:	d12c      	bne.n	800b1a8 <_printf_float+0x250>
 800b14e:	e764      	b.n	800b01a <_printf_float+0xc2>
 800b150:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b154:	f240 80e0 	bls.w	800b318 <_printf_float+0x3c0>
 800b158:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b15c:	2200      	movs	r2, #0
 800b15e:	2300      	movs	r3, #0
 800b160:	f7f5 fcd2 	bl	8000b08 <__aeabi_dcmpeq>
 800b164:	2800      	cmp	r0, #0
 800b166:	d034      	beq.n	800b1d2 <_printf_float+0x27a>
 800b168:	4a37      	ldr	r2, [pc, #220]	; (800b248 <_printf_float+0x2f0>)
 800b16a:	2301      	movs	r3, #1
 800b16c:	4631      	mov	r1, r6
 800b16e:	4628      	mov	r0, r5
 800b170:	47b8      	blx	r7
 800b172:	3001      	adds	r0, #1
 800b174:	f43f af51 	beq.w	800b01a <_printf_float+0xc2>
 800b178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b17c:	429a      	cmp	r2, r3
 800b17e:	db02      	blt.n	800b186 <_printf_float+0x22e>
 800b180:	6823      	ldr	r3, [r4, #0]
 800b182:	07d8      	lsls	r0, r3, #31
 800b184:	d510      	bpl.n	800b1a8 <_printf_float+0x250>
 800b186:	ee18 3a10 	vmov	r3, s16
 800b18a:	4652      	mov	r2, sl
 800b18c:	4631      	mov	r1, r6
 800b18e:	4628      	mov	r0, r5
 800b190:	47b8      	blx	r7
 800b192:	3001      	adds	r0, #1
 800b194:	f43f af41 	beq.w	800b01a <_printf_float+0xc2>
 800b198:	f04f 0800 	mov.w	r8, #0
 800b19c:	f104 091a 	add.w	r9, r4, #26
 800b1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	4543      	cmp	r3, r8
 800b1a6:	dc09      	bgt.n	800b1bc <_printf_float+0x264>
 800b1a8:	6823      	ldr	r3, [r4, #0]
 800b1aa:	079b      	lsls	r3, r3, #30
 800b1ac:	f100 8105 	bmi.w	800b3ba <_printf_float+0x462>
 800b1b0:	68e0      	ldr	r0, [r4, #12]
 800b1b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1b4:	4298      	cmp	r0, r3
 800b1b6:	bfb8      	it	lt
 800b1b8:	4618      	movlt	r0, r3
 800b1ba:	e730      	b.n	800b01e <_printf_float+0xc6>
 800b1bc:	2301      	movs	r3, #1
 800b1be:	464a      	mov	r2, r9
 800b1c0:	4631      	mov	r1, r6
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	47b8      	blx	r7
 800b1c6:	3001      	adds	r0, #1
 800b1c8:	f43f af27 	beq.w	800b01a <_printf_float+0xc2>
 800b1cc:	f108 0801 	add.w	r8, r8, #1
 800b1d0:	e7e6      	b.n	800b1a0 <_printf_float+0x248>
 800b1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	dc39      	bgt.n	800b24c <_printf_float+0x2f4>
 800b1d8:	4a1b      	ldr	r2, [pc, #108]	; (800b248 <_printf_float+0x2f0>)
 800b1da:	2301      	movs	r3, #1
 800b1dc:	4631      	mov	r1, r6
 800b1de:	4628      	mov	r0, r5
 800b1e0:	47b8      	blx	r7
 800b1e2:	3001      	adds	r0, #1
 800b1e4:	f43f af19 	beq.w	800b01a <_printf_float+0xc2>
 800b1e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	d102      	bne.n	800b1f6 <_printf_float+0x29e>
 800b1f0:	6823      	ldr	r3, [r4, #0]
 800b1f2:	07d9      	lsls	r1, r3, #31
 800b1f4:	d5d8      	bpl.n	800b1a8 <_printf_float+0x250>
 800b1f6:	ee18 3a10 	vmov	r3, s16
 800b1fa:	4652      	mov	r2, sl
 800b1fc:	4631      	mov	r1, r6
 800b1fe:	4628      	mov	r0, r5
 800b200:	47b8      	blx	r7
 800b202:	3001      	adds	r0, #1
 800b204:	f43f af09 	beq.w	800b01a <_printf_float+0xc2>
 800b208:	f04f 0900 	mov.w	r9, #0
 800b20c:	f104 0a1a 	add.w	sl, r4, #26
 800b210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b212:	425b      	negs	r3, r3
 800b214:	454b      	cmp	r3, r9
 800b216:	dc01      	bgt.n	800b21c <_printf_float+0x2c4>
 800b218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b21a:	e792      	b.n	800b142 <_printf_float+0x1ea>
 800b21c:	2301      	movs	r3, #1
 800b21e:	4652      	mov	r2, sl
 800b220:	4631      	mov	r1, r6
 800b222:	4628      	mov	r0, r5
 800b224:	47b8      	blx	r7
 800b226:	3001      	adds	r0, #1
 800b228:	f43f aef7 	beq.w	800b01a <_printf_float+0xc2>
 800b22c:	f109 0901 	add.w	r9, r9, #1
 800b230:	e7ee      	b.n	800b210 <_printf_float+0x2b8>
 800b232:	bf00      	nop
 800b234:	7fefffff 	.word	0x7fefffff
 800b238:	0800da14 	.word	0x0800da14
 800b23c:	0800da18 	.word	0x0800da18
 800b240:	0800da20 	.word	0x0800da20
 800b244:	0800da1c 	.word	0x0800da1c
 800b248:	0800da24 	.word	0x0800da24
 800b24c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b24e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b250:	429a      	cmp	r2, r3
 800b252:	bfa8      	it	ge
 800b254:	461a      	movge	r2, r3
 800b256:	2a00      	cmp	r2, #0
 800b258:	4691      	mov	r9, r2
 800b25a:	dc37      	bgt.n	800b2cc <_printf_float+0x374>
 800b25c:	f04f 0b00 	mov.w	fp, #0
 800b260:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b264:	f104 021a 	add.w	r2, r4, #26
 800b268:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b26a:	9305      	str	r3, [sp, #20]
 800b26c:	eba3 0309 	sub.w	r3, r3, r9
 800b270:	455b      	cmp	r3, fp
 800b272:	dc33      	bgt.n	800b2dc <_printf_float+0x384>
 800b274:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b278:	429a      	cmp	r2, r3
 800b27a:	db3b      	blt.n	800b2f4 <_printf_float+0x39c>
 800b27c:	6823      	ldr	r3, [r4, #0]
 800b27e:	07da      	lsls	r2, r3, #31
 800b280:	d438      	bmi.n	800b2f4 <_printf_float+0x39c>
 800b282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b284:	9a05      	ldr	r2, [sp, #20]
 800b286:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b288:	1a9a      	subs	r2, r3, r2
 800b28a:	eba3 0901 	sub.w	r9, r3, r1
 800b28e:	4591      	cmp	r9, r2
 800b290:	bfa8      	it	ge
 800b292:	4691      	movge	r9, r2
 800b294:	f1b9 0f00 	cmp.w	r9, #0
 800b298:	dc35      	bgt.n	800b306 <_printf_float+0x3ae>
 800b29a:	f04f 0800 	mov.w	r8, #0
 800b29e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2a2:	f104 0a1a 	add.w	sl, r4, #26
 800b2a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2aa:	1a9b      	subs	r3, r3, r2
 800b2ac:	eba3 0309 	sub.w	r3, r3, r9
 800b2b0:	4543      	cmp	r3, r8
 800b2b2:	f77f af79 	ble.w	800b1a8 <_printf_float+0x250>
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	4652      	mov	r2, sl
 800b2ba:	4631      	mov	r1, r6
 800b2bc:	4628      	mov	r0, r5
 800b2be:	47b8      	blx	r7
 800b2c0:	3001      	adds	r0, #1
 800b2c2:	f43f aeaa 	beq.w	800b01a <_printf_float+0xc2>
 800b2c6:	f108 0801 	add.w	r8, r8, #1
 800b2ca:	e7ec      	b.n	800b2a6 <_printf_float+0x34e>
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	4631      	mov	r1, r6
 800b2d0:	4642      	mov	r2, r8
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	47b8      	blx	r7
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	d1c0      	bne.n	800b25c <_printf_float+0x304>
 800b2da:	e69e      	b.n	800b01a <_printf_float+0xc2>
 800b2dc:	2301      	movs	r3, #1
 800b2de:	4631      	mov	r1, r6
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	9205      	str	r2, [sp, #20]
 800b2e4:	47b8      	blx	r7
 800b2e6:	3001      	adds	r0, #1
 800b2e8:	f43f ae97 	beq.w	800b01a <_printf_float+0xc2>
 800b2ec:	9a05      	ldr	r2, [sp, #20]
 800b2ee:	f10b 0b01 	add.w	fp, fp, #1
 800b2f2:	e7b9      	b.n	800b268 <_printf_float+0x310>
 800b2f4:	ee18 3a10 	vmov	r3, s16
 800b2f8:	4652      	mov	r2, sl
 800b2fa:	4631      	mov	r1, r6
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	47b8      	blx	r7
 800b300:	3001      	adds	r0, #1
 800b302:	d1be      	bne.n	800b282 <_printf_float+0x32a>
 800b304:	e689      	b.n	800b01a <_printf_float+0xc2>
 800b306:	9a05      	ldr	r2, [sp, #20]
 800b308:	464b      	mov	r3, r9
 800b30a:	4442      	add	r2, r8
 800b30c:	4631      	mov	r1, r6
 800b30e:	4628      	mov	r0, r5
 800b310:	47b8      	blx	r7
 800b312:	3001      	adds	r0, #1
 800b314:	d1c1      	bne.n	800b29a <_printf_float+0x342>
 800b316:	e680      	b.n	800b01a <_printf_float+0xc2>
 800b318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b31a:	2a01      	cmp	r2, #1
 800b31c:	dc01      	bgt.n	800b322 <_printf_float+0x3ca>
 800b31e:	07db      	lsls	r3, r3, #31
 800b320:	d538      	bpl.n	800b394 <_printf_float+0x43c>
 800b322:	2301      	movs	r3, #1
 800b324:	4642      	mov	r2, r8
 800b326:	4631      	mov	r1, r6
 800b328:	4628      	mov	r0, r5
 800b32a:	47b8      	blx	r7
 800b32c:	3001      	adds	r0, #1
 800b32e:	f43f ae74 	beq.w	800b01a <_printf_float+0xc2>
 800b332:	ee18 3a10 	vmov	r3, s16
 800b336:	4652      	mov	r2, sl
 800b338:	4631      	mov	r1, r6
 800b33a:	4628      	mov	r0, r5
 800b33c:	47b8      	blx	r7
 800b33e:	3001      	adds	r0, #1
 800b340:	f43f ae6b 	beq.w	800b01a <_printf_float+0xc2>
 800b344:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b348:	2200      	movs	r2, #0
 800b34a:	2300      	movs	r3, #0
 800b34c:	f7f5 fbdc 	bl	8000b08 <__aeabi_dcmpeq>
 800b350:	b9d8      	cbnz	r0, 800b38a <_printf_float+0x432>
 800b352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b354:	f108 0201 	add.w	r2, r8, #1
 800b358:	3b01      	subs	r3, #1
 800b35a:	4631      	mov	r1, r6
 800b35c:	4628      	mov	r0, r5
 800b35e:	47b8      	blx	r7
 800b360:	3001      	adds	r0, #1
 800b362:	d10e      	bne.n	800b382 <_printf_float+0x42a>
 800b364:	e659      	b.n	800b01a <_printf_float+0xc2>
 800b366:	2301      	movs	r3, #1
 800b368:	4652      	mov	r2, sl
 800b36a:	4631      	mov	r1, r6
 800b36c:	4628      	mov	r0, r5
 800b36e:	47b8      	blx	r7
 800b370:	3001      	adds	r0, #1
 800b372:	f43f ae52 	beq.w	800b01a <_printf_float+0xc2>
 800b376:	f108 0801 	add.w	r8, r8, #1
 800b37a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b37c:	3b01      	subs	r3, #1
 800b37e:	4543      	cmp	r3, r8
 800b380:	dcf1      	bgt.n	800b366 <_printf_float+0x40e>
 800b382:	464b      	mov	r3, r9
 800b384:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b388:	e6dc      	b.n	800b144 <_printf_float+0x1ec>
 800b38a:	f04f 0800 	mov.w	r8, #0
 800b38e:	f104 0a1a 	add.w	sl, r4, #26
 800b392:	e7f2      	b.n	800b37a <_printf_float+0x422>
 800b394:	2301      	movs	r3, #1
 800b396:	4642      	mov	r2, r8
 800b398:	e7df      	b.n	800b35a <_printf_float+0x402>
 800b39a:	2301      	movs	r3, #1
 800b39c:	464a      	mov	r2, r9
 800b39e:	4631      	mov	r1, r6
 800b3a0:	4628      	mov	r0, r5
 800b3a2:	47b8      	blx	r7
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	f43f ae38 	beq.w	800b01a <_printf_float+0xc2>
 800b3aa:	f108 0801 	add.w	r8, r8, #1
 800b3ae:	68e3      	ldr	r3, [r4, #12]
 800b3b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3b2:	1a5b      	subs	r3, r3, r1
 800b3b4:	4543      	cmp	r3, r8
 800b3b6:	dcf0      	bgt.n	800b39a <_printf_float+0x442>
 800b3b8:	e6fa      	b.n	800b1b0 <_printf_float+0x258>
 800b3ba:	f04f 0800 	mov.w	r8, #0
 800b3be:	f104 0919 	add.w	r9, r4, #25
 800b3c2:	e7f4      	b.n	800b3ae <_printf_float+0x456>

0800b3c4 <_printf_common>:
 800b3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3c8:	4616      	mov	r6, r2
 800b3ca:	4699      	mov	r9, r3
 800b3cc:	688a      	ldr	r2, [r1, #8]
 800b3ce:	690b      	ldr	r3, [r1, #16]
 800b3d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	bfb8      	it	lt
 800b3d8:	4613      	movlt	r3, r2
 800b3da:	6033      	str	r3, [r6, #0]
 800b3dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3e0:	4607      	mov	r7, r0
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	b10a      	cbz	r2, 800b3ea <_printf_common+0x26>
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	6033      	str	r3, [r6, #0]
 800b3ea:	6823      	ldr	r3, [r4, #0]
 800b3ec:	0699      	lsls	r1, r3, #26
 800b3ee:	bf42      	ittt	mi
 800b3f0:	6833      	ldrmi	r3, [r6, #0]
 800b3f2:	3302      	addmi	r3, #2
 800b3f4:	6033      	strmi	r3, [r6, #0]
 800b3f6:	6825      	ldr	r5, [r4, #0]
 800b3f8:	f015 0506 	ands.w	r5, r5, #6
 800b3fc:	d106      	bne.n	800b40c <_printf_common+0x48>
 800b3fe:	f104 0a19 	add.w	sl, r4, #25
 800b402:	68e3      	ldr	r3, [r4, #12]
 800b404:	6832      	ldr	r2, [r6, #0]
 800b406:	1a9b      	subs	r3, r3, r2
 800b408:	42ab      	cmp	r3, r5
 800b40a:	dc26      	bgt.n	800b45a <_printf_common+0x96>
 800b40c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b410:	1e13      	subs	r3, r2, #0
 800b412:	6822      	ldr	r2, [r4, #0]
 800b414:	bf18      	it	ne
 800b416:	2301      	movne	r3, #1
 800b418:	0692      	lsls	r2, r2, #26
 800b41a:	d42b      	bmi.n	800b474 <_printf_common+0xb0>
 800b41c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b420:	4649      	mov	r1, r9
 800b422:	4638      	mov	r0, r7
 800b424:	47c0      	blx	r8
 800b426:	3001      	adds	r0, #1
 800b428:	d01e      	beq.n	800b468 <_printf_common+0xa4>
 800b42a:	6823      	ldr	r3, [r4, #0]
 800b42c:	68e5      	ldr	r5, [r4, #12]
 800b42e:	6832      	ldr	r2, [r6, #0]
 800b430:	f003 0306 	and.w	r3, r3, #6
 800b434:	2b04      	cmp	r3, #4
 800b436:	bf08      	it	eq
 800b438:	1aad      	subeq	r5, r5, r2
 800b43a:	68a3      	ldr	r3, [r4, #8]
 800b43c:	6922      	ldr	r2, [r4, #16]
 800b43e:	bf0c      	ite	eq
 800b440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b444:	2500      	movne	r5, #0
 800b446:	4293      	cmp	r3, r2
 800b448:	bfc4      	itt	gt
 800b44a:	1a9b      	subgt	r3, r3, r2
 800b44c:	18ed      	addgt	r5, r5, r3
 800b44e:	2600      	movs	r6, #0
 800b450:	341a      	adds	r4, #26
 800b452:	42b5      	cmp	r5, r6
 800b454:	d11a      	bne.n	800b48c <_printf_common+0xc8>
 800b456:	2000      	movs	r0, #0
 800b458:	e008      	b.n	800b46c <_printf_common+0xa8>
 800b45a:	2301      	movs	r3, #1
 800b45c:	4652      	mov	r2, sl
 800b45e:	4649      	mov	r1, r9
 800b460:	4638      	mov	r0, r7
 800b462:	47c0      	blx	r8
 800b464:	3001      	adds	r0, #1
 800b466:	d103      	bne.n	800b470 <_printf_common+0xac>
 800b468:	f04f 30ff 	mov.w	r0, #4294967295
 800b46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b470:	3501      	adds	r5, #1
 800b472:	e7c6      	b.n	800b402 <_printf_common+0x3e>
 800b474:	18e1      	adds	r1, r4, r3
 800b476:	1c5a      	adds	r2, r3, #1
 800b478:	2030      	movs	r0, #48	; 0x30
 800b47a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b47e:	4422      	add	r2, r4
 800b480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b484:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b488:	3302      	adds	r3, #2
 800b48a:	e7c7      	b.n	800b41c <_printf_common+0x58>
 800b48c:	2301      	movs	r3, #1
 800b48e:	4622      	mov	r2, r4
 800b490:	4649      	mov	r1, r9
 800b492:	4638      	mov	r0, r7
 800b494:	47c0      	blx	r8
 800b496:	3001      	adds	r0, #1
 800b498:	d0e6      	beq.n	800b468 <_printf_common+0xa4>
 800b49a:	3601      	adds	r6, #1
 800b49c:	e7d9      	b.n	800b452 <_printf_common+0x8e>
	...

0800b4a0 <_printf_i>:
 800b4a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a4:	7e0f      	ldrb	r7, [r1, #24]
 800b4a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b4a8:	2f78      	cmp	r7, #120	; 0x78
 800b4aa:	4691      	mov	r9, r2
 800b4ac:	4680      	mov	r8, r0
 800b4ae:	460c      	mov	r4, r1
 800b4b0:	469a      	mov	sl, r3
 800b4b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4b6:	d807      	bhi.n	800b4c8 <_printf_i+0x28>
 800b4b8:	2f62      	cmp	r7, #98	; 0x62
 800b4ba:	d80a      	bhi.n	800b4d2 <_printf_i+0x32>
 800b4bc:	2f00      	cmp	r7, #0
 800b4be:	f000 80d8 	beq.w	800b672 <_printf_i+0x1d2>
 800b4c2:	2f58      	cmp	r7, #88	; 0x58
 800b4c4:	f000 80a3 	beq.w	800b60e <_printf_i+0x16e>
 800b4c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4d0:	e03a      	b.n	800b548 <_printf_i+0xa8>
 800b4d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4d6:	2b15      	cmp	r3, #21
 800b4d8:	d8f6      	bhi.n	800b4c8 <_printf_i+0x28>
 800b4da:	a101      	add	r1, pc, #4	; (adr r1, 800b4e0 <_printf_i+0x40>)
 800b4dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4e0:	0800b539 	.word	0x0800b539
 800b4e4:	0800b54d 	.word	0x0800b54d
 800b4e8:	0800b4c9 	.word	0x0800b4c9
 800b4ec:	0800b4c9 	.word	0x0800b4c9
 800b4f0:	0800b4c9 	.word	0x0800b4c9
 800b4f4:	0800b4c9 	.word	0x0800b4c9
 800b4f8:	0800b54d 	.word	0x0800b54d
 800b4fc:	0800b4c9 	.word	0x0800b4c9
 800b500:	0800b4c9 	.word	0x0800b4c9
 800b504:	0800b4c9 	.word	0x0800b4c9
 800b508:	0800b4c9 	.word	0x0800b4c9
 800b50c:	0800b659 	.word	0x0800b659
 800b510:	0800b57d 	.word	0x0800b57d
 800b514:	0800b63b 	.word	0x0800b63b
 800b518:	0800b4c9 	.word	0x0800b4c9
 800b51c:	0800b4c9 	.word	0x0800b4c9
 800b520:	0800b67b 	.word	0x0800b67b
 800b524:	0800b4c9 	.word	0x0800b4c9
 800b528:	0800b57d 	.word	0x0800b57d
 800b52c:	0800b4c9 	.word	0x0800b4c9
 800b530:	0800b4c9 	.word	0x0800b4c9
 800b534:	0800b643 	.word	0x0800b643
 800b538:	682b      	ldr	r3, [r5, #0]
 800b53a:	1d1a      	adds	r2, r3, #4
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	602a      	str	r2, [r5, #0]
 800b540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b548:	2301      	movs	r3, #1
 800b54a:	e0a3      	b.n	800b694 <_printf_i+0x1f4>
 800b54c:	6820      	ldr	r0, [r4, #0]
 800b54e:	6829      	ldr	r1, [r5, #0]
 800b550:	0606      	lsls	r6, r0, #24
 800b552:	f101 0304 	add.w	r3, r1, #4
 800b556:	d50a      	bpl.n	800b56e <_printf_i+0xce>
 800b558:	680e      	ldr	r6, [r1, #0]
 800b55a:	602b      	str	r3, [r5, #0]
 800b55c:	2e00      	cmp	r6, #0
 800b55e:	da03      	bge.n	800b568 <_printf_i+0xc8>
 800b560:	232d      	movs	r3, #45	; 0x2d
 800b562:	4276      	negs	r6, r6
 800b564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b568:	485e      	ldr	r0, [pc, #376]	; (800b6e4 <_printf_i+0x244>)
 800b56a:	230a      	movs	r3, #10
 800b56c:	e019      	b.n	800b5a2 <_printf_i+0x102>
 800b56e:	680e      	ldr	r6, [r1, #0]
 800b570:	602b      	str	r3, [r5, #0]
 800b572:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b576:	bf18      	it	ne
 800b578:	b236      	sxthne	r6, r6
 800b57a:	e7ef      	b.n	800b55c <_printf_i+0xbc>
 800b57c:	682b      	ldr	r3, [r5, #0]
 800b57e:	6820      	ldr	r0, [r4, #0]
 800b580:	1d19      	adds	r1, r3, #4
 800b582:	6029      	str	r1, [r5, #0]
 800b584:	0601      	lsls	r1, r0, #24
 800b586:	d501      	bpl.n	800b58c <_printf_i+0xec>
 800b588:	681e      	ldr	r6, [r3, #0]
 800b58a:	e002      	b.n	800b592 <_printf_i+0xf2>
 800b58c:	0646      	lsls	r6, r0, #25
 800b58e:	d5fb      	bpl.n	800b588 <_printf_i+0xe8>
 800b590:	881e      	ldrh	r6, [r3, #0]
 800b592:	4854      	ldr	r0, [pc, #336]	; (800b6e4 <_printf_i+0x244>)
 800b594:	2f6f      	cmp	r7, #111	; 0x6f
 800b596:	bf0c      	ite	eq
 800b598:	2308      	moveq	r3, #8
 800b59a:	230a      	movne	r3, #10
 800b59c:	2100      	movs	r1, #0
 800b59e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5a2:	6865      	ldr	r5, [r4, #4]
 800b5a4:	60a5      	str	r5, [r4, #8]
 800b5a6:	2d00      	cmp	r5, #0
 800b5a8:	bfa2      	ittt	ge
 800b5aa:	6821      	ldrge	r1, [r4, #0]
 800b5ac:	f021 0104 	bicge.w	r1, r1, #4
 800b5b0:	6021      	strge	r1, [r4, #0]
 800b5b2:	b90e      	cbnz	r6, 800b5b8 <_printf_i+0x118>
 800b5b4:	2d00      	cmp	r5, #0
 800b5b6:	d04d      	beq.n	800b654 <_printf_i+0x1b4>
 800b5b8:	4615      	mov	r5, r2
 800b5ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800b5be:	fb03 6711 	mls	r7, r3, r1, r6
 800b5c2:	5dc7      	ldrb	r7, [r0, r7]
 800b5c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b5c8:	4637      	mov	r7, r6
 800b5ca:	42bb      	cmp	r3, r7
 800b5cc:	460e      	mov	r6, r1
 800b5ce:	d9f4      	bls.n	800b5ba <_printf_i+0x11a>
 800b5d0:	2b08      	cmp	r3, #8
 800b5d2:	d10b      	bne.n	800b5ec <_printf_i+0x14c>
 800b5d4:	6823      	ldr	r3, [r4, #0]
 800b5d6:	07de      	lsls	r6, r3, #31
 800b5d8:	d508      	bpl.n	800b5ec <_printf_i+0x14c>
 800b5da:	6923      	ldr	r3, [r4, #16]
 800b5dc:	6861      	ldr	r1, [r4, #4]
 800b5de:	4299      	cmp	r1, r3
 800b5e0:	bfde      	ittt	le
 800b5e2:	2330      	movle	r3, #48	; 0x30
 800b5e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b5e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b5ec:	1b52      	subs	r2, r2, r5
 800b5ee:	6122      	str	r2, [r4, #16]
 800b5f0:	f8cd a000 	str.w	sl, [sp]
 800b5f4:	464b      	mov	r3, r9
 800b5f6:	aa03      	add	r2, sp, #12
 800b5f8:	4621      	mov	r1, r4
 800b5fa:	4640      	mov	r0, r8
 800b5fc:	f7ff fee2 	bl	800b3c4 <_printf_common>
 800b600:	3001      	adds	r0, #1
 800b602:	d14c      	bne.n	800b69e <_printf_i+0x1fe>
 800b604:	f04f 30ff 	mov.w	r0, #4294967295
 800b608:	b004      	add	sp, #16
 800b60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b60e:	4835      	ldr	r0, [pc, #212]	; (800b6e4 <_printf_i+0x244>)
 800b610:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b614:	6829      	ldr	r1, [r5, #0]
 800b616:	6823      	ldr	r3, [r4, #0]
 800b618:	f851 6b04 	ldr.w	r6, [r1], #4
 800b61c:	6029      	str	r1, [r5, #0]
 800b61e:	061d      	lsls	r5, r3, #24
 800b620:	d514      	bpl.n	800b64c <_printf_i+0x1ac>
 800b622:	07df      	lsls	r7, r3, #31
 800b624:	bf44      	itt	mi
 800b626:	f043 0320 	orrmi.w	r3, r3, #32
 800b62a:	6023      	strmi	r3, [r4, #0]
 800b62c:	b91e      	cbnz	r6, 800b636 <_printf_i+0x196>
 800b62e:	6823      	ldr	r3, [r4, #0]
 800b630:	f023 0320 	bic.w	r3, r3, #32
 800b634:	6023      	str	r3, [r4, #0]
 800b636:	2310      	movs	r3, #16
 800b638:	e7b0      	b.n	800b59c <_printf_i+0xfc>
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	f043 0320 	orr.w	r3, r3, #32
 800b640:	6023      	str	r3, [r4, #0]
 800b642:	2378      	movs	r3, #120	; 0x78
 800b644:	4828      	ldr	r0, [pc, #160]	; (800b6e8 <_printf_i+0x248>)
 800b646:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b64a:	e7e3      	b.n	800b614 <_printf_i+0x174>
 800b64c:	0659      	lsls	r1, r3, #25
 800b64e:	bf48      	it	mi
 800b650:	b2b6      	uxthmi	r6, r6
 800b652:	e7e6      	b.n	800b622 <_printf_i+0x182>
 800b654:	4615      	mov	r5, r2
 800b656:	e7bb      	b.n	800b5d0 <_printf_i+0x130>
 800b658:	682b      	ldr	r3, [r5, #0]
 800b65a:	6826      	ldr	r6, [r4, #0]
 800b65c:	6961      	ldr	r1, [r4, #20]
 800b65e:	1d18      	adds	r0, r3, #4
 800b660:	6028      	str	r0, [r5, #0]
 800b662:	0635      	lsls	r5, r6, #24
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	d501      	bpl.n	800b66c <_printf_i+0x1cc>
 800b668:	6019      	str	r1, [r3, #0]
 800b66a:	e002      	b.n	800b672 <_printf_i+0x1d2>
 800b66c:	0670      	lsls	r0, r6, #25
 800b66e:	d5fb      	bpl.n	800b668 <_printf_i+0x1c8>
 800b670:	8019      	strh	r1, [r3, #0]
 800b672:	2300      	movs	r3, #0
 800b674:	6123      	str	r3, [r4, #16]
 800b676:	4615      	mov	r5, r2
 800b678:	e7ba      	b.n	800b5f0 <_printf_i+0x150>
 800b67a:	682b      	ldr	r3, [r5, #0]
 800b67c:	1d1a      	adds	r2, r3, #4
 800b67e:	602a      	str	r2, [r5, #0]
 800b680:	681d      	ldr	r5, [r3, #0]
 800b682:	6862      	ldr	r2, [r4, #4]
 800b684:	2100      	movs	r1, #0
 800b686:	4628      	mov	r0, r5
 800b688:	f7f4 fdca 	bl	8000220 <memchr>
 800b68c:	b108      	cbz	r0, 800b692 <_printf_i+0x1f2>
 800b68e:	1b40      	subs	r0, r0, r5
 800b690:	6060      	str	r0, [r4, #4]
 800b692:	6863      	ldr	r3, [r4, #4]
 800b694:	6123      	str	r3, [r4, #16]
 800b696:	2300      	movs	r3, #0
 800b698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b69c:	e7a8      	b.n	800b5f0 <_printf_i+0x150>
 800b69e:	6923      	ldr	r3, [r4, #16]
 800b6a0:	462a      	mov	r2, r5
 800b6a2:	4649      	mov	r1, r9
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	47d0      	blx	sl
 800b6a8:	3001      	adds	r0, #1
 800b6aa:	d0ab      	beq.n	800b604 <_printf_i+0x164>
 800b6ac:	6823      	ldr	r3, [r4, #0]
 800b6ae:	079b      	lsls	r3, r3, #30
 800b6b0:	d413      	bmi.n	800b6da <_printf_i+0x23a>
 800b6b2:	68e0      	ldr	r0, [r4, #12]
 800b6b4:	9b03      	ldr	r3, [sp, #12]
 800b6b6:	4298      	cmp	r0, r3
 800b6b8:	bfb8      	it	lt
 800b6ba:	4618      	movlt	r0, r3
 800b6bc:	e7a4      	b.n	800b608 <_printf_i+0x168>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	4632      	mov	r2, r6
 800b6c2:	4649      	mov	r1, r9
 800b6c4:	4640      	mov	r0, r8
 800b6c6:	47d0      	blx	sl
 800b6c8:	3001      	adds	r0, #1
 800b6ca:	d09b      	beq.n	800b604 <_printf_i+0x164>
 800b6cc:	3501      	adds	r5, #1
 800b6ce:	68e3      	ldr	r3, [r4, #12]
 800b6d0:	9903      	ldr	r1, [sp, #12]
 800b6d2:	1a5b      	subs	r3, r3, r1
 800b6d4:	42ab      	cmp	r3, r5
 800b6d6:	dcf2      	bgt.n	800b6be <_printf_i+0x21e>
 800b6d8:	e7eb      	b.n	800b6b2 <_printf_i+0x212>
 800b6da:	2500      	movs	r5, #0
 800b6dc:	f104 0619 	add.w	r6, r4, #25
 800b6e0:	e7f5      	b.n	800b6ce <_printf_i+0x22e>
 800b6e2:	bf00      	nop
 800b6e4:	0800da26 	.word	0x0800da26
 800b6e8:	0800da37 	.word	0x0800da37

0800b6ec <iprintf>:
 800b6ec:	b40f      	push	{r0, r1, r2, r3}
 800b6ee:	4b0a      	ldr	r3, [pc, #40]	; (800b718 <iprintf+0x2c>)
 800b6f0:	b513      	push	{r0, r1, r4, lr}
 800b6f2:	681c      	ldr	r4, [r3, #0]
 800b6f4:	b124      	cbz	r4, 800b700 <iprintf+0x14>
 800b6f6:	69a3      	ldr	r3, [r4, #24]
 800b6f8:	b913      	cbnz	r3, 800b700 <iprintf+0x14>
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f7ff f9c8 	bl	800aa90 <__sinit>
 800b700:	ab05      	add	r3, sp, #20
 800b702:	9a04      	ldr	r2, [sp, #16]
 800b704:	68a1      	ldr	r1, [r4, #8]
 800b706:	9301      	str	r3, [sp, #4]
 800b708:	4620      	mov	r0, r4
 800b70a:	f001 fda5 	bl	800d258 <_vfiprintf_r>
 800b70e:	b002      	add	sp, #8
 800b710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b714:	b004      	add	sp, #16
 800b716:	4770      	bx	lr
 800b718:	20000010 	.word	0x20000010

0800b71c <_puts_r>:
 800b71c:	b570      	push	{r4, r5, r6, lr}
 800b71e:	460e      	mov	r6, r1
 800b720:	4605      	mov	r5, r0
 800b722:	b118      	cbz	r0, 800b72c <_puts_r+0x10>
 800b724:	6983      	ldr	r3, [r0, #24]
 800b726:	b90b      	cbnz	r3, 800b72c <_puts_r+0x10>
 800b728:	f7ff f9b2 	bl	800aa90 <__sinit>
 800b72c:	69ab      	ldr	r3, [r5, #24]
 800b72e:	68ac      	ldr	r4, [r5, #8]
 800b730:	b913      	cbnz	r3, 800b738 <_puts_r+0x1c>
 800b732:	4628      	mov	r0, r5
 800b734:	f7ff f9ac 	bl	800aa90 <__sinit>
 800b738:	4b2c      	ldr	r3, [pc, #176]	; (800b7ec <_puts_r+0xd0>)
 800b73a:	429c      	cmp	r4, r3
 800b73c:	d120      	bne.n	800b780 <_puts_r+0x64>
 800b73e:	686c      	ldr	r4, [r5, #4]
 800b740:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b742:	07db      	lsls	r3, r3, #31
 800b744:	d405      	bmi.n	800b752 <_puts_r+0x36>
 800b746:	89a3      	ldrh	r3, [r4, #12]
 800b748:	0598      	lsls	r0, r3, #22
 800b74a:	d402      	bmi.n	800b752 <_puts_r+0x36>
 800b74c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b74e:	f7ff fa62 	bl	800ac16 <__retarget_lock_acquire_recursive>
 800b752:	89a3      	ldrh	r3, [r4, #12]
 800b754:	0719      	lsls	r1, r3, #28
 800b756:	d51d      	bpl.n	800b794 <_puts_r+0x78>
 800b758:	6923      	ldr	r3, [r4, #16]
 800b75a:	b1db      	cbz	r3, 800b794 <_puts_r+0x78>
 800b75c:	3e01      	subs	r6, #1
 800b75e:	68a3      	ldr	r3, [r4, #8]
 800b760:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b764:	3b01      	subs	r3, #1
 800b766:	60a3      	str	r3, [r4, #8]
 800b768:	bb39      	cbnz	r1, 800b7ba <_puts_r+0x9e>
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	da38      	bge.n	800b7e0 <_puts_r+0xc4>
 800b76e:	4622      	mov	r2, r4
 800b770:	210a      	movs	r1, #10
 800b772:	4628      	mov	r0, r5
 800b774:	f000 f906 	bl	800b984 <__swbuf_r>
 800b778:	3001      	adds	r0, #1
 800b77a:	d011      	beq.n	800b7a0 <_puts_r+0x84>
 800b77c:	250a      	movs	r5, #10
 800b77e:	e011      	b.n	800b7a4 <_puts_r+0x88>
 800b780:	4b1b      	ldr	r3, [pc, #108]	; (800b7f0 <_puts_r+0xd4>)
 800b782:	429c      	cmp	r4, r3
 800b784:	d101      	bne.n	800b78a <_puts_r+0x6e>
 800b786:	68ac      	ldr	r4, [r5, #8]
 800b788:	e7da      	b.n	800b740 <_puts_r+0x24>
 800b78a:	4b1a      	ldr	r3, [pc, #104]	; (800b7f4 <_puts_r+0xd8>)
 800b78c:	429c      	cmp	r4, r3
 800b78e:	bf08      	it	eq
 800b790:	68ec      	ldreq	r4, [r5, #12]
 800b792:	e7d5      	b.n	800b740 <_puts_r+0x24>
 800b794:	4621      	mov	r1, r4
 800b796:	4628      	mov	r0, r5
 800b798:	f000 f958 	bl	800ba4c <__swsetup_r>
 800b79c:	2800      	cmp	r0, #0
 800b79e:	d0dd      	beq.n	800b75c <_puts_r+0x40>
 800b7a0:	f04f 35ff 	mov.w	r5, #4294967295
 800b7a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7a6:	07da      	lsls	r2, r3, #31
 800b7a8:	d405      	bmi.n	800b7b6 <_puts_r+0x9a>
 800b7aa:	89a3      	ldrh	r3, [r4, #12]
 800b7ac:	059b      	lsls	r3, r3, #22
 800b7ae:	d402      	bmi.n	800b7b6 <_puts_r+0x9a>
 800b7b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7b2:	f7ff fa31 	bl	800ac18 <__retarget_lock_release_recursive>
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	bd70      	pop	{r4, r5, r6, pc}
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	da04      	bge.n	800b7c8 <_puts_r+0xac>
 800b7be:	69a2      	ldr	r2, [r4, #24]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	dc06      	bgt.n	800b7d2 <_puts_r+0xb6>
 800b7c4:	290a      	cmp	r1, #10
 800b7c6:	d004      	beq.n	800b7d2 <_puts_r+0xb6>
 800b7c8:	6823      	ldr	r3, [r4, #0]
 800b7ca:	1c5a      	adds	r2, r3, #1
 800b7cc:	6022      	str	r2, [r4, #0]
 800b7ce:	7019      	strb	r1, [r3, #0]
 800b7d0:	e7c5      	b.n	800b75e <_puts_r+0x42>
 800b7d2:	4622      	mov	r2, r4
 800b7d4:	4628      	mov	r0, r5
 800b7d6:	f000 f8d5 	bl	800b984 <__swbuf_r>
 800b7da:	3001      	adds	r0, #1
 800b7dc:	d1bf      	bne.n	800b75e <_puts_r+0x42>
 800b7de:	e7df      	b.n	800b7a0 <_puts_r+0x84>
 800b7e0:	6823      	ldr	r3, [r4, #0]
 800b7e2:	250a      	movs	r5, #10
 800b7e4:	1c5a      	adds	r2, r3, #1
 800b7e6:	6022      	str	r2, [r4, #0]
 800b7e8:	701d      	strb	r5, [r3, #0]
 800b7ea:	e7db      	b.n	800b7a4 <_puts_r+0x88>
 800b7ec:	0800d9d0 	.word	0x0800d9d0
 800b7f0:	0800d9f0 	.word	0x0800d9f0
 800b7f4:	0800d9b0 	.word	0x0800d9b0

0800b7f8 <puts>:
 800b7f8:	4b02      	ldr	r3, [pc, #8]	; (800b804 <puts+0xc>)
 800b7fa:	4601      	mov	r1, r0
 800b7fc:	6818      	ldr	r0, [r3, #0]
 800b7fe:	f7ff bf8d 	b.w	800b71c <_puts_r>
 800b802:	bf00      	nop
 800b804:	20000010 	.word	0x20000010

0800b808 <cleanup_glue>:
 800b808:	b538      	push	{r3, r4, r5, lr}
 800b80a:	460c      	mov	r4, r1
 800b80c:	6809      	ldr	r1, [r1, #0]
 800b80e:	4605      	mov	r5, r0
 800b810:	b109      	cbz	r1, 800b816 <cleanup_glue+0xe>
 800b812:	f7ff fff9 	bl	800b808 <cleanup_glue>
 800b816:	4621      	mov	r1, r4
 800b818:	4628      	mov	r0, r5
 800b81a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b81e:	f7ff ba1b 	b.w	800ac58 <_free_r>
	...

0800b824 <_reclaim_reent>:
 800b824:	4b2c      	ldr	r3, [pc, #176]	; (800b8d8 <_reclaim_reent+0xb4>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4283      	cmp	r3, r0
 800b82a:	b570      	push	{r4, r5, r6, lr}
 800b82c:	4604      	mov	r4, r0
 800b82e:	d051      	beq.n	800b8d4 <_reclaim_reent+0xb0>
 800b830:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b832:	b143      	cbz	r3, 800b846 <_reclaim_reent+0x22>
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d14a      	bne.n	800b8d0 <_reclaim_reent+0xac>
 800b83a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b83c:	6819      	ldr	r1, [r3, #0]
 800b83e:	b111      	cbz	r1, 800b846 <_reclaim_reent+0x22>
 800b840:	4620      	mov	r0, r4
 800b842:	f7ff fa09 	bl	800ac58 <_free_r>
 800b846:	6961      	ldr	r1, [r4, #20]
 800b848:	b111      	cbz	r1, 800b850 <_reclaim_reent+0x2c>
 800b84a:	4620      	mov	r0, r4
 800b84c:	f7ff fa04 	bl	800ac58 <_free_r>
 800b850:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b852:	b111      	cbz	r1, 800b85a <_reclaim_reent+0x36>
 800b854:	4620      	mov	r0, r4
 800b856:	f7ff f9ff 	bl	800ac58 <_free_r>
 800b85a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b85c:	b111      	cbz	r1, 800b864 <_reclaim_reent+0x40>
 800b85e:	4620      	mov	r0, r4
 800b860:	f7ff f9fa 	bl	800ac58 <_free_r>
 800b864:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b866:	b111      	cbz	r1, 800b86e <_reclaim_reent+0x4a>
 800b868:	4620      	mov	r0, r4
 800b86a:	f7ff f9f5 	bl	800ac58 <_free_r>
 800b86e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b870:	b111      	cbz	r1, 800b878 <_reclaim_reent+0x54>
 800b872:	4620      	mov	r0, r4
 800b874:	f7ff f9f0 	bl	800ac58 <_free_r>
 800b878:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b87a:	b111      	cbz	r1, 800b882 <_reclaim_reent+0x5e>
 800b87c:	4620      	mov	r0, r4
 800b87e:	f7ff f9eb 	bl	800ac58 <_free_r>
 800b882:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b884:	b111      	cbz	r1, 800b88c <_reclaim_reent+0x68>
 800b886:	4620      	mov	r0, r4
 800b888:	f7ff f9e6 	bl	800ac58 <_free_r>
 800b88c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b88e:	b111      	cbz	r1, 800b896 <_reclaim_reent+0x72>
 800b890:	4620      	mov	r0, r4
 800b892:	f7ff f9e1 	bl	800ac58 <_free_r>
 800b896:	69a3      	ldr	r3, [r4, #24]
 800b898:	b1e3      	cbz	r3, 800b8d4 <_reclaim_reent+0xb0>
 800b89a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b89c:	4620      	mov	r0, r4
 800b89e:	4798      	blx	r3
 800b8a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b8a2:	b1b9      	cbz	r1, 800b8d4 <_reclaim_reent+0xb0>
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b8aa:	f7ff bfad 	b.w	800b808 <cleanup_glue>
 800b8ae:	5949      	ldr	r1, [r1, r5]
 800b8b0:	b941      	cbnz	r1, 800b8c4 <_reclaim_reent+0xa0>
 800b8b2:	3504      	adds	r5, #4
 800b8b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8b6:	2d80      	cmp	r5, #128	; 0x80
 800b8b8:	68d9      	ldr	r1, [r3, #12]
 800b8ba:	d1f8      	bne.n	800b8ae <_reclaim_reent+0x8a>
 800b8bc:	4620      	mov	r0, r4
 800b8be:	f7ff f9cb 	bl	800ac58 <_free_r>
 800b8c2:	e7ba      	b.n	800b83a <_reclaim_reent+0x16>
 800b8c4:	680e      	ldr	r6, [r1, #0]
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f7ff f9c6 	bl	800ac58 <_free_r>
 800b8cc:	4631      	mov	r1, r6
 800b8ce:	e7ef      	b.n	800b8b0 <_reclaim_reent+0x8c>
 800b8d0:	2500      	movs	r5, #0
 800b8d2:	e7ef      	b.n	800b8b4 <_reclaim_reent+0x90>
 800b8d4:	bd70      	pop	{r4, r5, r6, pc}
 800b8d6:	bf00      	nop
 800b8d8:	20000010 	.word	0x20000010

0800b8dc <_sbrk_r>:
 800b8dc:	b538      	push	{r3, r4, r5, lr}
 800b8de:	4d06      	ldr	r5, [pc, #24]	; (800b8f8 <_sbrk_r+0x1c>)
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	4608      	mov	r0, r1
 800b8e6:	602b      	str	r3, [r5, #0]
 800b8e8:	f7f5 fea2 	bl	8001630 <_sbrk>
 800b8ec:	1c43      	adds	r3, r0, #1
 800b8ee:	d102      	bne.n	800b8f6 <_sbrk_r+0x1a>
 800b8f0:	682b      	ldr	r3, [r5, #0]
 800b8f2:	b103      	cbz	r3, 800b8f6 <_sbrk_r+0x1a>
 800b8f4:	6023      	str	r3, [r4, #0]
 800b8f6:	bd38      	pop	{r3, r4, r5, pc}
 800b8f8:	200050a4 	.word	0x200050a4

0800b8fc <__sread>:
 800b8fc:	b510      	push	{r4, lr}
 800b8fe:	460c      	mov	r4, r1
 800b900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b904:	f001 fdd8 	bl	800d4b8 <_read_r>
 800b908:	2800      	cmp	r0, #0
 800b90a:	bfab      	itete	ge
 800b90c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b90e:	89a3      	ldrhlt	r3, [r4, #12]
 800b910:	181b      	addge	r3, r3, r0
 800b912:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b916:	bfac      	ite	ge
 800b918:	6563      	strge	r3, [r4, #84]	; 0x54
 800b91a:	81a3      	strhlt	r3, [r4, #12]
 800b91c:	bd10      	pop	{r4, pc}

0800b91e <__swrite>:
 800b91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b922:	461f      	mov	r7, r3
 800b924:	898b      	ldrh	r3, [r1, #12]
 800b926:	05db      	lsls	r3, r3, #23
 800b928:	4605      	mov	r5, r0
 800b92a:	460c      	mov	r4, r1
 800b92c:	4616      	mov	r6, r2
 800b92e:	d505      	bpl.n	800b93c <__swrite+0x1e>
 800b930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b934:	2302      	movs	r3, #2
 800b936:	2200      	movs	r2, #0
 800b938:	f001 f846 	bl	800c9c8 <_lseek_r>
 800b93c:	89a3      	ldrh	r3, [r4, #12]
 800b93e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b942:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b946:	81a3      	strh	r3, [r4, #12]
 800b948:	4632      	mov	r2, r6
 800b94a:	463b      	mov	r3, r7
 800b94c:	4628      	mov	r0, r5
 800b94e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b952:	f000 b869 	b.w	800ba28 <_write_r>

0800b956 <__sseek>:
 800b956:	b510      	push	{r4, lr}
 800b958:	460c      	mov	r4, r1
 800b95a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b95e:	f001 f833 	bl	800c9c8 <_lseek_r>
 800b962:	1c43      	adds	r3, r0, #1
 800b964:	89a3      	ldrh	r3, [r4, #12]
 800b966:	bf15      	itete	ne
 800b968:	6560      	strne	r0, [r4, #84]	; 0x54
 800b96a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b96e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b972:	81a3      	strheq	r3, [r4, #12]
 800b974:	bf18      	it	ne
 800b976:	81a3      	strhne	r3, [r4, #12]
 800b978:	bd10      	pop	{r4, pc}

0800b97a <__sclose>:
 800b97a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b97e:	f000 b8d3 	b.w	800bb28 <_close_r>
	...

0800b984 <__swbuf_r>:
 800b984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b986:	460e      	mov	r6, r1
 800b988:	4614      	mov	r4, r2
 800b98a:	4605      	mov	r5, r0
 800b98c:	b118      	cbz	r0, 800b996 <__swbuf_r+0x12>
 800b98e:	6983      	ldr	r3, [r0, #24]
 800b990:	b90b      	cbnz	r3, 800b996 <__swbuf_r+0x12>
 800b992:	f7ff f87d 	bl	800aa90 <__sinit>
 800b996:	4b21      	ldr	r3, [pc, #132]	; (800ba1c <__swbuf_r+0x98>)
 800b998:	429c      	cmp	r4, r3
 800b99a:	d12b      	bne.n	800b9f4 <__swbuf_r+0x70>
 800b99c:	686c      	ldr	r4, [r5, #4]
 800b99e:	69a3      	ldr	r3, [r4, #24]
 800b9a0:	60a3      	str	r3, [r4, #8]
 800b9a2:	89a3      	ldrh	r3, [r4, #12]
 800b9a4:	071a      	lsls	r2, r3, #28
 800b9a6:	d52f      	bpl.n	800ba08 <__swbuf_r+0x84>
 800b9a8:	6923      	ldr	r3, [r4, #16]
 800b9aa:	b36b      	cbz	r3, 800ba08 <__swbuf_r+0x84>
 800b9ac:	6923      	ldr	r3, [r4, #16]
 800b9ae:	6820      	ldr	r0, [r4, #0]
 800b9b0:	1ac0      	subs	r0, r0, r3
 800b9b2:	6963      	ldr	r3, [r4, #20]
 800b9b4:	b2f6      	uxtb	r6, r6
 800b9b6:	4283      	cmp	r3, r0
 800b9b8:	4637      	mov	r7, r6
 800b9ba:	dc04      	bgt.n	800b9c6 <__swbuf_r+0x42>
 800b9bc:	4621      	mov	r1, r4
 800b9be:	4628      	mov	r0, r5
 800b9c0:	f000 ffc2 	bl	800c948 <_fflush_r>
 800b9c4:	bb30      	cbnz	r0, 800ba14 <__swbuf_r+0x90>
 800b9c6:	68a3      	ldr	r3, [r4, #8]
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	60a3      	str	r3, [r4, #8]
 800b9cc:	6823      	ldr	r3, [r4, #0]
 800b9ce:	1c5a      	adds	r2, r3, #1
 800b9d0:	6022      	str	r2, [r4, #0]
 800b9d2:	701e      	strb	r6, [r3, #0]
 800b9d4:	6963      	ldr	r3, [r4, #20]
 800b9d6:	3001      	adds	r0, #1
 800b9d8:	4283      	cmp	r3, r0
 800b9da:	d004      	beq.n	800b9e6 <__swbuf_r+0x62>
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	07db      	lsls	r3, r3, #31
 800b9e0:	d506      	bpl.n	800b9f0 <__swbuf_r+0x6c>
 800b9e2:	2e0a      	cmp	r6, #10
 800b9e4:	d104      	bne.n	800b9f0 <__swbuf_r+0x6c>
 800b9e6:	4621      	mov	r1, r4
 800b9e8:	4628      	mov	r0, r5
 800b9ea:	f000 ffad 	bl	800c948 <_fflush_r>
 800b9ee:	b988      	cbnz	r0, 800ba14 <__swbuf_r+0x90>
 800b9f0:	4638      	mov	r0, r7
 800b9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9f4:	4b0a      	ldr	r3, [pc, #40]	; (800ba20 <__swbuf_r+0x9c>)
 800b9f6:	429c      	cmp	r4, r3
 800b9f8:	d101      	bne.n	800b9fe <__swbuf_r+0x7a>
 800b9fa:	68ac      	ldr	r4, [r5, #8]
 800b9fc:	e7cf      	b.n	800b99e <__swbuf_r+0x1a>
 800b9fe:	4b09      	ldr	r3, [pc, #36]	; (800ba24 <__swbuf_r+0xa0>)
 800ba00:	429c      	cmp	r4, r3
 800ba02:	bf08      	it	eq
 800ba04:	68ec      	ldreq	r4, [r5, #12]
 800ba06:	e7ca      	b.n	800b99e <__swbuf_r+0x1a>
 800ba08:	4621      	mov	r1, r4
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	f000 f81e 	bl	800ba4c <__swsetup_r>
 800ba10:	2800      	cmp	r0, #0
 800ba12:	d0cb      	beq.n	800b9ac <__swbuf_r+0x28>
 800ba14:	f04f 37ff 	mov.w	r7, #4294967295
 800ba18:	e7ea      	b.n	800b9f0 <__swbuf_r+0x6c>
 800ba1a:	bf00      	nop
 800ba1c:	0800d9d0 	.word	0x0800d9d0
 800ba20:	0800d9f0 	.word	0x0800d9f0
 800ba24:	0800d9b0 	.word	0x0800d9b0

0800ba28 <_write_r>:
 800ba28:	b538      	push	{r3, r4, r5, lr}
 800ba2a:	4d07      	ldr	r5, [pc, #28]	; (800ba48 <_write_r+0x20>)
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	4608      	mov	r0, r1
 800ba30:	4611      	mov	r1, r2
 800ba32:	2200      	movs	r2, #0
 800ba34:	602a      	str	r2, [r5, #0]
 800ba36:	461a      	mov	r2, r3
 800ba38:	f7f5 fda9 	bl	800158e <_write>
 800ba3c:	1c43      	adds	r3, r0, #1
 800ba3e:	d102      	bne.n	800ba46 <_write_r+0x1e>
 800ba40:	682b      	ldr	r3, [r5, #0]
 800ba42:	b103      	cbz	r3, 800ba46 <_write_r+0x1e>
 800ba44:	6023      	str	r3, [r4, #0]
 800ba46:	bd38      	pop	{r3, r4, r5, pc}
 800ba48:	200050a4 	.word	0x200050a4

0800ba4c <__swsetup_r>:
 800ba4c:	4b32      	ldr	r3, [pc, #200]	; (800bb18 <__swsetup_r+0xcc>)
 800ba4e:	b570      	push	{r4, r5, r6, lr}
 800ba50:	681d      	ldr	r5, [r3, #0]
 800ba52:	4606      	mov	r6, r0
 800ba54:	460c      	mov	r4, r1
 800ba56:	b125      	cbz	r5, 800ba62 <__swsetup_r+0x16>
 800ba58:	69ab      	ldr	r3, [r5, #24]
 800ba5a:	b913      	cbnz	r3, 800ba62 <__swsetup_r+0x16>
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	f7ff f817 	bl	800aa90 <__sinit>
 800ba62:	4b2e      	ldr	r3, [pc, #184]	; (800bb1c <__swsetup_r+0xd0>)
 800ba64:	429c      	cmp	r4, r3
 800ba66:	d10f      	bne.n	800ba88 <__swsetup_r+0x3c>
 800ba68:	686c      	ldr	r4, [r5, #4]
 800ba6a:	89a3      	ldrh	r3, [r4, #12]
 800ba6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba70:	0719      	lsls	r1, r3, #28
 800ba72:	d42c      	bmi.n	800bace <__swsetup_r+0x82>
 800ba74:	06dd      	lsls	r5, r3, #27
 800ba76:	d411      	bmi.n	800ba9c <__swsetup_r+0x50>
 800ba78:	2309      	movs	r3, #9
 800ba7a:	6033      	str	r3, [r6, #0]
 800ba7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba80:	81a3      	strh	r3, [r4, #12]
 800ba82:	f04f 30ff 	mov.w	r0, #4294967295
 800ba86:	e03e      	b.n	800bb06 <__swsetup_r+0xba>
 800ba88:	4b25      	ldr	r3, [pc, #148]	; (800bb20 <__swsetup_r+0xd4>)
 800ba8a:	429c      	cmp	r4, r3
 800ba8c:	d101      	bne.n	800ba92 <__swsetup_r+0x46>
 800ba8e:	68ac      	ldr	r4, [r5, #8]
 800ba90:	e7eb      	b.n	800ba6a <__swsetup_r+0x1e>
 800ba92:	4b24      	ldr	r3, [pc, #144]	; (800bb24 <__swsetup_r+0xd8>)
 800ba94:	429c      	cmp	r4, r3
 800ba96:	bf08      	it	eq
 800ba98:	68ec      	ldreq	r4, [r5, #12]
 800ba9a:	e7e6      	b.n	800ba6a <__swsetup_r+0x1e>
 800ba9c:	0758      	lsls	r0, r3, #29
 800ba9e:	d512      	bpl.n	800bac6 <__swsetup_r+0x7a>
 800baa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800baa2:	b141      	cbz	r1, 800bab6 <__swsetup_r+0x6a>
 800baa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800baa8:	4299      	cmp	r1, r3
 800baaa:	d002      	beq.n	800bab2 <__swsetup_r+0x66>
 800baac:	4630      	mov	r0, r6
 800baae:	f7ff f8d3 	bl	800ac58 <_free_r>
 800bab2:	2300      	movs	r3, #0
 800bab4:	6363      	str	r3, [r4, #52]	; 0x34
 800bab6:	89a3      	ldrh	r3, [r4, #12]
 800bab8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800babc:	81a3      	strh	r3, [r4, #12]
 800babe:	2300      	movs	r3, #0
 800bac0:	6063      	str	r3, [r4, #4]
 800bac2:	6923      	ldr	r3, [r4, #16]
 800bac4:	6023      	str	r3, [r4, #0]
 800bac6:	89a3      	ldrh	r3, [r4, #12]
 800bac8:	f043 0308 	orr.w	r3, r3, #8
 800bacc:	81a3      	strh	r3, [r4, #12]
 800bace:	6923      	ldr	r3, [r4, #16]
 800bad0:	b94b      	cbnz	r3, 800bae6 <__swsetup_r+0x9a>
 800bad2:	89a3      	ldrh	r3, [r4, #12]
 800bad4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800badc:	d003      	beq.n	800bae6 <__swsetup_r+0x9a>
 800bade:	4621      	mov	r1, r4
 800bae0:	4630      	mov	r0, r6
 800bae2:	f000 ffa9 	bl	800ca38 <__smakebuf_r>
 800bae6:	89a0      	ldrh	r0, [r4, #12]
 800bae8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800baec:	f010 0301 	ands.w	r3, r0, #1
 800baf0:	d00a      	beq.n	800bb08 <__swsetup_r+0xbc>
 800baf2:	2300      	movs	r3, #0
 800baf4:	60a3      	str	r3, [r4, #8]
 800baf6:	6963      	ldr	r3, [r4, #20]
 800baf8:	425b      	negs	r3, r3
 800bafa:	61a3      	str	r3, [r4, #24]
 800bafc:	6923      	ldr	r3, [r4, #16]
 800bafe:	b943      	cbnz	r3, 800bb12 <__swsetup_r+0xc6>
 800bb00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb04:	d1ba      	bne.n	800ba7c <__swsetup_r+0x30>
 800bb06:	bd70      	pop	{r4, r5, r6, pc}
 800bb08:	0781      	lsls	r1, r0, #30
 800bb0a:	bf58      	it	pl
 800bb0c:	6963      	ldrpl	r3, [r4, #20]
 800bb0e:	60a3      	str	r3, [r4, #8]
 800bb10:	e7f4      	b.n	800bafc <__swsetup_r+0xb0>
 800bb12:	2000      	movs	r0, #0
 800bb14:	e7f7      	b.n	800bb06 <__swsetup_r+0xba>
 800bb16:	bf00      	nop
 800bb18:	20000010 	.word	0x20000010
 800bb1c:	0800d9d0 	.word	0x0800d9d0
 800bb20:	0800d9f0 	.word	0x0800d9f0
 800bb24:	0800d9b0 	.word	0x0800d9b0

0800bb28 <_close_r>:
 800bb28:	b538      	push	{r3, r4, r5, lr}
 800bb2a:	4d06      	ldr	r5, [pc, #24]	; (800bb44 <_close_r+0x1c>)
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	4604      	mov	r4, r0
 800bb30:	4608      	mov	r0, r1
 800bb32:	602b      	str	r3, [r5, #0]
 800bb34:	f7f5 fd47 	bl	80015c6 <_close>
 800bb38:	1c43      	adds	r3, r0, #1
 800bb3a:	d102      	bne.n	800bb42 <_close_r+0x1a>
 800bb3c:	682b      	ldr	r3, [r5, #0]
 800bb3e:	b103      	cbz	r3, 800bb42 <_close_r+0x1a>
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	bd38      	pop	{r3, r4, r5, pc}
 800bb44:	200050a4 	.word	0x200050a4

0800bb48 <quorem>:
 800bb48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb4c:	6903      	ldr	r3, [r0, #16]
 800bb4e:	690c      	ldr	r4, [r1, #16]
 800bb50:	42a3      	cmp	r3, r4
 800bb52:	4607      	mov	r7, r0
 800bb54:	f2c0 8081 	blt.w	800bc5a <quorem+0x112>
 800bb58:	3c01      	subs	r4, #1
 800bb5a:	f101 0814 	add.w	r8, r1, #20
 800bb5e:	f100 0514 	add.w	r5, r0, #20
 800bb62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb66:	9301      	str	r3, [sp, #4]
 800bb68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb70:	3301      	adds	r3, #1
 800bb72:	429a      	cmp	r2, r3
 800bb74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bb78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb7c:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb80:	d331      	bcc.n	800bbe6 <quorem+0x9e>
 800bb82:	f04f 0e00 	mov.w	lr, #0
 800bb86:	4640      	mov	r0, r8
 800bb88:	46ac      	mov	ip, r5
 800bb8a:	46f2      	mov	sl, lr
 800bb8c:	f850 2b04 	ldr.w	r2, [r0], #4
 800bb90:	b293      	uxth	r3, r2
 800bb92:	fb06 e303 	mla	r3, r6, r3, lr
 800bb96:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	ebaa 0303 	sub.w	r3, sl, r3
 800bba0:	f8dc a000 	ldr.w	sl, [ip]
 800bba4:	0c12      	lsrs	r2, r2, #16
 800bba6:	fa13 f38a 	uxtah	r3, r3, sl
 800bbaa:	fb06 e202 	mla	r2, r6, r2, lr
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	9b00      	ldr	r3, [sp, #0]
 800bbb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbb6:	b292      	uxth	r2, r2
 800bbb8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bbbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbc0:	f8bd 3000 	ldrh.w	r3, [sp]
 800bbc4:	4581      	cmp	r9, r0
 800bbc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbca:	f84c 3b04 	str.w	r3, [ip], #4
 800bbce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bbd2:	d2db      	bcs.n	800bb8c <quorem+0x44>
 800bbd4:	f855 300b 	ldr.w	r3, [r5, fp]
 800bbd8:	b92b      	cbnz	r3, 800bbe6 <quorem+0x9e>
 800bbda:	9b01      	ldr	r3, [sp, #4]
 800bbdc:	3b04      	subs	r3, #4
 800bbde:	429d      	cmp	r5, r3
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	d32e      	bcc.n	800bc42 <quorem+0xfa>
 800bbe4:	613c      	str	r4, [r7, #16]
 800bbe6:	4638      	mov	r0, r7
 800bbe8:	f001 f9f4 	bl	800cfd4 <__mcmp>
 800bbec:	2800      	cmp	r0, #0
 800bbee:	db24      	blt.n	800bc3a <quorem+0xf2>
 800bbf0:	3601      	adds	r6, #1
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	f04f 0c00 	mov.w	ip, #0
 800bbf8:	f858 2b04 	ldr.w	r2, [r8], #4
 800bbfc:	f8d0 e000 	ldr.w	lr, [r0]
 800bc00:	b293      	uxth	r3, r2
 800bc02:	ebac 0303 	sub.w	r3, ip, r3
 800bc06:	0c12      	lsrs	r2, r2, #16
 800bc08:	fa13 f38e 	uxtah	r3, r3, lr
 800bc0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bc10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc1a:	45c1      	cmp	r9, r8
 800bc1c:	f840 3b04 	str.w	r3, [r0], #4
 800bc20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bc24:	d2e8      	bcs.n	800bbf8 <quorem+0xb0>
 800bc26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc2e:	b922      	cbnz	r2, 800bc3a <quorem+0xf2>
 800bc30:	3b04      	subs	r3, #4
 800bc32:	429d      	cmp	r5, r3
 800bc34:	461a      	mov	r2, r3
 800bc36:	d30a      	bcc.n	800bc4e <quorem+0x106>
 800bc38:	613c      	str	r4, [r7, #16]
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	b003      	add	sp, #12
 800bc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc42:	6812      	ldr	r2, [r2, #0]
 800bc44:	3b04      	subs	r3, #4
 800bc46:	2a00      	cmp	r2, #0
 800bc48:	d1cc      	bne.n	800bbe4 <quorem+0x9c>
 800bc4a:	3c01      	subs	r4, #1
 800bc4c:	e7c7      	b.n	800bbde <quorem+0x96>
 800bc4e:	6812      	ldr	r2, [r2, #0]
 800bc50:	3b04      	subs	r3, #4
 800bc52:	2a00      	cmp	r2, #0
 800bc54:	d1f0      	bne.n	800bc38 <quorem+0xf0>
 800bc56:	3c01      	subs	r4, #1
 800bc58:	e7eb      	b.n	800bc32 <quorem+0xea>
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	e7ee      	b.n	800bc3c <quorem+0xf4>
	...

0800bc60 <_dtoa_r>:
 800bc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc64:	ed2d 8b04 	vpush	{d8-d9}
 800bc68:	ec57 6b10 	vmov	r6, r7, d0
 800bc6c:	b093      	sub	sp, #76	; 0x4c
 800bc6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bc70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bc74:	9106      	str	r1, [sp, #24]
 800bc76:	ee10 aa10 	vmov	sl, s0
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	9209      	str	r2, [sp, #36]	; 0x24
 800bc7e:	930c      	str	r3, [sp, #48]	; 0x30
 800bc80:	46bb      	mov	fp, r7
 800bc82:	b975      	cbnz	r5, 800bca2 <_dtoa_r+0x42>
 800bc84:	2010      	movs	r0, #16
 800bc86:	f7fe ffc9 	bl	800ac1c <malloc>
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	6260      	str	r0, [r4, #36]	; 0x24
 800bc8e:	b920      	cbnz	r0, 800bc9a <_dtoa_r+0x3a>
 800bc90:	4ba7      	ldr	r3, [pc, #668]	; (800bf30 <_dtoa_r+0x2d0>)
 800bc92:	21ea      	movs	r1, #234	; 0xea
 800bc94:	48a7      	ldr	r0, [pc, #668]	; (800bf34 <_dtoa_r+0x2d4>)
 800bc96:	f001 fc21 	bl	800d4dc <__assert_func>
 800bc9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bc9e:	6005      	str	r5, [r0, #0]
 800bca0:	60c5      	str	r5, [r0, #12]
 800bca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bca4:	6819      	ldr	r1, [r3, #0]
 800bca6:	b151      	cbz	r1, 800bcbe <_dtoa_r+0x5e>
 800bca8:	685a      	ldr	r2, [r3, #4]
 800bcaa:	604a      	str	r2, [r1, #4]
 800bcac:	2301      	movs	r3, #1
 800bcae:	4093      	lsls	r3, r2
 800bcb0:	608b      	str	r3, [r1, #8]
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f000 ff4c 	bl	800cb50 <_Bfree>
 800bcb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcba:	2200      	movs	r2, #0
 800bcbc:	601a      	str	r2, [r3, #0]
 800bcbe:	1e3b      	subs	r3, r7, #0
 800bcc0:	bfaa      	itet	ge
 800bcc2:	2300      	movge	r3, #0
 800bcc4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bcc8:	f8c8 3000 	strge.w	r3, [r8]
 800bccc:	4b9a      	ldr	r3, [pc, #616]	; (800bf38 <_dtoa_r+0x2d8>)
 800bcce:	bfbc      	itt	lt
 800bcd0:	2201      	movlt	r2, #1
 800bcd2:	f8c8 2000 	strlt.w	r2, [r8]
 800bcd6:	ea33 030b 	bics.w	r3, r3, fp
 800bcda:	d11b      	bne.n	800bd14 <_dtoa_r+0xb4>
 800bcdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bcde:	f242 730f 	movw	r3, #9999	; 0x270f
 800bce2:	6013      	str	r3, [r2, #0]
 800bce4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bce8:	4333      	orrs	r3, r6
 800bcea:	f000 8592 	beq.w	800c812 <_dtoa_r+0xbb2>
 800bcee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcf0:	b963      	cbnz	r3, 800bd0c <_dtoa_r+0xac>
 800bcf2:	4b92      	ldr	r3, [pc, #584]	; (800bf3c <_dtoa_r+0x2dc>)
 800bcf4:	e022      	b.n	800bd3c <_dtoa_r+0xdc>
 800bcf6:	4b92      	ldr	r3, [pc, #584]	; (800bf40 <_dtoa_r+0x2e0>)
 800bcf8:	9301      	str	r3, [sp, #4]
 800bcfa:	3308      	adds	r3, #8
 800bcfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bcfe:	6013      	str	r3, [r2, #0]
 800bd00:	9801      	ldr	r0, [sp, #4]
 800bd02:	b013      	add	sp, #76	; 0x4c
 800bd04:	ecbd 8b04 	vpop	{d8-d9}
 800bd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd0c:	4b8b      	ldr	r3, [pc, #556]	; (800bf3c <_dtoa_r+0x2dc>)
 800bd0e:	9301      	str	r3, [sp, #4]
 800bd10:	3303      	adds	r3, #3
 800bd12:	e7f3      	b.n	800bcfc <_dtoa_r+0x9c>
 800bd14:	2200      	movs	r2, #0
 800bd16:	2300      	movs	r3, #0
 800bd18:	4650      	mov	r0, sl
 800bd1a:	4659      	mov	r1, fp
 800bd1c:	f7f4 fef4 	bl	8000b08 <__aeabi_dcmpeq>
 800bd20:	ec4b ab19 	vmov	d9, sl, fp
 800bd24:	4680      	mov	r8, r0
 800bd26:	b158      	cbz	r0, 800bd40 <_dtoa_r+0xe0>
 800bd28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	6013      	str	r3, [r2, #0]
 800bd2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f000 856b 	beq.w	800c80c <_dtoa_r+0xbac>
 800bd36:	4883      	ldr	r0, [pc, #524]	; (800bf44 <_dtoa_r+0x2e4>)
 800bd38:	6018      	str	r0, [r3, #0]
 800bd3a:	1e43      	subs	r3, r0, #1
 800bd3c:	9301      	str	r3, [sp, #4]
 800bd3e:	e7df      	b.n	800bd00 <_dtoa_r+0xa0>
 800bd40:	ec4b ab10 	vmov	d0, sl, fp
 800bd44:	aa10      	add	r2, sp, #64	; 0x40
 800bd46:	a911      	add	r1, sp, #68	; 0x44
 800bd48:	4620      	mov	r0, r4
 800bd4a:	f001 f9e9 	bl	800d120 <__d2b>
 800bd4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bd52:	ee08 0a10 	vmov	s16, r0
 800bd56:	2d00      	cmp	r5, #0
 800bd58:	f000 8084 	beq.w	800be64 <_dtoa_r+0x204>
 800bd5c:	ee19 3a90 	vmov	r3, s19
 800bd60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bd68:	4656      	mov	r6, sl
 800bd6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bd6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bd72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bd76:	4b74      	ldr	r3, [pc, #464]	; (800bf48 <_dtoa_r+0x2e8>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	4639      	mov	r1, r7
 800bd7e:	f7f4 faa3 	bl	80002c8 <__aeabi_dsub>
 800bd82:	a365      	add	r3, pc, #404	; (adr r3, 800bf18 <_dtoa_r+0x2b8>)
 800bd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd88:	f7f4 fc56 	bl	8000638 <__aeabi_dmul>
 800bd8c:	a364      	add	r3, pc, #400	; (adr r3, 800bf20 <_dtoa_r+0x2c0>)
 800bd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd92:	f7f4 fa9b 	bl	80002cc <__adddf3>
 800bd96:	4606      	mov	r6, r0
 800bd98:	4628      	mov	r0, r5
 800bd9a:	460f      	mov	r7, r1
 800bd9c:	f7f4 fbe2 	bl	8000564 <__aeabi_i2d>
 800bda0:	a361      	add	r3, pc, #388	; (adr r3, 800bf28 <_dtoa_r+0x2c8>)
 800bda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda6:	f7f4 fc47 	bl	8000638 <__aeabi_dmul>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	460b      	mov	r3, r1
 800bdae:	4630      	mov	r0, r6
 800bdb0:	4639      	mov	r1, r7
 800bdb2:	f7f4 fa8b 	bl	80002cc <__adddf3>
 800bdb6:	4606      	mov	r6, r0
 800bdb8:	460f      	mov	r7, r1
 800bdba:	f7f4 feed 	bl	8000b98 <__aeabi_d2iz>
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	9000      	str	r0, [sp, #0]
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	4639      	mov	r1, r7
 800bdc8:	f7f4 fea8 	bl	8000b1c <__aeabi_dcmplt>
 800bdcc:	b150      	cbz	r0, 800bde4 <_dtoa_r+0x184>
 800bdce:	9800      	ldr	r0, [sp, #0]
 800bdd0:	f7f4 fbc8 	bl	8000564 <__aeabi_i2d>
 800bdd4:	4632      	mov	r2, r6
 800bdd6:	463b      	mov	r3, r7
 800bdd8:	f7f4 fe96 	bl	8000b08 <__aeabi_dcmpeq>
 800bddc:	b910      	cbnz	r0, 800bde4 <_dtoa_r+0x184>
 800bdde:	9b00      	ldr	r3, [sp, #0]
 800bde0:	3b01      	subs	r3, #1
 800bde2:	9300      	str	r3, [sp, #0]
 800bde4:	9b00      	ldr	r3, [sp, #0]
 800bde6:	2b16      	cmp	r3, #22
 800bde8:	d85a      	bhi.n	800bea0 <_dtoa_r+0x240>
 800bdea:	9a00      	ldr	r2, [sp, #0]
 800bdec:	4b57      	ldr	r3, [pc, #348]	; (800bf4c <_dtoa_r+0x2ec>)
 800bdee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf6:	ec51 0b19 	vmov	r0, r1, d9
 800bdfa:	f7f4 fe8f 	bl	8000b1c <__aeabi_dcmplt>
 800bdfe:	2800      	cmp	r0, #0
 800be00:	d050      	beq.n	800bea4 <_dtoa_r+0x244>
 800be02:	9b00      	ldr	r3, [sp, #0]
 800be04:	3b01      	subs	r3, #1
 800be06:	9300      	str	r3, [sp, #0]
 800be08:	2300      	movs	r3, #0
 800be0a:	930b      	str	r3, [sp, #44]	; 0x2c
 800be0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be0e:	1b5d      	subs	r5, r3, r5
 800be10:	1e6b      	subs	r3, r5, #1
 800be12:	9305      	str	r3, [sp, #20]
 800be14:	bf45      	ittet	mi
 800be16:	f1c5 0301 	rsbmi	r3, r5, #1
 800be1a:	9304      	strmi	r3, [sp, #16]
 800be1c:	2300      	movpl	r3, #0
 800be1e:	2300      	movmi	r3, #0
 800be20:	bf4c      	ite	mi
 800be22:	9305      	strmi	r3, [sp, #20]
 800be24:	9304      	strpl	r3, [sp, #16]
 800be26:	9b00      	ldr	r3, [sp, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	db3d      	blt.n	800bea8 <_dtoa_r+0x248>
 800be2c:	9b05      	ldr	r3, [sp, #20]
 800be2e:	9a00      	ldr	r2, [sp, #0]
 800be30:	920a      	str	r2, [sp, #40]	; 0x28
 800be32:	4413      	add	r3, r2
 800be34:	9305      	str	r3, [sp, #20]
 800be36:	2300      	movs	r3, #0
 800be38:	9307      	str	r3, [sp, #28]
 800be3a:	9b06      	ldr	r3, [sp, #24]
 800be3c:	2b09      	cmp	r3, #9
 800be3e:	f200 8089 	bhi.w	800bf54 <_dtoa_r+0x2f4>
 800be42:	2b05      	cmp	r3, #5
 800be44:	bfc4      	itt	gt
 800be46:	3b04      	subgt	r3, #4
 800be48:	9306      	strgt	r3, [sp, #24]
 800be4a:	9b06      	ldr	r3, [sp, #24]
 800be4c:	f1a3 0302 	sub.w	r3, r3, #2
 800be50:	bfcc      	ite	gt
 800be52:	2500      	movgt	r5, #0
 800be54:	2501      	movle	r5, #1
 800be56:	2b03      	cmp	r3, #3
 800be58:	f200 8087 	bhi.w	800bf6a <_dtoa_r+0x30a>
 800be5c:	e8df f003 	tbb	[pc, r3]
 800be60:	59383a2d 	.word	0x59383a2d
 800be64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800be68:	441d      	add	r5, r3
 800be6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800be6e:	2b20      	cmp	r3, #32
 800be70:	bfc1      	itttt	gt
 800be72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800be76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800be7a:	fa0b f303 	lslgt.w	r3, fp, r3
 800be7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800be82:	bfda      	itte	le
 800be84:	f1c3 0320 	rsble	r3, r3, #32
 800be88:	fa06 f003 	lslle.w	r0, r6, r3
 800be8c:	4318      	orrgt	r0, r3
 800be8e:	f7f4 fb59 	bl	8000544 <__aeabi_ui2d>
 800be92:	2301      	movs	r3, #1
 800be94:	4606      	mov	r6, r0
 800be96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800be9a:	3d01      	subs	r5, #1
 800be9c:	930e      	str	r3, [sp, #56]	; 0x38
 800be9e:	e76a      	b.n	800bd76 <_dtoa_r+0x116>
 800bea0:	2301      	movs	r3, #1
 800bea2:	e7b2      	b.n	800be0a <_dtoa_r+0x1aa>
 800bea4:	900b      	str	r0, [sp, #44]	; 0x2c
 800bea6:	e7b1      	b.n	800be0c <_dtoa_r+0x1ac>
 800bea8:	9b04      	ldr	r3, [sp, #16]
 800beaa:	9a00      	ldr	r2, [sp, #0]
 800beac:	1a9b      	subs	r3, r3, r2
 800beae:	9304      	str	r3, [sp, #16]
 800beb0:	4253      	negs	r3, r2
 800beb2:	9307      	str	r3, [sp, #28]
 800beb4:	2300      	movs	r3, #0
 800beb6:	930a      	str	r3, [sp, #40]	; 0x28
 800beb8:	e7bf      	b.n	800be3a <_dtoa_r+0x1da>
 800beba:	2300      	movs	r3, #0
 800bebc:	9308      	str	r3, [sp, #32]
 800bebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	dc55      	bgt.n	800bf70 <_dtoa_r+0x310>
 800bec4:	2301      	movs	r3, #1
 800bec6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800beca:	461a      	mov	r2, r3
 800becc:	9209      	str	r2, [sp, #36]	; 0x24
 800bece:	e00c      	b.n	800beea <_dtoa_r+0x28a>
 800bed0:	2301      	movs	r3, #1
 800bed2:	e7f3      	b.n	800bebc <_dtoa_r+0x25c>
 800bed4:	2300      	movs	r3, #0
 800bed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bed8:	9308      	str	r3, [sp, #32]
 800beda:	9b00      	ldr	r3, [sp, #0]
 800bedc:	4413      	add	r3, r2
 800bede:	9302      	str	r3, [sp, #8]
 800bee0:	3301      	adds	r3, #1
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	9303      	str	r3, [sp, #12]
 800bee6:	bfb8      	it	lt
 800bee8:	2301      	movlt	r3, #1
 800beea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800beec:	2200      	movs	r2, #0
 800beee:	6042      	str	r2, [r0, #4]
 800bef0:	2204      	movs	r2, #4
 800bef2:	f102 0614 	add.w	r6, r2, #20
 800bef6:	429e      	cmp	r6, r3
 800bef8:	6841      	ldr	r1, [r0, #4]
 800befa:	d93d      	bls.n	800bf78 <_dtoa_r+0x318>
 800befc:	4620      	mov	r0, r4
 800befe:	f000 fde7 	bl	800cad0 <_Balloc>
 800bf02:	9001      	str	r0, [sp, #4]
 800bf04:	2800      	cmp	r0, #0
 800bf06:	d13b      	bne.n	800bf80 <_dtoa_r+0x320>
 800bf08:	4b11      	ldr	r3, [pc, #68]	; (800bf50 <_dtoa_r+0x2f0>)
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bf10:	e6c0      	b.n	800bc94 <_dtoa_r+0x34>
 800bf12:	2301      	movs	r3, #1
 800bf14:	e7df      	b.n	800bed6 <_dtoa_r+0x276>
 800bf16:	bf00      	nop
 800bf18:	636f4361 	.word	0x636f4361
 800bf1c:	3fd287a7 	.word	0x3fd287a7
 800bf20:	8b60c8b3 	.word	0x8b60c8b3
 800bf24:	3fc68a28 	.word	0x3fc68a28
 800bf28:	509f79fb 	.word	0x509f79fb
 800bf2c:	3fd34413 	.word	0x3fd34413
 800bf30:	0800da55 	.word	0x0800da55
 800bf34:	0800da6c 	.word	0x0800da6c
 800bf38:	7ff00000 	.word	0x7ff00000
 800bf3c:	0800da51 	.word	0x0800da51
 800bf40:	0800da48 	.word	0x0800da48
 800bf44:	0800da25 	.word	0x0800da25
 800bf48:	3ff80000 	.word	0x3ff80000
 800bf4c:	0800db60 	.word	0x0800db60
 800bf50:	0800dac7 	.word	0x0800dac7
 800bf54:	2501      	movs	r5, #1
 800bf56:	2300      	movs	r3, #0
 800bf58:	9306      	str	r3, [sp, #24]
 800bf5a:	9508      	str	r5, [sp, #32]
 800bf5c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bf64:	2200      	movs	r2, #0
 800bf66:	2312      	movs	r3, #18
 800bf68:	e7b0      	b.n	800becc <_dtoa_r+0x26c>
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	9308      	str	r3, [sp, #32]
 800bf6e:	e7f5      	b.n	800bf5c <_dtoa_r+0x2fc>
 800bf70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bf76:	e7b8      	b.n	800beea <_dtoa_r+0x28a>
 800bf78:	3101      	adds	r1, #1
 800bf7a:	6041      	str	r1, [r0, #4]
 800bf7c:	0052      	lsls	r2, r2, #1
 800bf7e:	e7b8      	b.n	800bef2 <_dtoa_r+0x292>
 800bf80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf82:	9a01      	ldr	r2, [sp, #4]
 800bf84:	601a      	str	r2, [r3, #0]
 800bf86:	9b03      	ldr	r3, [sp, #12]
 800bf88:	2b0e      	cmp	r3, #14
 800bf8a:	f200 809d 	bhi.w	800c0c8 <_dtoa_r+0x468>
 800bf8e:	2d00      	cmp	r5, #0
 800bf90:	f000 809a 	beq.w	800c0c8 <_dtoa_r+0x468>
 800bf94:	9b00      	ldr	r3, [sp, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	dd32      	ble.n	800c000 <_dtoa_r+0x3a0>
 800bf9a:	4ab7      	ldr	r2, [pc, #732]	; (800c278 <_dtoa_r+0x618>)
 800bf9c:	f003 030f 	and.w	r3, r3, #15
 800bfa0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bfa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bfa8:	9b00      	ldr	r3, [sp, #0]
 800bfaa:	05d8      	lsls	r0, r3, #23
 800bfac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bfb0:	d516      	bpl.n	800bfe0 <_dtoa_r+0x380>
 800bfb2:	4bb2      	ldr	r3, [pc, #712]	; (800c27c <_dtoa_r+0x61c>)
 800bfb4:	ec51 0b19 	vmov	r0, r1, d9
 800bfb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bfbc:	f7f4 fc66 	bl	800088c <__aeabi_ddiv>
 800bfc0:	f007 070f 	and.w	r7, r7, #15
 800bfc4:	4682      	mov	sl, r0
 800bfc6:	468b      	mov	fp, r1
 800bfc8:	2503      	movs	r5, #3
 800bfca:	4eac      	ldr	r6, [pc, #688]	; (800c27c <_dtoa_r+0x61c>)
 800bfcc:	b957      	cbnz	r7, 800bfe4 <_dtoa_r+0x384>
 800bfce:	4642      	mov	r2, r8
 800bfd0:	464b      	mov	r3, r9
 800bfd2:	4650      	mov	r0, sl
 800bfd4:	4659      	mov	r1, fp
 800bfd6:	f7f4 fc59 	bl	800088c <__aeabi_ddiv>
 800bfda:	4682      	mov	sl, r0
 800bfdc:	468b      	mov	fp, r1
 800bfde:	e028      	b.n	800c032 <_dtoa_r+0x3d2>
 800bfe0:	2502      	movs	r5, #2
 800bfe2:	e7f2      	b.n	800bfca <_dtoa_r+0x36a>
 800bfe4:	07f9      	lsls	r1, r7, #31
 800bfe6:	d508      	bpl.n	800bffa <_dtoa_r+0x39a>
 800bfe8:	4640      	mov	r0, r8
 800bfea:	4649      	mov	r1, r9
 800bfec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bff0:	f7f4 fb22 	bl	8000638 <__aeabi_dmul>
 800bff4:	3501      	adds	r5, #1
 800bff6:	4680      	mov	r8, r0
 800bff8:	4689      	mov	r9, r1
 800bffa:	107f      	asrs	r7, r7, #1
 800bffc:	3608      	adds	r6, #8
 800bffe:	e7e5      	b.n	800bfcc <_dtoa_r+0x36c>
 800c000:	f000 809b 	beq.w	800c13a <_dtoa_r+0x4da>
 800c004:	9b00      	ldr	r3, [sp, #0]
 800c006:	4f9d      	ldr	r7, [pc, #628]	; (800c27c <_dtoa_r+0x61c>)
 800c008:	425e      	negs	r6, r3
 800c00a:	4b9b      	ldr	r3, [pc, #620]	; (800c278 <_dtoa_r+0x618>)
 800c00c:	f006 020f 	and.w	r2, r6, #15
 800c010:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c018:	ec51 0b19 	vmov	r0, r1, d9
 800c01c:	f7f4 fb0c 	bl	8000638 <__aeabi_dmul>
 800c020:	1136      	asrs	r6, r6, #4
 800c022:	4682      	mov	sl, r0
 800c024:	468b      	mov	fp, r1
 800c026:	2300      	movs	r3, #0
 800c028:	2502      	movs	r5, #2
 800c02a:	2e00      	cmp	r6, #0
 800c02c:	d17a      	bne.n	800c124 <_dtoa_r+0x4c4>
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1d3      	bne.n	800bfda <_dtoa_r+0x37a>
 800c032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c034:	2b00      	cmp	r3, #0
 800c036:	f000 8082 	beq.w	800c13e <_dtoa_r+0x4de>
 800c03a:	4b91      	ldr	r3, [pc, #580]	; (800c280 <_dtoa_r+0x620>)
 800c03c:	2200      	movs	r2, #0
 800c03e:	4650      	mov	r0, sl
 800c040:	4659      	mov	r1, fp
 800c042:	f7f4 fd6b 	bl	8000b1c <__aeabi_dcmplt>
 800c046:	2800      	cmp	r0, #0
 800c048:	d079      	beq.n	800c13e <_dtoa_r+0x4de>
 800c04a:	9b03      	ldr	r3, [sp, #12]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d076      	beq.n	800c13e <_dtoa_r+0x4de>
 800c050:	9b02      	ldr	r3, [sp, #8]
 800c052:	2b00      	cmp	r3, #0
 800c054:	dd36      	ble.n	800c0c4 <_dtoa_r+0x464>
 800c056:	9b00      	ldr	r3, [sp, #0]
 800c058:	4650      	mov	r0, sl
 800c05a:	4659      	mov	r1, fp
 800c05c:	1e5f      	subs	r7, r3, #1
 800c05e:	2200      	movs	r2, #0
 800c060:	4b88      	ldr	r3, [pc, #544]	; (800c284 <_dtoa_r+0x624>)
 800c062:	f7f4 fae9 	bl	8000638 <__aeabi_dmul>
 800c066:	9e02      	ldr	r6, [sp, #8]
 800c068:	4682      	mov	sl, r0
 800c06a:	468b      	mov	fp, r1
 800c06c:	3501      	adds	r5, #1
 800c06e:	4628      	mov	r0, r5
 800c070:	f7f4 fa78 	bl	8000564 <__aeabi_i2d>
 800c074:	4652      	mov	r2, sl
 800c076:	465b      	mov	r3, fp
 800c078:	f7f4 fade 	bl	8000638 <__aeabi_dmul>
 800c07c:	4b82      	ldr	r3, [pc, #520]	; (800c288 <_dtoa_r+0x628>)
 800c07e:	2200      	movs	r2, #0
 800c080:	f7f4 f924 	bl	80002cc <__adddf3>
 800c084:	46d0      	mov	r8, sl
 800c086:	46d9      	mov	r9, fp
 800c088:	4682      	mov	sl, r0
 800c08a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c08e:	2e00      	cmp	r6, #0
 800c090:	d158      	bne.n	800c144 <_dtoa_r+0x4e4>
 800c092:	4b7e      	ldr	r3, [pc, #504]	; (800c28c <_dtoa_r+0x62c>)
 800c094:	2200      	movs	r2, #0
 800c096:	4640      	mov	r0, r8
 800c098:	4649      	mov	r1, r9
 800c09a:	f7f4 f915 	bl	80002c8 <__aeabi_dsub>
 800c09e:	4652      	mov	r2, sl
 800c0a0:	465b      	mov	r3, fp
 800c0a2:	4680      	mov	r8, r0
 800c0a4:	4689      	mov	r9, r1
 800c0a6:	f7f4 fd57 	bl	8000b58 <__aeabi_dcmpgt>
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	f040 8295 	bne.w	800c5da <_dtoa_r+0x97a>
 800c0b0:	4652      	mov	r2, sl
 800c0b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c0b6:	4640      	mov	r0, r8
 800c0b8:	4649      	mov	r1, r9
 800c0ba:	f7f4 fd2f 	bl	8000b1c <__aeabi_dcmplt>
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	f040 8289 	bne.w	800c5d6 <_dtoa_r+0x976>
 800c0c4:	ec5b ab19 	vmov	sl, fp, d9
 800c0c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	f2c0 8148 	blt.w	800c360 <_dtoa_r+0x700>
 800c0d0:	9a00      	ldr	r2, [sp, #0]
 800c0d2:	2a0e      	cmp	r2, #14
 800c0d4:	f300 8144 	bgt.w	800c360 <_dtoa_r+0x700>
 800c0d8:	4b67      	ldr	r3, [pc, #412]	; (800c278 <_dtoa_r+0x618>)
 800c0da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f280 80d5 	bge.w	800c294 <_dtoa_r+0x634>
 800c0ea:	9b03      	ldr	r3, [sp, #12]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	f300 80d1 	bgt.w	800c294 <_dtoa_r+0x634>
 800c0f2:	f040 826f 	bne.w	800c5d4 <_dtoa_r+0x974>
 800c0f6:	4b65      	ldr	r3, [pc, #404]	; (800c28c <_dtoa_r+0x62c>)
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	4640      	mov	r0, r8
 800c0fc:	4649      	mov	r1, r9
 800c0fe:	f7f4 fa9b 	bl	8000638 <__aeabi_dmul>
 800c102:	4652      	mov	r2, sl
 800c104:	465b      	mov	r3, fp
 800c106:	f7f4 fd1d 	bl	8000b44 <__aeabi_dcmpge>
 800c10a:	9e03      	ldr	r6, [sp, #12]
 800c10c:	4637      	mov	r7, r6
 800c10e:	2800      	cmp	r0, #0
 800c110:	f040 8245 	bne.w	800c59e <_dtoa_r+0x93e>
 800c114:	9d01      	ldr	r5, [sp, #4]
 800c116:	2331      	movs	r3, #49	; 0x31
 800c118:	f805 3b01 	strb.w	r3, [r5], #1
 800c11c:	9b00      	ldr	r3, [sp, #0]
 800c11e:	3301      	adds	r3, #1
 800c120:	9300      	str	r3, [sp, #0]
 800c122:	e240      	b.n	800c5a6 <_dtoa_r+0x946>
 800c124:	07f2      	lsls	r2, r6, #31
 800c126:	d505      	bpl.n	800c134 <_dtoa_r+0x4d4>
 800c128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c12c:	f7f4 fa84 	bl	8000638 <__aeabi_dmul>
 800c130:	3501      	adds	r5, #1
 800c132:	2301      	movs	r3, #1
 800c134:	1076      	asrs	r6, r6, #1
 800c136:	3708      	adds	r7, #8
 800c138:	e777      	b.n	800c02a <_dtoa_r+0x3ca>
 800c13a:	2502      	movs	r5, #2
 800c13c:	e779      	b.n	800c032 <_dtoa_r+0x3d2>
 800c13e:	9f00      	ldr	r7, [sp, #0]
 800c140:	9e03      	ldr	r6, [sp, #12]
 800c142:	e794      	b.n	800c06e <_dtoa_r+0x40e>
 800c144:	9901      	ldr	r1, [sp, #4]
 800c146:	4b4c      	ldr	r3, [pc, #304]	; (800c278 <_dtoa_r+0x618>)
 800c148:	4431      	add	r1, r6
 800c14a:	910d      	str	r1, [sp, #52]	; 0x34
 800c14c:	9908      	ldr	r1, [sp, #32]
 800c14e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c152:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c156:	2900      	cmp	r1, #0
 800c158:	d043      	beq.n	800c1e2 <_dtoa_r+0x582>
 800c15a:	494d      	ldr	r1, [pc, #308]	; (800c290 <_dtoa_r+0x630>)
 800c15c:	2000      	movs	r0, #0
 800c15e:	f7f4 fb95 	bl	800088c <__aeabi_ddiv>
 800c162:	4652      	mov	r2, sl
 800c164:	465b      	mov	r3, fp
 800c166:	f7f4 f8af 	bl	80002c8 <__aeabi_dsub>
 800c16a:	9d01      	ldr	r5, [sp, #4]
 800c16c:	4682      	mov	sl, r0
 800c16e:	468b      	mov	fp, r1
 800c170:	4649      	mov	r1, r9
 800c172:	4640      	mov	r0, r8
 800c174:	f7f4 fd10 	bl	8000b98 <__aeabi_d2iz>
 800c178:	4606      	mov	r6, r0
 800c17a:	f7f4 f9f3 	bl	8000564 <__aeabi_i2d>
 800c17e:	4602      	mov	r2, r0
 800c180:	460b      	mov	r3, r1
 800c182:	4640      	mov	r0, r8
 800c184:	4649      	mov	r1, r9
 800c186:	f7f4 f89f 	bl	80002c8 <__aeabi_dsub>
 800c18a:	3630      	adds	r6, #48	; 0x30
 800c18c:	f805 6b01 	strb.w	r6, [r5], #1
 800c190:	4652      	mov	r2, sl
 800c192:	465b      	mov	r3, fp
 800c194:	4680      	mov	r8, r0
 800c196:	4689      	mov	r9, r1
 800c198:	f7f4 fcc0 	bl	8000b1c <__aeabi_dcmplt>
 800c19c:	2800      	cmp	r0, #0
 800c19e:	d163      	bne.n	800c268 <_dtoa_r+0x608>
 800c1a0:	4642      	mov	r2, r8
 800c1a2:	464b      	mov	r3, r9
 800c1a4:	4936      	ldr	r1, [pc, #216]	; (800c280 <_dtoa_r+0x620>)
 800c1a6:	2000      	movs	r0, #0
 800c1a8:	f7f4 f88e 	bl	80002c8 <__aeabi_dsub>
 800c1ac:	4652      	mov	r2, sl
 800c1ae:	465b      	mov	r3, fp
 800c1b0:	f7f4 fcb4 	bl	8000b1c <__aeabi_dcmplt>
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	f040 80b5 	bne.w	800c324 <_dtoa_r+0x6c4>
 800c1ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1bc:	429d      	cmp	r5, r3
 800c1be:	d081      	beq.n	800c0c4 <_dtoa_r+0x464>
 800c1c0:	4b30      	ldr	r3, [pc, #192]	; (800c284 <_dtoa_r+0x624>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	4650      	mov	r0, sl
 800c1c6:	4659      	mov	r1, fp
 800c1c8:	f7f4 fa36 	bl	8000638 <__aeabi_dmul>
 800c1cc:	4b2d      	ldr	r3, [pc, #180]	; (800c284 <_dtoa_r+0x624>)
 800c1ce:	4682      	mov	sl, r0
 800c1d0:	468b      	mov	fp, r1
 800c1d2:	4640      	mov	r0, r8
 800c1d4:	4649      	mov	r1, r9
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f7f4 fa2e 	bl	8000638 <__aeabi_dmul>
 800c1dc:	4680      	mov	r8, r0
 800c1de:	4689      	mov	r9, r1
 800c1e0:	e7c6      	b.n	800c170 <_dtoa_r+0x510>
 800c1e2:	4650      	mov	r0, sl
 800c1e4:	4659      	mov	r1, fp
 800c1e6:	f7f4 fa27 	bl	8000638 <__aeabi_dmul>
 800c1ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1ec:	9d01      	ldr	r5, [sp, #4]
 800c1ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1f0:	4682      	mov	sl, r0
 800c1f2:	468b      	mov	fp, r1
 800c1f4:	4649      	mov	r1, r9
 800c1f6:	4640      	mov	r0, r8
 800c1f8:	f7f4 fcce 	bl	8000b98 <__aeabi_d2iz>
 800c1fc:	4606      	mov	r6, r0
 800c1fe:	f7f4 f9b1 	bl	8000564 <__aeabi_i2d>
 800c202:	3630      	adds	r6, #48	; 0x30
 800c204:	4602      	mov	r2, r0
 800c206:	460b      	mov	r3, r1
 800c208:	4640      	mov	r0, r8
 800c20a:	4649      	mov	r1, r9
 800c20c:	f7f4 f85c 	bl	80002c8 <__aeabi_dsub>
 800c210:	f805 6b01 	strb.w	r6, [r5], #1
 800c214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c216:	429d      	cmp	r5, r3
 800c218:	4680      	mov	r8, r0
 800c21a:	4689      	mov	r9, r1
 800c21c:	f04f 0200 	mov.w	r2, #0
 800c220:	d124      	bne.n	800c26c <_dtoa_r+0x60c>
 800c222:	4b1b      	ldr	r3, [pc, #108]	; (800c290 <_dtoa_r+0x630>)
 800c224:	4650      	mov	r0, sl
 800c226:	4659      	mov	r1, fp
 800c228:	f7f4 f850 	bl	80002cc <__adddf3>
 800c22c:	4602      	mov	r2, r0
 800c22e:	460b      	mov	r3, r1
 800c230:	4640      	mov	r0, r8
 800c232:	4649      	mov	r1, r9
 800c234:	f7f4 fc90 	bl	8000b58 <__aeabi_dcmpgt>
 800c238:	2800      	cmp	r0, #0
 800c23a:	d173      	bne.n	800c324 <_dtoa_r+0x6c4>
 800c23c:	4652      	mov	r2, sl
 800c23e:	465b      	mov	r3, fp
 800c240:	4913      	ldr	r1, [pc, #76]	; (800c290 <_dtoa_r+0x630>)
 800c242:	2000      	movs	r0, #0
 800c244:	f7f4 f840 	bl	80002c8 <__aeabi_dsub>
 800c248:	4602      	mov	r2, r0
 800c24a:	460b      	mov	r3, r1
 800c24c:	4640      	mov	r0, r8
 800c24e:	4649      	mov	r1, r9
 800c250:	f7f4 fc64 	bl	8000b1c <__aeabi_dcmplt>
 800c254:	2800      	cmp	r0, #0
 800c256:	f43f af35 	beq.w	800c0c4 <_dtoa_r+0x464>
 800c25a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c25c:	1e6b      	subs	r3, r5, #1
 800c25e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c260:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c264:	2b30      	cmp	r3, #48	; 0x30
 800c266:	d0f8      	beq.n	800c25a <_dtoa_r+0x5fa>
 800c268:	9700      	str	r7, [sp, #0]
 800c26a:	e049      	b.n	800c300 <_dtoa_r+0x6a0>
 800c26c:	4b05      	ldr	r3, [pc, #20]	; (800c284 <_dtoa_r+0x624>)
 800c26e:	f7f4 f9e3 	bl	8000638 <__aeabi_dmul>
 800c272:	4680      	mov	r8, r0
 800c274:	4689      	mov	r9, r1
 800c276:	e7bd      	b.n	800c1f4 <_dtoa_r+0x594>
 800c278:	0800db60 	.word	0x0800db60
 800c27c:	0800db38 	.word	0x0800db38
 800c280:	3ff00000 	.word	0x3ff00000
 800c284:	40240000 	.word	0x40240000
 800c288:	401c0000 	.word	0x401c0000
 800c28c:	40140000 	.word	0x40140000
 800c290:	3fe00000 	.word	0x3fe00000
 800c294:	9d01      	ldr	r5, [sp, #4]
 800c296:	4656      	mov	r6, sl
 800c298:	465f      	mov	r7, fp
 800c29a:	4642      	mov	r2, r8
 800c29c:	464b      	mov	r3, r9
 800c29e:	4630      	mov	r0, r6
 800c2a0:	4639      	mov	r1, r7
 800c2a2:	f7f4 faf3 	bl	800088c <__aeabi_ddiv>
 800c2a6:	f7f4 fc77 	bl	8000b98 <__aeabi_d2iz>
 800c2aa:	4682      	mov	sl, r0
 800c2ac:	f7f4 f95a 	bl	8000564 <__aeabi_i2d>
 800c2b0:	4642      	mov	r2, r8
 800c2b2:	464b      	mov	r3, r9
 800c2b4:	f7f4 f9c0 	bl	8000638 <__aeabi_dmul>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	4630      	mov	r0, r6
 800c2be:	4639      	mov	r1, r7
 800c2c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c2c4:	f7f4 f800 	bl	80002c8 <__aeabi_dsub>
 800c2c8:	f805 6b01 	strb.w	r6, [r5], #1
 800c2cc:	9e01      	ldr	r6, [sp, #4]
 800c2ce:	9f03      	ldr	r7, [sp, #12]
 800c2d0:	1bae      	subs	r6, r5, r6
 800c2d2:	42b7      	cmp	r7, r6
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	d135      	bne.n	800c346 <_dtoa_r+0x6e6>
 800c2da:	f7f3 fff7 	bl	80002cc <__adddf3>
 800c2de:	4642      	mov	r2, r8
 800c2e0:	464b      	mov	r3, r9
 800c2e2:	4606      	mov	r6, r0
 800c2e4:	460f      	mov	r7, r1
 800c2e6:	f7f4 fc37 	bl	8000b58 <__aeabi_dcmpgt>
 800c2ea:	b9d0      	cbnz	r0, 800c322 <_dtoa_r+0x6c2>
 800c2ec:	4642      	mov	r2, r8
 800c2ee:	464b      	mov	r3, r9
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	4639      	mov	r1, r7
 800c2f4:	f7f4 fc08 	bl	8000b08 <__aeabi_dcmpeq>
 800c2f8:	b110      	cbz	r0, 800c300 <_dtoa_r+0x6a0>
 800c2fa:	f01a 0f01 	tst.w	sl, #1
 800c2fe:	d110      	bne.n	800c322 <_dtoa_r+0x6c2>
 800c300:	4620      	mov	r0, r4
 800c302:	ee18 1a10 	vmov	r1, s16
 800c306:	f000 fc23 	bl	800cb50 <_Bfree>
 800c30a:	2300      	movs	r3, #0
 800c30c:	9800      	ldr	r0, [sp, #0]
 800c30e:	702b      	strb	r3, [r5, #0]
 800c310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c312:	3001      	adds	r0, #1
 800c314:	6018      	str	r0, [r3, #0]
 800c316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f43f acf1 	beq.w	800bd00 <_dtoa_r+0xa0>
 800c31e:	601d      	str	r5, [r3, #0]
 800c320:	e4ee      	b.n	800bd00 <_dtoa_r+0xa0>
 800c322:	9f00      	ldr	r7, [sp, #0]
 800c324:	462b      	mov	r3, r5
 800c326:	461d      	mov	r5, r3
 800c328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c32c:	2a39      	cmp	r2, #57	; 0x39
 800c32e:	d106      	bne.n	800c33e <_dtoa_r+0x6de>
 800c330:	9a01      	ldr	r2, [sp, #4]
 800c332:	429a      	cmp	r2, r3
 800c334:	d1f7      	bne.n	800c326 <_dtoa_r+0x6c6>
 800c336:	9901      	ldr	r1, [sp, #4]
 800c338:	2230      	movs	r2, #48	; 0x30
 800c33a:	3701      	adds	r7, #1
 800c33c:	700a      	strb	r2, [r1, #0]
 800c33e:	781a      	ldrb	r2, [r3, #0]
 800c340:	3201      	adds	r2, #1
 800c342:	701a      	strb	r2, [r3, #0]
 800c344:	e790      	b.n	800c268 <_dtoa_r+0x608>
 800c346:	4ba6      	ldr	r3, [pc, #664]	; (800c5e0 <_dtoa_r+0x980>)
 800c348:	2200      	movs	r2, #0
 800c34a:	f7f4 f975 	bl	8000638 <__aeabi_dmul>
 800c34e:	2200      	movs	r2, #0
 800c350:	2300      	movs	r3, #0
 800c352:	4606      	mov	r6, r0
 800c354:	460f      	mov	r7, r1
 800c356:	f7f4 fbd7 	bl	8000b08 <__aeabi_dcmpeq>
 800c35a:	2800      	cmp	r0, #0
 800c35c:	d09d      	beq.n	800c29a <_dtoa_r+0x63a>
 800c35e:	e7cf      	b.n	800c300 <_dtoa_r+0x6a0>
 800c360:	9a08      	ldr	r2, [sp, #32]
 800c362:	2a00      	cmp	r2, #0
 800c364:	f000 80d7 	beq.w	800c516 <_dtoa_r+0x8b6>
 800c368:	9a06      	ldr	r2, [sp, #24]
 800c36a:	2a01      	cmp	r2, #1
 800c36c:	f300 80ba 	bgt.w	800c4e4 <_dtoa_r+0x884>
 800c370:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c372:	2a00      	cmp	r2, #0
 800c374:	f000 80b2 	beq.w	800c4dc <_dtoa_r+0x87c>
 800c378:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c37c:	9e07      	ldr	r6, [sp, #28]
 800c37e:	9d04      	ldr	r5, [sp, #16]
 800c380:	9a04      	ldr	r2, [sp, #16]
 800c382:	441a      	add	r2, r3
 800c384:	9204      	str	r2, [sp, #16]
 800c386:	9a05      	ldr	r2, [sp, #20]
 800c388:	2101      	movs	r1, #1
 800c38a:	441a      	add	r2, r3
 800c38c:	4620      	mov	r0, r4
 800c38e:	9205      	str	r2, [sp, #20]
 800c390:	f000 fc96 	bl	800ccc0 <__i2b>
 800c394:	4607      	mov	r7, r0
 800c396:	2d00      	cmp	r5, #0
 800c398:	dd0c      	ble.n	800c3b4 <_dtoa_r+0x754>
 800c39a:	9b05      	ldr	r3, [sp, #20]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	dd09      	ble.n	800c3b4 <_dtoa_r+0x754>
 800c3a0:	42ab      	cmp	r3, r5
 800c3a2:	9a04      	ldr	r2, [sp, #16]
 800c3a4:	bfa8      	it	ge
 800c3a6:	462b      	movge	r3, r5
 800c3a8:	1ad2      	subs	r2, r2, r3
 800c3aa:	9204      	str	r2, [sp, #16]
 800c3ac:	9a05      	ldr	r2, [sp, #20]
 800c3ae:	1aed      	subs	r5, r5, r3
 800c3b0:	1ad3      	subs	r3, r2, r3
 800c3b2:	9305      	str	r3, [sp, #20]
 800c3b4:	9b07      	ldr	r3, [sp, #28]
 800c3b6:	b31b      	cbz	r3, 800c400 <_dtoa_r+0x7a0>
 800c3b8:	9b08      	ldr	r3, [sp, #32]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	f000 80af 	beq.w	800c51e <_dtoa_r+0x8be>
 800c3c0:	2e00      	cmp	r6, #0
 800c3c2:	dd13      	ble.n	800c3ec <_dtoa_r+0x78c>
 800c3c4:	4639      	mov	r1, r7
 800c3c6:	4632      	mov	r2, r6
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	f000 fd39 	bl	800ce40 <__pow5mult>
 800c3ce:	ee18 2a10 	vmov	r2, s16
 800c3d2:	4601      	mov	r1, r0
 800c3d4:	4607      	mov	r7, r0
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	f000 fc88 	bl	800ccec <__multiply>
 800c3dc:	ee18 1a10 	vmov	r1, s16
 800c3e0:	4680      	mov	r8, r0
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	f000 fbb4 	bl	800cb50 <_Bfree>
 800c3e8:	ee08 8a10 	vmov	s16, r8
 800c3ec:	9b07      	ldr	r3, [sp, #28]
 800c3ee:	1b9a      	subs	r2, r3, r6
 800c3f0:	d006      	beq.n	800c400 <_dtoa_r+0x7a0>
 800c3f2:	ee18 1a10 	vmov	r1, s16
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f000 fd22 	bl	800ce40 <__pow5mult>
 800c3fc:	ee08 0a10 	vmov	s16, r0
 800c400:	2101      	movs	r1, #1
 800c402:	4620      	mov	r0, r4
 800c404:	f000 fc5c 	bl	800ccc0 <__i2b>
 800c408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	4606      	mov	r6, r0
 800c40e:	f340 8088 	ble.w	800c522 <_dtoa_r+0x8c2>
 800c412:	461a      	mov	r2, r3
 800c414:	4601      	mov	r1, r0
 800c416:	4620      	mov	r0, r4
 800c418:	f000 fd12 	bl	800ce40 <__pow5mult>
 800c41c:	9b06      	ldr	r3, [sp, #24]
 800c41e:	2b01      	cmp	r3, #1
 800c420:	4606      	mov	r6, r0
 800c422:	f340 8081 	ble.w	800c528 <_dtoa_r+0x8c8>
 800c426:	f04f 0800 	mov.w	r8, #0
 800c42a:	6933      	ldr	r3, [r6, #16]
 800c42c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c430:	6918      	ldr	r0, [r3, #16]
 800c432:	f000 fbf5 	bl	800cc20 <__hi0bits>
 800c436:	f1c0 0020 	rsb	r0, r0, #32
 800c43a:	9b05      	ldr	r3, [sp, #20]
 800c43c:	4418      	add	r0, r3
 800c43e:	f010 001f 	ands.w	r0, r0, #31
 800c442:	f000 8092 	beq.w	800c56a <_dtoa_r+0x90a>
 800c446:	f1c0 0320 	rsb	r3, r0, #32
 800c44a:	2b04      	cmp	r3, #4
 800c44c:	f340 808a 	ble.w	800c564 <_dtoa_r+0x904>
 800c450:	f1c0 001c 	rsb	r0, r0, #28
 800c454:	9b04      	ldr	r3, [sp, #16]
 800c456:	4403      	add	r3, r0
 800c458:	9304      	str	r3, [sp, #16]
 800c45a:	9b05      	ldr	r3, [sp, #20]
 800c45c:	4403      	add	r3, r0
 800c45e:	4405      	add	r5, r0
 800c460:	9305      	str	r3, [sp, #20]
 800c462:	9b04      	ldr	r3, [sp, #16]
 800c464:	2b00      	cmp	r3, #0
 800c466:	dd07      	ble.n	800c478 <_dtoa_r+0x818>
 800c468:	ee18 1a10 	vmov	r1, s16
 800c46c:	461a      	mov	r2, r3
 800c46e:	4620      	mov	r0, r4
 800c470:	f000 fd40 	bl	800cef4 <__lshift>
 800c474:	ee08 0a10 	vmov	s16, r0
 800c478:	9b05      	ldr	r3, [sp, #20]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	dd05      	ble.n	800c48a <_dtoa_r+0x82a>
 800c47e:	4631      	mov	r1, r6
 800c480:	461a      	mov	r2, r3
 800c482:	4620      	mov	r0, r4
 800c484:	f000 fd36 	bl	800cef4 <__lshift>
 800c488:	4606      	mov	r6, r0
 800c48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d06e      	beq.n	800c56e <_dtoa_r+0x90e>
 800c490:	ee18 0a10 	vmov	r0, s16
 800c494:	4631      	mov	r1, r6
 800c496:	f000 fd9d 	bl	800cfd4 <__mcmp>
 800c49a:	2800      	cmp	r0, #0
 800c49c:	da67      	bge.n	800c56e <_dtoa_r+0x90e>
 800c49e:	9b00      	ldr	r3, [sp, #0]
 800c4a0:	3b01      	subs	r3, #1
 800c4a2:	ee18 1a10 	vmov	r1, s16
 800c4a6:	9300      	str	r3, [sp, #0]
 800c4a8:	220a      	movs	r2, #10
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	f000 fb71 	bl	800cb94 <__multadd>
 800c4b2:	9b08      	ldr	r3, [sp, #32]
 800c4b4:	ee08 0a10 	vmov	s16, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	f000 81b1 	beq.w	800c820 <_dtoa_r+0xbc0>
 800c4be:	2300      	movs	r3, #0
 800c4c0:	4639      	mov	r1, r7
 800c4c2:	220a      	movs	r2, #10
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	f000 fb65 	bl	800cb94 <__multadd>
 800c4ca:	9b02      	ldr	r3, [sp, #8]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	4607      	mov	r7, r0
 800c4d0:	f300 808e 	bgt.w	800c5f0 <_dtoa_r+0x990>
 800c4d4:	9b06      	ldr	r3, [sp, #24]
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	dc51      	bgt.n	800c57e <_dtoa_r+0x91e>
 800c4da:	e089      	b.n	800c5f0 <_dtoa_r+0x990>
 800c4dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c4e2:	e74b      	b.n	800c37c <_dtoa_r+0x71c>
 800c4e4:	9b03      	ldr	r3, [sp, #12]
 800c4e6:	1e5e      	subs	r6, r3, #1
 800c4e8:	9b07      	ldr	r3, [sp, #28]
 800c4ea:	42b3      	cmp	r3, r6
 800c4ec:	bfbf      	itttt	lt
 800c4ee:	9b07      	ldrlt	r3, [sp, #28]
 800c4f0:	9607      	strlt	r6, [sp, #28]
 800c4f2:	1af2      	sublt	r2, r6, r3
 800c4f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c4f6:	bfb6      	itet	lt
 800c4f8:	189b      	addlt	r3, r3, r2
 800c4fa:	1b9e      	subge	r6, r3, r6
 800c4fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c4fe:	9b03      	ldr	r3, [sp, #12]
 800c500:	bfb8      	it	lt
 800c502:	2600      	movlt	r6, #0
 800c504:	2b00      	cmp	r3, #0
 800c506:	bfb7      	itett	lt
 800c508:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c50c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c510:	1a9d      	sublt	r5, r3, r2
 800c512:	2300      	movlt	r3, #0
 800c514:	e734      	b.n	800c380 <_dtoa_r+0x720>
 800c516:	9e07      	ldr	r6, [sp, #28]
 800c518:	9d04      	ldr	r5, [sp, #16]
 800c51a:	9f08      	ldr	r7, [sp, #32]
 800c51c:	e73b      	b.n	800c396 <_dtoa_r+0x736>
 800c51e:	9a07      	ldr	r2, [sp, #28]
 800c520:	e767      	b.n	800c3f2 <_dtoa_r+0x792>
 800c522:	9b06      	ldr	r3, [sp, #24]
 800c524:	2b01      	cmp	r3, #1
 800c526:	dc18      	bgt.n	800c55a <_dtoa_r+0x8fa>
 800c528:	f1ba 0f00 	cmp.w	sl, #0
 800c52c:	d115      	bne.n	800c55a <_dtoa_r+0x8fa>
 800c52e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c532:	b993      	cbnz	r3, 800c55a <_dtoa_r+0x8fa>
 800c534:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c538:	0d1b      	lsrs	r3, r3, #20
 800c53a:	051b      	lsls	r3, r3, #20
 800c53c:	b183      	cbz	r3, 800c560 <_dtoa_r+0x900>
 800c53e:	9b04      	ldr	r3, [sp, #16]
 800c540:	3301      	adds	r3, #1
 800c542:	9304      	str	r3, [sp, #16]
 800c544:	9b05      	ldr	r3, [sp, #20]
 800c546:	3301      	adds	r3, #1
 800c548:	9305      	str	r3, [sp, #20]
 800c54a:	f04f 0801 	mov.w	r8, #1
 800c54e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c550:	2b00      	cmp	r3, #0
 800c552:	f47f af6a 	bne.w	800c42a <_dtoa_r+0x7ca>
 800c556:	2001      	movs	r0, #1
 800c558:	e76f      	b.n	800c43a <_dtoa_r+0x7da>
 800c55a:	f04f 0800 	mov.w	r8, #0
 800c55e:	e7f6      	b.n	800c54e <_dtoa_r+0x8ee>
 800c560:	4698      	mov	r8, r3
 800c562:	e7f4      	b.n	800c54e <_dtoa_r+0x8ee>
 800c564:	f43f af7d 	beq.w	800c462 <_dtoa_r+0x802>
 800c568:	4618      	mov	r0, r3
 800c56a:	301c      	adds	r0, #28
 800c56c:	e772      	b.n	800c454 <_dtoa_r+0x7f4>
 800c56e:	9b03      	ldr	r3, [sp, #12]
 800c570:	2b00      	cmp	r3, #0
 800c572:	dc37      	bgt.n	800c5e4 <_dtoa_r+0x984>
 800c574:	9b06      	ldr	r3, [sp, #24]
 800c576:	2b02      	cmp	r3, #2
 800c578:	dd34      	ble.n	800c5e4 <_dtoa_r+0x984>
 800c57a:	9b03      	ldr	r3, [sp, #12]
 800c57c:	9302      	str	r3, [sp, #8]
 800c57e:	9b02      	ldr	r3, [sp, #8]
 800c580:	b96b      	cbnz	r3, 800c59e <_dtoa_r+0x93e>
 800c582:	4631      	mov	r1, r6
 800c584:	2205      	movs	r2, #5
 800c586:	4620      	mov	r0, r4
 800c588:	f000 fb04 	bl	800cb94 <__multadd>
 800c58c:	4601      	mov	r1, r0
 800c58e:	4606      	mov	r6, r0
 800c590:	ee18 0a10 	vmov	r0, s16
 800c594:	f000 fd1e 	bl	800cfd4 <__mcmp>
 800c598:	2800      	cmp	r0, #0
 800c59a:	f73f adbb 	bgt.w	800c114 <_dtoa_r+0x4b4>
 800c59e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5a0:	9d01      	ldr	r5, [sp, #4]
 800c5a2:	43db      	mvns	r3, r3
 800c5a4:	9300      	str	r3, [sp, #0]
 800c5a6:	f04f 0800 	mov.w	r8, #0
 800c5aa:	4631      	mov	r1, r6
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	f000 facf 	bl	800cb50 <_Bfree>
 800c5b2:	2f00      	cmp	r7, #0
 800c5b4:	f43f aea4 	beq.w	800c300 <_dtoa_r+0x6a0>
 800c5b8:	f1b8 0f00 	cmp.w	r8, #0
 800c5bc:	d005      	beq.n	800c5ca <_dtoa_r+0x96a>
 800c5be:	45b8      	cmp	r8, r7
 800c5c0:	d003      	beq.n	800c5ca <_dtoa_r+0x96a>
 800c5c2:	4641      	mov	r1, r8
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	f000 fac3 	bl	800cb50 <_Bfree>
 800c5ca:	4639      	mov	r1, r7
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f000 fabf 	bl	800cb50 <_Bfree>
 800c5d2:	e695      	b.n	800c300 <_dtoa_r+0x6a0>
 800c5d4:	2600      	movs	r6, #0
 800c5d6:	4637      	mov	r7, r6
 800c5d8:	e7e1      	b.n	800c59e <_dtoa_r+0x93e>
 800c5da:	9700      	str	r7, [sp, #0]
 800c5dc:	4637      	mov	r7, r6
 800c5de:	e599      	b.n	800c114 <_dtoa_r+0x4b4>
 800c5e0:	40240000 	.word	0x40240000
 800c5e4:	9b08      	ldr	r3, [sp, #32]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	f000 80ca 	beq.w	800c780 <_dtoa_r+0xb20>
 800c5ec:	9b03      	ldr	r3, [sp, #12]
 800c5ee:	9302      	str	r3, [sp, #8]
 800c5f0:	2d00      	cmp	r5, #0
 800c5f2:	dd05      	ble.n	800c600 <_dtoa_r+0x9a0>
 800c5f4:	4639      	mov	r1, r7
 800c5f6:	462a      	mov	r2, r5
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	f000 fc7b 	bl	800cef4 <__lshift>
 800c5fe:	4607      	mov	r7, r0
 800c600:	f1b8 0f00 	cmp.w	r8, #0
 800c604:	d05b      	beq.n	800c6be <_dtoa_r+0xa5e>
 800c606:	6879      	ldr	r1, [r7, #4]
 800c608:	4620      	mov	r0, r4
 800c60a:	f000 fa61 	bl	800cad0 <_Balloc>
 800c60e:	4605      	mov	r5, r0
 800c610:	b928      	cbnz	r0, 800c61e <_dtoa_r+0x9be>
 800c612:	4b87      	ldr	r3, [pc, #540]	; (800c830 <_dtoa_r+0xbd0>)
 800c614:	4602      	mov	r2, r0
 800c616:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c61a:	f7ff bb3b 	b.w	800bc94 <_dtoa_r+0x34>
 800c61e:	693a      	ldr	r2, [r7, #16]
 800c620:	3202      	adds	r2, #2
 800c622:	0092      	lsls	r2, r2, #2
 800c624:	f107 010c 	add.w	r1, r7, #12
 800c628:	300c      	adds	r0, #12
 800c62a:	f7fe faff 	bl	800ac2c <memcpy>
 800c62e:	2201      	movs	r2, #1
 800c630:	4629      	mov	r1, r5
 800c632:	4620      	mov	r0, r4
 800c634:	f000 fc5e 	bl	800cef4 <__lshift>
 800c638:	9b01      	ldr	r3, [sp, #4]
 800c63a:	f103 0901 	add.w	r9, r3, #1
 800c63e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c642:	4413      	add	r3, r2
 800c644:	9305      	str	r3, [sp, #20]
 800c646:	f00a 0301 	and.w	r3, sl, #1
 800c64a:	46b8      	mov	r8, r7
 800c64c:	9304      	str	r3, [sp, #16]
 800c64e:	4607      	mov	r7, r0
 800c650:	4631      	mov	r1, r6
 800c652:	ee18 0a10 	vmov	r0, s16
 800c656:	f7ff fa77 	bl	800bb48 <quorem>
 800c65a:	4641      	mov	r1, r8
 800c65c:	9002      	str	r0, [sp, #8]
 800c65e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c662:	ee18 0a10 	vmov	r0, s16
 800c666:	f000 fcb5 	bl	800cfd4 <__mcmp>
 800c66a:	463a      	mov	r2, r7
 800c66c:	9003      	str	r0, [sp, #12]
 800c66e:	4631      	mov	r1, r6
 800c670:	4620      	mov	r0, r4
 800c672:	f000 fccb 	bl	800d00c <__mdiff>
 800c676:	68c2      	ldr	r2, [r0, #12]
 800c678:	f109 3bff 	add.w	fp, r9, #4294967295
 800c67c:	4605      	mov	r5, r0
 800c67e:	bb02      	cbnz	r2, 800c6c2 <_dtoa_r+0xa62>
 800c680:	4601      	mov	r1, r0
 800c682:	ee18 0a10 	vmov	r0, s16
 800c686:	f000 fca5 	bl	800cfd4 <__mcmp>
 800c68a:	4602      	mov	r2, r0
 800c68c:	4629      	mov	r1, r5
 800c68e:	4620      	mov	r0, r4
 800c690:	9207      	str	r2, [sp, #28]
 800c692:	f000 fa5d 	bl	800cb50 <_Bfree>
 800c696:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c69a:	ea43 0102 	orr.w	r1, r3, r2
 800c69e:	9b04      	ldr	r3, [sp, #16]
 800c6a0:	430b      	orrs	r3, r1
 800c6a2:	464d      	mov	r5, r9
 800c6a4:	d10f      	bne.n	800c6c6 <_dtoa_r+0xa66>
 800c6a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c6aa:	d02a      	beq.n	800c702 <_dtoa_r+0xaa2>
 800c6ac:	9b03      	ldr	r3, [sp, #12]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	dd02      	ble.n	800c6b8 <_dtoa_r+0xa58>
 800c6b2:	9b02      	ldr	r3, [sp, #8]
 800c6b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c6b8:	f88b a000 	strb.w	sl, [fp]
 800c6bc:	e775      	b.n	800c5aa <_dtoa_r+0x94a>
 800c6be:	4638      	mov	r0, r7
 800c6c0:	e7ba      	b.n	800c638 <_dtoa_r+0x9d8>
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	e7e2      	b.n	800c68c <_dtoa_r+0xa2c>
 800c6c6:	9b03      	ldr	r3, [sp, #12]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	db04      	blt.n	800c6d6 <_dtoa_r+0xa76>
 800c6cc:	9906      	ldr	r1, [sp, #24]
 800c6ce:	430b      	orrs	r3, r1
 800c6d0:	9904      	ldr	r1, [sp, #16]
 800c6d2:	430b      	orrs	r3, r1
 800c6d4:	d122      	bne.n	800c71c <_dtoa_r+0xabc>
 800c6d6:	2a00      	cmp	r2, #0
 800c6d8:	ddee      	ble.n	800c6b8 <_dtoa_r+0xa58>
 800c6da:	ee18 1a10 	vmov	r1, s16
 800c6de:	2201      	movs	r2, #1
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f000 fc07 	bl	800cef4 <__lshift>
 800c6e6:	4631      	mov	r1, r6
 800c6e8:	ee08 0a10 	vmov	s16, r0
 800c6ec:	f000 fc72 	bl	800cfd4 <__mcmp>
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	dc03      	bgt.n	800c6fc <_dtoa_r+0xa9c>
 800c6f4:	d1e0      	bne.n	800c6b8 <_dtoa_r+0xa58>
 800c6f6:	f01a 0f01 	tst.w	sl, #1
 800c6fa:	d0dd      	beq.n	800c6b8 <_dtoa_r+0xa58>
 800c6fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c700:	d1d7      	bne.n	800c6b2 <_dtoa_r+0xa52>
 800c702:	2339      	movs	r3, #57	; 0x39
 800c704:	f88b 3000 	strb.w	r3, [fp]
 800c708:	462b      	mov	r3, r5
 800c70a:	461d      	mov	r5, r3
 800c70c:	3b01      	subs	r3, #1
 800c70e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c712:	2a39      	cmp	r2, #57	; 0x39
 800c714:	d071      	beq.n	800c7fa <_dtoa_r+0xb9a>
 800c716:	3201      	adds	r2, #1
 800c718:	701a      	strb	r2, [r3, #0]
 800c71a:	e746      	b.n	800c5aa <_dtoa_r+0x94a>
 800c71c:	2a00      	cmp	r2, #0
 800c71e:	dd07      	ble.n	800c730 <_dtoa_r+0xad0>
 800c720:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c724:	d0ed      	beq.n	800c702 <_dtoa_r+0xaa2>
 800c726:	f10a 0301 	add.w	r3, sl, #1
 800c72a:	f88b 3000 	strb.w	r3, [fp]
 800c72e:	e73c      	b.n	800c5aa <_dtoa_r+0x94a>
 800c730:	9b05      	ldr	r3, [sp, #20]
 800c732:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c736:	4599      	cmp	r9, r3
 800c738:	d047      	beq.n	800c7ca <_dtoa_r+0xb6a>
 800c73a:	ee18 1a10 	vmov	r1, s16
 800c73e:	2300      	movs	r3, #0
 800c740:	220a      	movs	r2, #10
 800c742:	4620      	mov	r0, r4
 800c744:	f000 fa26 	bl	800cb94 <__multadd>
 800c748:	45b8      	cmp	r8, r7
 800c74a:	ee08 0a10 	vmov	s16, r0
 800c74e:	f04f 0300 	mov.w	r3, #0
 800c752:	f04f 020a 	mov.w	r2, #10
 800c756:	4641      	mov	r1, r8
 800c758:	4620      	mov	r0, r4
 800c75a:	d106      	bne.n	800c76a <_dtoa_r+0xb0a>
 800c75c:	f000 fa1a 	bl	800cb94 <__multadd>
 800c760:	4680      	mov	r8, r0
 800c762:	4607      	mov	r7, r0
 800c764:	f109 0901 	add.w	r9, r9, #1
 800c768:	e772      	b.n	800c650 <_dtoa_r+0x9f0>
 800c76a:	f000 fa13 	bl	800cb94 <__multadd>
 800c76e:	4639      	mov	r1, r7
 800c770:	4680      	mov	r8, r0
 800c772:	2300      	movs	r3, #0
 800c774:	220a      	movs	r2, #10
 800c776:	4620      	mov	r0, r4
 800c778:	f000 fa0c 	bl	800cb94 <__multadd>
 800c77c:	4607      	mov	r7, r0
 800c77e:	e7f1      	b.n	800c764 <_dtoa_r+0xb04>
 800c780:	9b03      	ldr	r3, [sp, #12]
 800c782:	9302      	str	r3, [sp, #8]
 800c784:	9d01      	ldr	r5, [sp, #4]
 800c786:	ee18 0a10 	vmov	r0, s16
 800c78a:	4631      	mov	r1, r6
 800c78c:	f7ff f9dc 	bl	800bb48 <quorem>
 800c790:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c794:	9b01      	ldr	r3, [sp, #4]
 800c796:	f805 ab01 	strb.w	sl, [r5], #1
 800c79a:	1aea      	subs	r2, r5, r3
 800c79c:	9b02      	ldr	r3, [sp, #8]
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	dd09      	ble.n	800c7b6 <_dtoa_r+0xb56>
 800c7a2:	ee18 1a10 	vmov	r1, s16
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	220a      	movs	r2, #10
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f000 f9f2 	bl	800cb94 <__multadd>
 800c7b0:	ee08 0a10 	vmov	s16, r0
 800c7b4:	e7e7      	b.n	800c786 <_dtoa_r+0xb26>
 800c7b6:	9b02      	ldr	r3, [sp, #8]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	bfc8      	it	gt
 800c7bc:	461d      	movgt	r5, r3
 800c7be:	9b01      	ldr	r3, [sp, #4]
 800c7c0:	bfd8      	it	le
 800c7c2:	2501      	movle	r5, #1
 800c7c4:	441d      	add	r5, r3
 800c7c6:	f04f 0800 	mov.w	r8, #0
 800c7ca:	ee18 1a10 	vmov	r1, s16
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	f000 fb8f 	bl	800cef4 <__lshift>
 800c7d6:	4631      	mov	r1, r6
 800c7d8:	ee08 0a10 	vmov	s16, r0
 800c7dc:	f000 fbfa 	bl	800cfd4 <__mcmp>
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	dc91      	bgt.n	800c708 <_dtoa_r+0xaa8>
 800c7e4:	d102      	bne.n	800c7ec <_dtoa_r+0xb8c>
 800c7e6:	f01a 0f01 	tst.w	sl, #1
 800c7ea:	d18d      	bne.n	800c708 <_dtoa_r+0xaa8>
 800c7ec:	462b      	mov	r3, r5
 800c7ee:	461d      	mov	r5, r3
 800c7f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7f4:	2a30      	cmp	r2, #48	; 0x30
 800c7f6:	d0fa      	beq.n	800c7ee <_dtoa_r+0xb8e>
 800c7f8:	e6d7      	b.n	800c5aa <_dtoa_r+0x94a>
 800c7fa:	9a01      	ldr	r2, [sp, #4]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d184      	bne.n	800c70a <_dtoa_r+0xaaa>
 800c800:	9b00      	ldr	r3, [sp, #0]
 800c802:	3301      	adds	r3, #1
 800c804:	9300      	str	r3, [sp, #0]
 800c806:	2331      	movs	r3, #49	; 0x31
 800c808:	7013      	strb	r3, [r2, #0]
 800c80a:	e6ce      	b.n	800c5aa <_dtoa_r+0x94a>
 800c80c:	4b09      	ldr	r3, [pc, #36]	; (800c834 <_dtoa_r+0xbd4>)
 800c80e:	f7ff ba95 	b.w	800bd3c <_dtoa_r+0xdc>
 800c812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c814:	2b00      	cmp	r3, #0
 800c816:	f47f aa6e 	bne.w	800bcf6 <_dtoa_r+0x96>
 800c81a:	4b07      	ldr	r3, [pc, #28]	; (800c838 <_dtoa_r+0xbd8>)
 800c81c:	f7ff ba8e 	b.w	800bd3c <_dtoa_r+0xdc>
 800c820:	9b02      	ldr	r3, [sp, #8]
 800c822:	2b00      	cmp	r3, #0
 800c824:	dcae      	bgt.n	800c784 <_dtoa_r+0xb24>
 800c826:	9b06      	ldr	r3, [sp, #24]
 800c828:	2b02      	cmp	r3, #2
 800c82a:	f73f aea8 	bgt.w	800c57e <_dtoa_r+0x91e>
 800c82e:	e7a9      	b.n	800c784 <_dtoa_r+0xb24>
 800c830:	0800dac7 	.word	0x0800dac7
 800c834:	0800da24 	.word	0x0800da24
 800c838:	0800da48 	.word	0x0800da48

0800c83c <__sflush_r>:
 800c83c:	898a      	ldrh	r2, [r1, #12]
 800c83e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c842:	4605      	mov	r5, r0
 800c844:	0710      	lsls	r0, r2, #28
 800c846:	460c      	mov	r4, r1
 800c848:	d458      	bmi.n	800c8fc <__sflush_r+0xc0>
 800c84a:	684b      	ldr	r3, [r1, #4]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	dc05      	bgt.n	800c85c <__sflush_r+0x20>
 800c850:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c852:	2b00      	cmp	r3, #0
 800c854:	dc02      	bgt.n	800c85c <__sflush_r+0x20>
 800c856:	2000      	movs	r0, #0
 800c858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c85c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c85e:	2e00      	cmp	r6, #0
 800c860:	d0f9      	beq.n	800c856 <__sflush_r+0x1a>
 800c862:	2300      	movs	r3, #0
 800c864:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c868:	682f      	ldr	r7, [r5, #0]
 800c86a:	602b      	str	r3, [r5, #0]
 800c86c:	d032      	beq.n	800c8d4 <__sflush_r+0x98>
 800c86e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c870:	89a3      	ldrh	r3, [r4, #12]
 800c872:	075a      	lsls	r2, r3, #29
 800c874:	d505      	bpl.n	800c882 <__sflush_r+0x46>
 800c876:	6863      	ldr	r3, [r4, #4]
 800c878:	1ac0      	subs	r0, r0, r3
 800c87a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c87c:	b10b      	cbz	r3, 800c882 <__sflush_r+0x46>
 800c87e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c880:	1ac0      	subs	r0, r0, r3
 800c882:	2300      	movs	r3, #0
 800c884:	4602      	mov	r2, r0
 800c886:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c888:	6a21      	ldr	r1, [r4, #32]
 800c88a:	4628      	mov	r0, r5
 800c88c:	47b0      	blx	r6
 800c88e:	1c43      	adds	r3, r0, #1
 800c890:	89a3      	ldrh	r3, [r4, #12]
 800c892:	d106      	bne.n	800c8a2 <__sflush_r+0x66>
 800c894:	6829      	ldr	r1, [r5, #0]
 800c896:	291d      	cmp	r1, #29
 800c898:	d82c      	bhi.n	800c8f4 <__sflush_r+0xb8>
 800c89a:	4a2a      	ldr	r2, [pc, #168]	; (800c944 <__sflush_r+0x108>)
 800c89c:	40ca      	lsrs	r2, r1
 800c89e:	07d6      	lsls	r6, r2, #31
 800c8a0:	d528      	bpl.n	800c8f4 <__sflush_r+0xb8>
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	6062      	str	r2, [r4, #4]
 800c8a6:	04d9      	lsls	r1, r3, #19
 800c8a8:	6922      	ldr	r2, [r4, #16]
 800c8aa:	6022      	str	r2, [r4, #0]
 800c8ac:	d504      	bpl.n	800c8b8 <__sflush_r+0x7c>
 800c8ae:	1c42      	adds	r2, r0, #1
 800c8b0:	d101      	bne.n	800c8b6 <__sflush_r+0x7a>
 800c8b2:	682b      	ldr	r3, [r5, #0]
 800c8b4:	b903      	cbnz	r3, 800c8b8 <__sflush_r+0x7c>
 800c8b6:	6560      	str	r0, [r4, #84]	; 0x54
 800c8b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8ba:	602f      	str	r7, [r5, #0]
 800c8bc:	2900      	cmp	r1, #0
 800c8be:	d0ca      	beq.n	800c856 <__sflush_r+0x1a>
 800c8c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8c4:	4299      	cmp	r1, r3
 800c8c6:	d002      	beq.n	800c8ce <__sflush_r+0x92>
 800c8c8:	4628      	mov	r0, r5
 800c8ca:	f7fe f9c5 	bl	800ac58 <_free_r>
 800c8ce:	2000      	movs	r0, #0
 800c8d0:	6360      	str	r0, [r4, #52]	; 0x34
 800c8d2:	e7c1      	b.n	800c858 <__sflush_r+0x1c>
 800c8d4:	6a21      	ldr	r1, [r4, #32]
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	4628      	mov	r0, r5
 800c8da:	47b0      	blx	r6
 800c8dc:	1c41      	adds	r1, r0, #1
 800c8de:	d1c7      	bne.n	800c870 <__sflush_r+0x34>
 800c8e0:	682b      	ldr	r3, [r5, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d0c4      	beq.n	800c870 <__sflush_r+0x34>
 800c8e6:	2b1d      	cmp	r3, #29
 800c8e8:	d001      	beq.n	800c8ee <__sflush_r+0xb2>
 800c8ea:	2b16      	cmp	r3, #22
 800c8ec:	d101      	bne.n	800c8f2 <__sflush_r+0xb6>
 800c8ee:	602f      	str	r7, [r5, #0]
 800c8f0:	e7b1      	b.n	800c856 <__sflush_r+0x1a>
 800c8f2:	89a3      	ldrh	r3, [r4, #12]
 800c8f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8f8:	81a3      	strh	r3, [r4, #12]
 800c8fa:	e7ad      	b.n	800c858 <__sflush_r+0x1c>
 800c8fc:	690f      	ldr	r7, [r1, #16]
 800c8fe:	2f00      	cmp	r7, #0
 800c900:	d0a9      	beq.n	800c856 <__sflush_r+0x1a>
 800c902:	0793      	lsls	r3, r2, #30
 800c904:	680e      	ldr	r6, [r1, #0]
 800c906:	bf08      	it	eq
 800c908:	694b      	ldreq	r3, [r1, #20]
 800c90a:	600f      	str	r7, [r1, #0]
 800c90c:	bf18      	it	ne
 800c90e:	2300      	movne	r3, #0
 800c910:	eba6 0807 	sub.w	r8, r6, r7
 800c914:	608b      	str	r3, [r1, #8]
 800c916:	f1b8 0f00 	cmp.w	r8, #0
 800c91a:	dd9c      	ble.n	800c856 <__sflush_r+0x1a>
 800c91c:	6a21      	ldr	r1, [r4, #32]
 800c91e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c920:	4643      	mov	r3, r8
 800c922:	463a      	mov	r2, r7
 800c924:	4628      	mov	r0, r5
 800c926:	47b0      	blx	r6
 800c928:	2800      	cmp	r0, #0
 800c92a:	dc06      	bgt.n	800c93a <__sflush_r+0xfe>
 800c92c:	89a3      	ldrh	r3, [r4, #12]
 800c92e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c932:	81a3      	strh	r3, [r4, #12]
 800c934:	f04f 30ff 	mov.w	r0, #4294967295
 800c938:	e78e      	b.n	800c858 <__sflush_r+0x1c>
 800c93a:	4407      	add	r7, r0
 800c93c:	eba8 0800 	sub.w	r8, r8, r0
 800c940:	e7e9      	b.n	800c916 <__sflush_r+0xda>
 800c942:	bf00      	nop
 800c944:	20400001 	.word	0x20400001

0800c948 <_fflush_r>:
 800c948:	b538      	push	{r3, r4, r5, lr}
 800c94a:	690b      	ldr	r3, [r1, #16]
 800c94c:	4605      	mov	r5, r0
 800c94e:	460c      	mov	r4, r1
 800c950:	b913      	cbnz	r3, 800c958 <_fflush_r+0x10>
 800c952:	2500      	movs	r5, #0
 800c954:	4628      	mov	r0, r5
 800c956:	bd38      	pop	{r3, r4, r5, pc}
 800c958:	b118      	cbz	r0, 800c962 <_fflush_r+0x1a>
 800c95a:	6983      	ldr	r3, [r0, #24]
 800c95c:	b90b      	cbnz	r3, 800c962 <_fflush_r+0x1a>
 800c95e:	f7fe f897 	bl	800aa90 <__sinit>
 800c962:	4b14      	ldr	r3, [pc, #80]	; (800c9b4 <_fflush_r+0x6c>)
 800c964:	429c      	cmp	r4, r3
 800c966:	d11b      	bne.n	800c9a0 <_fflush_r+0x58>
 800c968:	686c      	ldr	r4, [r5, #4]
 800c96a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d0ef      	beq.n	800c952 <_fflush_r+0xa>
 800c972:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c974:	07d0      	lsls	r0, r2, #31
 800c976:	d404      	bmi.n	800c982 <_fflush_r+0x3a>
 800c978:	0599      	lsls	r1, r3, #22
 800c97a:	d402      	bmi.n	800c982 <_fflush_r+0x3a>
 800c97c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c97e:	f7fe f94a 	bl	800ac16 <__retarget_lock_acquire_recursive>
 800c982:	4628      	mov	r0, r5
 800c984:	4621      	mov	r1, r4
 800c986:	f7ff ff59 	bl	800c83c <__sflush_r>
 800c98a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c98c:	07da      	lsls	r2, r3, #31
 800c98e:	4605      	mov	r5, r0
 800c990:	d4e0      	bmi.n	800c954 <_fflush_r+0xc>
 800c992:	89a3      	ldrh	r3, [r4, #12]
 800c994:	059b      	lsls	r3, r3, #22
 800c996:	d4dd      	bmi.n	800c954 <_fflush_r+0xc>
 800c998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c99a:	f7fe f93d 	bl	800ac18 <__retarget_lock_release_recursive>
 800c99e:	e7d9      	b.n	800c954 <_fflush_r+0xc>
 800c9a0:	4b05      	ldr	r3, [pc, #20]	; (800c9b8 <_fflush_r+0x70>)
 800c9a2:	429c      	cmp	r4, r3
 800c9a4:	d101      	bne.n	800c9aa <_fflush_r+0x62>
 800c9a6:	68ac      	ldr	r4, [r5, #8]
 800c9a8:	e7df      	b.n	800c96a <_fflush_r+0x22>
 800c9aa:	4b04      	ldr	r3, [pc, #16]	; (800c9bc <_fflush_r+0x74>)
 800c9ac:	429c      	cmp	r4, r3
 800c9ae:	bf08      	it	eq
 800c9b0:	68ec      	ldreq	r4, [r5, #12]
 800c9b2:	e7da      	b.n	800c96a <_fflush_r+0x22>
 800c9b4:	0800d9d0 	.word	0x0800d9d0
 800c9b8:	0800d9f0 	.word	0x0800d9f0
 800c9bc:	0800d9b0 	.word	0x0800d9b0

0800c9c0 <_localeconv_r>:
 800c9c0:	4800      	ldr	r0, [pc, #0]	; (800c9c4 <_localeconv_r+0x4>)
 800c9c2:	4770      	bx	lr
 800c9c4:	20000164 	.word	0x20000164

0800c9c8 <_lseek_r>:
 800c9c8:	b538      	push	{r3, r4, r5, lr}
 800c9ca:	4d07      	ldr	r5, [pc, #28]	; (800c9e8 <_lseek_r+0x20>)
 800c9cc:	4604      	mov	r4, r0
 800c9ce:	4608      	mov	r0, r1
 800c9d0:	4611      	mov	r1, r2
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	602a      	str	r2, [r5, #0]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	f7f4 fe1c 	bl	8001614 <_lseek>
 800c9dc:	1c43      	adds	r3, r0, #1
 800c9de:	d102      	bne.n	800c9e6 <_lseek_r+0x1e>
 800c9e0:	682b      	ldr	r3, [r5, #0]
 800c9e2:	b103      	cbz	r3, 800c9e6 <_lseek_r+0x1e>
 800c9e4:	6023      	str	r3, [r4, #0]
 800c9e6:	bd38      	pop	{r3, r4, r5, pc}
 800c9e8:	200050a4 	.word	0x200050a4

0800c9ec <__swhatbuf_r>:
 800c9ec:	b570      	push	{r4, r5, r6, lr}
 800c9ee:	460e      	mov	r6, r1
 800c9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9f4:	2900      	cmp	r1, #0
 800c9f6:	b096      	sub	sp, #88	; 0x58
 800c9f8:	4614      	mov	r4, r2
 800c9fa:	461d      	mov	r5, r3
 800c9fc:	da08      	bge.n	800ca10 <__swhatbuf_r+0x24>
 800c9fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ca02:	2200      	movs	r2, #0
 800ca04:	602a      	str	r2, [r5, #0]
 800ca06:	061a      	lsls	r2, r3, #24
 800ca08:	d410      	bmi.n	800ca2c <__swhatbuf_r+0x40>
 800ca0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca0e:	e00e      	b.n	800ca2e <__swhatbuf_r+0x42>
 800ca10:	466a      	mov	r2, sp
 800ca12:	f000 fd93 	bl	800d53c <_fstat_r>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	dbf1      	blt.n	800c9fe <__swhatbuf_r+0x12>
 800ca1a:	9a01      	ldr	r2, [sp, #4]
 800ca1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca24:	425a      	negs	r2, r3
 800ca26:	415a      	adcs	r2, r3
 800ca28:	602a      	str	r2, [r5, #0]
 800ca2a:	e7ee      	b.n	800ca0a <__swhatbuf_r+0x1e>
 800ca2c:	2340      	movs	r3, #64	; 0x40
 800ca2e:	2000      	movs	r0, #0
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	b016      	add	sp, #88	; 0x58
 800ca34:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ca38 <__smakebuf_r>:
 800ca38:	898b      	ldrh	r3, [r1, #12]
 800ca3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca3c:	079d      	lsls	r5, r3, #30
 800ca3e:	4606      	mov	r6, r0
 800ca40:	460c      	mov	r4, r1
 800ca42:	d507      	bpl.n	800ca54 <__smakebuf_r+0x1c>
 800ca44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca48:	6023      	str	r3, [r4, #0]
 800ca4a:	6123      	str	r3, [r4, #16]
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	6163      	str	r3, [r4, #20]
 800ca50:	b002      	add	sp, #8
 800ca52:	bd70      	pop	{r4, r5, r6, pc}
 800ca54:	ab01      	add	r3, sp, #4
 800ca56:	466a      	mov	r2, sp
 800ca58:	f7ff ffc8 	bl	800c9ec <__swhatbuf_r>
 800ca5c:	9900      	ldr	r1, [sp, #0]
 800ca5e:	4605      	mov	r5, r0
 800ca60:	4630      	mov	r0, r6
 800ca62:	f7fe f965 	bl	800ad30 <_malloc_r>
 800ca66:	b948      	cbnz	r0, 800ca7c <__smakebuf_r+0x44>
 800ca68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca6c:	059a      	lsls	r2, r3, #22
 800ca6e:	d4ef      	bmi.n	800ca50 <__smakebuf_r+0x18>
 800ca70:	f023 0303 	bic.w	r3, r3, #3
 800ca74:	f043 0302 	orr.w	r3, r3, #2
 800ca78:	81a3      	strh	r3, [r4, #12]
 800ca7a:	e7e3      	b.n	800ca44 <__smakebuf_r+0xc>
 800ca7c:	4b0d      	ldr	r3, [pc, #52]	; (800cab4 <__smakebuf_r+0x7c>)
 800ca7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ca80:	89a3      	ldrh	r3, [r4, #12]
 800ca82:	6020      	str	r0, [r4, #0]
 800ca84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca88:	81a3      	strh	r3, [r4, #12]
 800ca8a:	9b00      	ldr	r3, [sp, #0]
 800ca8c:	6163      	str	r3, [r4, #20]
 800ca8e:	9b01      	ldr	r3, [sp, #4]
 800ca90:	6120      	str	r0, [r4, #16]
 800ca92:	b15b      	cbz	r3, 800caac <__smakebuf_r+0x74>
 800ca94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca98:	4630      	mov	r0, r6
 800ca9a:	f000 fd61 	bl	800d560 <_isatty_r>
 800ca9e:	b128      	cbz	r0, 800caac <__smakebuf_r+0x74>
 800caa0:	89a3      	ldrh	r3, [r4, #12]
 800caa2:	f023 0303 	bic.w	r3, r3, #3
 800caa6:	f043 0301 	orr.w	r3, r3, #1
 800caaa:	81a3      	strh	r3, [r4, #12]
 800caac:	89a0      	ldrh	r0, [r4, #12]
 800caae:	4305      	orrs	r5, r0
 800cab0:	81a5      	strh	r5, [r4, #12]
 800cab2:	e7cd      	b.n	800ca50 <__smakebuf_r+0x18>
 800cab4:	0800aa29 	.word	0x0800aa29

0800cab8 <__malloc_lock>:
 800cab8:	4801      	ldr	r0, [pc, #4]	; (800cac0 <__malloc_lock+0x8>)
 800caba:	f7fe b8ac 	b.w	800ac16 <__retarget_lock_acquire_recursive>
 800cabe:	bf00      	nop
 800cac0:	20005098 	.word	0x20005098

0800cac4 <__malloc_unlock>:
 800cac4:	4801      	ldr	r0, [pc, #4]	; (800cacc <__malloc_unlock+0x8>)
 800cac6:	f7fe b8a7 	b.w	800ac18 <__retarget_lock_release_recursive>
 800caca:	bf00      	nop
 800cacc:	20005098 	.word	0x20005098

0800cad0 <_Balloc>:
 800cad0:	b570      	push	{r4, r5, r6, lr}
 800cad2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cad4:	4604      	mov	r4, r0
 800cad6:	460d      	mov	r5, r1
 800cad8:	b976      	cbnz	r6, 800caf8 <_Balloc+0x28>
 800cada:	2010      	movs	r0, #16
 800cadc:	f7fe f89e 	bl	800ac1c <malloc>
 800cae0:	4602      	mov	r2, r0
 800cae2:	6260      	str	r0, [r4, #36]	; 0x24
 800cae4:	b920      	cbnz	r0, 800caf0 <_Balloc+0x20>
 800cae6:	4b18      	ldr	r3, [pc, #96]	; (800cb48 <_Balloc+0x78>)
 800cae8:	4818      	ldr	r0, [pc, #96]	; (800cb4c <_Balloc+0x7c>)
 800caea:	2166      	movs	r1, #102	; 0x66
 800caec:	f000 fcf6 	bl	800d4dc <__assert_func>
 800caf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800caf4:	6006      	str	r6, [r0, #0]
 800caf6:	60c6      	str	r6, [r0, #12]
 800caf8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cafa:	68f3      	ldr	r3, [r6, #12]
 800cafc:	b183      	cbz	r3, 800cb20 <_Balloc+0x50>
 800cafe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb00:	68db      	ldr	r3, [r3, #12]
 800cb02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb06:	b9b8      	cbnz	r0, 800cb38 <_Balloc+0x68>
 800cb08:	2101      	movs	r1, #1
 800cb0a:	fa01 f605 	lsl.w	r6, r1, r5
 800cb0e:	1d72      	adds	r2, r6, #5
 800cb10:	0092      	lsls	r2, r2, #2
 800cb12:	4620      	mov	r0, r4
 800cb14:	f000 fb60 	bl	800d1d8 <_calloc_r>
 800cb18:	b160      	cbz	r0, 800cb34 <_Balloc+0x64>
 800cb1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb1e:	e00e      	b.n	800cb3e <_Balloc+0x6e>
 800cb20:	2221      	movs	r2, #33	; 0x21
 800cb22:	2104      	movs	r1, #4
 800cb24:	4620      	mov	r0, r4
 800cb26:	f000 fb57 	bl	800d1d8 <_calloc_r>
 800cb2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb2c:	60f0      	str	r0, [r6, #12]
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1e4      	bne.n	800cafe <_Balloc+0x2e>
 800cb34:	2000      	movs	r0, #0
 800cb36:	bd70      	pop	{r4, r5, r6, pc}
 800cb38:	6802      	ldr	r2, [r0, #0]
 800cb3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb3e:	2300      	movs	r3, #0
 800cb40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb44:	e7f7      	b.n	800cb36 <_Balloc+0x66>
 800cb46:	bf00      	nop
 800cb48:	0800da55 	.word	0x0800da55
 800cb4c:	0800dad8 	.word	0x0800dad8

0800cb50 <_Bfree>:
 800cb50:	b570      	push	{r4, r5, r6, lr}
 800cb52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb54:	4605      	mov	r5, r0
 800cb56:	460c      	mov	r4, r1
 800cb58:	b976      	cbnz	r6, 800cb78 <_Bfree+0x28>
 800cb5a:	2010      	movs	r0, #16
 800cb5c:	f7fe f85e 	bl	800ac1c <malloc>
 800cb60:	4602      	mov	r2, r0
 800cb62:	6268      	str	r0, [r5, #36]	; 0x24
 800cb64:	b920      	cbnz	r0, 800cb70 <_Bfree+0x20>
 800cb66:	4b09      	ldr	r3, [pc, #36]	; (800cb8c <_Bfree+0x3c>)
 800cb68:	4809      	ldr	r0, [pc, #36]	; (800cb90 <_Bfree+0x40>)
 800cb6a:	218a      	movs	r1, #138	; 0x8a
 800cb6c:	f000 fcb6 	bl	800d4dc <__assert_func>
 800cb70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb74:	6006      	str	r6, [r0, #0]
 800cb76:	60c6      	str	r6, [r0, #12]
 800cb78:	b13c      	cbz	r4, 800cb8a <_Bfree+0x3a>
 800cb7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cb7c:	6862      	ldr	r2, [r4, #4]
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb84:	6021      	str	r1, [r4, #0]
 800cb86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb8a:	bd70      	pop	{r4, r5, r6, pc}
 800cb8c:	0800da55 	.word	0x0800da55
 800cb90:	0800dad8 	.word	0x0800dad8

0800cb94 <__multadd>:
 800cb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb98:	690d      	ldr	r5, [r1, #16]
 800cb9a:	4607      	mov	r7, r0
 800cb9c:	460c      	mov	r4, r1
 800cb9e:	461e      	mov	r6, r3
 800cba0:	f101 0c14 	add.w	ip, r1, #20
 800cba4:	2000      	movs	r0, #0
 800cba6:	f8dc 3000 	ldr.w	r3, [ip]
 800cbaa:	b299      	uxth	r1, r3
 800cbac:	fb02 6101 	mla	r1, r2, r1, r6
 800cbb0:	0c1e      	lsrs	r6, r3, #16
 800cbb2:	0c0b      	lsrs	r3, r1, #16
 800cbb4:	fb02 3306 	mla	r3, r2, r6, r3
 800cbb8:	b289      	uxth	r1, r1
 800cbba:	3001      	adds	r0, #1
 800cbbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cbc0:	4285      	cmp	r5, r0
 800cbc2:	f84c 1b04 	str.w	r1, [ip], #4
 800cbc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cbca:	dcec      	bgt.n	800cba6 <__multadd+0x12>
 800cbcc:	b30e      	cbz	r6, 800cc12 <__multadd+0x7e>
 800cbce:	68a3      	ldr	r3, [r4, #8]
 800cbd0:	42ab      	cmp	r3, r5
 800cbd2:	dc19      	bgt.n	800cc08 <__multadd+0x74>
 800cbd4:	6861      	ldr	r1, [r4, #4]
 800cbd6:	4638      	mov	r0, r7
 800cbd8:	3101      	adds	r1, #1
 800cbda:	f7ff ff79 	bl	800cad0 <_Balloc>
 800cbde:	4680      	mov	r8, r0
 800cbe0:	b928      	cbnz	r0, 800cbee <__multadd+0x5a>
 800cbe2:	4602      	mov	r2, r0
 800cbe4:	4b0c      	ldr	r3, [pc, #48]	; (800cc18 <__multadd+0x84>)
 800cbe6:	480d      	ldr	r0, [pc, #52]	; (800cc1c <__multadd+0x88>)
 800cbe8:	21b5      	movs	r1, #181	; 0xb5
 800cbea:	f000 fc77 	bl	800d4dc <__assert_func>
 800cbee:	6922      	ldr	r2, [r4, #16]
 800cbf0:	3202      	adds	r2, #2
 800cbf2:	f104 010c 	add.w	r1, r4, #12
 800cbf6:	0092      	lsls	r2, r2, #2
 800cbf8:	300c      	adds	r0, #12
 800cbfa:	f7fe f817 	bl	800ac2c <memcpy>
 800cbfe:	4621      	mov	r1, r4
 800cc00:	4638      	mov	r0, r7
 800cc02:	f7ff ffa5 	bl	800cb50 <_Bfree>
 800cc06:	4644      	mov	r4, r8
 800cc08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc0c:	3501      	adds	r5, #1
 800cc0e:	615e      	str	r6, [r3, #20]
 800cc10:	6125      	str	r5, [r4, #16]
 800cc12:	4620      	mov	r0, r4
 800cc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc18:	0800dac7 	.word	0x0800dac7
 800cc1c:	0800dad8 	.word	0x0800dad8

0800cc20 <__hi0bits>:
 800cc20:	0c03      	lsrs	r3, r0, #16
 800cc22:	041b      	lsls	r3, r3, #16
 800cc24:	b9d3      	cbnz	r3, 800cc5c <__hi0bits+0x3c>
 800cc26:	0400      	lsls	r0, r0, #16
 800cc28:	2310      	movs	r3, #16
 800cc2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cc2e:	bf04      	itt	eq
 800cc30:	0200      	lsleq	r0, r0, #8
 800cc32:	3308      	addeq	r3, #8
 800cc34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cc38:	bf04      	itt	eq
 800cc3a:	0100      	lsleq	r0, r0, #4
 800cc3c:	3304      	addeq	r3, #4
 800cc3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cc42:	bf04      	itt	eq
 800cc44:	0080      	lsleq	r0, r0, #2
 800cc46:	3302      	addeq	r3, #2
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	db05      	blt.n	800cc58 <__hi0bits+0x38>
 800cc4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cc50:	f103 0301 	add.w	r3, r3, #1
 800cc54:	bf08      	it	eq
 800cc56:	2320      	moveq	r3, #32
 800cc58:	4618      	mov	r0, r3
 800cc5a:	4770      	bx	lr
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	e7e4      	b.n	800cc2a <__hi0bits+0xa>

0800cc60 <__lo0bits>:
 800cc60:	6803      	ldr	r3, [r0, #0]
 800cc62:	f013 0207 	ands.w	r2, r3, #7
 800cc66:	4601      	mov	r1, r0
 800cc68:	d00b      	beq.n	800cc82 <__lo0bits+0x22>
 800cc6a:	07da      	lsls	r2, r3, #31
 800cc6c:	d423      	bmi.n	800ccb6 <__lo0bits+0x56>
 800cc6e:	0798      	lsls	r0, r3, #30
 800cc70:	bf49      	itett	mi
 800cc72:	085b      	lsrmi	r3, r3, #1
 800cc74:	089b      	lsrpl	r3, r3, #2
 800cc76:	2001      	movmi	r0, #1
 800cc78:	600b      	strmi	r3, [r1, #0]
 800cc7a:	bf5c      	itt	pl
 800cc7c:	600b      	strpl	r3, [r1, #0]
 800cc7e:	2002      	movpl	r0, #2
 800cc80:	4770      	bx	lr
 800cc82:	b298      	uxth	r0, r3
 800cc84:	b9a8      	cbnz	r0, 800ccb2 <__lo0bits+0x52>
 800cc86:	0c1b      	lsrs	r3, r3, #16
 800cc88:	2010      	movs	r0, #16
 800cc8a:	b2da      	uxtb	r2, r3
 800cc8c:	b90a      	cbnz	r2, 800cc92 <__lo0bits+0x32>
 800cc8e:	3008      	adds	r0, #8
 800cc90:	0a1b      	lsrs	r3, r3, #8
 800cc92:	071a      	lsls	r2, r3, #28
 800cc94:	bf04      	itt	eq
 800cc96:	091b      	lsreq	r3, r3, #4
 800cc98:	3004      	addeq	r0, #4
 800cc9a:	079a      	lsls	r2, r3, #30
 800cc9c:	bf04      	itt	eq
 800cc9e:	089b      	lsreq	r3, r3, #2
 800cca0:	3002      	addeq	r0, #2
 800cca2:	07da      	lsls	r2, r3, #31
 800cca4:	d403      	bmi.n	800ccae <__lo0bits+0x4e>
 800cca6:	085b      	lsrs	r3, r3, #1
 800cca8:	f100 0001 	add.w	r0, r0, #1
 800ccac:	d005      	beq.n	800ccba <__lo0bits+0x5a>
 800ccae:	600b      	str	r3, [r1, #0]
 800ccb0:	4770      	bx	lr
 800ccb2:	4610      	mov	r0, r2
 800ccb4:	e7e9      	b.n	800cc8a <__lo0bits+0x2a>
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	4770      	bx	lr
 800ccba:	2020      	movs	r0, #32
 800ccbc:	4770      	bx	lr
	...

0800ccc0 <__i2b>:
 800ccc0:	b510      	push	{r4, lr}
 800ccc2:	460c      	mov	r4, r1
 800ccc4:	2101      	movs	r1, #1
 800ccc6:	f7ff ff03 	bl	800cad0 <_Balloc>
 800ccca:	4602      	mov	r2, r0
 800cccc:	b928      	cbnz	r0, 800ccda <__i2b+0x1a>
 800ccce:	4b05      	ldr	r3, [pc, #20]	; (800cce4 <__i2b+0x24>)
 800ccd0:	4805      	ldr	r0, [pc, #20]	; (800cce8 <__i2b+0x28>)
 800ccd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ccd6:	f000 fc01 	bl	800d4dc <__assert_func>
 800ccda:	2301      	movs	r3, #1
 800ccdc:	6144      	str	r4, [r0, #20]
 800ccde:	6103      	str	r3, [r0, #16]
 800cce0:	bd10      	pop	{r4, pc}
 800cce2:	bf00      	nop
 800cce4:	0800dac7 	.word	0x0800dac7
 800cce8:	0800dad8 	.word	0x0800dad8

0800ccec <__multiply>:
 800ccec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf0:	4691      	mov	r9, r2
 800ccf2:	690a      	ldr	r2, [r1, #16]
 800ccf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	bfb8      	it	lt
 800ccfc:	460b      	movlt	r3, r1
 800ccfe:	460c      	mov	r4, r1
 800cd00:	bfbc      	itt	lt
 800cd02:	464c      	movlt	r4, r9
 800cd04:	4699      	movlt	r9, r3
 800cd06:	6927      	ldr	r7, [r4, #16]
 800cd08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cd0c:	68a3      	ldr	r3, [r4, #8]
 800cd0e:	6861      	ldr	r1, [r4, #4]
 800cd10:	eb07 060a 	add.w	r6, r7, sl
 800cd14:	42b3      	cmp	r3, r6
 800cd16:	b085      	sub	sp, #20
 800cd18:	bfb8      	it	lt
 800cd1a:	3101      	addlt	r1, #1
 800cd1c:	f7ff fed8 	bl	800cad0 <_Balloc>
 800cd20:	b930      	cbnz	r0, 800cd30 <__multiply+0x44>
 800cd22:	4602      	mov	r2, r0
 800cd24:	4b44      	ldr	r3, [pc, #272]	; (800ce38 <__multiply+0x14c>)
 800cd26:	4845      	ldr	r0, [pc, #276]	; (800ce3c <__multiply+0x150>)
 800cd28:	f240 115d 	movw	r1, #349	; 0x15d
 800cd2c:	f000 fbd6 	bl	800d4dc <__assert_func>
 800cd30:	f100 0514 	add.w	r5, r0, #20
 800cd34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd38:	462b      	mov	r3, r5
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	4543      	cmp	r3, r8
 800cd3e:	d321      	bcc.n	800cd84 <__multiply+0x98>
 800cd40:	f104 0314 	add.w	r3, r4, #20
 800cd44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cd48:	f109 0314 	add.w	r3, r9, #20
 800cd4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cd50:	9202      	str	r2, [sp, #8]
 800cd52:	1b3a      	subs	r2, r7, r4
 800cd54:	3a15      	subs	r2, #21
 800cd56:	f022 0203 	bic.w	r2, r2, #3
 800cd5a:	3204      	adds	r2, #4
 800cd5c:	f104 0115 	add.w	r1, r4, #21
 800cd60:	428f      	cmp	r7, r1
 800cd62:	bf38      	it	cc
 800cd64:	2204      	movcc	r2, #4
 800cd66:	9201      	str	r2, [sp, #4]
 800cd68:	9a02      	ldr	r2, [sp, #8]
 800cd6a:	9303      	str	r3, [sp, #12]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d80c      	bhi.n	800cd8a <__multiply+0x9e>
 800cd70:	2e00      	cmp	r6, #0
 800cd72:	dd03      	ble.n	800cd7c <__multiply+0x90>
 800cd74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d05a      	beq.n	800ce32 <__multiply+0x146>
 800cd7c:	6106      	str	r6, [r0, #16]
 800cd7e:	b005      	add	sp, #20
 800cd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd84:	f843 2b04 	str.w	r2, [r3], #4
 800cd88:	e7d8      	b.n	800cd3c <__multiply+0x50>
 800cd8a:	f8b3 a000 	ldrh.w	sl, [r3]
 800cd8e:	f1ba 0f00 	cmp.w	sl, #0
 800cd92:	d024      	beq.n	800cdde <__multiply+0xf2>
 800cd94:	f104 0e14 	add.w	lr, r4, #20
 800cd98:	46a9      	mov	r9, r5
 800cd9a:	f04f 0c00 	mov.w	ip, #0
 800cd9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cda2:	f8d9 1000 	ldr.w	r1, [r9]
 800cda6:	fa1f fb82 	uxth.w	fp, r2
 800cdaa:	b289      	uxth	r1, r1
 800cdac:	fb0a 110b 	mla	r1, sl, fp, r1
 800cdb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cdb4:	f8d9 2000 	ldr.w	r2, [r9]
 800cdb8:	4461      	add	r1, ip
 800cdba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cdbe:	fb0a c20b 	mla	r2, sl, fp, ip
 800cdc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cdc6:	b289      	uxth	r1, r1
 800cdc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cdcc:	4577      	cmp	r7, lr
 800cdce:	f849 1b04 	str.w	r1, [r9], #4
 800cdd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cdd6:	d8e2      	bhi.n	800cd9e <__multiply+0xb2>
 800cdd8:	9a01      	ldr	r2, [sp, #4]
 800cdda:	f845 c002 	str.w	ip, [r5, r2]
 800cdde:	9a03      	ldr	r2, [sp, #12]
 800cde0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cde4:	3304      	adds	r3, #4
 800cde6:	f1b9 0f00 	cmp.w	r9, #0
 800cdea:	d020      	beq.n	800ce2e <__multiply+0x142>
 800cdec:	6829      	ldr	r1, [r5, #0]
 800cdee:	f104 0c14 	add.w	ip, r4, #20
 800cdf2:	46ae      	mov	lr, r5
 800cdf4:	f04f 0a00 	mov.w	sl, #0
 800cdf8:	f8bc b000 	ldrh.w	fp, [ip]
 800cdfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ce00:	fb09 220b 	mla	r2, r9, fp, r2
 800ce04:	4492      	add	sl, r2
 800ce06:	b289      	uxth	r1, r1
 800ce08:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ce0c:	f84e 1b04 	str.w	r1, [lr], #4
 800ce10:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ce14:	f8be 1000 	ldrh.w	r1, [lr]
 800ce18:	0c12      	lsrs	r2, r2, #16
 800ce1a:	fb09 1102 	mla	r1, r9, r2, r1
 800ce1e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ce22:	4567      	cmp	r7, ip
 800ce24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce28:	d8e6      	bhi.n	800cdf8 <__multiply+0x10c>
 800ce2a:	9a01      	ldr	r2, [sp, #4]
 800ce2c:	50a9      	str	r1, [r5, r2]
 800ce2e:	3504      	adds	r5, #4
 800ce30:	e79a      	b.n	800cd68 <__multiply+0x7c>
 800ce32:	3e01      	subs	r6, #1
 800ce34:	e79c      	b.n	800cd70 <__multiply+0x84>
 800ce36:	bf00      	nop
 800ce38:	0800dac7 	.word	0x0800dac7
 800ce3c:	0800dad8 	.word	0x0800dad8

0800ce40 <__pow5mult>:
 800ce40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce44:	4615      	mov	r5, r2
 800ce46:	f012 0203 	ands.w	r2, r2, #3
 800ce4a:	4606      	mov	r6, r0
 800ce4c:	460f      	mov	r7, r1
 800ce4e:	d007      	beq.n	800ce60 <__pow5mult+0x20>
 800ce50:	4c25      	ldr	r4, [pc, #148]	; (800cee8 <__pow5mult+0xa8>)
 800ce52:	3a01      	subs	r2, #1
 800ce54:	2300      	movs	r3, #0
 800ce56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce5a:	f7ff fe9b 	bl	800cb94 <__multadd>
 800ce5e:	4607      	mov	r7, r0
 800ce60:	10ad      	asrs	r5, r5, #2
 800ce62:	d03d      	beq.n	800cee0 <__pow5mult+0xa0>
 800ce64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ce66:	b97c      	cbnz	r4, 800ce88 <__pow5mult+0x48>
 800ce68:	2010      	movs	r0, #16
 800ce6a:	f7fd fed7 	bl	800ac1c <malloc>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	6270      	str	r0, [r6, #36]	; 0x24
 800ce72:	b928      	cbnz	r0, 800ce80 <__pow5mult+0x40>
 800ce74:	4b1d      	ldr	r3, [pc, #116]	; (800ceec <__pow5mult+0xac>)
 800ce76:	481e      	ldr	r0, [pc, #120]	; (800cef0 <__pow5mult+0xb0>)
 800ce78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ce7c:	f000 fb2e 	bl	800d4dc <__assert_func>
 800ce80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce84:	6004      	str	r4, [r0, #0]
 800ce86:	60c4      	str	r4, [r0, #12]
 800ce88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ce8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce90:	b94c      	cbnz	r4, 800cea6 <__pow5mult+0x66>
 800ce92:	f240 2171 	movw	r1, #625	; 0x271
 800ce96:	4630      	mov	r0, r6
 800ce98:	f7ff ff12 	bl	800ccc0 <__i2b>
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cea2:	4604      	mov	r4, r0
 800cea4:	6003      	str	r3, [r0, #0]
 800cea6:	f04f 0900 	mov.w	r9, #0
 800ceaa:	07eb      	lsls	r3, r5, #31
 800ceac:	d50a      	bpl.n	800cec4 <__pow5mult+0x84>
 800ceae:	4639      	mov	r1, r7
 800ceb0:	4622      	mov	r2, r4
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	f7ff ff1a 	bl	800ccec <__multiply>
 800ceb8:	4639      	mov	r1, r7
 800ceba:	4680      	mov	r8, r0
 800cebc:	4630      	mov	r0, r6
 800cebe:	f7ff fe47 	bl	800cb50 <_Bfree>
 800cec2:	4647      	mov	r7, r8
 800cec4:	106d      	asrs	r5, r5, #1
 800cec6:	d00b      	beq.n	800cee0 <__pow5mult+0xa0>
 800cec8:	6820      	ldr	r0, [r4, #0]
 800ceca:	b938      	cbnz	r0, 800cedc <__pow5mult+0x9c>
 800cecc:	4622      	mov	r2, r4
 800cece:	4621      	mov	r1, r4
 800ced0:	4630      	mov	r0, r6
 800ced2:	f7ff ff0b 	bl	800ccec <__multiply>
 800ced6:	6020      	str	r0, [r4, #0]
 800ced8:	f8c0 9000 	str.w	r9, [r0]
 800cedc:	4604      	mov	r4, r0
 800cede:	e7e4      	b.n	800ceaa <__pow5mult+0x6a>
 800cee0:	4638      	mov	r0, r7
 800cee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cee6:	bf00      	nop
 800cee8:	0800dc28 	.word	0x0800dc28
 800ceec:	0800da55 	.word	0x0800da55
 800cef0:	0800dad8 	.word	0x0800dad8

0800cef4 <__lshift>:
 800cef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cef8:	460c      	mov	r4, r1
 800cefa:	6849      	ldr	r1, [r1, #4]
 800cefc:	6923      	ldr	r3, [r4, #16]
 800cefe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf02:	68a3      	ldr	r3, [r4, #8]
 800cf04:	4607      	mov	r7, r0
 800cf06:	4691      	mov	r9, r2
 800cf08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf0c:	f108 0601 	add.w	r6, r8, #1
 800cf10:	42b3      	cmp	r3, r6
 800cf12:	db0b      	blt.n	800cf2c <__lshift+0x38>
 800cf14:	4638      	mov	r0, r7
 800cf16:	f7ff fddb 	bl	800cad0 <_Balloc>
 800cf1a:	4605      	mov	r5, r0
 800cf1c:	b948      	cbnz	r0, 800cf32 <__lshift+0x3e>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	4b2a      	ldr	r3, [pc, #168]	; (800cfcc <__lshift+0xd8>)
 800cf22:	482b      	ldr	r0, [pc, #172]	; (800cfd0 <__lshift+0xdc>)
 800cf24:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cf28:	f000 fad8 	bl	800d4dc <__assert_func>
 800cf2c:	3101      	adds	r1, #1
 800cf2e:	005b      	lsls	r3, r3, #1
 800cf30:	e7ee      	b.n	800cf10 <__lshift+0x1c>
 800cf32:	2300      	movs	r3, #0
 800cf34:	f100 0114 	add.w	r1, r0, #20
 800cf38:	f100 0210 	add.w	r2, r0, #16
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	4553      	cmp	r3, sl
 800cf40:	db37      	blt.n	800cfb2 <__lshift+0xbe>
 800cf42:	6920      	ldr	r0, [r4, #16]
 800cf44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf48:	f104 0314 	add.w	r3, r4, #20
 800cf4c:	f019 091f 	ands.w	r9, r9, #31
 800cf50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cf58:	d02f      	beq.n	800cfba <__lshift+0xc6>
 800cf5a:	f1c9 0e20 	rsb	lr, r9, #32
 800cf5e:	468a      	mov	sl, r1
 800cf60:	f04f 0c00 	mov.w	ip, #0
 800cf64:	681a      	ldr	r2, [r3, #0]
 800cf66:	fa02 f209 	lsl.w	r2, r2, r9
 800cf6a:	ea42 020c 	orr.w	r2, r2, ip
 800cf6e:	f84a 2b04 	str.w	r2, [sl], #4
 800cf72:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf76:	4298      	cmp	r0, r3
 800cf78:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cf7c:	d8f2      	bhi.n	800cf64 <__lshift+0x70>
 800cf7e:	1b03      	subs	r3, r0, r4
 800cf80:	3b15      	subs	r3, #21
 800cf82:	f023 0303 	bic.w	r3, r3, #3
 800cf86:	3304      	adds	r3, #4
 800cf88:	f104 0215 	add.w	r2, r4, #21
 800cf8c:	4290      	cmp	r0, r2
 800cf8e:	bf38      	it	cc
 800cf90:	2304      	movcc	r3, #4
 800cf92:	f841 c003 	str.w	ip, [r1, r3]
 800cf96:	f1bc 0f00 	cmp.w	ip, #0
 800cf9a:	d001      	beq.n	800cfa0 <__lshift+0xac>
 800cf9c:	f108 0602 	add.w	r6, r8, #2
 800cfa0:	3e01      	subs	r6, #1
 800cfa2:	4638      	mov	r0, r7
 800cfa4:	612e      	str	r6, [r5, #16]
 800cfa6:	4621      	mov	r1, r4
 800cfa8:	f7ff fdd2 	bl	800cb50 <_Bfree>
 800cfac:	4628      	mov	r0, r5
 800cfae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	e7c1      	b.n	800cf3e <__lshift+0x4a>
 800cfba:	3904      	subs	r1, #4
 800cfbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800cfc4:	4298      	cmp	r0, r3
 800cfc6:	d8f9      	bhi.n	800cfbc <__lshift+0xc8>
 800cfc8:	e7ea      	b.n	800cfa0 <__lshift+0xac>
 800cfca:	bf00      	nop
 800cfcc:	0800dac7 	.word	0x0800dac7
 800cfd0:	0800dad8 	.word	0x0800dad8

0800cfd4 <__mcmp>:
 800cfd4:	b530      	push	{r4, r5, lr}
 800cfd6:	6902      	ldr	r2, [r0, #16]
 800cfd8:	690c      	ldr	r4, [r1, #16]
 800cfda:	1b12      	subs	r2, r2, r4
 800cfdc:	d10e      	bne.n	800cffc <__mcmp+0x28>
 800cfde:	f100 0314 	add.w	r3, r0, #20
 800cfe2:	3114      	adds	r1, #20
 800cfe4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cfe8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cfec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cff0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cff4:	42a5      	cmp	r5, r4
 800cff6:	d003      	beq.n	800d000 <__mcmp+0x2c>
 800cff8:	d305      	bcc.n	800d006 <__mcmp+0x32>
 800cffa:	2201      	movs	r2, #1
 800cffc:	4610      	mov	r0, r2
 800cffe:	bd30      	pop	{r4, r5, pc}
 800d000:	4283      	cmp	r3, r0
 800d002:	d3f3      	bcc.n	800cfec <__mcmp+0x18>
 800d004:	e7fa      	b.n	800cffc <__mcmp+0x28>
 800d006:	f04f 32ff 	mov.w	r2, #4294967295
 800d00a:	e7f7      	b.n	800cffc <__mcmp+0x28>

0800d00c <__mdiff>:
 800d00c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d010:	460c      	mov	r4, r1
 800d012:	4606      	mov	r6, r0
 800d014:	4611      	mov	r1, r2
 800d016:	4620      	mov	r0, r4
 800d018:	4690      	mov	r8, r2
 800d01a:	f7ff ffdb 	bl	800cfd4 <__mcmp>
 800d01e:	1e05      	subs	r5, r0, #0
 800d020:	d110      	bne.n	800d044 <__mdiff+0x38>
 800d022:	4629      	mov	r1, r5
 800d024:	4630      	mov	r0, r6
 800d026:	f7ff fd53 	bl	800cad0 <_Balloc>
 800d02a:	b930      	cbnz	r0, 800d03a <__mdiff+0x2e>
 800d02c:	4b3a      	ldr	r3, [pc, #232]	; (800d118 <__mdiff+0x10c>)
 800d02e:	4602      	mov	r2, r0
 800d030:	f240 2132 	movw	r1, #562	; 0x232
 800d034:	4839      	ldr	r0, [pc, #228]	; (800d11c <__mdiff+0x110>)
 800d036:	f000 fa51 	bl	800d4dc <__assert_func>
 800d03a:	2301      	movs	r3, #1
 800d03c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d044:	bfa4      	itt	ge
 800d046:	4643      	movge	r3, r8
 800d048:	46a0      	movge	r8, r4
 800d04a:	4630      	mov	r0, r6
 800d04c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d050:	bfa6      	itte	ge
 800d052:	461c      	movge	r4, r3
 800d054:	2500      	movge	r5, #0
 800d056:	2501      	movlt	r5, #1
 800d058:	f7ff fd3a 	bl	800cad0 <_Balloc>
 800d05c:	b920      	cbnz	r0, 800d068 <__mdiff+0x5c>
 800d05e:	4b2e      	ldr	r3, [pc, #184]	; (800d118 <__mdiff+0x10c>)
 800d060:	4602      	mov	r2, r0
 800d062:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d066:	e7e5      	b.n	800d034 <__mdiff+0x28>
 800d068:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d06c:	6926      	ldr	r6, [r4, #16]
 800d06e:	60c5      	str	r5, [r0, #12]
 800d070:	f104 0914 	add.w	r9, r4, #20
 800d074:	f108 0514 	add.w	r5, r8, #20
 800d078:	f100 0e14 	add.w	lr, r0, #20
 800d07c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d080:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d084:	f108 0210 	add.w	r2, r8, #16
 800d088:	46f2      	mov	sl, lr
 800d08a:	2100      	movs	r1, #0
 800d08c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d090:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d094:	fa1f f883 	uxth.w	r8, r3
 800d098:	fa11 f18b 	uxtah	r1, r1, fp
 800d09c:	0c1b      	lsrs	r3, r3, #16
 800d09e:	eba1 0808 	sub.w	r8, r1, r8
 800d0a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d0a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d0aa:	fa1f f888 	uxth.w	r8, r8
 800d0ae:	1419      	asrs	r1, r3, #16
 800d0b0:	454e      	cmp	r6, r9
 800d0b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d0b6:	f84a 3b04 	str.w	r3, [sl], #4
 800d0ba:	d8e7      	bhi.n	800d08c <__mdiff+0x80>
 800d0bc:	1b33      	subs	r3, r6, r4
 800d0be:	3b15      	subs	r3, #21
 800d0c0:	f023 0303 	bic.w	r3, r3, #3
 800d0c4:	3304      	adds	r3, #4
 800d0c6:	3415      	adds	r4, #21
 800d0c8:	42a6      	cmp	r6, r4
 800d0ca:	bf38      	it	cc
 800d0cc:	2304      	movcc	r3, #4
 800d0ce:	441d      	add	r5, r3
 800d0d0:	4473      	add	r3, lr
 800d0d2:	469e      	mov	lr, r3
 800d0d4:	462e      	mov	r6, r5
 800d0d6:	4566      	cmp	r6, ip
 800d0d8:	d30e      	bcc.n	800d0f8 <__mdiff+0xec>
 800d0da:	f10c 0203 	add.w	r2, ip, #3
 800d0de:	1b52      	subs	r2, r2, r5
 800d0e0:	f022 0203 	bic.w	r2, r2, #3
 800d0e4:	3d03      	subs	r5, #3
 800d0e6:	45ac      	cmp	ip, r5
 800d0e8:	bf38      	it	cc
 800d0ea:	2200      	movcc	r2, #0
 800d0ec:	441a      	add	r2, r3
 800d0ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d0f2:	b17b      	cbz	r3, 800d114 <__mdiff+0x108>
 800d0f4:	6107      	str	r7, [r0, #16]
 800d0f6:	e7a3      	b.n	800d040 <__mdiff+0x34>
 800d0f8:	f856 8b04 	ldr.w	r8, [r6], #4
 800d0fc:	fa11 f288 	uxtah	r2, r1, r8
 800d100:	1414      	asrs	r4, r2, #16
 800d102:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d106:	b292      	uxth	r2, r2
 800d108:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d10c:	f84e 2b04 	str.w	r2, [lr], #4
 800d110:	1421      	asrs	r1, r4, #16
 800d112:	e7e0      	b.n	800d0d6 <__mdiff+0xca>
 800d114:	3f01      	subs	r7, #1
 800d116:	e7ea      	b.n	800d0ee <__mdiff+0xe2>
 800d118:	0800dac7 	.word	0x0800dac7
 800d11c:	0800dad8 	.word	0x0800dad8

0800d120 <__d2b>:
 800d120:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d124:	4689      	mov	r9, r1
 800d126:	2101      	movs	r1, #1
 800d128:	ec57 6b10 	vmov	r6, r7, d0
 800d12c:	4690      	mov	r8, r2
 800d12e:	f7ff fccf 	bl	800cad0 <_Balloc>
 800d132:	4604      	mov	r4, r0
 800d134:	b930      	cbnz	r0, 800d144 <__d2b+0x24>
 800d136:	4602      	mov	r2, r0
 800d138:	4b25      	ldr	r3, [pc, #148]	; (800d1d0 <__d2b+0xb0>)
 800d13a:	4826      	ldr	r0, [pc, #152]	; (800d1d4 <__d2b+0xb4>)
 800d13c:	f240 310a 	movw	r1, #778	; 0x30a
 800d140:	f000 f9cc 	bl	800d4dc <__assert_func>
 800d144:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d148:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d14c:	bb35      	cbnz	r5, 800d19c <__d2b+0x7c>
 800d14e:	2e00      	cmp	r6, #0
 800d150:	9301      	str	r3, [sp, #4]
 800d152:	d028      	beq.n	800d1a6 <__d2b+0x86>
 800d154:	4668      	mov	r0, sp
 800d156:	9600      	str	r6, [sp, #0]
 800d158:	f7ff fd82 	bl	800cc60 <__lo0bits>
 800d15c:	9900      	ldr	r1, [sp, #0]
 800d15e:	b300      	cbz	r0, 800d1a2 <__d2b+0x82>
 800d160:	9a01      	ldr	r2, [sp, #4]
 800d162:	f1c0 0320 	rsb	r3, r0, #32
 800d166:	fa02 f303 	lsl.w	r3, r2, r3
 800d16a:	430b      	orrs	r3, r1
 800d16c:	40c2      	lsrs	r2, r0
 800d16e:	6163      	str	r3, [r4, #20]
 800d170:	9201      	str	r2, [sp, #4]
 800d172:	9b01      	ldr	r3, [sp, #4]
 800d174:	61a3      	str	r3, [r4, #24]
 800d176:	2b00      	cmp	r3, #0
 800d178:	bf14      	ite	ne
 800d17a:	2202      	movne	r2, #2
 800d17c:	2201      	moveq	r2, #1
 800d17e:	6122      	str	r2, [r4, #16]
 800d180:	b1d5      	cbz	r5, 800d1b8 <__d2b+0x98>
 800d182:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d186:	4405      	add	r5, r0
 800d188:	f8c9 5000 	str.w	r5, [r9]
 800d18c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d190:	f8c8 0000 	str.w	r0, [r8]
 800d194:	4620      	mov	r0, r4
 800d196:	b003      	add	sp, #12
 800d198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d19c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1a0:	e7d5      	b.n	800d14e <__d2b+0x2e>
 800d1a2:	6161      	str	r1, [r4, #20]
 800d1a4:	e7e5      	b.n	800d172 <__d2b+0x52>
 800d1a6:	a801      	add	r0, sp, #4
 800d1a8:	f7ff fd5a 	bl	800cc60 <__lo0bits>
 800d1ac:	9b01      	ldr	r3, [sp, #4]
 800d1ae:	6163      	str	r3, [r4, #20]
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	6122      	str	r2, [r4, #16]
 800d1b4:	3020      	adds	r0, #32
 800d1b6:	e7e3      	b.n	800d180 <__d2b+0x60>
 800d1b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d1bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d1c0:	f8c9 0000 	str.w	r0, [r9]
 800d1c4:	6918      	ldr	r0, [r3, #16]
 800d1c6:	f7ff fd2b 	bl	800cc20 <__hi0bits>
 800d1ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d1ce:	e7df      	b.n	800d190 <__d2b+0x70>
 800d1d0:	0800dac7 	.word	0x0800dac7
 800d1d4:	0800dad8 	.word	0x0800dad8

0800d1d8 <_calloc_r>:
 800d1d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1da:	fba1 2402 	umull	r2, r4, r1, r2
 800d1de:	b94c      	cbnz	r4, 800d1f4 <_calloc_r+0x1c>
 800d1e0:	4611      	mov	r1, r2
 800d1e2:	9201      	str	r2, [sp, #4]
 800d1e4:	f7fd fda4 	bl	800ad30 <_malloc_r>
 800d1e8:	9a01      	ldr	r2, [sp, #4]
 800d1ea:	4605      	mov	r5, r0
 800d1ec:	b930      	cbnz	r0, 800d1fc <_calloc_r+0x24>
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	b003      	add	sp, #12
 800d1f2:	bd30      	pop	{r4, r5, pc}
 800d1f4:	220c      	movs	r2, #12
 800d1f6:	6002      	str	r2, [r0, #0]
 800d1f8:	2500      	movs	r5, #0
 800d1fa:	e7f8      	b.n	800d1ee <_calloc_r+0x16>
 800d1fc:	4621      	mov	r1, r4
 800d1fe:	f7fd fd23 	bl	800ac48 <memset>
 800d202:	e7f4      	b.n	800d1ee <_calloc_r+0x16>

0800d204 <__sfputc_r>:
 800d204:	6893      	ldr	r3, [r2, #8]
 800d206:	3b01      	subs	r3, #1
 800d208:	2b00      	cmp	r3, #0
 800d20a:	b410      	push	{r4}
 800d20c:	6093      	str	r3, [r2, #8]
 800d20e:	da08      	bge.n	800d222 <__sfputc_r+0x1e>
 800d210:	6994      	ldr	r4, [r2, #24]
 800d212:	42a3      	cmp	r3, r4
 800d214:	db01      	blt.n	800d21a <__sfputc_r+0x16>
 800d216:	290a      	cmp	r1, #10
 800d218:	d103      	bne.n	800d222 <__sfputc_r+0x1e>
 800d21a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d21e:	f7fe bbb1 	b.w	800b984 <__swbuf_r>
 800d222:	6813      	ldr	r3, [r2, #0]
 800d224:	1c58      	adds	r0, r3, #1
 800d226:	6010      	str	r0, [r2, #0]
 800d228:	7019      	strb	r1, [r3, #0]
 800d22a:	4608      	mov	r0, r1
 800d22c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d230:	4770      	bx	lr

0800d232 <__sfputs_r>:
 800d232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d234:	4606      	mov	r6, r0
 800d236:	460f      	mov	r7, r1
 800d238:	4614      	mov	r4, r2
 800d23a:	18d5      	adds	r5, r2, r3
 800d23c:	42ac      	cmp	r4, r5
 800d23e:	d101      	bne.n	800d244 <__sfputs_r+0x12>
 800d240:	2000      	movs	r0, #0
 800d242:	e007      	b.n	800d254 <__sfputs_r+0x22>
 800d244:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d248:	463a      	mov	r2, r7
 800d24a:	4630      	mov	r0, r6
 800d24c:	f7ff ffda 	bl	800d204 <__sfputc_r>
 800d250:	1c43      	adds	r3, r0, #1
 800d252:	d1f3      	bne.n	800d23c <__sfputs_r+0xa>
 800d254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d258 <_vfiprintf_r>:
 800d258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d25c:	460d      	mov	r5, r1
 800d25e:	b09d      	sub	sp, #116	; 0x74
 800d260:	4614      	mov	r4, r2
 800d262:	4698      	mov	r8, r3
 800d264:	4606      	mov	r6, r0
 800d266:	b118      	cbz	r0, 800d270 <_vfiprintf_r+0x18>
 800d268:	6983      	ldr	r3, [r0, #24]
 800d26a:	b90b      	cbnz	r3, 800d270 <_vfiprintf_r+0x18>
 800d26c:	f7fd fc10 	bl	800aa90 <__sinit>
 800d270:	4b89      	ldr	r3, [pc, #548]	; (800d498 <_vfiprintf_r+0x240>)
 800d272:	429d      	cmp	r5, r3
 800d274:	d11b      	bne.n	800d2ae <_vfiprintf_r+0x56>
 800d276:	6875      	ldr	r5, [r6, #4]
 800d278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d27a:	07d9      	lsls	r1, r3, #31
 800d27c:	d405      	bmi.n	800d28a <_vfiprintf_r+0x32>
 800d27e:	89ab      	ldrh	r3, [r5, #12]
 800d280:	059a      	lsls	r2, r3, #22
 800d282:	d402      	bmi.n	800d28a <_vfiprintf_r+0x32>
 800d284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d286:	f7fd fcc6 	bl	800ac16 <__retarget_lock_acquire_recursive>
 800d28a:	89ab      	ldrh	r3, [r5, #12]
 800d28c:	071b      	lsls	r3, r3, #28
 800d28e:	d501      	bpl.n	800d294 <_vfiprintf_r+0x3c>
 800d290:	692b      	ldr	r3, [r5, #16]
 800d292:	b9eb      	cbnz	r3, 800d2d0 <_vfiprintf_r+0x78>
 800d294:	4629      	mov	r1, r5
 800d296:	4630      	mov	r0, r6
 800d298:	f7fe fbd8 	bl	800ba4c <__swsetup_r>
 800d29c:	b1c0      	cbz	r0, 800d2d0 <_vfiprintf_r+0x78>
 800d29e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2a0:	07dc      	lsls	r4, r3, #31
 800d2a2:	d50e      	bpl.n	800d2c2 <_vfiprintf_r+0x6a>
 800d2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a8:	b01d      	add	sp, #116	; 0x74
 800d2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ae:	4b7b      	ldr	r3, [pc, #492]	; (800d49c <_vfiprintf_r+0x244>)
 800d2b0:	429d      	cmp	r5, r3
 800d2b2:	d101      	bne.n	800d2b8 <_vfiprintf_r+0x60>
 800d2b4:	68b5      	ldr	r5, [r6, #8]
 800d2b6:	e7df      	b.n	800d278 <_vfiprintf_r+0x20>
 800d2b8:	4b79      	ldr	r3, [pc, #484]	; (800d4a0 <_vfiprintf_r+0x248>)
 800d2ba:	429d      	cmp	r5, r3
 800d2bc:	bf08      	it	eq
 800d2be:	68f5      	ldreq	r5, [r6, #12]
 800d2c0:	e7da      	b.n	800d278 <_vfiprintf_r+0x20>
 800d2c2:	89ab      	ldrh	r3, [r5, #12]
 800d2c4:	0598      	lsls	r0, r3, #22
 800d2c6:	d4ed      	bmi.n	800d2a4 <_vfiprintf_r+0x4c>
 800d2c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2ca:	f7fd fca5 	bl	800ac18 <__retarget_lock_release_recursive>
 800d2ce:	e7e9      	b.n	800d2a4 <_vfiprintf_r+0x4c>
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d2d4:	2320      	movs	r3, #32
 800d2d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2da:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2de:	2330      	movs	r3, #48	; 0x30
 800d2e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d4a4 <_vfiprintf_r+0x24c>
 800d2e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2e8:	f04f 0901 	mov.w	r9, #1
 800d2ec:	4623      	mov	r3, r4
 800d2ee:	469a      	mov	sl, r3
 800d2f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2f4:	b10a      	cbz	r2, 800d2fa <_vfiprintf_r+0xa2>
 800d2f6:	2a25      	cmp	r2, #37	; 0x25
 800d2f8:	d1f9      	bne.n	800d2ee <_vfiprintf_r+0x96>
 800d2fa:	ebba 0b04 	subs.w	fp, sl, r4
 800d2fe:	d00b      	beq.n	800d318 <_vfiprintf_r+0xc0>
 800d300:	465b      	mov	r3, fp
 800d302:	4622      	mov	r2, r4
 800d304:	4629      	mov	r1, r5
 800d306:	4630      	mov	r0, r6
 800d308:	f7ff ff93 	bl	800d232 <__sfputs_r>
 800d30c:	3001      	adds	r0, #1
 800d30e:	f000 80aa 	beq.w	800d466 <_vfiprintf_r+0x20e>
 800d312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d314:	445a      	add	r2, fp
 800d316:	9209      	str	r2, [sp, #36]	; 0x24
 800d318:	f89a 3000 	ldrb.w	r3, [sl]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	f000 80a2 	beq.w	800d466 <_vfiprintf_r+0x20e>
 800d322:	2300      	movs	r3, #0
 800d324:	f04f 32ff 	mov.w	r2, #4294967295
 800d328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d32c:	f10a 0a01 	add.w	sl, sl, #1
 800d330:	9304      	str	r3, [sp, #16]
 800d332:	9307      	str	r3, [sp, #28]
 800d334:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d338:	931a      	str	r3, [sp, #104]	; 0x68
 800d33a:	4654      	mov	r4, sl
 800d33c:	2205      	movs	r2, #5
 800d33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d342:	4858      	ldr	r0, [pc, #352]	; (800d4a4 <_vfiprintf_r+0x24c>)
 800d344:	f7f2 ff6c 	bl	8000220 <memchr>
 800d348:	9a04      	ldr	r2, [sp, #16]
 800d34a:	b9d8      	cbnz	r0, 800d384 <_vfiprintf_r+0x12c>
 800d34c:	06d1      	lsls	r1, r2, #27
 800d34e:	bf44      	itt	mi
 800d350:	2320      	movmi	r3, #32
 800d352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d356:	0713      	lsls	r3, r2, #28
 800d358:	bf44      	itt	mi
 800d35a:	232b      	movmi	r3, #43	; 0x2b
 800d35c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d360:	f89a 3000 	ldrb.w	r3, [sl]
 800d364:	2b2a      	cmp	r3, #42	; 0x2a
 800d366:	d015      	beq.n	800d394 <_vfiprintf_r+0x13c>
 800d368:	9a07      	ldr	r2, [sp, #28]
 800d36a:	4654      	mov	r4, sl
 800d36c:	2000      	movs	r0, #0
 800d36e:	f04f 0c0a 	mov.w	ip, #10
 800d372:	4621      	mov	r1, r4
 800d374:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d378:	3b30      	subs	r3, #48	; 0x30
 800d37a:	2b09      	cmp	r3, #9
 800d37c:	d94e      	bls.n	800d41c <_vfiprintf_r+0x1c4>
 800d37e:	b1b0      	cbz	r0, 800d3ae <_vfiprintf_r+0x156>
 800d380:	9207      	str	r2, [sp, #28]
 800d382:	e014      	b.n	800d3ae <_vfiprintf_r+0x156>
 800d384:	eba0 0308 	sub.w	r3, r0, r8
 800d388:	fa09 f303 	lsl.w	r3, r9, r3
 800d38c:	4313      	orrs	r3, r2
 800d38e:	9304      	str	r3, [sp, #16]
 800d390:	46a2      	mov	sl, r4
 800d392:	e7d2      	b.n	800d33a <_vfiprintf_r+0xe2>
 800d394:	9b03      	ldr	r3, [sp, #12]
 800d396:	1d19      	adds	r1, r3, #4
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	9103      	str	r1, [sp, #12]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	bfbb      	ittet	lt
 800d3a0:	425b      	neglt	r3, r3
 800d3a2:	f042 0202 	orrlt.w	r2, r2, #2
 800d3a6:	9307      	strge	r3, [sp, #28]
 800d3a8:	9307      	strlt	r3, [sp, #28]
 800d3aa:	bfb8      	it	lt
 800d3ac:	9204      	strlt	r2, [sp, #16]
 800d3ae:	7823      	ldrb	r3, [r4, #0]
 800d3b0:	2b2e      	cmp	r3, #46	; 0x2e
 800d3b2:	d10c      	bne.n	800d3ce <_vfiprintf_r+0x176>
 800d3b4:	7863      	ldrb	r3, [r4, #1]
 800d3b6:	2b2a      	cmp	r3, #42	; 0x2a
 800d3b8:	d135      	bne.n	800d426 <_vfiprintf_r+0x1ce>
 800d3ba:	9b03      	ldr	r3, [sp, #12]
 800d3bc:	1d1a      	adds	r2, r3, #4
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	9203      	str	r2, [sp, #12]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	bfb8      	it	lt
 800d3c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3ca:	3402      	adds	r4, #2
 800d3cc:	9305      	str	r3, [sp, #20]
 800d3ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d4b4 <_vfiprintf_r+0x25c>
 800d3d2:	7821      	ldrb	r1, [r4, #0]
 800d3d4:	2203      	movs	r2, #3
 800d3d6:	4650      	mov	r0, sl
 800d3d8:	f7f2 ff22 	bl	8000220 <memchr>
 800d3dc:	b140      	cbz	r0, 800d3f0 <_vfiprintf_r+0x198>
 800d3de:	2340      	movs	r3, #64	; 0x40
 800d3e0:	eba0 000a 	sub.w	r0, r0, sl
 800d3e4:	fa03 f000 	lsl.w	r0, r3, r0
 800d3e8:	9b04      	ldr	r3, [sp, #16]
 800d3ea:	4303      	orrs	r3, r0
 800d3ec:	3401      	adds	r4, #1
 800d3ee:	9304      	str	r3, [sp, #16]
 800d3f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3f4:	482c      	ldr	r0, [pc, #176]	; (800d4a8 <_vfiprintf_r+0x250>)
 800d3f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3fa:	2206      	movs	r2, #6
 800d3fc:	f7f2 ff10 	bl	8000220 <memchr>
 800d400:	2800      	cmp	r0, #0
 800d402:	d03f      	beq.n	800d484 <_vfiprintf_r+0x22c>
 800d404:	4b29      	ldr	r3, [pc, #164]	; (800d4ac <_vfiprintf_r+0x254>)
 800d406:	bb1b      	cbnz	r3, 800d450 <_vfiprintf_r+0x1f8>
 800d408:	9b03      	ldr	r3, [sp, #12]
 800d40a:	3307      	adds	r3, #7
 800d40c:	f023 0307 	bic.w	r3, r3, #7
 800d410:	3308      	adds	r3, #8
 800d412:	9303      	str	r3, [sp, #12]
 800d414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d416:	443b      	add	r3, r7
 800d418:	9309      	str	r3, [sp, #36]	; 0x24
 800d41a:	e767      	b.n	800d2ec <_vfiprintf_r+0x94>
 800d41c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d420:	460c      	mov	r4, r1
 800d422:	2001      	movs	r0, #1
 800d424:	e7a5      	b.n	800d372 <_vfiprintf_r+0x11a>
 800d426:	2300      	movs	r3, #0
 800d428:	3401      	adds	r4, #1
 800d42a:	9305      	str	r3, [sp, #20]
 800d42c:	4619      	mov	r1, r3
 800d42e:	f04f 0c0a 	mov.w	ip, #10
 800d432:	4620      	mov	r0, r4
 800d434:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d438:	3a30      	subs	r2, #48	; 0x30
 800d43a:	2a09      	cmp	r2, #9
 800d43c:	d903      	bls.n	800d446 <_vfiprintf_r+0x1ee>
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d0c5      	beq.n	800d3ce <_vfiprintf_r+0x176>
 800d442:	9105      	str	r1, [sp, #20]
 800d444:	e7c3      	b.n	800d3ce <_vfiprintf_r+0x176>
 800d446:	fb0c 2101 	mla	r1, ip, r1, r2
 800d44a:	4604      	mov	r4, r0
 800d44c:	2301      	movs	r3, #1
 800d44e:	e7f0      	b.n	800d432 <_vfiprintf_r+0x1da>
 800d450:	ab03      	add	r3, sp, #12
 800d452:	9300      	str	r3, [sp, #0]
 800d454:	462a      	mov	r2, r5
 800d456:	4b16      	ldr	r3, [pc, #88]	; (800d4b0 <_vfiprintf_r+0x258>)
 800d458:	a904      	add	r1, sp, #16
 800d45a:	4630      	mov	r0, r6
 800d45c:	f7fd fd7c 	bl	800af58 <_printf_float>
 800d460:	4607      	mov	r7, r0
 800d462:	1c78      	adds	r0, r7, #1
 800d464:	d1d6      	bne.n	800d414 <_vfiprintf_r+0x1bc>
 800d466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d468:	07d9      	lsls	r1, r3, #31
 800d46a:	d405      	bmi.n	800d478 <_vfiprintf_r+0x220>
 800d46c:	89ab      	ldrh	r3, [r5, #12]
 800d46e:	059a      	lsls	r2, r3, #22
 800d470:	d402      	bmi.n	800d478 <_vfiprintf_r+0x220>
 800d472:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d474:	f7fd fbd0 	bl	800ac18 <__retarget_lock_release_recursive>
 800d478:	89ab      	ldrh	r3, [r5, #12]
 800d47a:	065b      	lsls	r3, r3, #25
 800d47c:	f53f af12 	bmi.w	800d2a4 <_vfiprintf_r+0x4c>
 800d480:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d482:	e711      	b.n	800d2a8 <_vfiprintf_r+0x50>
 800d484:	ab03      	add	r3, sp, #12
 800d486:	9300      	str	r3, [sp, #0]
 800d488:	462a      	mov	r2, r5
 800d48a:	4b09      	ldr	r3, [pc, #36]	; (800d4b0 <_vfiprintf_r+0x258>)
 800d48c:	a904      	add	r1, sp, #16
 800d48e:	4630      	mov	r0, r6
 800d490:	f7fe f806 	bl	800b4a0 <_printf_i>
 800d494:	e7e4      	b.n	800d460 <_vfiprintf_r+0x208>
 800d496:	bf00      	nop
 800d498:	0800d9d0 	.word	0x0800d9d0
 800d49c:	0800d9f0 	.word	0x0800d9f0
 800d4a0:	0800d9b0 	.word	0x0800d9b0
 800d4a4:	0800dc34 	.word	0x0800dc34
 800d4a8:	0800dc3e 	.word	0x0800dc3e
 800d4ac:	0800af59 	.word	0x0800af59
 800d4b0:	0800d233 	.word	0x0800d233
 800d4b4:	0800dc3a 	.word	0x0800dc3a

0800d4b8 <_read_r>:
 800d4b8:	b538      	push	{r3, r4, r5, lr}
 800d4ba:	4d07      	ldr	r5, [pc, #28]	; (800d4d8 <_read_r+0x20>)
 800d4bc:	4604      	mov	r4, r0
 800d4be:	4608      	mov	r0, r1
 800d4c0:	4611      	mov	r1, r2
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	602a      	str	r2, [r5, #0]
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	f7f4 f844 	bl	8001554 <_read>
 800d4cc:	1c43      	adds	r3, r0, #1
 800d4ce:	d102      	bne.n	800d4d6 <_read_r+0x1e>
 800d4d0:	682b      	ldr	r3, [r5, #0]
 800d4d2:	b103      	cbz	r3, 800d4d6 <_read_r+0x1e>
 800d4d4:	6023      	str	r3, [r4, #0]
 800d4d6:	bd38      	pop	{r3, r4, r5, pc}
 800d4d8:	200050a4 	.word	0x200050a4

0800d4dc <__assert_func>:
 800d4dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4de:	4614      	mov	r4, r2
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	4b09      	ldr	r3, [pc, #36]	; (800d508 <__assert_func+0x2c>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	4605      	mov	r5, r0
 800d4e8:	68d8      	ldr	r0, [r3, #12]
 800d4ea:	b14c      	cbz	r4, 800d500 <__assert_func+0x24>
 800d4ec:	4b07      	ldr	r3, [pc, #28]	; (800d50c <__assert_func+0x30>)
 800d4ee:	9100      	str	r1, [sp, #0]
 800d4f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d4f4:	4906      	ldr	r1, [pc, #24]	; (800d510 <__assert_func+0x34>)
 800d4f6:	462b      	mov	r3, r5
 800d4f8:	f000 f80e 	bl	800d518 <fiprintf>
 800d4fc:	f000 f85f 	bl	800d5be <abort>
 800d500:	4b04      	ldr	r3, [pc, #16]	; (800d514 <__assert_func+0x38>)
 800d502:	461c      	mov	r4, r3
 800d504:	e7f3      	b.n	800d4ee <__assert_func+0x12>
 800d506:	bf00      	nop
 800d508:	20000010 	.word	0x20000010
 800d50c:	0800dc45 	.word	0x0800dc45
 800d510:	0800dc52 	.word	0x0800dc52
 800d514:	0800dc80 	.word	0x0800dc80

0800d518 <fiprintf>:
 800d518:	b40e      	push	{r1, r2, r3}
 800d51a:	b503      	push	{r0, r1, lr}
 800d51c:	4601      	mov	r1, r0
 800d51e:	ab03      	add	r3, sp, #12
 800d520:	4805      	ldr	r0, [pc, #20]	; (800d538 <fiprintf+0x20>)
 800d522:	f853 2b04 	ldr.w	r2, [r3], #4
 800d526:	6800      	ldr	r0, [r0, #0]
 800d528:	9301      	str	r3, [sp, #4]
 800d52a:	f7ff fe95 	bl	800d258 <_vfiprintf_r>
 800d52e:	b002      	add	sp, #8
 800d530:	f85d eb04 	ldr.w	lr, [sp], #4
 800d534:	b003      	add	sp, #12
 800d536:	4770      	bx	lr
 800d538:	20000010 	.word	0x20000010

0800d53c <_fstat_r>:
 800d53c:	b538      	push	{r3, r4, r5, lr}
 800d53e:	4d07      	ldr	r5, [pc, #28]	; (800d55c <_fstat_r+0x20>)
 800d540:	2300      	movs	r3, #0
 800d542:	4604      	mov	r4, r0
 800d544:	4608      	mov	r0, r1
 800d546:	4611      	mov	r1, r2
 800d548:	602b      	str	r3, [r5, #0]
 800d54a:	f7f4 f848 	bl	80015de <_fstat>
 800d54e:	1c43      	adds	r3, r0, #1
 800d550:	d102      	bne.n	800d558 <_fstat_r+0x1c>
 800d552:	682b      	ldr	r3, [r5, #0]
 800d554:	b103      	cbz	r3, 800d558 <_fstat_r+0x1c>
 800d556:	6023      	str	r3, [r4, #0]
 800d558:	bd38      	pop	{r3, r4, r5, pc}
 800d55a:	bf00      	nop
 800d55c:	200050a4 	.word	0x200050a4

0800d560 <_isatty_r>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	4d06      	ldr	r5, [pc, #24]	; (800d57c <_isatty_r+0x1c>)
 800d564:	2300      	movs	r3, #0
 800d566:	4604      	mov	r4, r0
 800d568:	4608      	mov	r0, r1
 800d56a:	602b      	str	r3, [r5, #0]
 800d56c:	f7f4 f847 	bl	80015fe <_isatty>
 800d570:	1c43      	adds	r3, r0, #1
 800d572:	d102      	bne.n	800d57a <_isatty_r+0x1a>
 800d574:	682b      	ldr	r3, [r5, #0]
 800d576:	b103      	cbz	r3, 800d57a <_isatty_r+0x1a>
 800d578:	6023      	str	r3, [r4, #0]
 800d57a:	bd38      	pop	{r3, r4, r5, pc}
 800d57c:	200050a4 	.word	0x200050a4

0800d580 <__ascii_mbtowc>:
 800d580:	b082      	sub	sp, #8
 800d582:	b901      	cbnz	r1, 800d586 <__ascii_mbtowc+0x6>
 800d584:	a901      	add	r1, sp, #4
 800d586:	b142      	cbz	r2, 800d59a <__ascii_mbtowc+0x1a>
 800d588:	b14b      	cbz	r3, 800d59e <__ascii_mbtowc+0x1e>
 800d58a:	7813      	ldrb	r3, [r2, #0]
 800d58c:	600b      	str	r3, [r1, #0]
 800d58e:	7812      	ldrb	r2, [r2, #0]
 800d590:	1e10      	subs	r0, r2, #0
 800d592:	bf18      	it	ne
 800d594:	2001      	movne	r0, #1
 800d596:	b002      	add	sp, #8
 800d598:	4770      	bx	lr
 800d59a:	4610      	mov	r0, r2
 800d59c:	e7fb      	b.n	800d596 <__ascii_mbtowc+0x16>
 800d59e:	f06f 0001 	mvn.w	r0, #1
 800d5a2:	e7f8      	b.n	800d596 <__ascii_mbtowc+0x16>

0800d5a4 <__ascii_wctomb>:
 800d5a4:	b149      	cbz	r1, 800d5ba <__ascii_wctomb+0x16>
 800d5a6:	2aff      	cmp	r2, #255	; 0xff
 800d5a8:	bf85      	ittet	hi
 800d5aa:	238a      	movhi	r3, #138	; 0x8a
 800d5ac:	6003      	strhi	r3, [r0, #0]
 800d5ae:	700a      	strbls	r2, [r1, #0]
 800d5b0:	f04f 30ff 	movhi.w	r0, #4294967295
 800d5b4:	bf98      	it	ls
 800d5b6:	2001      	movls	r0, #1
 800d5b8:	4770      	bx	lr
 800d5ba:	4608      	mov	r0, r1
 800d5bc:	4770      	bx	lr

0800d5be <abort>:
 800d5be:	b508      	push	{r3, lr}
 800d5c0:	2006      	movs	r0, #6
 800d5c2:	f000 f82b 	bl	800d61c <raise>
 800d5c6:	2001      	movs	r0, #1
 800d5c8:	f7f3 ffba 	bl	8001540 <_exit>

0800d5cc <_raise_r>:
 800d5cc:	291f      	cmp	r1, #31
 800d5ce:	b538      	push	{r3, r4, r5, lr}
 800d5d0:	4604      	mov	r4, r0
 800d5d2:	460d      	mov	r5, r1
 800d5d4:	d904      	bls.n	800d5e0 <_raise_r+0x14>
 800d5d6:	2316      	movs	r3, #22
 800d5d8:	6003      	str	r3, [r0, #0]
 800d5da:	f04f 30ff 	mov.w	r0, #4294967295
 800d5de:	bd38      	pop	{r3, r4, r5, pc}
 800d5e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d5e2:	b112      	cbz	r2, 800d5ea <_raise_r+0x1e>
 800d5e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5e8:	b94b      	cbnz	r3, 800d5fe <_raise_r+0x32>
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	f000 f830 	bl	800d650 <_getpid_r>
 800d5f0:	462a      	mov	r2, r5
 800d5f2:	4601      	mov	r1, r0
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5fa:	f000 b817 	b.w	800d62c <_kill_r>
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d00a      	beq.n	800d618 <_raise_r+0x4c>
 800d602:	1c59      	adds	r1, r3, #1
 800d604:	d103      	bne.n	800d60e <_raise_r+0x42>
 800d606:	2316      	movs	r3, #22
 800d608:	6003      	str	r3, [r0, #0]
 800d60a:	2001      	movs	r0, #1
 800d60c:	e7e7      	b.n	800d5de <_raise_r+0x12>
 800d60e:	2400      	movs	r4, #0
 800d610:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d614:	4628      	mov	r0, r5
 800d616:	4798      	blx	r3
 800d618:	2000      	movs	r0, #0
 800d61a:	e7e0      	b.n	800d5de <_raise_r+0x12>

0800d61c <raise>:
 800d61c:	4b02      	ldr	r3, [pc, #8]	; (800d628 <raise+0xc>)
 800d61e:	4601      	mov	r1, r0
 800d620:	6818      	ldr	r0, [r3, #0]
 800d622:	f7ff bfd3 	b.w	800d5cc <_raise_r>
 800d626:	bf00      	nop
 800d628:	20000010 	.word	0x20000010

0800d62c <_kill_r>:
 800d62c:	b538      	push	{r3, r4, r5, lr}
 800d62e:	4d07      	ldr	r5, [pc, #28]	; (800d64c <_kill_r+0x20>)
 800d630:	2300      	movs	r3, #0
 800d632:	4604      	mov	r4, r0
 800d634:	4608      	mov	r0, r1
 800d636:	4611      	mov	r1, r2
 800d638:	602b      	str	r3, [r5, #0]
 800d63a:	f7f3 ff71 	bl	8001520 <_kill>
 800d63e:	1c43      	adds	r3, r0, #1
 800d640:	d102      	bne.n	800d648 <_kill_r+0x1c>
 800d642:	682b      	ldr	r3, [r5, #0]
 800d644:	b103      	cbz	r3, 800d648 <_kill_r+0x1c>
 800d646:	6023      	str	r3, [r4, #0]
 800d648:	bd38      	pop	{r3, r4, r5, pc}
 800d64a:	bf00      	nop
 800d64c:	200050a4 	.word	0x200050a4

0800d650 <_getpid_r>:
 800d650:	f7f3 bf5e 	b.w	8001510 <_getpid>

0800d654 <_init>:
 800d654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d656:	bf00      	nop
 800d658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d65a:	bc08      	pop	{r3}
 800d65c:	469e      	mov	lr, r3
 800d65e:	4770      	bx	lr

0800d660 <_fini>:
 800d660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d662:	bf00      	nop
 800d664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d666:	bc08      	pop	{r3}
 800d668:	469e      	mov	lr, r3
 800d66a:	4770      	bx	lr
