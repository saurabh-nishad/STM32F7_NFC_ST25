
F7_NFC_Ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800c6a0  0800c6a0  0001c6a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cafc  0800cafc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cafc  0800cafc  0001cafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb04  0800cb04  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb04  0800cb04  0001cb04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb08  0800cb08  0001cb08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cb0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f2c  200001e0  0800ccec  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000510c  0800ccec  0002510c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b8ab  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056f3  00000000  00000000  0004babb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f50  00000000  00000000  000511b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d18  00000000  00000000  00053100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e01a  00000000  00000000  00054e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000286de  00000000  00000000  00082e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010930e  00000000  00000000  000ab510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b481e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093dc  00000000  00000000  001b4870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c684 	.word	0x0800c684

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800c684 	.word	0x0800c684

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <green_color_printf>:

static inline void red_color_printf(void) {
	printf("\033[0;31m");
}

static inline void green_color_printf(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	printf("\033[0;32m");
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <green_color_printf+0x10>)
 8000ef2:	f009 fc13 	bl	800a71c <iprintf>
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	0800c6a0 	.word	0x0800c6a0

08000f00 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <MX_FREERTOS_Init+0x18>)
 8000f06:	2100      	movs	r1, #0
 8000f08:	4804      	ldr	r0, [pc, #16]	; (8000f1c <MX_FREERTOS_Init+0x1c>)
 8000f0a:	f005 fe9f 	bl	8006c4c <osThreadNew>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a03      	ldr	r2, [pc, #12]	; (8000f20 <MX_FREERTOS_Init+0x20>)
 8000f12:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	0800c6e4 	.word	0x0800c6e4
 8000f1c:	08000f25 	.word	0x08000f25
 8000f20:	200002ac 	.word	0x200002ac

08000f24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(NFC_LED1_TF_GPIO_Port, NFC_LED1_TF_Pin);
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4819      	ldr	r0, [pc, #100]	; (8000f94 <StartDefaultTask+0x70>)
 8000f30:	f001 fa1d 	bl	800236e <HAL_GPIO_TogglePin>
	  osDelay(80);
 8000f34:	2050      	movs	r0, #80	; 0x50
 8000f36:	f005 ff2f 	bl	8006d98 <osDelay>
	  HAL_GPIO_TogglePin(NFC_LED2_TB_GPIO_Port, NFC_LED2_TB_Pin);
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	4815      	ldr	r0, [pc, #84]	; (8000f94 <StartDefaultTask+0x70>)
 8000f3e:	f001 fa16 	bl	800236e <HAL_GPIO_TogglePin>
	  osDelay(80);
 8000f42:	2050      	movs	r0, #80	; 0x50
 8000f44:	f005 ff28 	bl	8006d98 <osDelay>
	  HAL_GPIO_TogglePin(NFC_LED3_TA_GPIO_Port, NFC_LED3_TA_Pin);
 8000f48:	2108      	movs	r1, #8
 8000f4a:	4813      	ldr	r0, [pc, #76]	; (8000f98 <StartDefaultTask+0x74>)
 8000f4c:	f001 fa0f 	bl	800236e <HAL_GPIO_TogglePin>
	  osDelay(80);
 8000f50:	2050      	movs	r0, #80	; 0x50
 8000f52:	f005 ff21 	bl	8006d98 <osDelay>
	  HAL_GPIO_TogglePin(NFC_LED4_TV_GPIO_Port, NFC_LED4_TV_Pin);
 8000f56:	2120      	movs	r1, #32
 8000f58:	480f      	ldr	r0, [pc, #60]	; (8000f98 <StartDefaultTask+0x74>)
 8000f5a:	f001 fa08 	bl	800236e <HAL_GPIO_TogglePin>
	  osDelay(80);
 8000f5e:	2050      	movs	r0, #80	; 0x50
 8000f60:	f005 ff1a 	bl	8006d98 <osDelay>
	  HAL_GPIO_TogglePin(NFC_LED5_AP2P_GPIO_Port, NFC_LED5_AP2P_Pin);
 8000f64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <StartDefaultTask+0x74>)
 8000f6a:	f001 fa00 	bl	800236e <HAL_GPIO_TogglePin>
	  osDelay(80);
 8000f6e:	2050      	movs	r0, #80	; 0x50
 8000f70:	f005 ff12 	bl	8006d98 <osDelay>
	  HAL_GPIO_TogglePin(NFC_LED6_TX_GPIO_Port, NFC_LED6_TX_Pin);
 8000f74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f78:	4807      	ldr	r0, [pc, #28]	; (8000f98 <StartDefaultTask+0x74>)
 8000f7a:	f001 f9f8 	bl	800236e <HAL_GPIO_TogglePin>
	  green_color_printf();
 8000f7e:	f7ff ffb5 	bl	8000eec <green_color_printf>
	  printf("From default Task...\r\n");
 8000f82:	4806      	ldr	r0, [pc, #24]	; (8000f9c <StartDefaultTask+0x78>)
 8000f84:	f009 fc50 	bl	800a828 <puts>
	  osDelay(1000);
 8000f88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f8c:	f005 ff04 	bl	8006d98 <osDelay>
	  HAL_GPIO_TogglePin(NFC_LED1_TF_GPIO_Port, NFC_LED1_TF_Pin);
 8000f90:	e7cc      	b.n	8000f2c <StartDefaultTask+0x8>
 8000f92:	bf00      	nop
 8000f94:	40020800 	.word	0x40020800
 8000f98:	40021400 	.word	0x40021400
 8000f9c:	0800c6b4 	.word	0x0800c6b4

08000fa0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08c      	sub	sp, #48	; 0x30
 8000fa4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b7a      	ldr	r3, [pc, #488]	; (80011a0 <MX_GPIO_Init+0x200>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a79      	ldr	r2, [pc, #484]	; (80011a0 <MX_GPIO_Init+0x200>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b77      	ldr	r3, [pc, #476]	; (80011a0 <MX_GPIO_Init+0x200>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	61bb      	str	r3, [r7, #24]
 8000fcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fce:	4b74      	ldr	r3, [pc, #464]	; (80011a0 <MX_GPIO_Init+0x200>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a73      	ldr	r2, [pc, #460]	; (80011a0 <MX_GPIO_Init+0x200>)
 8000fd4:	f043 0320 	orr.w	r3, r3, #32
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b71      	ldr	r3, [pc, #452]	; (80011a0 <MX_GPIO_Init+0x200>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0320 	and.w	r3, r3, #32
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe6:	4b6e      	ldr	r3, [pc, #440]	; (80011a0 <MX_GPIO_Init+0x200>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a6d      	ldr	r2, [pc, #436]	; (80011a0 <MX_GPIO_Init+0x200>)
 8000fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b6b      	ldr	r3, [pc, #428]	; (80011a0 <MX_GPIO_Init+0x200>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b68      	ldr	r3, [pc, #416]	; (80011a0 <MX_GPIO_Init+0x200>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a67      	ldr	r2, [pc, #412]	; (80011a0 <MX_GPIO_Init+0x200>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b65      	ldr	r3, [pc, #404]	; (80011a0 <MX_GPIO_Init+0x200>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b62      	ldr	r3, [pc, #392]	; (80011a0 <MX_GPIO_Init+0x200>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a61      	ldr	r2, [pc, #388]	; (80011a0 <MX_GPIO_Init+0x200>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b5f      	ldr	r3, [pc, #380]	; (80011a0 <MX_GPIO_Init+0x200>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102e:	4b5c      	ldr	r3, [pc, #368]	; (80011a0 <MX_GPIO_Init+0x200>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a5b      	ldr	r2, [pc, #364]	; (80011a0 <MX_GPIO_Init+0x200>)
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b59      	ldr	r3, [pc, #356]	; (80011a0 <MX_GPIO_Init+0x200>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001046:	4b56      	ldr	r3, [pc, #344]	; (80011a0 <MX_GPIO_Init+0x200>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a55      	ldr	r2, [pc, #340]	; (80011a0 <MX_GPIO_Init+0x200>)
 800104c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b53      	ldr	r3, [pc, #332]	; (80011a0 <MX_GPIO_Init+0x200>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, NFC_LED3_TA_Pin|NFC_LED4_TV_Pin|NFC_LED5_AP2P_Pin|NFC_LED6_TX_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f242 4128 	movw	r1, #9256	; 0x2428
 8001064:	484f      	ldr	r0, [pc, #316]	; (80011a4 <MX_GPIO_Init+0x204>)
 8001066:	f001 f969 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NFC_LED1_TF_Pin|NFC_LED2_TB_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2109      	movs	r1, #9
 800106e:	484e      	ldr	r0, [pc, #312]	; (80011a8 <MX_GPIO_Init+0x208>)
 8001070:	f001 f964 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f244 0181 	movw	r1, #16513	; 0x4081
 800107a:	484c      	ldr	r0, [pc, #304]	; (80011ac <MX_GPIO_Init+0x20c>)
 800107c:	f001 f95e 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_SS_GPIO_Port, NFC_SS_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001086:	484a      	ldr	r0, [pc, #296]	; (80011b0 <MX_GPIO_Init+0x210>)
 8001088:	f001 f958 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2140      	movs	r1, #64	; 0x40
 8001090:	4848      	ldr	r0, [pc, #288]	; (80011b4 <MX_GPIO_Init+0x214>)
 8001092:	f001 f953 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800109a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800109c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	4619      	mov	r1, r3
 80010ac:	483e      	ldr	r0, [pc, #248]	; (80011a8 <MX_GPIO_Init+0x208>)
 80010ae:	f000 ff99 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = NFC_LED3_TA_Pin|NFC_LED4_TV_Pin|NFC_LED5_AP2P_Pin|NFC_LED6_TX_Pin;
 80010b2:	f242 4328 	movw	r3, #9256	; 0x2428
 80010b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	4836      	ldr	r0, [pc, #216]	; (80011a4 <MX_GPIO_Init+0x204>)
 80010cc:	f000 ff8a 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NFC_LED1_TF_Pin|NFC_LED2_TB_Pin;
 80010d0:	2309      	movs	r3, #9
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4619      	mov	r1, r3
 80010e6:	4830      	ldr	r0, [pc, #192]	; (80011a8 <MX_GPIO_Init+0x208>)
 80010e8:	f000 ff7c 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NFC_IRQ_Pin;
 80010ec:	2308      	movs	r3, #8
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NFC_IRQ_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	482d      	ldr	r0, [pc, #180]	; (80011b8 <MX_GPIO_Init+0x218>)
 8001102:	f000 ff6f 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001106:	f244 0381 	movw	r3, #16513	; 0x4081
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	4823      	ldr	r0, [pc, #140]	; (80011ac <MX_GPIO_Init+0x20c>)
 8001120:	f000 ff60 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NFC_SS_Pin;
 8001124:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NFC_SS_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	4619      	mov	r1, r3
 800113c:	481c      	ldr	r0, [pc, #112]	; (80011b0 <MX_GPIO_Init+0x210>)
 800113e:	f000 ff51 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001142:	2340      	movs	r3, #64	; 0x40
 8001144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	4816      	ldr	r0, [pc, #88]	; (80011b4 <MX_GPIO_Init+0x214>)
 800115a:	f000 ff43 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	4810      	ldr	r0, [pc, #64]	; (80011b4 <MX_GPIO_Init+0x214>)
 8001172:	f000 ff37 	bl	8001fe4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2105      	movs	r1, #5
 800117a:	2009      	movs	r0, #9
 800117c:	f000 fd82 	bl	8001c84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001180:	2009      	movs	r0, #9
 8001182:	f000 fd9b 	bl	8001cbc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2105      	movs	r1, #5
 800118a:	2028      	movs	r0, #40	; 0x28
 800118c:	f000 fd7a 	bl	8001c84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001190:	2028      	movs	r0, #40	; 0x28
 8001192:	f000 fd93 	bl	8001cbc <HAL_NVIC_EnableIRQ>

}
 8001196:	bf00      	nop
 8001198:	3730      	adds	r7, #48	; 0x30
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40021400 	.word	0x40021400
 80011a8:	40020800 	.word	0x40020800
 80011ac:	40020400 	.word	0x40020400
 80011b0:	40020c00 	.word	0x40020c00
 80011b4:	40021800 	.word	0x40021800
 80011b8:	40020000 	.word	0x40020000

080011bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	80fb      	strh	r3, [r7, #6]
#ifdef  USE_FULL_ASSERT
	assert_failed((uint8_t*)__FILE__,	(uint32_t)__LINE__);
#endif
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d6:	f000 fc6f 	bl	8001ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011da:	f000 f80d 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011de:	f7ff fedf 	bl	8000fa0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80011e2:	f000 faf7 	bl	80017d4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80011e6:	f000 f88d 	bl	8001304 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80011ea:	f005 fcc5 	bl	8006b78 <osKernelInitialize>
  MX_FREERTOS_Init();
 80011ee:	f7ff fe87 	bl	8000f00 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80011f2:	f005 fcf5 	bl	8006be0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <main+0x24>

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b094      	sub	sp, #80	; 0x50
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	2230      	movs	r2, #48	; 0x30
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f008 fd36 	bl	8009c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800121c:	f002 fb36 	bl	800388c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001220:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <SystemClock_Config+0xd4>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	4a29      	ldr	r2, [pc, #164]	; (80012cc <SystemClock_Config+0xd4>)
 8001226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122a:	6413      	str	r3, [r2, #64]	; 0x40
 800122c:	4b27      	ldr	r3, [pc, #156]	; (80012cc <SystemClock_Config+0xd4>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001238:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <SystemClock_Config+0xd8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a24      	ldr	r2, [pc, #144]	; (80012d0 <SystemClock_Config+0xd8>)
 800123e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <SystemClock_Config+0xd8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001250:	2301      	movs	r3, #1
 8001252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001254:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125a:	2302      	movs	r3, #2
 800125c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001264:	2304      	movs	r3, #4
 8001266:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001268:	23d8      	movs	r3, #216	; 0xd8
 800126a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126c:	2302      	movs	r3, #2
 800126e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001270:	2309      	movs	r3, #9
 8001272:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f107 0320 	add.w	r3, r7, #32
 8001278:	4618      	mov	r0, r3
 800127a:	f002 fb67 	bl	800394c <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001284:	f000 f838 	bl	80012f8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001288:	f002 fb10 	bl	80038ac <HAL_PWREx_EnableOverDrive>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001292:	f000 f831 	bl	80012f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001296:	230f      	movs	r3, #15
 8001298:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129a:	2302      	movs	r3, #2
 800129c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	2107      	movs	r1, #7
 80012b4:	4618      	mov	r0, r3
 80012b6:	f002 fded 	bl	8003e94 <HAL_RCC_ClockConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80012c0:	f000 f81a 	bl	80012f8 <Error_Handler>
  }
}
 80012c4:	bf00      	nop
 80012c6:	3750      	adds	r7, #80	; 0x50
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40007000 	.word	0x40007000

080012d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012e6:	f000 fbf5 	bl	8001ad4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40001000 	.word	0x40001000

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001300:	e7fe      	b.n	8001300 <Error_Handler+0x8>
	...

08001304 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <MX_SPI1_Init+0x74>)
 800130a:	4a1c      	ldr	r2, [pc, #112]	; (800137c <MX_SPI1_Init+0x78>)
 800130c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <MX_SPI1_Init+0x74>)
 8001310:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001314:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <MX_SPI1_Init+0x74>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <MX_SPI1_Init+0x74>)
 800131e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001322:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MX_SPI1_Init+0x74>)
 8001326:	2202      	movs	r2, #2
 8001328:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <MX_SPI1_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_SPI1_Init+0x74>)
 8001332:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001336:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_SPI1_Init+0x74>)
 800133a:	2208      	movs	r2, #8
 800133c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_SPI1_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_SPI1_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <MX_SPI1_Init+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_SPI1_Init+0x74>)
 8001352:	2207      	movs	r2, #7
 8001354:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MX_SPI1_Init+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_SPI1_Init+0x74>)
 800135e:	2208      	movs	r2, #8
 8001360:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_SPI1_Init+0x74>)
 8001364:	f003 fbde 	bl	8004b24 <HAL_SPI_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800136e:	f7ff ffc3 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200002b0 	.word	0x200002b0
 800137c:	40013000 	.word	0x40013000

08001380 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a29      	ldr	r2, [pc, #164]	; (8001444 <HAL_SPI_MspInit+0xc4>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d14b      	bne.n	800143a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013a2:	4b29      	ldr	r3, [pc, #164]	; (8001448 <HAL_SPI_MspInit+0xc8>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a28      	ldr	r2, [pc, #160]	; (8001448 <HAL_SPI_MspInit+0xc8>)
 80013a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b26      	ldr	r3, [pc, #152]	; (8001448 <HAL_SPI_MspInit+0xc8>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	4b23      	ldr	r3, [pc, #140]	; (8001448 <HAL_SPI_MspInit+0xc8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a22      	ldr	r2, [pc, #136]	; (8001448 <HAL_SPI_MspInit+0xc8>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b20      	ldr	r3, [pc, #128]	; (8001448 <HAL_SPI_MspInit+0xc8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <HAL_SPI_MspInit+0xc8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a1c      	ldr	r2, [pc, #112]	; (8001448 <HAL_SPI_MspInit+0xc8>)
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <HAL_SPI_MspInit+0xc8>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NFC_SCK_Pin|NFC_MISO_Pin;
 80013ea:	2360      	movs	r3, #96	; 0x60
 80013ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013fa:	2305      	movs	r3, #5
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	4811      	ldr	r0, [pc, #68]	; (800144c <HAL_SPI_MspInit+0xcc>)
 8001406:	f000 fded 	bl	8001fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NFC_MOSI_Pin;
 800140a:	2320      	movs	r3, #32
 800140c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001416:	2303      	movs	r3, #3
 8001418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800141a:	2305      	movs	r3, #5
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(NFC_MOSI_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	480a      	ldr	r0, [pc, #40]	; (8001450 <HAL_SPI_MspInit+0xd0>)
 8001426:	f000 fddd 	bl	8001fe4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2105      	movs	r1, #5
 800142e:	2023      	movs	r0, #35	; 0x23
 8001430:	f000 fc28 	bl	8001c84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001434:	2023      	movs	r0, #35	; 0x23
 8001436:	f000 fc41 	bl	8001cbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800143a:	bf00      	nop
 800143c:	3728      	adds	r7, #40	; 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40013000 	.word	0x40013000
 8001448:	40023800 	.word	0x40023800
 800144c:	40020000 	.word	0x40020000
 8001450:	40020400 	.word	0x40020400

08001454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_MspInit+0x4c>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <HAL_MspInit+0x4c>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_MspInit+0x4c>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_MspInit+0x4c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <HAL_MspInit+0x4c>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_MspInit+0x4c>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	210f      	movs	r1, #15
 800148e:	f06f 0001 	mvn.w	r0, #1
 8001492:	f000 fbf7 	bl	8001c84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800

080014a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08e      	sub	sp, #56	; 0x38
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014b4:	4b33      	ldr	r3, [pc, #204]	; (8001584 <HAL_InitTick+0xe0>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	4a32      	ldr	r2, [pc, #200]	; (8001584 <HAL_InitTick+0xe0>)
 80014ba:	f043 0310 	orr.w	r3, r3, #16
 80014be:	6413      	str	r3, [r2, #64]	; 0x40
 80014c0:	4b30      	ldr	r3, [pc, #192]	; (8001584 <HAL_InitTick+0xe0>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014cc:	f107 0210 	add.w	r2, r7, #16
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4611      	mov	r1, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 ff02 	bl	80042e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d103      	bne.n	80014ee <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014e6:	f002 fed3 	bl	8004290 <HAL_RCC_GetPCLK1Freq>
 80014ea:	6378      	str	r0, [r7, #52]	; 0x34
 80014ec:	e004      	b.n	80014f8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014ee:	f002 fecf 	bl	8004290 <HAL_RCC_GetPCLK1Freq>
 80014f2:	4603      	mov	r3, r0
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014fa:	4a23      	ldr	r2, [pc, #140]	; (8001588 <HAL_InitTick+0xe4>)
 80014fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001500:	0c9b      	lsrs	r3, r3, #18
 8001502:	3b01      	subs	r3, #1
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <HAL_InitTick+0xe8>)
 8001508:	4a21      	ldr	r2, [pc, #132]	; (8001590 <HAL_InitTick+0xec>)
 800150a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <HAL_InitTick+0xe8>)
 800150e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001512:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001514:	4a1d      	ldr	r2, [pc, #116]	; (800158c <HAL_InitTick+0xe8>)
 8001516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001518:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800151a:	4b1c      	ldr	r3, [pc, #112]	; (800158c <HAL_InitTick+0xe8>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <HAL_InitTick+0xe8>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_InitTick+0xe8>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800152c:	4817      	ldr	r0, [pc, #92]	; (800158c <HAL_InitTick+0xe8>)
 800152e:	f003 fcc4 	bl	8004eba <HAL_TIM_Base_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001538:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800153c:	2b00      	cmp	r3, #0
 800153e:	d11b      	bne.n	8001578 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001540:	4812      	ldr	r0, [pc, #72]	; (800158c <HAL_InitTick+0xe8>)
 8001542:	f003 fd1b 	bl	8004f7c <HAL_TIM_Base_Start_IT>
 8001546:	4603      	mov	r3, r0
 8001548:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800154c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001550:	2b00      	cmp	r3, #0
 8001552:	d111      	bne.n	8001578 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001554:	2036      	movs	r0, #54	; 0x36
 8001556:	f000 fbb1 	bl	8001cbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b0f      	cmp	r3, #15
 800155e:	d808      	bhi.n	8001572 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001560:	2200      	movs	r2, #0
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	2036      	movs	r0, #54	; 0x36
 8001566:	f000 fb8d 	bl	8001c84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <HAL_InitTick+0xf0>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	e002      	b.n	8001578 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001578:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800157c:	4618      	mov	r0, r3
 800157e:	3738      	adds	r7, #56	; 0x38
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40023800 	.word	0x40023800
 8001588:	431bde83 	.word	0x431bde83
 800158c:	20000314 	.word	0x20000314
 8001590:	40001000 	.word	0x40001000
 8001594:	20000004 	.word	0x20000004

08001598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800159c:	e7fe      	b.n	800159c <NMI_Handler+0x4>

0800159e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <HardFault_Handler+0x4>

080015a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <MemManage_Handler+0x4>

080015aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <BusFault_Handler+0x4>

080015b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <UsageFault_Handler+0x4>

080015b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_IRQ_Pin);
 80015c8:	2008      	movs	r0, #8
 80015ca:	f000 feeb 	bl	80023a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <SPI1_IRQHandler+0x10>)
 80015da:	f003 fb4f 	bl	8004c7c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200002b0 	.word	0x200002b0

080015e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <USART3_IRQHandler+0x10>)
 80015ee:	f004 f815 	bl	800561c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000364 	.word	0x20000364

080015fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001600:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001604:	f000 fece 	bl	80023a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}

0800160c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <TIM6_DAC_IRQHandler+0x10>)
 8001612:	f003 fd2b 	bl	800506c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000314 	.word	0x20000314

08001620 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <ETH_IRQHandler+0x10>)
 8001626:	f000 fbe9 	bl	8001dfc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200001fc 	.word	0x200001fc

08001634 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <OTG_FS_IRQHandler+0x10>)
 800163a:	f000 fecb 	bl	80023d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200003ec 	.word	0x200003ec

08001648 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return 1;
 800164c:	2301      	movs	r3, #1
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_kill>:

int _kill(int pid, int sig)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001662:	f008 f9cf 	bl	8009a04 <__errno>
 8001666:	4603      	mov	r3, r0
 8001668:	2216      	movs	r2, #22
 800166a:	601a      	str	r2, [r3, #0]
  return -1;
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <_exit>:

void _exit (int status)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ffe7 	bl	8001658 <_kill>
  while (1) {}    /* Make sure we hang here */
 800168a:	e7fe      	b.n	800168a <_exit+0x12>

0800168c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	e00a      	b.n	80016b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800169e:	f3af 8000 	nop.w
 80016a2:	4601      	mov	r1, r0
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	60ba      	str	r2, [r7, #8]
 80016aa:	b2ca      	uxtb	r2, r1
 80016ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	dbf0      	blt.n	800169e <_read+0x12>
  }

  return len;
 80016bc:	687b      	ldr	r3, [r7, #4]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	60f8      	str	r0, [r7, #12]
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	e009      	b.n	80016ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	60ba      	str	r2, [r7, #8]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f005 fa2f 	bl	8006b44 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3301      	adds	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	dbf1      	blt.n	80016d8 <_write+0x12>
  }
  return len;
 80016f4:	687b      	ldr	r3, [r7, #4]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <_close>:

int _close(int file)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001726:	605a      	str	r2, [r3, #4]
  return 0;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <_isatty>:

int _isatty(int file)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001770:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <_sbrk+0x5c>)
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <_sbrk+0x60>)
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800177c:	4b13      	ldr	r3, [pc, #76]	; (80017cc <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <_sbrk+0x64>)
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <_sbrk+0x68>)
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	429a      	cmp	r2, r3
 8001796:	d207      	bcs.n	80017a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001798:	f008 f934 	bl	8009a04 <__errno>
 800179c:	4603      	mov	r3, r0
 800179e:	220c      	movs	r2, #12
 80017a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e009      	b.n	80017bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a05      	ldr	r2, [pc, #20]	; (80017cc <_sbrk+0x64>)
 80017b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20050000 	.word	0x20050000
 80017c8:	00000800 	.word	0x00000800
 80017cc:	20000360 	.word	0x20000360
 80017d0:	20005110 	.word	0x20005110

080017d4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <MX_USART3_UART_Init+0x58>)
 80017da:	4a15      	ldr	r2, [pc, #84]	; (8001830 <MX_USART3_UART_Init+0x5c>)
 80017dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <MX_USART3_UART_Init+0x58>)
 80017e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_USART3_UART_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_USART3_UART_Init+0x58>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_USART3_UART_Init+0x58>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_USART3_UART_Init+0x58>)
 80017fa:	220c      	movs	r2, #12
 80017fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <MX_USART3_UART_Init+0x58>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_USART3_UART_Init+0x58>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <MX_USART3_UART_Init+0x58>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_USART3_UART_Init+0x58>)
 8001812:	2200      	movs	r2, #0
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_USART3_UART_Init+0x58>)
 8001818:	f003 fe2e 	bl	8005478 <HAL_UART_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001822:	f7ff fd69 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000364 	.word	0x20000364
 8001830:	40004800 	.word	0x40004800

08001834 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b0aa      	sub	sp, #168	; 0xa8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	2284      	movs	r2, #132	; 0x84
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f008 fa0f 	bl	8009c78 <memset>
  if(uartHandle->Instance==USART3)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a26      	ldr	r2, [pc, #152]	; (80018f8 <HAL_UART_MspInit+0xc4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d144      	bne.n	80018ee <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001868:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800186a:	2300      	movs	r3, #0
 800186c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800186e:	f107 0310 	add.w	r3, r7, #16
 8001872:	4618      	mov	r0, r3
 8001874:	f002 fd66 	bl	8004344 <HAL_RCCEx_PeriphCLKConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800187e:	f7ff fd3b 	bl	80012f8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001882:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <HAL_UART_MspInit+0xc8>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <HAL_UART_MspInit+0xc8>)
 8001888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800188c:	6413      	str	r3, [r2, #64]	; 0x40
 800188e:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <HAL_UART_MspInit+0xc8>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <HAL_UART_MspInit+0xc8>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a17      	ldr	r2, [pc, #92]	; (80018fc <HAL_UART_MspInit+0xc8>)
 80018a0:	f043 0308 	orr.w	r3, r3, #8
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <HAL_UART_MspInit+0xc8>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	2303      	movs	r3, #3
 80018c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018cc:	2307      	movs	r3, #7
 80018ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018d2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018d6:	4619      	mov	r1, r3
 80018d8:	4809      	ldr	r0, [pc, #36]	; (8001900 <HAL_UART_MspInit+0xcc>)
 80018da:	f000 fb83 	bl	8001fe4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2105      	movs	r1, #5
 80018e2:	2027      	movs	r0, #39	; 0x27
 80018e4:	f000 f9ce 	bl	8001c84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018e8:	2027      	movs	r0, #39	; 0x27
 80018ea:	f000 f9e7 	bl	8001cbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80018ee:	bf00      	nop
 80018f0:	37a8      	adds	r7, #168	; 0xa8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40004800 	.word	0x40004800
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020c00 	.word	0x40020c00

08001904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800193c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001908:	480d      	ldr	r0, [pc, #52]	; (8001940 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800190a:	490e      	ldr	r1, [pc, #56]	; (8001944 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800190c:	4a0e      	ldr	r2, [pc, #56]	; (8001948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001910:	e002      	b.n	8001918 <LoopCopyDataInit>

08001912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001916:	3304      	adds	r3, #4

08001918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800191c:	d3f9      	bcc.n	8001912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191e:	4a0b      	ldr	r2, [pc, #44]	; (800194c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001920:	4c0b      	ldr	r4, [pc, #44]	; (8001950 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001924:	e001      	b.n	800192a <LoopFillZerobss>

08001926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001928:	3204      	adds	r2, #4

0800192a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800192c:	d3fb      	bcc.n	8001926 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800192e:	f000 f8b1 	bl	8001a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001932:	f008 f963 	bl	8009bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001936:	f7ff fc4c 	bl	80011d2 <main>
  bx  lr    
 800193a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800193c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001944:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001948:	0800cb0c 	.word	0x0800cb0c
  ldr r2, =_sbss
 800194c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001950:	2000510c 	.word	0x2000510c

08001954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001954:	e7fe      	b.n	8001954 <ADC_IRQHandler>

08001956 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8001964:	4618      	mov	r0, r3
 8001966:	f007 ff6f 	bl	8009848 <USBH_LL_IncTimer>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8001980:	4618      	mov	r0, r3
 8001982:	f007 ffb3 	bl	80098ec <USBH_LL_Connect>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800199c:	4618      	mov	r0, r3
 800199e:	f007 ffc8 	bl	8009932 <USBH_LL_Disconnect>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	460b      	mov	r3, r1
 80019b4:	70fb      	strb	r3, [r7, #3]
 80019b6:	4613      	mov	r3, r2
 80019b8:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80019c0:	4618      	mov	r0, r3
 80019c2:	f007 ffe8 	bl	8009996 <USBH_LL_NotifyURBChange>
#endif
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80019dc:	4618      	mov	r0, r3
 80019de:	f007 ff5d 	bl	800989c <USBH_LL_PortEnabled>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80019f8:	4618      	mov	r0, r3
 80019fa:	f007 ff69 	bl	80098d0 <USBH_LL_PortDisabled>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fde4 	bl	80025ea <HAL_HCD_Stop>
 8001a22:	4603      	mov	r3, r0
 8001a24:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 f807 	bl	8001a3c <USBH_Get_USB_Status>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001a32:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d817      	bhi.n	8001a80 <USBH_Get_USB_Status+0x44>
 8001a50:	a201      	add	r2, pc, #4	; (adr r2, 8001a58 <USBH_Get_USB_Status+0x1c>)
 8001a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a56:	bf00      	nop
 8001a58:	08001a69 	.word	0x08001a69
 8001a5c:	08001a6f 	.word	0x08001a6f
 8001a60:	08001a75 	.word	0x08001a75
 8001a64:	08001a7b 	.word	0x08001a7b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8001a6c:	e00b      	b.n	8001a86 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	73fb      	strb	r3, [r7, #15]
    break;
 8001a72:	e008      	b.n	8001a86 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8001a74:	2301      	movs	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
    break;
 8001a78:	e005      	b.n	8001a86 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	73fb      	strb	r3, [r7, #15]
    break;
 8001a7e:	e002      	b.n	8001a86 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8001a80:	2302      	movs	r3, #2
 8001a82:	73fb      	strb	r3, [r7, #15]
    break;
 8001a84:	bf00      	nop
  }
  return usb_status;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <SystemInit+0x20>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <SystemInit+0x20>)
 8001aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001abc:	2003      	movs	r0, #3
 8001abe:	f000 f8d6 	bl	8001c6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac2:	200f      	movs	r0, #15
 8001ac4:	f7ff fcee 	bl	80014a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac8:	f7ff fcc4 	bl	8001454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_IncTick+0x20>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_IncTick+0x24>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <HAL_IncTick+0x24>)
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000008 	.word	0x20000008
 8001af8:	200006f0 	.word	0x200006f0

08001afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return uwTick;
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <HAL_GetTick+0x14>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	200006f0 	.word	0x200006f0

08001b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <__NVIC_SetPriorityGrouping+0x40>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b30:	4013      	ands	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b42:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <__NVIC_SetPriorityGrouping+0x40>)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	60d3      	str	r3, [r2, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00
 8001b58:	05fa0000 	.word	0x05fa0000

08001b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b60:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <__NVIC_GetPriorityGrouping+0x18>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	f003 0307 	and.w	r3, r3, #7
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db0b      	blt.n	8001ba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	f003 021f 	and.w	r2, r3, #31
 8001b90:	4907      	ldr	r1, [pc, #28]	; (8001bb0 <__NVIC_EnableIRQ+0x38>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	095b      	lsrs	r3, r3, #5
 8001b98:	2001      	movs	r0, #1
 8001b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000e100 	.word	0xe000e100

08001bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db0a      	blt.n	8001bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	490c      	ldr	r1, [pc, #48]	; (8001c00 <__NVIC_SetPriority+0x4c>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bdc:	e00a      	b.n	8001bf4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4908      	ldr	r1, [pc, #32]	; (8001c04 <__NVIC_SetPriority+0x50>)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	3b04      	subs	r3, #4
 8001bec:	0112      	lsls	r2, r2, #4
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	761a      	strb	r2, [r3, #24]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000e100 	.word	0xe000e100
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f1c3 0307 	rsb	r3, r3, #7
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	bf28      	it	cs
 8001c26:	2304      	movcs	r3, #4
 8001c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d902      	bls.n	8001c38 <NVIC_EncodePriority+0x30>
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3b03      	subs	r3, #3
 8001c36:	e000      	b.n	8001c3a <NVIC_EncodePriority+0x32>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43d9      	mvns	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	4313      	orrs	r3, r2
         );
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ff4c 	bl	8001b14 <__NVIC_SetPriorityGrouping>
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c96:	f7ff ff61 	bl	8001b5c <__NVIC_GetPriorityGrouping>
 8001c9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	68b9      	ldr	r1, [r7, #8]
 8001ca0:	6978      	ldr	r0, [r7, #20]
 8001ca2:	f7ff ffb1 	bl	8001c08 <NVIC_EncodePriority>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cac:	4611      	mov	r1, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ff80 	bl	8001bb4 <__NVIC_SetPriority>
}
 8001cb4:	bf00      	nop
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff54 	bl	8001b78 <__NVIC_EnableIRQ>
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ce6:	f7ff ff09 	bl	8001afc <HAL_GetTick>
 8001cea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d008      	beq.n	8001d0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2280      	movs	r2, #128	; 0x80
 8001cfc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e052      	b.n	8001db0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0216 	bic.w	r2, r2, #22
 8001d18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d103      	bne.n	8001d3a <HAL_DMA_Abort+0x62>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d007      	beq.n	8001d4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0208 	bic.w	r2, r2, #8
 8001d48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0201 	bic.w	r2, r2, #1
 8001d58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d5a:	e013      	b.n	8001d84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d5c:	f7ff fece 	bl	8001afc <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b05      	cmp	r3, #5
 8001d68:	d90c      	bls.n	8001d84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2203      	movs	r2, #3
 8001d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e015      	b.n	8001db0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1e4      	bne.n	8001d5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d96:	223f      	movs	r2, #63	; 0x3f
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d004      	beq.n	8001dd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2280      	movs	r2, #128	; 0x80
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00c      	b.n	8001df0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2205      	movs	r2, #5
 8001dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0201 	bic.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e12:	2b40      	cmp	r3, #64	; 0x40
 8001e14:	d112      	bne.n	8001e3c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e24:	2b40      	cmp	r3, #64	; 0x40
 8001e26:	d109      	bne.n	8001e3c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b50      	ldr	r3, [pc, #320]	; (8001f74 <HAL_ETH_IRQHandler+0x178>)
 8001e34:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f8ac 	bl	8001f94 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d113      	bne.n	8001e76 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d10a      	bne.n	8001e76 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001e6e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f885 	bl	8001f80 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e88:	d14c      	bne.n	8001f24 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e9c:	d142      	bne.n	8001f24 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea4:	f043 0208 	orr.w	r2, r3, #8
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ec0:	d11a      	bne.n	8001ef8 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <HAL_ETH_IRQHandler+0x17c>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001ee8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001eec:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	22e0      	movs	r2, #224	; 0xe0
 8001ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001ef6:	e012      	b.n	8001f1e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	f248 6380 	movw	r3, #34432	; 0x8680
 8001f06:	4013      	ands	r3, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f16:	461a      	mov	r2, r3
 8001f18:	f248 6380 	movw	r3, #34432	; 0x8680
 8001f1c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f842 	bl	8001fa8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d10e      	bne.n	8001f50 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f83a 	bl	8001fbc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001f50:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <HAL_ETH_IRQHandler+0x180>)
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <HAL_ETH_IRQHandler+0x180>)
 8001f5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f62:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f833 	bl	8001fd0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	00010040 	.word	0x00010040
 8001f78:	007e2000 	.word	0x007e2000
 8001f7c:	40013c00 	.word	0x40013c00

08001f80 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	e175      	b.n	80022f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002004:	2201      	movs	r2, #1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	429a      	cmp	r2, r3
 800201e:	f040 8164 	bne.w	80022ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b01      	cmp	r3, #1
 800202c:	d005      	beq.n	800203a <HAL_GPIO_Init+0x56>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d130      	bne.n	800209c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	2203      	movs	r2, #3
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002070:	2201      	movs	r2, #1
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f003 0201 	and.w	r2, r3, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d017      	beq.n	80020d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	2203      	movs	r2, #3
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d123      	bne.n	800212c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	08da      	lsrs	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3208      	adds	r2, #8
 80020ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	220f      	movs	r2, #15
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	08da      	lsrs	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3208      	adds	r2, #8
 8002126:	69b9      	ldr	r1, [r7, #24]
 8002128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2203      	movs	r2, #3
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0203 	and.w	r2, r3, #3
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80be 	beq.w	80022ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216e:	4b66      	ldr	r3, [pc, #408]	; (8002308 <HAL_GPIO_Init+0x324>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	4a65      	ldr	r2, [pc, #404]	; (8002308 <HAL_GPIO_Init+0x324>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002178:	6453      	str	r3, [r2, #68]	; 0x44
 800217a:	4b63      	ldr	r3, [pc, #396]	; (8002308 <HAL_GPIO_Init+0x324>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002186:	4a61      	ldr	r2, [pc, #388]	; (800230c <HAL_GPIO_Init+0x328>)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	3302      	adds	r3, #2
 800218e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	220f      	movs	r2, #15
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a58      	ldr	r2, [pc, #352]	; (8002310 <HAL_GPIO_Init+0x32c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d037      	beq.n	8002222 <HAL_GPIO_Init+0x23e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a57      	ldr	r2, [pc, #348]	; (8002314 <HAL_GPIO_Init+0x330>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d031      	beq.n	800221e <HAL_GPIO_Init+0x23a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a56      	ldr	r2, [pc, #344]	; (8002318 <HAL_GPIO_Init+0x334>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d02b      	beq.n	800221a <HAL_GPIO_Init+0x236>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a55      	ldr	r2, [pc, #340]	; (800231c <HAL_GPIO_Init+0x338>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d025      	beq.n	8002216 <HAL_GPIO_Init+0x232>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a54      	ldr	r2, [pc, #336]	; (8002320 <HAL_GPIO_Init+0x33c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d01f      	beq.n	8002212 <HAL_GPIO_Init+0x22e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a53      	ldr	r2, [pc, #332]	; (8002324 <HAL_GPIO_Init+0x340>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d019      	beq.n	800220e <HAL_GPIO_Init+0x22a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a52      	ldr	r2, [pc, #328]	; (8002328 <HAL_GPIO_Init+0x344>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <HAL_GPIO_Init+0x226>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a51      	ldr	r2, [pc, #324]	; (800232c <HAL_GPIO_Init+0x348>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00d      	beq.n	8002206 <HAL_GPIO_Init+0x222>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a50      	ldr	r2, [pc, #320]	; (8002330 <HAL_GPIO_Init+0x34c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d007      	beq.n	8002202 <HAL_GPIO_Init+0x21e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4f      	ldr	r2, [pc, #316]	; (8002334 <HAL_GPIO_Init+0x350>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d101      	bne.n	80021fe <HAL_GPIO_Init+0x21a>
 80021fa:	2309      	movs	r3, #9
 80021fc:	e012      	b.n	8002224 <HAL_GPIO_Init+0x240>
 80021fe:	230a      	movs	r3, #10
 8002200:	e010      	b.n	8002224 <HAL_GPIO_Init+0x240>
 8002202:	2308      	movs	r3, #8
 8002204:	e00e      	b.n	8002224 <HAL_GPIO_Init+0x240>
 8002206:	2307      	movs	r3, #7
 8002208:	e00c      	b.n	8002224 <HAL_GPIO_Init+0x240>
 800220a:	2306      	movs	r3, #6
 800220c:	e00a      	b.n	8002224 <HAL_GPIO_Init+0x240>
 800220e:	2305      	movs	r3, #5
 8002210:	e008      	b.n	8002224 <HAL_GPIO_Init+0x240>
 8002212:	2304      	movs	r3, #4
 8002214:	e006      	b.n	8002224 <HAL_GPIO_Init+0x240>
 8002216:	2303      	movs	r3, #3
 8002218:	e004      	b.n	8002224 <HAL_GPIO_Init+0x240>
 800221a:	2302      	movs	r3, #2
 800221c:	e002      	b.n	8002224 <HAL_GPIO_Init+0x240>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_GPIO_Init+0x240>
 8002222:	2300      	movs	r3, #0
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	f002 0203 	and.w	r2, r2, #3
 800222a:	0092      	lsls	r2, r2, #2
 800222c:	4093      	lsls	r3, r2
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002234:	4935      	ldr	r1, [pc, #212]	; (800230c <HAL_GPIO_Init+0x328>)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	3302      	adds	r3, #2
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002242:	4b3d      	ldr	r3, [pc, #244]	; (8002338 <HAL_GPIO_Init+0x354>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002266:	4a34      	ldr	r2, [pc, #208]	; (8002338 <HAL_GPIO_Init+0x354>)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800226c:	4b32      	ldr	r3, [pc, #200]	; (8002338 <HAL_GPIO_Init+0x354>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002290:	4a29      	ldr	r2, [pc, #164]	; (8002338 <HAL_GPIO_Init+0x354>)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002296:	4b28      	ldr	r3, [pc, #160]	; (8002338 <HAL_GPIO_Init+0x354>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ba:	4a1f      	ldr	r2, [pc, #124]	; (8002338 <HAL_GPIO_Init+0x354>)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022c0:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_GPIO_Init+0x354>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <HAL_GPIO_Init+0x354>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3301      	adds	r3, #1
 80022ee:	61fb      	str	r3, [r7, #28]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	2b0f      	cmp	r3, #15
 80022f4:	f67f ae86 	bls.w	8002004 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	3724      	adds	r7, #36	; 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800
 800230c:	40013800 	.word	0x40013800
 8002310:	40020000 	.word	0x40020000
 8002314:	40020400 	.word	0x40020400
 8002318:	40020800 	.word	0x40020800
 800231c:	40020c00 	.word	0x40020c00
 8002320:	40021000 	.word	0x40021000
 8002324:	40021400 	.word	0x40021400
 8002328:	40021800 	.word	0x40021800
 800232c:	40021c00 	.word	0x40021c00
 8002330:	40022000 	.word	0x40022000
 8002334:	40022400 	.word	0x40022400
 8002338:	40013c00 	.word	0x40013c00

0800233c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
 8002348:	4613      	mov	r3, r2
 800234a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800234c:	787b      	ldrb	r3, [r7, #1]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002358:	e003      	b.n	8002362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800235a:	887b      	ldrh	r3, [r7, #2]
 800235c:	041a      	lsls	r2, r3, #16
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	619a      	str	r2, [r3, #24]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800236e:	b480      	push	{r7}
 8002370:	b085      	sub	sp, #20
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002380:	887a      	ldrh	r2, [r7, #2]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4013      	ands	r3, r2
 8002386:	041a      	lsls	r2, r3, #16
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	43d9      	mvns	r1, r3
 800238c:	887b      	ldrh	r3, [r7, #2]
 800238e:	400b      	ands	r3, r1
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	619a      	str	r2, [r3, #24]
}
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023ae:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d006      	beq.n	80023c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fefa 	bl	80011bc <HAL_GPIO_EXTI_Callback>
  }
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40013c00 	.word	0x40013c00

080023d4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f004 f9c2 	bl	8006774 <USB_GetMode>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	f040 80f6 	bne.w	80025e4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f004 f985 	bl	800670c <USB_ReadInterrupts>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 80ec 	beq.w	80025e2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f004 f97c 	bl	800670c <USB_ReadInterrupts>
 8002414:	4603      	mov	r3, r0
 8002416:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800241e:	d104      	bne.n	800242a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002428:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f004 f96c 	bl	800670c <USB_ReadInterrupts>
 8002434:	4603      	mov	r3, r0
 8002436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800243e:	d104      	bne.n	800244a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002448:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f004 f95c 	bl	800670c <USB_ReadInterrupts>
 8002454:	4603      	mov	r3, r0
 8002456:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800245a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800245e:	d104      	bne.n	800246a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002468:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f004 f94c 	bl	800670c <USB_ReadInterrupts>
 8002474:	4603      	mov	r3, r0
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b02      	cmp	r3, #2
 800247c:	d103      	bne.n	8002486 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2202      	movs	r2, #2
 8002484:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f004 f93e 	bl	800670c <USB_ReadInterrupts>
 8002490:	4603      	mov	r3, r0
 8002492:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002496:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800249a:	d11c      	bne.n	80024d6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80024a4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10f      	bne.n	80024d6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80024b6:	2110      	movs	r1, #16
 80024b8:	6938      	ldr	r0, [r7, #16]
 80024ba:	f004 f86b 	bl	8006594 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80024be:	6938      	ldr	r0, [r7, #16]
 80024c0:	f004 f89c 	bl	80065fc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2101      	movs	r1, #1
 80024ca:	4618      	mov	r0, r3
 80024cc:	f004 f960 	bl	8006790 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff fa5c 	bl	800198e <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f004 f916 	bl	800670c <USB_ReadInterrupts>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024ea:	d102      	bne.n	80024f2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f001 f959 	bl	80037a4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f004 f908 	bl	800670c <USB_ReadInterrupts>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b08      	cmp	r3, #8
 8002504:	d106      	bne.n	8002514 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff fa25 	bl	8001956 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2208      	movs	r2, #8
 8002512:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f004 f8f7 	bl	800670c <USB_ReadInterrupts>
 800251e:	4603      	mov	r3, r0
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b10      	cmp	r3, #16
 8002526:	d101      	bne.n	800252c <HAL_HCD_IRQHandler+0x158>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <HAL_HCD_IRQHandler+0x15a>
 800252c:	2300      	movs	r3, #0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d012      	beq.n	8002558 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0210 	bic.w	r2, r2, #16
 8002540:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f001 f85c 	bl	8003600 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699a      	ldr	r2, [r3, #24]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0210 	orr.w	r2, r2, #16
 8002556:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f004 f8d5 	bl	800670c <USB_ReadInterrupts>
 8002562:	4603      	mov	r3, r0
 8002564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002568:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800256c:	d13a      	bne.n	80025e4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f004 f946 	bl	8006804 <USB_HC_ReadInterrupt>
 8002578:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	e025      	b.n	80025cc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d018      	beq.n	80025c6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4413      	add	r3, r2
 800259c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025aa:	d106      	bne.n	80025ba <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	4619      	mov	r1, r3
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f836 	bl	8002624 <HCD_HC_IN_IRQHandler>
 80025b8:	e005      	b.n	80025c6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	4619      	mov	r1, r3
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 fc51 	bl	8002e68 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	3301      	adds	r3, #1
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d3d4      	bcc.n	8002580 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025de:	615a      	str	r2, [r3, #20]
 80025e0:	e000      	b.n	80025e4 <HAL_HCD_IRQHandler+0x210>
      return;
 80025e2:	bf00      	nop
    }
  }
}
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_HCD_Stop+0x16>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e00d      	b.n	800261c <HAL_HCD_Stop+0x32>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f004 fa06 	bl	8006a1e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800263a:	78fb      	ldrb	r3, [r7, #3]
 800263c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f004 f872 	bl	8006732 <USB_ReadChInterrupts>
 800264e:	4603      	mov	r3, r0
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b04      	cmp	r3, #4
 8002656:	d11a      	bne.n	800268e <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4413      	add	r3, r2
 8002660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002664:	461a      	mov	r2, r3
 8002666:	2304      	movs	r3, #4
 8002668:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	212c      	movs	r1, #44	; 0x2c
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	3361      	adds	r3, #97	; 0x61
 8002678:	2207      	movs	r2, #7
 800267a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f004 f8cd 	bl	8006826 <USB_HC_Halt>
 800268c:	e0a2      	b.n	80027d4 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f004 f84a 	bl	8006732 <USB_ReadChInterrupts>
 800269e:	4603      	mov	r3, r0
 80026a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026a8:	d11b      	bne.n	80026e2 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b6:	461a      	mov	r2, r3
 80026b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	212c      	movs	r1, #44	; 0x2c
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	3361      	adds	r3, #97	; 0x61
 80026cc:	2208      	movs	r2, #8
 80026ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f004 f8a3 	bl	8006826 <USB_HC_Halt>
 80026e0:	e078      	b.n	80027d4 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f004 f820 	bl	8006732 <USB_ReadChInterrupts>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d11a      	bne.n	8002732 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002708:	461a      	mov	r2, r3
 800270a:	2308      	movs	r3, #8
 800270c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	3361      	adds	r3, #97	; 0x61
 800271c:	2206      	movs	r2, #6
 800271e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f004 f87b 	bl	8006826 <USB_HC_Halt>
 8002730:	e050      	b.n	80027d4 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f003 fff8 	bl	8006732 <USB_ReadChInterrupts>
 8002742:	4603      	mov	r3, r0
 8002744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274c:	d11b      	bne.n	8002786 <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4413      	add	r3, r2
 8002756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275a:	461a      	mov	r2, r3
 800275c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002760:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	212c      	movs	r1, #44	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	3361      	adds	r3, #97	; 0x61
 8002770:	2209      	movs	r2, #9
 8002772:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f004 f851 	bl	8006826 <USB_HC_Halt>
 8002784:	e026      	b.n	80027d4 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f003 ffce 	bl	8006732 <USB_ReadChInterrupts>
 8002796:	4603      	mov	r3, r0
 8002798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279c:	2b80      	cmp	r3, #128	; 0x80
 800279e:	d119      	bne.n	80027d4 <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ac:	461a      	mov	r2, r3
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	212c      	movs	r1, #44	; 0x2c
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	3361      	adds	r3, #97	; 0x61
 80027c0:	2207      	movs	r2, #7
 80027c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f004 f829 	bl	8006826 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f003 ffa7 	bl	8006732 <USB_ReadChInterrupts>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ee:	d112      	bne.n	8002816 <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f004 f813 	bl	8006826 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280c:	461a      	mov	r2, r3
 800280e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002812:	6093      	str	r3, [r2, #8]
 8002814:	e325      	b.n	8002e62 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f003 ff86 	bl	8006732 <USB_ReadChInterrupts>
 8002826:	4603      	mov	r3, r0
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	f040 80e8 	bne.w	8002a02 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4413      	add	r3, r2
 800283a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283e:	461a      	mov	r2, r3
 8002840:	2320      	movs	r3, #32
 8002842:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d019      	beq.n	8002880 <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	212c      	movs	r1, #44	; 0x2c
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	4413      	add	r3, r2
 8002858:	3348      	adds	r3, #72	; 0x48
 800285a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	0159      	lsls	r1, r3, #5
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	440b      	add	r3, r1
 8002864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800286e:	1ad2      	subs	r2, r2, r3
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	202c      	movs	r0, #44	; 0x2c
 8002876:	fb00 f303 	mul.w	r3, r0, r3
 800287a:	440b      	add	r3, r1
 800287c:	3350      	adds	r3, #80	; 0x50
 800287e:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	3361      	adds	r3, #97	; 0x61
 800288e:	2201      	movs	r2, #1
 8002890:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	335c      	adds	r3, #92	; 0x5c
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b0:	461a      	mov	r2, r3
 80028b2:	2301      	movs	r3, #1
 80028b4:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	212c      	movs	r1, #44	; 0x2c
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	333f      	adds	r3, #63	; 0x3f
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	333f      	adds	r3, #63	; 0x3f
 80028d8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d111      	bne.n	8002902 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f003 ff9c 	bl	8006826 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fa:	461a      	mov	r2, r3
 80028fc:	2310      	movs	r3, #16
 80028fe:	6093      	str	r3, [r2, #8]
 8002900:	e03a      	b.n	8002978 <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	212c      	movs	r1, #44	; 0x2c
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	333f      	adds	r3, #63	; 0x3f
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b03      	cmp	r3, #3
 8002914:	d009      	beq.n	800292a <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	333f      	adds	r3, #63	; 0x3f
 8002924:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002926:	2b01      	cmp	r3, #1
 8002928:	d126      	bne.n	8002978 <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4413      	add	r3, r2
 8002932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	0151      	lsls	r1, r2, #5
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	440a      	add	r2, r1
 8002940:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002944:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002948:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	3360      	adds	r3, #96	; 0x60
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	b2d9      	uxtb	r1, r3
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	202c      	movs	r0, #44	; 0x2c
 8002966:	fb00 f303 	mul.w	r3, r0, r3
 800296a:	4413      	add	r3, r2
 800296c:	3360      	adds	r3, #96	; 0x60
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff f819 	bl	80019aa <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d12b      	bne.n	80029d8 <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	212c      	movs	r1, #44	; 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	3348      	adds	r3, #72	; 0x48
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	202c      	movs	r0, #44	; 0x2c
 8002996:	fb00 f202 	mul.w	r2, r0, r2
 800299a:	440a      	add	r2, r1
 800299c:	3240      	adds	r2, #64	; 0x40
 800299e:	8812      	ldrh	r2, [r2, #0]
 80029a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 825a 	beq.w	8002e62 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3354      	adds	r3, #84	; 0x54
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	f083 0301 	eor.w	r3, r3, #1
 80029c2:	b2d8      	uxtb	r0, r3
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	3354      	adds	r3, #84	; 0x54
 80029d2:	4602      	mov	r2, r0
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e244      	b.n	8002e62 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	3354      	adds	r3, #84	; 0x54
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	f083 0301 	eor.w	r3, r3, #1
 80029ec:	b2d8      	uxtb	r0, r3
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	212c      	movs	r1, #44	; 0x2c
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	3354      	adds	r3, #84	; 0x54
 80029fc:	4602      	mov	r2, r0
 80029fe:	701a      	strb	r2, [r3, #0]
 8002a00:	e22f      	b.n	8002e62 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f003 fe90 	bl	8006732 <USB_ReadChInterrupts>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d109      	bne.n	8002a30 <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2320      	movs	r3, #32
 8002a2c:	6093      	str	r3, [r2, #8]
 8002a2e:	e218      	b.n	8002e62 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f003 fe79 	bl	8006732 <USB_ReadChInterrupts>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	f040 816b 	bne.w	8002d22 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3361      	adds	r3, #97	; 0x61
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d112      	bne.n	8002a98 <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	212c      	movs	r1, #44	; 0x2c
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3361      	adds	r3, #97	; 0x61
 8002a80:	2202      	movs	r2, #2
 8002a82:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	3360      	adds	r3, #96	; 0x60
 8002a92:	2201      	movs	r2, #1
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e135      	b.n	8002d04 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3361      	adds	r3, #97	; 0x61
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b06      	cmp	r3, #6
 8002aaa:	d112      	bne.n	8002ad2 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3361      	adds	r3, #97	; 0x61
 8002aba:	2202      	movs	r2, #2
 8002abc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3360      	adds	r3, #96	; 0x60
 8002acc:	2205      	movs	r2, #5
 8002ace:	701a      	strb	r2, [r3, #0]
 8002ad0:	e118      	b.n	8002d04 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	3361      	adds	r3, #97	; 0x61
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b07      	cmp	r3, #7
 8002ae4:	d009      	beq.n	8002afa <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	212c      	movs	r1, #44	; 0x2c
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	3361      	adds	r3, #97	; 0x61
 8002af4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002af6:	2b09      	cmp	r3, #9
 8002af8:	d159      	bne.n	8002bae <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	212c      	movs	r1, #44	; 0x2c
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	3361      	adds	r3, #97	; 0x61
 8002b08:	2202      	movs	r2, #2
 8002b0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	212c      	movs	r1, #44	; 0x2c
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	335c      	adds	r3, #92	; 0x5c
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	202c      	movs	r0, #44	; 0x2c
 8002b24:	fb00 f303 	mul.w	r3, r0, r3
 8002b28:	440b      	add	r3, r1
 8002b2a:	335c      	adds	r3, #92	; 0x5c
 8002b2c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	335c      	adds	r3, #92	; 0x5c
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d912      	bls.n	8002b68 <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	212c      	movs	r1, #44	; 0x2c
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	335c      	adds	r3, #92	; 0x5c
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	212c      	movs	r1, #44	; 0x2c
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	3360      	adds	r3, #96	; 0x60
 8002b62:	2204      	movs	r2, #4
 8002b64:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b66:	e0cd      	b.n	8002d04 <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3360      	adds	r3, #96	; 0x60
 8002b76:	2202      	movs	r2, #2
 8002b78:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b90:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b98:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bac:	e0aa      	b.n	8002d04 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	3361      	adds	r3, #97	; 0x61
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b05      	cmp	r3, #5
 8002bc0:	d109      	bne.n	8002bd6 <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3361      	adds	r3, #97	; 0x61
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	701a      	strb	r2, [r3, #0]
 8002bd4:	e096      	b.n	8002d04 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	3361      	adds	r3, #97	; 0x61
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d109      	bne.n	8002bfe <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	212c      	movs	r1, #44	; 0x2c
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3361      	adds	r3, #97	; 0x61
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	701a      	strb	r2, [r3, #0]
 8002bfc:	e082      	b.n	8002d04 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	212c      	movs	r1, #44	; 0x2c
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	3361      	adds	r3, #97	; 0x61
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d13f      	bne.n	8002c92 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3361      	adds	r3, #97	; 0x61
 8002c20:	2202      	movs	r2, #2
 8002c22:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3360      	adds	r3, #96	; 0x60
 8002c32:	2202      	movs	r2, #2
 8002c34:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	333f      	adds	r3, #63	; 0x3f
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	333f      	adds	r3, #63	; 0x3f
 8002c58:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d152      	bne.n	8002d04 <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c74:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c7c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	015a      	lsls	r2, r3, #5
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	e038      	b.n	8002d04 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	212c      	movs	r1, #44	; 0x2c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3361      	adds	r3, #97	; 0x61
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d123      	bne.n	8002cee <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	212c      	movs	r1, #44	; 0x2c
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3361      	adds	r3, #97	; 0x61
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	212c      	movs	r1, #44	; 0x2c
 8002cbe:	fb01 f303 	mul.w	r3, r1, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	335c      	adds	r3, #92	; 0x5c
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	202c      	movs	r0, #44	; 0x2c
 8002cd0:	fb00 f303 	mul.w	r3, r0, r3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	335c      	adds	r3, #92	; 0x5c
 8002cd8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3360      	adds	r3, #96	; 0x60
 8002ce8:	2204      	movs	r2, #4
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	e00a      	b.n	8002d04 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	212c      	movs	r1, #44	; 0x2c
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3361      	adds	r3, #97	; 0x61
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	f000 80ae 	beq.w	8002e60 <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	b2d9      	uxtb	r1, r3
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	202c      	movs	r0, #44	; 0x2c
 8002d0e:	fb00 f303 	mul.w	r3, r0, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	3360      	adds	r3, #96	; 0x60
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fe fe45 	bl	80019aa <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d20:	e09f      	b.n	8002e62 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f003 fd00 	bl	8006732 <USB_ReadChInterrupts>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d38:	2b40      	cmp	r3, #64	; 0x40
 8002d3a:	d123      	bne.n	8002d84 <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2340      	movs	r3, #64	; 0x40
 8002d4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3361      	adds	r3, #97	; 0x61
 8002d5c:	2205      	movs	r2, #5
 8002d5e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	335c      	adds	r3, #92	; 0x5c
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f003 fd52 	bl	8006826 <USB_HC_Halt>
 8002d82:	e06e      	b.n	8002e62 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f003 fccf 	bl	8006732 <USB_ReadChInterrupts>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	2b10      	cmp	r3, #16
 8002d9c:	d161      	bne.n	8002e62 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	212c      	movs	r1, #44	; 0x2c
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	333f      	adds	r3, #63	; 0x3f
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d11a      	bne.n	8002de8 <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	212c      	movs	r1, #44	; 0x2c
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	335c      	adds	r3, #92	; 0x5c
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	212c      	movs	r1, #44	; 0x2c
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	3361      	adds	r3, #97	; 0x61
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f003 fd20 	bl	8006826 <USB_HC_Halt>
 8002de6:	e031      	b.n	8002e4c <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	212c      	movs	r1, #44	; 0x2c
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	333f      	adds	r3, #63	; 0x3f
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d009      	beq.n	8002e10 <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	212c      	movs	r1, #44	; 0x2c
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	333f      	adds	r3, #63	; 0x3f
 8002e0a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d11d      	bne.n	8002e4c <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	212c      	movs	r1, #44	; 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	335c      	adds	r3, #92	; 0x5c
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d110      	bne.n	8002e4c <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	212c      	movs	r1, #44	; 0x2c
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	3361      	adds	r3, #97	; 0x61
 8002e38:	2204      	movs	r2, #4
 8002e3a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f003 fced 	bl	8006826 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2310      	movs	r3, #16
 8002e5c:	6093      	str	r3, [r2, #8]
 8002e5e:	e000      	b.n	8002e62 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 8002e60:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f003 fc50 	bl	8006732 <USB_ReadChInterrupts>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d11a      	bne.n	8002ed2 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2304      	movs	r3, #4
 8002eac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	212c      	movs	r1, #44	; 0x2c
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	3361      	adds	r3, #97	; 0x61
 8002ebc:	2207      	movs	r2, #7
 8002ebe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f003 fcab 	bl	8006826 <USB_HC_Halt>
 8002ed0:	e393      	b.n	80035fa <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f003 fc28 	bl	8006732 <USB_ReadChInterrupts>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f003 0320 	and.w	r3, r3, #32
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d137      	bne.n	8002f5c <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2320      	movs	r3, #32
 8002efc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	212c      	movs	r1, #44	; 0x2c
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	333d      	adds	r3, #61	; 0x3d
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	f040 8373 	bne.w	80035fa <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	333d      	adds	r3, #61	; 0x3d
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	212c      	movs	r1, #44	; 0x2c
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	3360      	adds	r3, #96	; 0x60
 8002f34:	2202      	movs	r2, #2
 8002f36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	212c      	movs	r1, #44	; 0x2c
 8002f3e:	fb01 f303 	mul.w	r3, r1, r3
 8002f42:	4413      	add	r3, r2
 8002f44:	3361      	adds	r3, #97	; 0x61
 8002f46:	2203      	movs	r2, #3
 8002f48:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f003 fc66 	bl	8006826 <USB_HC_Halt>
 8002f5a:	e34e      	b.n	80035fa <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f003 fbe3 	bl	8006732 <USB_ReadChInterrupts>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f76:	d112      	bne.n	8002f9e <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f84:	461a      	mov	r2, r3
 8002f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f8a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	4611      	mov	r1, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f003 fc45 	bl	8006826 <USB_HC_Halt>
 8002f9c:	e32d      	b.n	80035fa <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f003 fbc2 	bl	8006732 <USB_ReadChInterrupts>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d142      	bne.n	800303e <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	212c      	movs	r1, #44	; 0x2c
 8002fbe:	fb01 f303 	mul.w	r3, r1, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	335c      	adds	r3, #92	; 0x5c
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f003 fbac 	bl	8006732 <USB_ReadChInterrupts>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe0:	2b40      	cmp	r3, #64	; 0x40
 8002fe2:	d111      	bne.n	8003008 <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	212c      	movs	r1, #44	; 0x2c
 8002fea:	fb01 f303 	mul.w	r3, r1, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	333d      	adds	r3, #61	; 0x3d
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003002:	461a      	mov	r2, r3
 8003004:	2340      	movs	r3, #64	; 0x40
 8003006:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	4413      	add	r3, r2
 8003010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003014:	461a      	mov	r2, r3
 8003016:	2301      	movs	r3, #1
 8003018:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	212c      	movs	r1, #44	; 0x2c
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	4413      	add	r3, r2
 8003026:	3361      	adds	r3, #97	; 0x61
 8003028:	2201      	movs	r2, #1
 800302a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f003 fbf5 	bl	8006826 <USB_HC_Halt>
 800303c:	e2dd      	b.n	80035fa <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f003 fb72 	bl	8006732 <USB_ReadChInterrupts>
 800304e:	4603      	mov	r3, r0
 8003050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003054:	2b40      	cmp	r3, #64	; 0x40
 8003056:	d12c      	bne.n	80030b2 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	212c      	movs	r1, #44	; 0x2c
 800305e:	fb01 f303 	mul.w	r3, r1, r3
 8003062:	4413      	add	r3, r2
 8003064:	3361      	adds	r3, #97	; 0x61
 8003066:	2205      	movs	r2, #5
 8003068:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	333d      	adds	r3, #61	; 0x3d
 8003078:	2201      	movs	r2, #1
 800307a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	212c      	movs	r1, #44	; 0x2c
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	4413      	add	r3, r2
 8003088:	335c      	adds	r3, #92	; 0x5c
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f003 fbc4 	bl	8006826 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030aa:	461a      	mov	r2, r3
 80030ac:	2340      	movs	r3, #64	; 0x40
 80030ae:	6093      	str	r3, [r2, #8]
 80030b0:	e2a3      	b.n	80035fa <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	4611      	mov	r1, r2
 80030bc:	4618      	mov	r0, r3
 80030be:	f003 fb38 	bl	8006732 <USB_ReadChInterrupts>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d11a      	bne.n	8003102 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d8:	461a      	mov	r2, r3
 80030da:	2308      	movs	r3, #8
 80030dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	212c      	movs	r1, #44	; 0x2c
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	4413      	add	r3, r2
 80030ea:	3361      	adds	r3, #97	; 0x61
 80030ec:	2206      	movs	r2, #6
 80030ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	4611      	mov	r1, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 fb93 	bl	8006826 <USB_HC_Halt>
 8003100:	e27b      	b.n	80035fa <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	4611      	mov	r1, r2
 800310c:	4618      	mov	r0, r3
 800310e:	f003 fb10 	bl	8006732 <USB_ReadChInterrupts>
 8003112:	4603      	mov	r3, r0
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b10      	cmp	r3, #16
 800311a:	d140      	bne.n	800319e <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	212c      	movs	r1, #44	; 0x2c
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	335c      	adds	r3, #92	; 0x5c
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	212c      	movs	r1, #44	; 0x2c
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	4413      	add	r3, r2
 800313a:	3361      	adds	r3, #97	; 0x61
 800313c:	2204      	movs	r2, #4
 800313e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	212c      	movs	r1, #44	; 0x2c
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	4413      	add	r3, r2
 800314c:	333d      	adds	r3, #61	; 0x3d
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d112      	bne.n	800317a <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	212c      	movs	r1, #44	; 0x2c
 800315a:	fb01 f303 	mul.w	r3, r1, r3
 800315e:	4413      	add	r3, r2
 8003160:	333c      	adds	r3, #60	; 0x3c
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d108      	bne.n	800317a <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	212c      	movs	r1, #44	; 0x2c
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	4413      	add	r3, r2
 8003174:	333d      	adds	r3, #61	; 0x3d
 8003176:	2201      	movs	r2, #1
 8003178:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f003 fb4e 	bl	8006826 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	4413      	add	r3, r2
 8003192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003196:	461a      	mov	r2, r3
 8003198:	2310      	movs	r3, #16
 800319a:	6093      	str	r3, [r2, #8]
 800319c:	e22d      	b.n	80035fa <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	4611      	mov	r1, r2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f003 fac2 	bl	8006732 <USB_ReadChInterrupts>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b4:	2b80      	cmp	r3, #128	; 0x80
 80031b6:	d164      	bne.n	8003282 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d111      	bne.n	80031e4 <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	212c      	movs	r1, #44	; 0x2c
 80031c6:	fb01 f303 	mul.w	r3, r1, r3
 80031ca:	4413      	add	r3, r2
 80031cc:	3361      	adds	r3, #97	; 0x61
 80031ce:	2207      	movs	r2, #7
 80031d0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	4611      	mov	r1, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	f003 fb22 	bl	8006826 <USB_HC_Halt>
 80031e2:	e044      	b.n	800326e <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	212c      	movs	r1, #44	; 0x2c
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	4413      	add	r3, r2
 80031f0:	335c      	adds	r3, #92	; 0x5c
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	202c      	movs	r0, #44	; 0x2c
 80031fc:	fb00 f303 	mul.w	r3, r0, r3
 8003200:	440b      	add	r3, r1
 8003202:	335c      	adds	r3, #92	; 0x5c
 8003204:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	212c      	movs	r1, #44	; 0x2c
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	335c      	adds	r3, #92	; 0x5c
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d920      	bls.n	800325c <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	212c      	movs	r1, #44	; 0x2c
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	335c      	adds	r3, #92	; 0x5c
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	212c      	movs	r1, #44	; 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	3360      	adds	r3, #96	; 0x60
 800323a:	2204      	movs	r2, #4
 800323c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	b2d9      	uxtb	r1, r3
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	202c      	movs	r0, #44	; 0x2c
 8003248:	fb00 f303 	mul.w	r3, r0, r3
 800324c:	4413      	add	r3, r2
 800324e:	3360      	adds	r3, #96	; 0x60
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7fe fba8 	bl	80019aa <HAL_HCD_HC_NotifyURBChange_Callback>
 800325a:	e008      	b.n	800326e <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	212c      	movs	r1, #44	; 0x2c
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	4413      	add	r3, r2
 8003268:	3360      	adds	r3, #96	; 0x60
 800326a:	2202      	movs	r2, #2
 800326c:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	4413      	add	r3, r2
 8003276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327a:	461a      	mov	r2, r3
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	6093      	str	r3, [r2, #8]
 8003280:	e1bb      	b.n	80035fa <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f003 fa50 	bl	8006732 <USB_ReadChInterrupts>
 8003292:	4603      	mov	r3, r0
 8003294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329c:	d11b      	bne.n	80032d6 <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	212c      	movs	r1, #44	; 0x2c
 80032a4:	fb01 f303 	mul.w	r3, r1, r3
 80032a8:	4413      	add	r3, r2
 80032aa:	3361      	adds	r3, #97	; 0x61
 80032ac:	2209      	movs	r2, #9
 80032ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f003 fab3 	bl	8006826 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032cc:	461a      	mov	r2, r3
 80032ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032d2:	6093      	str	r3, [r2, #8]
 80032d4:	e191      	b.n	80035fa <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f003 fa26 	bl	8006732 <USB_ReadChInterrupts>
 80032e6:	4603      	mov	r3, r0
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	f040 8184 	bne.w	80035fa <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fe:	461a      	mov	r2, r3
 8003300:	2302      	movs	r3, #2
 8003302:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3361      	adds	r3, #97	; 0x61
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b01      	cmp	r3, #1
 8003316:	f040 8087 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	212c      	movs	r1, #44	; 0x2c
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	4413      	add	r3, r2
 8003326:	3361      	adds	r3, #97	; 0x61
 8003328:	2202      	movs	r2, #2
 800332a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	212c      	movs	r1, #44	; 0x2c
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	4413      	add	r3, r2
 8003338:	3360      	adds	r3, #96	; 0x60
 800333a:	2201      	movs	r2, #1
 800333c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	212c      	movs	r1, #44	; 0x2c
 8003344:	fb01 f303 	mul.w	r3, r1, r3
 8003348:	4413      	add	r3, r2
 800334a:	333f      	adds	r3, #63	; 0x3f
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d00a      	beq.n	8003368 <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	212c      	movs	r1, #44	; 0x2c
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	4413      	add	r3, r2
 800335e:	333f      	adds	r3, #63	; 0x3f
 8003360:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003362:	2b03      	cmp	r3, #3
 8003364:	f040 8139 	bne.w	80035da <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d113      	bne.n	8003398 <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	212c      	movs	r1, #44	; 0x2c
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	4413      	add	r3, r2
 800337c:	3355      	adds	r3, #85	; 0x55
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	f083 0301 	eor.w	r3, r3, #1
 8003384:	b2d8      	uxtb	r0, r3
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	212c      	movs	r1, #44	; 0x2c
 800338c:	fb01 f303 	mul.w	r3, r1, r3
 8003390:	4413      	add	r3, r2
 8003392:	3355      	adds	r3, #85	; 0x55
 8003394:	4602      	mov	r2, r0
 8003396:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	2b01      	cmp	r3, #1
 800339e:	f040 811c 	bne.w	80035da <HCD_HC_OUT_IRQHandler+0x772>
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	212c      	movs	r1, #44	; 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	334c      	adds	r3, #76	; 0x4c
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 8111 	beq.w	80035da <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	212c      	movs	r1, #44	; 0x2c
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	334c      	adds	r3, #76	; 0x4c
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	202c      	movs	r0, #44	; 0x2c
 80033ce:	fb00 f202 	mul.w	r2, r0, r2
 80033d2:	440a      	add	r2, r1
 80033d4:	3240      	adds	r2, #64	; 0x40
 80033d6:	8812      	ldrh	r2, [r2, #0]
 80033d8:	4413      	add	r3, r2
 80033da:	3b01      	subs	r3, #1
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	202c      	movs	r0, #44	; 0x2c
 80033e2:	fb00 f202 	mul.w	r2, r0, r2
 80033e6:	440a      	add	r2, r1
 80033e8:	3240      	adds	r2, #64	; 0x40
 80033ea:	8812      	ldrh	r2, [r2, #0]
 80033ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80ee 	beq.w	80035da <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	212c      	movs	r1, #44	; 0x2c
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	4413      	add	r3, r2
 800340a:	3355      	adds	r3, #85	; 0x55
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	f083 0301 	eor.w	r3, r3, #1
 8003412:	b2d8      	uxtb	r0, r3
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	3355      	adds	r3, #85	; 0x55
 8003422:	4602      	mov	r2, r0
 8003424:	701a      	strb	r2, [r3, #0]
 8003426:	e0d8      	b.n	80035da <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	212c      	movs	r1, #44	; 0x2c
 800342e:	fb01 f303 	mul.w	r3, r1, r3
 8003432:	4413      	add	r3, r2
 8003434:	3361      	adds	r3, #97	; 0x61
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d109      	bne.n	8003450 <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	3361      	adds	r3, #97	; 0x61
 800344a:	2202      	movs	r2, #2
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	e0c4      	b.n	80035da <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	212c      	movs	r1, #44	; 0x2c
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	4413      	add	r3, r2
 800345c:	3361      	adds	r3, #97	; 0x61
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b04      	cmp	r3, #4
 8003462:	d112      	bne.n	800348a <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	3361      	adds	r3, #97	; 0x61
 8003472:	2202      	movs	r2, #2
 8003474:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	212c      	movs	r1, #44	; 0x2c
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	4413      	add	r3, r2
 8003482:	3360      	adds	r3, #96	; 0x60
 8003484:	2202      	movs	r2, #2
 8003486:	701a      	strb	r2, [r3, #0]
 8003488:	e0a7      	b.n	80035da <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	212c      	movs	r1, #44	; 0x2c
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	4413      	add	r3, r2
 8003496:	3361      	adds	r3, #97	; 0x61
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b05      	cmp	r3, #5
 800349c:	d112      	bne.n	80034c4 <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	3361      	adds	r3, #97	; 0x61
 80034ac:	2202      	movs	r2, #2
 80034ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	212c      	movs	r1, #44	; 0x2c
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	4413      	add	r3, r2
 80034bc:	3360      	adds	r3, #96	; 0x60
 80034be:	2202      	movs	r2, #2
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e08a      	b.n	80035da <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	212c      	movs	r1, #44	; 0x2c
 80034ca:	fb01 f303 	mul.w	r3, r1, r3
 80034ce:	4413      	add	r3, r2
 80034d0:	3361      	adds	r3, #97	; 0x61
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b06      	cmp	r3, #6
 80034d6:	d112      	bne.n	80034fe <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	212c      	movs	r1, #44	; 0x2c
 80034de:	fb01 f303 	mul.w	r3, r1, r3
 80034e2:	4413      	add	r3, r2
 80034e4:	3361      	adds	r3, #97	; 0x61
 80034e6:	2202      	movs	r2, #2
 80034e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	212c      	movs	r1, #44	; 0x2c
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	3360      	adds	r3, #96	; 0x60
 80034f8:	2205      	movs	r2, #5
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	e06d      	b.n	80035da <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	212c      	movs	r1, #44	; 0x2c
 8003504:	fb01 f303 	mul.w	r3, r1, r3
 8003508:	4413      	add	r3, r2
 800350a:	3361      	adds	r3, #97	; 0x61
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b07      	cmp	r3, #7
 8003510:	d009      	beq.n	8003526 <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	212c      	movs	r1, #44	; 0x2c
 8003518:	fb01 f303 	mul.w	r3, r1, r3
 800351c:	4413      	add	r3, r2
 800351e:	3361      	adds	r3, #97	; 0x61
 8003520:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003522:	2b09      	cmp	r3, #9
 8003524:	d168      	bne.n	80035f8 <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	212c      	movs	r1, #44	; 0x2c
 800352c:	fb01 f303 	mul.w	r3, r1, r3
 8003530:	4413      	add	r3, r2
 8003532:	3361      	adds	r3, #97	; 0x61
 8003534:	2202      	movs	r2, #2
 8003536:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	212c      	movs	r1, #44	; 0x2c
 800353e:	fb01 f303 	mul.w	r3, r1, r3
 8003542:	4413      	add	r3, r2
 8003544:	335c      	adds	r3, #92	; 0x5c
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	202c      	movs	r0, #44	; 0x2c
 8003550:	fb00 f303 	mul.w	r3, r0, r3
 8003554:	440b      	add	r3, r1
 8003556:	335c      	adds	r3, #92	; 0x5c
 8003558:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	212c      	movs	r1, #44	; 0x2c
 8003560:	fb01 f303 	mul.w	r3, r1, r3
 8003564:	4413      	add	r3, r2
 8003566:	335c      	adds	r3, #92	; 0x5c
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d912      	bls.n	8003594 <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	212c      	movs	r1, #44	; 0x2c
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	335c      	adds	r3, #92	; 0x5c
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	212c      	movs	r1, #44	; 0x2c
 8003586:	fb01 f303 	mul.w	r3, r1, r3
 800358a:	4413      	add	r3, r2
 800358c:	3360      	adds	r3, #96	; 0x60
 800358e:	2204      	movs	r2, #4
 8003590:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003592:	e021      	b.n	80035d8 <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	212c      	movs	r1, #44	; 0x2c
 800359a:	fb01 f303 	mul.w	r3, r1, r3
 800359e:	4413      	add	r3, r2
 80035a0:	3360      	adds	r3, #96	; 0x60
 80035a2:	2202      	movs	r2, #2
 80035a4:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035bc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035c4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d2:	461a      	mov	r2, r3
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80035d8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	b2d9      	uxtb	r1, r3
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	202c      	movs	r0, #44	; 0x2c
 80035e4:	fb00 f303 	mul.w	r3, r0, r3
 80035e8:	4413      	add	r3, r2
 80035ea:	3360      	adds	r3, #96	; 0x60
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7fe f9da 	bl	80019aa <HAL_HCD_HC_NotifyURBChange_Callback>
 80035f6:	e000      	b.n	80035fa <HCD_HC_OUT_IRQHandler+0x792>
      return;
 80035f8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80035fa:	3720      	adds	r7, #32
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	; 0x28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	0c5b      	lsrs	r3, r3, #17
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	091b      	lsrs	r3, r3, #4
 8003630:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003634:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d004      	beq.n	8003646 <HCD_RXQLVL_IRQHandler+0x46>
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	2b05      	cmp	r3, #5
 8003640:	f000 80a9 	beq.w	8003796 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003644:	e0aa      	b.n	800379c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 80a6 	beq.w	800379a <HCD_RXQLVL_IRQHandler+0x19a>
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	212c      	movs	r1, #44	; 0x2c
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	4413      	add	r3, r2
 800365a:	3344      	adds	r3, #68	; 0x44
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 809b 	beq.w	800379a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	212c      	movs	r1, #44	; 0x2c
 800366a:	fb01 f303 	mul.w	r3, r1, r3
 800366e:	4413      	add	r3, r2
 8003670:	3350      	adds	r3, #80	; 0x50
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	441a      	add	r2, r3
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	202c      	movs	r0, #44	; 0x2c
 800367e:	fb00 f303 	mul.w	r3, r0, r3
 8003682:	440b      	add	r3, r1
 8003684:	334c      	adds	r3, #76	; 0x4c
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d87a      	bhi.n	8003782 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	212c      	movs	r1, #44	; 0x2c
 8003696:	fb01 f303 	mul.w	r3, r1, r3
 800369a:	4413      	add	r3, r2
 800369c:	3344      	adds	r3, #68	; 0x44
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	b292      	uxth	r2, r2
 80036a4:	4619      	mov	r1, r3
 80036a6:	f002 ffd9 	bl	800665c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	212c      	movs	r1, #44	; 0x2c
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	4413      	add	r3, r2
 80036b6:	3344      	adds	r3, #68	; 0x44
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	441a      	add	r2, r3
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	202c      	movs	r0, #44	; 0x2c
 80036c4:	fb00 f303 	mul.w	r3, r0, r3
 80036c8:	440b      	add	r3, r1
 80036ca:	3344      	adds	r3, #68	; 0x44
 80036cc:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	212c      	movs	r1, #44	; 0x2c
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	4413      	add	r3, r2
 80036da:	3350      	adds	r3, #80	; 0x50
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	441a      	add	r2, r3
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	202c      	movs	r0, #44	; 0x2c
 80036e8:	fb00 f303 	mul.w	r3, r0, r3
 80036ec:	440b      	add	r3, r1
 80036ee:	3350      	adds	r3, #80	; 0x50
 80036f0:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	0cdb      	lsrs	r3, r3, #19
 8003702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003706:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	212c      	movs	r1, #44	; 0x2c
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	4413      	add	r3, r2
 8003714:	3340      	adds	r3, #64	; 0x40
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4293      	cmp	r3, r2
 800371e:	d13c      	bne.n	800379a <HCD_RXQLVL_IRQHandler+0x19a>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d039      	beq.n	800379a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	4413      	add	r3, r2
 800372e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800373c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003744:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	461a      	mov	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	212c      	movs	r1, #44	; 0x2c
 800375e:	fb01 f303 	mul.w	r3, r1, r3
 8003762:	4413      	add	r3, r2
 8003764:	3354      	adds	r3, #84	; 0x54
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	f083 0301 	eor.w	r3, r3, #1
 800376c:	b2d8      	uxtb	r0, r3
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	212c      	movs	r1, #44	; 0x2c
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	4413      	add	r3, r2
 800377a:	3354      	adds	r3, #84	; 0x54
 800377c:	4602      	mov	r2, r0
 800377e:	701a      	strb	r2, [r3, #0]
      break;
 8003780:	e00b      	b.n	800379a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	212c      	movs	r1, #44	; 0x2c
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	4413      	add	r3, r2
 800378e:	3360      	adds	r3, #96	; 0x60
 8003790:	2204      	movs	r2, #4
 8003792:	701a      	strb	r2, [r3, #0]
      break;
 8003794:	e001      	b.n	800379a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003796:	bf00      	nop
 8003798:	e000      	b.n	800379c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800379a:	bf00      	nop
  }
}
 800379c:	bf00      	nop
 800379e:	3728      	adds	r7, #40	; 0x28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80037d0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d10b      	bne.n	80037f4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d102      	bne.n	80037ec <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fe f8c3 	bl	8001972 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f043 0302 	orr.w	r3, r3, #2
 80037f2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d132      	bne.n	8003864 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f043 0308 	orr.w	r3, r3, #8
 8003804:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b04      	cmp	r3, #4
 800380e:	d126      	bne.n	800385e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d113      	bne.n	8003840 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800381e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003822:	d106      	bne.n	8003832 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2102      	movs	r1, #2
 800382a:	4618      	mov	r0, r3
 800382c:	f002 ffb0 	bl	8006790 <USB_InitFSLSPClkSel>
 8003830:	e011      	b.n	8003856 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2101      	movs	r1, #1
 8003838:	4618      	mov	r0, r3
 800383a:	f002 ffa9 	bl	8006790 <USB_InitFSLSPClkSel>
 800383e:	e00a      	b.n	8003856 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d106      	bne.n	8003856 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800384e:	461a      	mov	r2, r3
 8003850:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003854:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fe f8b9 	bl	80019ce <HAL_HCD_PortEnabled_Callback>
 800385c:	e002      	b.n	8003864 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fe f8c3 	bl	80019ea <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b20      	cmp	r3, #32
 800386c:	d103      	bne.n	8003876 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f043 0320 	orr.w	r3, r3, #32
 8003874:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800387c:	461a      	mov	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	6013      	str	r3, [r2, #0]
}
 8003882:	bf00      	nop
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003890:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a04      	ldr	r2, [pc, #16]	; (80038a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389a:	6013      	str	r3, [r2, #0]
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40007000 	.word	0x40007000

080038ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80038b6:	4b23      	ldr	r3, [pc, #140]	; (8003944 <HAL_PWREx_EnableOverDrive+0x98>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	4a22      	ldr	r2, [pc, #136]	; (8003944 <HAL_PWREx_EnableOverDrive+0x98>)
 80038bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c0:	6413      	str	r3, [r2, #64]	; 0x40
 80038c2:	4b20      	ldr	r3, [pc, #128]	; (8003944 <HAL_PWREx_EnableOverDrive+0x98>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80038ce:	4b1e      	ldr	r3, [pc, #120]	; (8003948 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038da:	f7fe f90f 	bl	8001afc <HAL_GetTick>
 80038de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038e0:	e009      	b.n	80038f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038e2:	f7fe f90b 	bl	8001afc <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038f0:	d901      	bls.n	80038f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e022      	b.n	800393c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038f6:	4b14      	ldr	r3, [pc, #80]	; (8003948 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003902:	d1ee      	bne.n	80038e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003904:	4b10      	ldr	r3, [pc, #64]	; (8003948 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a0f      	ldr	r2, [pc, #60]	; (8003948 <HAL_PWREx_EnableOverDrive+0x9c>)
 800390a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800390e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003910:	f7fe f8f4 	bl	8001afc <HAL_GetTick>
 8003914:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003916:	e009      	b.n	800392c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003918:	f7fe f8f0 	bl	8001afc <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003926:	d901      	bls.n	800392c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e007      	b.n	800393c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <HAL_PWREx_EnableOverDrive+0x9c>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003934:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003938:	d1ee      	bne.n	8003918 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40023800 	.word	0x40023800
 8003948:	40007000 	.word	0x40007000

0800394c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003954:	2300      	movs	r3, #0
 8003956:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e291      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 8087 	beq.w	8003a7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003970:	4b96      	ldr	r3, [pc, #600]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b04      	cmp	r3, #4
 800397a:	d00c      	beq.n	8003996 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397c:	4b93      	ldr	r3, [pc, #588]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 030c 	and.w	r3, r3, #12
 8003984:	2b08      	cmp	r3, #8
 8003986:	d112      	bne.n	80039ae <HAL_RCC_OscConfig+0x62>
 8003988:	4b90      	ldr	r3, [pc, #576]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003994:	d10b      	bne.n	80039ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003996:	4b8d      	ldr	r3, [pc, #564]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d06c      	beq.n	8003a7c <HAL_RCC_OscConfig+0x130>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d168      	bne.n	8003a7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e26b      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b6:	d106      	bne.n	80039c6 <HAL_RCC_OscConfig+0x7a>
 80039b8:	4b84      	ldr	r3, [pc, #528]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a83      	ldr	r2, [pc, #524]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	e02e      	b.n	8003a24 <HAL_RCC_OscConfig+0xd8>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0x9c>
 80039ce:	4b7f      	ldr	r3, [pc, #508]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a7e      	ldr	r2, [pc, #504]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b7c      	ldr	r3, [pc, #496]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a7b      	ldr	r2, [pc, #492]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e01d      	b.n	8003a24 <HAL_RCC_OscConfig+0xd8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0xc0>
 80039f2:	4b76      	ldr	r3, [pc, #472]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a75      	ldr	r2, [pc, #468]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b73      	ldr	r3, [pc, #460]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a72      	ldr	r2, [pc, #456]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCC_OscConfig+0xd8>
 8003a0c:	4b6f      	ldr	r3, [pc, #444]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a6e      	ldr	r2, [pc, #440]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	4b6c      	ldr	r3, [pc, #432]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a6b      	ldr	r2, [pc, #428]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fe f866 	bl	8001afc <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a34:	f7fe f862 	bl	8001afc <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	; 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e21f      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	4b61      	ldr	r3, [pc, #388]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0xe8>
 8003a52:	e014      	b.n	8003a7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fe f852 	bl	8001afc <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fe f84e 	bl	8001afc <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e20b      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6e:	4b57      	ldr	r3, [pc, #348]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0x110>
 8003a7a:	e000      	b.n	8003a7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d069      	beq.n	8003b5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a8a:	4b50      	ldr	r3, [pc, #320]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a96:	4b4d      	ldr	r3, [pc, #308]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d11c      	bne.n	8003adc <HAL_RCC_OscConfig+0x190>
 8003aa2:	4b4a      	ldr	r3, [pc, #296]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d116      	bne.n	8003adc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aae:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x17a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d001      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e1df      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac6:	4b41      	ldr	r3, [pc, #260]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	493d      	ldr	r1, [pc, #244]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ada:	e040      	b.n	8003b5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d023      	beq.n	8003b2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae4:	4b39      	ldr	r3, [pc, #228]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a38      	ldr	r2, [pc, #224]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fe f804 	bl	8001afc <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af8:	f7fe f800 	bl	8001afc <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e1bd      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0a:	4b30      	ldr	r3, [pc, #192]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b16:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4929      	ldr	r1, [pc, #164]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]
 8003b2a:	e018      	b.n	8003b5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b2c:	4b27      	ldr	r3, [pc, #156]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a26      	ldr	r2, [pc, #152]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b38:	f7fd ffe0 	bl	8001afc <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b40:	f7fd ffdc 	bl	8001afc <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e199      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b52:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d038      	beq.n	8003bdc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d019      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b72:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b76:	4a15      	ldr	r2, [pc, #84]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7e:	f7fd ffbd 	bl	8001afc <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b86:	f7fd ffb9 	bl	8001afc <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e176      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCC_OscConfig+0x23a>
 8003ba4:	e01a      	b.n	8003bdc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba6:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003baa:	4a08      	ldr	r2, [pc, #32]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003bac:	f023 0301 	bic.w	r3, r3, #1
 8003bb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb2:	f7fd ffa3 	bl	8001afc <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bba:	f7fd ff9f 	bl	8001afc <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d903      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e15c      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
 8003bcc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd0:	4b91      	ldr	r3, [pc, #580]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ee      	bne.n	8003bba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80a4 	beq.w	8003d32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bea:	4b8b      	ldr	r3, [pc, #556]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10d      	bne.n	8003c12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf6:	4b88      	ldr	r3, [pc, #544]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	4a87      	ldr	r2, [pc, #540]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c00:	6413      	str	r3, [r2, #64]	; 0x40
 8003c02:	4b85      	ldr	r3, [pc, #532]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	60bb      	str	r3, [r7, #8]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c12:	4b82      	ldr	r3, [pc, #520]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d118      	bne.n	8003c50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c1e:	4b7f      	ldr	r3, [pc, #508]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a7e      	ldr	r2, [pc, #504]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2a:	f7fd ff67 	bl	8001afc <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c32:	f7fd ff63 	bl	8001afc <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b64      	cmp	r3, #100	; 0x64
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e120      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c44:	4b75      	ldr	r3, [pc, #468]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d106      	bne.n	8003c66 <HAL_RCC_OscConfig+0x31a>
 8003c58:	4b6f      	ldr	r3, [pc, #444]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	4a6e      	ldr	r2, [pc, #440]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	6713      	str	r3, [r2, #112]	; 0x70
 8003c64:	e02d      	b.n	8003cc2 <HAL_RCC_OscConfig+0x376>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10c      	bne.n	8003c88 <HAL_RCC_OscConfig+0x33c>
 8003c6e:	4b6a      	ldr	r3, [pc, #424]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	4a69      	ldr	r2, [pc, #420]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003c74:	f023 0301 	bic.w	r3, r3, #1
 8003c78:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7a:	4b67      	ldr	r3, [pc, #412]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	4a66      	ldr	r2, [pc, #408]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003c80:	f023 0304 	bic.w	r3, r3, #4
 8003c84:	6713      	str	r3, [r2, #112]	; 0x70
 8003c86:	e01c      	b.n	8003cc2 <HAL_RCC_OscConfig+0x376>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b05      	cmp	r3, #5
 8003c8e:	d10c      	bne.n	8003caa <HAL_RCC_OscConfig+0x35e>
 8003c90:	4b61      	ldr	r3, [pc, #388]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c94:	4a60      	ldr	r2, [pc, #384]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003c96:	f043 0304 	orr.w	r3, r3, #4
 8003c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9c:	4b5e      	ldr	r3, [pc, #376]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	4a5d      	ldr	r2, [pc, #372]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca8:	e00b      	b.n	8003cc2 <HAL_RCC_OscConfig+0x376>
 8003caa:	4b5b      	ldr	r3, [pc, #364]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	4a5a      	ldr	r2, [pc, #360]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb6:	4b58      	ldr	r3, [pc, #352]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	4a57      	ldr	r2, [pc, #348]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003cbc:	f023 0304 	bic.w	r3, r3, #4
 8003cc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d015      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cca:	f7fd ff17 	bl	8001afc <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd0:	e00a      	b.n	8003ce8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd2:	f7fd ff13 	bl	8001afc <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e0ce      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce8:	4b4b      	ldr	r3, [pc, #300]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0ee      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x386>
 8003cf4:	e014      	b.n	8003d20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf6:	f7fd ff01 	bl	8001afc <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfc:	e00a      	b.n	8003d14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfe:	f7fd fefd 	bl	8001afc <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e0b8      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d14:	4b40      	ldr	r3, [pc, #256]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1ee      	bne.n	8003cfe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d105      	bne.n	8003d32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d26:	4b3c      	ldr	r3, [pc, #240]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	4a3b      	ldr	r2, [pc, #236]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 80a4 	beq.w	8003e84 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d3c:	4b36      	ldr	r3, [pc, #216]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 030c 	and.w	r3, r3, #12
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d06b      	beq.n	8003e20 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d149      	bne.n	8003de4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d50:	4b31      	ldr	r3, [pc, #196]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a30      	ldr	r2, [pc, #192]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fd fece 	bl	8001afc <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d64:	f7fd feca 	bl	8001afc <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e087      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	4b28      	ldr	r3, [pc, #160]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69da      	ldr	r2, [r3, #28]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	019b      	lsls	r3, r3, #6
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	085b      	lsrs	r3, r3, #1
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	041b      	lsls	r3, r3, #16
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	061b      	lsls	r3, r3, #24
 8003da6:	4313      	orrs	r3, r2
 8003da8:	4a1b      	ldr	r2, [pc, #108]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003daa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db0:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a18      	ldr	r2, [pc, #96]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fd fe9e 	bl	8001afc <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fd fe9a 	bl	8001afc <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e057      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd6:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x478>
 8003de2:	e04f      	b.n	8003e84 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de4:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a0b      	ldr	r2, [pc, #44]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fd fe84 	bl	8001afc <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df8:	f7fd fe80 	bl	8001afc <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e03d      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0a:	4b03      	ldr	r3, [pc, #12]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x4ac>
 8003e16:	e035      	b.n	8003e84 <HAL_RCC_OscConfig+0x538>
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e20:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_RCC_OscConfig+0x544>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d028      	beq.n	8003e80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d121      	bne.n	8003e80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d11a      	bne.n	8003e80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e50:	4013      	ands	r3, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d111      	bne.n	8003e80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	085b      	lsrs	r3, r3, #1
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d107      	bne.n	8003e80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800

08003e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0d0      	b.n	800404e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eac:	4b6a      	ldr	r3, [pc, #424]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d910      	bls.n	8003edc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eba:	4b67      	ldr	r3, [pc, #412]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 020f 	bic.w	r2, r3, #15
 8003ec2:	4965      	ldr	r1, [pc, #404]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b63      	ldr	r3, [pc, #396]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0b8      	b.n	800404e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d020      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef4:	4b59      	ldr	r3, [pc, #356]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4a58      	ldr	r2, [pc, #352]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003efa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003efe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f0c:	4b53      	ldr	r3, [pc, #332]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4a52      	ldr	r2, [pc, #328]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003f12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f18:	4b50      	ldr	r3, [pc, #320]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	494d      	ldr	r1, [pc, #308]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d040      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d107      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	4b47      	ldr	r3, [pc, #284]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d115      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e07f      	b.n	800404e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d107      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f56:	4b41      	ldr	r3, [pc, #260]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e073      	b.n	800404e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f66:	4b3d      	ldr	r3, [pc, #244]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e06b      	b.n	800404e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f76:	4b39      	ldr	r3, [pc, #228]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f023 0203 	bic.w	r2, r3, #3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4936      	ldr	r1, [pc, #216]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f88:	f7fd fdb8 	bl	8001afc <HAL_GetTick>
 8003f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f90:	f7fd fdb4 	bl	8001afc <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e053      	b.n	800404e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa6:	4b2d      	ldr	r3, [pc, #180]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 020c 	and.w	r2, r3, #12
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d1eb      	bne.n	8003f90 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b27      	ldr	r3, [pc, #156]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d210      	bcs.n	8003fe8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b24      	ldr	r3, [pc, #144]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 020f 	bic.w	r2, r3, #15
 8003fce:	4922      	ldr	r1, [pc, #136]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b20      	ldr	r3, [pc, #128]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e032      	b.n	800404e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff4:	4b19      	ldr	r3, [pc, #100]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4916      	ldr	r1, [pc, #88]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8004002:	4313      	orrs	r3, r2
 8004004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d009      	beq.n	8004026 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004012:	4b12      	ldr	r3, [pc, #72]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	490e      	ldr	r1, [pc, #56]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8004022:	4313      	orrs	r3, r2
 8004024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004026:	f000 f821 	bl	800406c <HAL_RCC_GetSysClockFreq>
 800402a:	4602      	mov	r2, r0
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	091b      	lsrs	r3, r3, #4
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	490a      	ldr	r1, [pc, #40]	; (8004060 <HAL_RCC_ClockConfig+0x1cc>)
 8004038:	5ccb      	ldrb	r3, [r1, r3]
 800403a:	fa22 f303 	lsr.w	r3, r2, r3
 800403e:	4a09      	ldr	r2, [pc, #36]	; (8004064 <HAL_RCC_ClockConfig+0x1d0>)
 8004040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004042:	4b09      	ldr	r3, [pc, #36]	; (8004068 <HAL_RCC_ClockConfig+0x1d4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7fd fa2c 	bl	80014a4 <HAL_InitTick>

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40023c00 	.word	0x40023c00
 800405c:	40023800 	.word	0x40023800
 8004060:	0800c708 	.word	0x0800c708
 8004064:	20000000 	.word	0x20000000
 8004068:	20000004 	.word	0x20000004

0800406c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800406c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004070:	b094      	sub	sp, #80	; 0x50
 8004072:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004074:	2300      	movs	r3, #0
 8004076:	647b      	str	r3, [r7, #68]	; 0x44
 8004078:	2300      	movs	r3, #0
 800407a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800407c:	2300      	movs	r3, #0
 800407e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004080:	2300      	movs	r3, #0
 8004082:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004084:	4b79      	ldr	r3, [pc, #484]	; (800426c <HAL_RCC_GetSysClockFreq+0x200>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 030c 	and.w	r3, r3, #12
 800408c:	2b08      	cmp	r3, #8
 800408e:	d00d      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x40>
 8004090:	2b08      	cmp	r3, #8
 8004092:	f200 80e1 	bhi.w	8004258 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0x34>
 800409a:	2b04      	cmp	r3, #4
 800409c:	d003      	beq.n	80040a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800409e:	e0db      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040a0:	4b73      	ldr	r3, [pc, #460]	; (8004270 <HAL_RCC_GetSysClockFreq+0x204>)
 80040a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040a4:	e0db      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040a6:	4b73      	ldr	r3, [pc, #460]	; (8004274 <HAL_RCC_GetSysClockFreq+0x208>)
 80040a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040aa:	e0d8      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040ac:	4b6f      	ldr	r3, [pc, #444]	; (800426c <HAL_RCC_GetSysClockFreq+0x200>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040b4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80040b6:	4b6d      	ldr	r3, [pc, #436]	; (800426c <HAL_RCC_GetSysClockFreq+0x200>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d063      	beq.n	800418a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c2:	4b6a      	ldr	r3, [pc, #424]	; (800426c <HAL_RCC_GetSysClockFreq+0x200>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	099b      	lsrs	r3, r3, #6
 80040c8:	2200      	movs	r2, #0
 80040ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80040cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d4:	633b      	str	r3, [r7, #48]	; 0x30
 80040d6:	2300      	movs	r3, #0
 80040d8:	637b      	str	r3, [r7, #52]	; 0x34
 80040da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040de:	4622      	mov	r2, r4
 80040e0:	462b      	mov	r3, r5
 80040e2:	f04f 0000 	mov.w	r0, #0
 80040e6:	f04f 0100 	mov.w	r1, #0
 80040ea:	0159      	lsls	r1, r3, #5
 80040ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040f0:	0150      	lsls	r0, r2, #5
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4621      	mov	r1, r4
 80040f8:	1a51      	subs	r1, r2, r1
 80040fa:	6139      	str	r1, [r7, #16]
 80040fc:	4629      	mov	r1, r5
 80040fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004110:	4659      	mov	r1, fp
 8004112:	018b      	lsls	r3, r1, #6
 8004114:	4651      	mov	r1, sl
 8004116:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800411a:	4651      	mov	r1, sl
 800411c:	018a      	lsls	r2, r1, #6
 800411e:	4651      	mov	r1, sl
 8004120:	ebb2 0801 	subs.w	r8, r2, r1
 8004124:	4659      	mov	r1, fp
 8004126:	eb63 0901 	sbc.w	r9, r3, r1
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800413a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800413e:	4690      	mov	r8, r2
 8004140:	4699      	mov	r9, r3
 8004142:	4623      	mov	r3, r4
 8004144:	eb18 0303 	adds.w	r3, r8, r3
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	462b      	mov	r3, r5
 800414c:	eb49 0303 	adc.w	r3, r9, r3
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	f04f 0300 	mov.w	r3, #0
 800415a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800415e:	4629      	mov	r1, r5
 8004160:	024b      	lsls	r3, r1, #9
 8004162:	4621      	mov	r1, r4
 8004164:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004168:	4621      	mov	r1, r4
 800416a:	024a      	lsls	r2, r1, #9
 800416c:	4610      	mov	r0, r2
 800416e:	4619      	mov	r1, r3
 8004170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004172:	2200      	movs	r2, #0
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
 8004176:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004178:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800417c:	f7fc fd34 	bl	8000be8 <__aeabi_uldivmod>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4613      	mov	r3, r2
 8004186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004188:	e058      	b.n	800423c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800418a:	4b38      	ldr	r3, [pc, #224]	; (800426c <HAL_RCC_GetSysClockFreq+0x200>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	099b      	lsrs	r3, r3, #6
 8004190:	2200      	movs	r2, #0
 8004192:	4618      	mov	r0, r3
 8004194:	4611      	mov	r1, r2
 8004196:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800419a:	623b      	str	r3, [r7, #32]
 800419c:	2300      	movs	r3, #0
 800419e:	627b      	str	r3, [r7, #36]	; 0x24
 80041a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041a4:	4642      	mov	r2, r8
 80041a6:	464b      	mov	r3, r9
 80041a8:	f04f 0000 	mov.w	r0, #0
 80041ac:	f04f 0100 	mov.w	r1, #0
 80041b0:	0159      	lsls	r1, r3, #5
 80041b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041b6:	0150      	lsls	r0, r2, #5
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4641      	mov	r1, r8
 80041be:	ebb2 0a01 	subs.w	sl, r2, r1
 80041c2:	4649      	mov	r1, r9
 80041c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041dc:	ebb2 040a 	subs.w	r4, r2, sl
 80041e0:	eb63 050b 	sbc.w	r5, r3, fp
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	00eb      	lsls	r3, r5, #3
 80041ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041f2:	00e2      	lsls	r2, r4, #3
 80041f4:	4614      	mov	r4, r2
 80041f6:	461d      	mov	r5, r3
 80041f8:	4643      	mov	r3, r8
 80041fa:	18e3      	adds	r3, r4, r3
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	464b      	mov	r3, r9
 8004200:	eb45 0303 	adc.w	r3, r5, r3
 8004204:	607b      	str	r3, [r7, #4]
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	f04f 0300 	mov.w	r3, #0
 800420e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004212:	4629      	mov	r1, r5
 8004214:	028b      	lsls	r3, r1, #10
 8004216:	4621      	mov	r1, r4
 8004218:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800421c:	4621      	mov	r1, r4
 800421e:	028a      	lsls	r2, r1, #10
 8004220:	4610      	mov	r0, r2
 8004222:	4619      	mov	r1, r3
 8004224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004226:	2200      	movs	r2, #0
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	61fa      	str	r2, [r7, #28]
 800422c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004230:	f7fc fcda 	bl	8000be8 <__aeabi_uldivmod>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4613      	mov	r3, r2
 800423a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <HAL_RCC_GetSysClockFreq+0x200>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	0c1b      	lsrs	r3, r3, #16
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	3301      	adds	r3, #1
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800424c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800424e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004250:	fbb2 f3f3 	udiv	r3, r2, r3
 8004254:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004256:	e002      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004258:	4b05      	ldr	r3, [pc, #20]	; (8004270 <HAL_RCC_GetSysClockFreq+0x204>)
 800425a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800425c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800425e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004260:	4618      	mov	r0, r3
 8004262:	3750      	adds	r7, #80	; 0x50
 8004264:	46bd      	mov	sp, r7
 8004266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800426a:	bf00      	nop
 800426c:	40023800 	.word	0x40023800
 8004270:	00f42400 	.word	0x00f42400
 8004274:	007a1200 	.word	0x007a1200

08004278 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800427c:	4b03      	ldr	r3, [pc, #12]	; (800428c <HAL_RCC_GetHCLKFreq+0x14>)
 800427e:	681b      	ldr	r3, [r3, #0]
}
 8004280:	4618      	mov	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	20000000 	.word	0x20000000

08004290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004294:	f7ff fff0 	bl	8004278 <HAL_RCC_GetHCLKFreq>
 8004298:	4602      	mov	r2, r0
 800429a:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	0a9b      	lsrs	r3, r3, #10
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	4903      	ldr	r1, [pc, #12]	; (80042b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042a6:	5ccb      	ldrb	r3, [r1, r3]
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40023800 	.word	0x40023800
 80042b4:	0800c718 	.word	0x0800c718

080042b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042bc:	f7ff ffdc 	bl	8004278 <HAL_RCC_GetHCLKFreq>
 80042c0:	4602      	mov	r2, r0
 80042c2:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	0b5b      	lsrs	r3, r3, #13
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	4903      	ldr	r1, [pc, #12]	; (80042dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ce:	5ccb      	ldrb	r3, [r1, r3]
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40023800 	.word	0x40023800
 80042dc:	0800c718 	.word	0x0800c718

080042e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	220f      	movs	r2, #15
 80042ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042f0:	4b12      	ldr	r3, [pc, #72]	; (800433c <HAL_RCC_GetClockConfig+0x5c>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 0203 	and.w	r2, r3, #3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042fc:	4b0f      	ldr	r3, [pc, #60]	; (800433c <HAL_RCC_GetClockConfig+0x5c>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004308:	4b0c      	ldr	r3, [pc, #48]	; (800433c <HAL_RCC_GetClockConfig+0x5c>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004314:	4b09      	ldr	r3, [pc, #36]	; (800433c <HAL_RCC_GetClockConfig+0x5c>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	08db      	lsrs	r3, r3, #3
 800431a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004322:	4b07      	ldr	r3, [pc, #28]	; (8004340 <HAL_RCC_GetClockConfig+0x60>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 020f 	and.w	r2, r3, #15
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	601a      	str	r2, [r3, #0]
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40023800 	.word	0x40023800
 8004340:	40023c00 	.word	0x40023c00

08004344 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d012      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800436c:	4b69      	ldr	r3, [pc, #420]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	4a68      	ldr	r2, [pc, #416]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004372:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004376:	6093      	str	r3, [r2, #8]
 8004378:	4b66      	ldr	r3, [pc, #408]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004380:	4964      	ldr	r1, [pc, #400]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800438e:	2301      	movs	r3, #1
 8004390:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d017      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800439e:	4b5d      	ldr	r3, [pc, #372]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ac:	4959      	ldr	r1, [pc, #356]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043bc:	d101      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80043be:	2301      	movs	r3, #1
 80043c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80043ca:	2301      	movs	r3, #1
 80043cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d017      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043da:	4b4e      	ldr	r3, [pc, #312]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	494a      	ldr	r1, [pc, #296]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043f8:	d101      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80043fa:	2301      	movs	r3, #1
 80043fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004406:	2301      	movs	r3, #1
 8004408:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004416:	2301      	movs	r3, #1
 8004418:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 808b 	beq.w	800453e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004428:	4b3a      	ldr	r3, [pc, #232]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	4a39      	ldr	r2, [pc, #228]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004432:	6413      	str	r3, [r2, #64]	; 0x40
 8004434:	4b37      	ldr	r3, [pc, #220]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004440:	4b35      	ldr	r3, [pc, #212]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a34      	ldr	r2, [pc, #208]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800444c:	f7fd fb56 	bl	8001afc <HAL_GetTick>
 8004450:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004454:	f7fd fb52 	bl	8001afc <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b64      	cmp	r3, #100	; 0x64
 8004460:	d901      	bls.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e357      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004466:	4b2c      	ldr	r3, [pc, #176]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004472:	4b28      	ldr	r3, [pc, #160]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d035      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	429a      	cmp	r2, r3
 800448e:	d02e      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004490:	4b20      	ldr	r3, [pc, #128]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004498:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800449a:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449e:	4a1d      	ldr	r2, [pc, #116]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044a6:	4b1b      	ldr	r3, [pc, #108]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	4a1a      	ldr	r2, [pc, #104]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80044b2:	4a18      	ldr	r2, [pc, #96]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044b8:	4b16      	ldr	r3, [pc, #88]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d114      	bne.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c4:	f7fd fb1a 	bl	8001afc <HAL_GetTick>
 80044c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ca:	e00a      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044cc:	f7fd fb16 	bl	8001afc <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044da:	4293      	cmp	r3, r2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e319      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e2:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0ee      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044fa:	d111      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80044fc:	4b05      	ldr	r3, [pc, #20]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004508:	4b04      	ldr	r3, [pc, #16]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800450a:	400b      	ands	r3, r1
 800450c:	4901      	ldr	r1, [pc, #4]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450e:	4313      	orrs	r3, r2
 8004510:	608b      	str	r3, [r1, #8]
 8004512:	e00b      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004514:	40023800 	.word	0x40023800
 8004518:	40007000 	.word	0x40007000
 800451c:	0ffffcff 	.word	0x0ffffcff
 8004520:	4baa      	ldr	r3, [pc, #680]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	4aa9      	ldr	r2, [pc, #676]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004526:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800452a:	6093      	str	r3, [r2, #8]
 800452c:	4ba7      	ldr	r3, [pc, #668]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800452e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004538:	49a4      	ldr	r1, [pc, #656]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800453a:	4313      	orrs	r3, r2
 800453c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0310 	and.w	r3, r3, #16
 8004546:	2b00      	cmp	r3, #0
 8004548:	d010      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800454a:	4ba0      	ldr	r3, [pc, #640]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800454c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004550:	4a9e      	ldr	r2, [pc, #632]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004552:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004556:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800455a:	4b9c      	ldr	r3, [pc, #624]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800455c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	4999      	ldr	r1, [pc, #612]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004578:	4b94      	ldr	r3, [pc, #592]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004586:	4991      	ldr	r1, [pc, #580]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800459a:	4b8c      	ldr	r3, [pc, #560]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045a8:	4988      	ldr	r1, [pc, #544]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045bc:	4b83      	ldr	r3, [pc, #524]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ca:	4980      	ldr	r1, [pc, #512]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045de:	4b7b      	ldr	r3, [pc, #492]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	4977      	ldr	r1, [pc, #476]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004600:	4b72      	ldr	r3, [pc, #456]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004606:	f023 0203 	bic.w	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	496f      	ldr	r1, [pc, #444]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004622:	4b6a      	ldr	r3, [pc, #424]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004628:	f023 020c 	bic.w	r2, r3, #12
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004630:	4966      	ldr	r1, [pc, #408]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00a      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004644:	4b61      	ldr	r3, [pc, #388]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004652:	495e      	ldr	r1, [pc, #376]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004666:	4b59      	ldr	r3, [pc, #356]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004674:	4955      	ldr	r1, [pc, #340]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004688:	4b50      	ldr	r3, [pc, #320]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004696:	494d      	ldr	r1, [pc, #308]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80046aa:	4b48      	ldr	r3, [pc, #288]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b8:	4944      	ldr	r1, [pc, #272]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80046cc:	4b3f      	ldr	r3, [pc, #252]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046da:	493c      	ldr	r1, [pc, #240]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80046ee:	4b37      	ldr	r3, [pc, #220]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046fc:	4933      	ldr	r1, [pc, #204]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004710:	4b2e      	ldr	r3, [pc, #184]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004716:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800471e:	492b      	ldr	r1, [pc, #172]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d011      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004732:	4b26      	ldr	r3, [pc, #152]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004738:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004740:	4922      	ldr	r1, [pc, #136]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800474c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004750:	d101      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004752:	2301      	movs	r3, #1
 8004754:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004762:	2301      	movs	r3, #1
 8004764:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004772:	4b16      	ldr	r3, [pc, #88]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004778:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004780:	4912      	ldr	r1, [pc, #72]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00b      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004794:	4b0d      	ldr	r3, [pc, #52]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047a4:	4909      	ldr	r1, [pc, #36]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d006      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 80d9 	beq.w	8004972 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047c0:	4b02      	ldr	r3, [pc, #8]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a01      	ldr	r2, [pc, #4]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047ca:	e001      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80047cc:	40023800 	.word	0x40023800
 80047d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d2:	f7fd f993 	bl	8001afc <HAL_GetTick>
 80047d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047d8:	e008      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047da:	f7fd f98f 	bl	8001afc <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b64      	cmp	r3, #100	; 0x64
 80047e6:	d901      	bls.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e194      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047ec:	4b6c      	ldr	r3, [pc, #432]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f0      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d021      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004808:	2b00      	cmp	r3, #0
 800480a:	d11d      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800480c:	4b64      	ldr	r3, [pc, #400]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800480e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004812:	0c1b      	lsrs	r3, r3, #16
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800481a:	4b61      	ldr	r3, [pc, #388]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800481c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004820:	0e1b      	lsrs	r3, r3, #24
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	019a      	lsls	r2, r3, #6
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	041b      	lsls	r3, r3, #16
 8004832:	431a      	orrs	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	061b      	lsls	r3, r3, #24
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	071b      	lsls	r3, r3, #28
 8004840:	4957      	ldr	r1, [pc, #348]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d004      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800485c:	d00a      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004866:	2b00      	cmp	r3, #0
 8004868:	d02e      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004872:	d129      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004874:	4b4a      	ldr	r3, [pc, #296]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800487a:	0c1b      	lsrs	r3, r3, #16
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004882:	4b47      	ldr	r3, [pc, #284]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004888:	0f1b      	lsrs	r3, r3, #28
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	019a      	lsls	r2, r3, #6
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	041b      	lsls	r3, r3, #16
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	061b      	lsls	r3, r3, #24
 80048a2:	431a      	orrs	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	071b      	lsls	r3, r3, #28
 80048a8:	493d      	ldr	r1, [pc, #244]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80048b0:	4b3b      	ldr	r3, [pc, #236]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048b6:	f023 021f 	bic.w	r2, r3, #31
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	3b01      	subs	r3, #1
 80048c0:	4937      	ldr	r1, [pc, #220]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d01d      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048d4:	4b32      	ldr	r3, [pc, #200]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048da:	0e1b      	lsrs	r3, r3, #24
 80048dc:	f003 030f 	and.w	r3, r3, #15
 80048e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048e2:	4b2f      	ldr	r3, [pc, #188]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e8:	0f1b      	lsrs	r3, r3, #28
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	019a      	lsls	r2, r3, #6
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	041b      	lsls	r3, r3, #16
 80048fc:	431a      	orrs	r2, r3
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	061b      	lsls	r3, r3, #24
 8004902:	431a      	orrs	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	071b      	lsls	r3, r3, #28
 8004908:	4925      	ldr	r1, [pc, #148]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d011      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	019a      	lsls	r2, r3, #6
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	041b      	lsls	r3, r3, #16
 8004928:	431a      	orrs	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	061b      	lsls	r3, r3, #24
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	071b      	lsls	r3, r3, #28
 8004938:	4919      	ldr	r1, [pc, #100]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004940:	4b17      	ldr	r3, [pc, #92]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a16      	ldr	r2, [pc, #88]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004946:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800494a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494c:	f7fd f8d6 	bl	8001afc <HAL_GetTick>
 8004950:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004954:	f7fd f8d2 	bl	8001afc <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b64      	cmp	r3, #100	; 0x64
 8004960:	d901      	bls.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e0d7      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004966:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f0      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2b01      	cmp	r3, #1
 8004976:	f040 80cd 	bne.w	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800497a:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a08      	ldr	r2, [pc, #32]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004986:	f7fd f8b9 	bl	8001afc <HAL_GetTick>
 800498a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800498c:	e00a      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800498e:	f7fd f8b5 	bl	8001afc <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b64      	cmp	r3, #100	; 0x64
 800499a:	d903      	bls.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e0ba      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80049a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049a4:	4b5e      	ldr	r3, [pc, #376]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049b0:	d0ed      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d009      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d02e      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d12a      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049da:	4b51      	ldr	r3, [pc, #324]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e0:	0c1b      	lsrs	r3, r3, #16
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049e8:	4b4d      	ldr	r3, [pc, #308]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ee:	0f1b      	lsrs	r3, r3, #28
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	019a      	lsls	r2, r3, #6
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	041b      	lsls	r3, r3, #16
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	061b      	lsls	r3, r3, #24
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	071b      	lsls	r3, r3, #28
 8004a0e:	4944      	ldr	r1, [pc, #272]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a16:	4b42      	ldr	r3, [pc, #264]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a24:	3b01      	subs	r3, #1
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	493d      	ldr	r1, [pc, #244]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d022      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a44:	d11d      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a46:	4b36      	ldr	r3, [pc, #216]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4c:	0e1b      	lsrs	r3, r3, #24
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a54:	4b32      	ldr	r3, [pc, #200]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5a:	0f1b      	lsrs	r3, r3, #28
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	019a      	lsls	r2, r3, #6
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	041b      	lsls	r3, r3, #16
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	061b      	lsls	r3, r3, #24
 8004a74:	431a      	orrs	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	071b      	lsls	r3, r3, #28
 8004a7a:	4929      	ldr	r1, [pc, #164]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d028      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a8e:	4b24      	ldr	r3, [pc, #144]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a94:	0e1b      	lsrs	r3, r3, #24
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a9c:	4b20      	ldr	r3, [pc, #128]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa2:	0c1b      	lsrs	r3, r3, #16
 8004aa4:	f003 0303 	and.w	r3, r3, #3
 8004aa8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	019a      	lsls	r2, r3, #6
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	041b      	lsls	r3, r3, #16
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	061b      	lsls	r3, r3, #24
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	071b      	lsls	r3, r3, #28
 8004ac2:	4917      	ldr	r1, [pc, #92]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004aca:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ad0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	4911      	ldr	r1, [pc, #68]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a0e      	ldr	r2, [pc, #56]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aec:	f7fd f806 	bl	8001afc <HAL_GetTick>
 8004af0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004af2:	e008      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004af4:	f7fd f802 	bl	8001afc <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b64      	cmp	r3, #100	; 0x64
 8004b00:	d901      	bls.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e007      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b06:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b12:	d1ef      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3720      	adds	r7, #32
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	40023800 	.word	0x40023800

08004b24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e09d      	b.n	8004c72 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d108      	bne.n	8004b50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b46:	d009      	beq.n	8004b5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	61da      	str	r2, [r3, #28]
 8004b4e:	e005      	b.n	8004b5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fc fc02 	bl	8001380 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b9c:	d902      	bls.n	8004ba4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	e002      	b.n	8004baa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ba8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004bb2:	d007      	beq.n	8004bc4 <HAL_SPI_Init+0xa0>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bbc:	d002      	beq.n	8004bc4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c06:	ea42 0103 	orr.w	r1, r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	0c1b      	lsrs	r3, r3, #16
 8004c20:	f003 0204 	and.w	r2, r3, #4
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	f003 0310 	and.w	r3, r3, #16
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c40:	ea42 0103 	orr.w	r1, r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69da      	ldr	r2, [r3, #28]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	099b      	lsrs	r3, r3, #6
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10f      	bne.n	8004cc0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	099b      	lsrs	r3, r3, #6
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d004      	beq.n	8004cc0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	4798      	blx	r3
    return;
 8004cbe:	e0d7      	b.n	8004e70 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	085b      	lsrs	r3, r3, #1
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <HAL_SPI_IRQHandler+0x66>
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	09db      	lsrs	r3, r3, #7
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d004      	beq.n	8004ce2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	4798      	blx	r3
    return;
 8004ce0:	e0c6      	b.n	8004e70 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10c      	bne.n	8004d08 <HAL_SPI_IRQHandler+0x8c>
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	099b      	lsrs	r3, r3, #6
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	0a1b      	lsrs	r3, r3, #8
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 80b4 	beq.w	8004e70 <HAL_SPI_IRQHandler+0x1f4>
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 80ad 	beq.w	8004e70 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	099b      	lsrs	r3, r3, #6
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d023      	beq.n	8004d6a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d011      	beq.n	8004d52 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d32:	f043 0204 	orr.w	r2, r3, #4
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	e00b      	b.n	8004d6a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d52:	2300      	movs	r3, #0
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	613b      	str	r3, [r7, #16]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	613b      	str	r3, [r7, #16]
 8004d66:	693b      	ldr	r3, [r7, #16]
        return;
 8004d68:	e082      	b.n	8004e70 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	095b      	lsrs	r3, r3, #5
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d014      	beq.n	8004da0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d7a:	f043 0201 	orr.w	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	0a1b      	lsrs	r3, r3, #8
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00c      	beq.n	8004dc6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db0:	f043 0208 	orr.w	r2, r3, #8
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004db8:	2300      	movs	r3, #0
 8004dba:	60bb      	str	r3, [r7, #8]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	60bb      	str	r3, [r7, #8]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d04f      	beq.n	8004e6e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ddc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <HAL_SPI_IRQHandler+0x17e>
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d034      	beq.n	8004e64 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0203 	bic.w	r2, r2, #3
 8004e08:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d011      	beq.n	8004e36 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e16:	4a18      	ldr	r2, [pc, #96]	; (8004e78 <HAL_SPI_IRQHandler+0x1fc>)
 8004e18:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fc ffca 	bl	8001db8 <HAL_DMA_Abort_IT>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d005      	beq.n	8004e36 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d016      	beq.n	8004e6c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e42:	4a0d      	ldr	r2, [pc, #52]	; (8004e78 <HAL_SPI_IRQHandler+0x1fc>)
 8004e44:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fc ffb4 	bl	8001db8 <HAL_DMA_Abort_IT>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004e62:	e003      	b.n	8004e6c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f809 	bl	8004e7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004e6a:	e000      	b.n	8004e6e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004e6c:	bf00      	nop
    return;
 8004e6e:	bf00      	nop
  }
}
 8004e70:	3720      	adds	r7, #32
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	08004e91 	.word	0x08004e91

08004e7c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f7ff ffe5 	bl	8004e7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004eb2:	bf00      	nop
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b082      	sub	sp, #8
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e049      	b.n	8004f60 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d106      	bne.n	8004ee6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f841 	bl	8004f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4610      	mov	r0, r2
 8004efa:	f000 f9ff 	bl	80052fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d001      	beq.n	8004f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e054      	b.n	800503e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0201 	orr.w	r2, r2, #1
 8004faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a26      	ldr	r2, [pc, #152]	; (800504c <HAL_TIM_Base_Start_IT+0xd0>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d022      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x80>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fbe:	d01d      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x80>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a22      	ldr	r2, [pc, #136]	; (8005050 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d018      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x80>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a21      	ldr	r2, [pc, #132]	; (8005054 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d013      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x80>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a1f      	ldr	r2, [pc, #124]	; (8005058 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00e      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x80>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a1e      	ldr	r2, [pc, #120]	; (800505c <HAL_TIM_Base_Start_IT+0xe0>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d009      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x80>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a1c      	ldr	r2, [pc, #112]	; (8005060 <HAL_TIM_Base_Start_IT+0xe4>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d004      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x80>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a1b      	ldr	r2, [pc, #108]	; (8005064 <HAL_TIM_Base_Start_IT+0xe8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d115      	bne.n	8005028 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	4b19      	ldr	r3, [pc, #100]	; (8005068 <HAL_TIM_Base_Start_IT+0xec>)
 8005004:	4013      	ands	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b06      	cmp	r3, #6
 800500c:	d015      	beq.n	800503a <HAL_TIM_Base_Start_IT+0xbe>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005014:	d011      	beq.n	800503a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0201 	orr.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005026:	e008      	b.n	800503a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0201 	orr.w	r2, r2, #1
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	e000      	b.n	800503c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800503a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40010000 	.word	0x40010000
 8005050:	40000400 	.word	0x40000400
 8005054:	40000800 	.word	0x40000800
 8005058:	40000c00 	.word	0x40000c00
 800505c:	40010400 	.word	0x40010400
 8005060:	40014000 	.word	0x40014000
 8005064:	40001800 	.word	0x40001800
 8005068:	00010007 	.word	0x00010007

0800506c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b02      	cmp	r3, #2
 8005080:	d122      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b02      	cmp	r3, #2
 800508e:	d11b      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0202 	mvn.w	r2, #2
 8005098:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f905 	bl	80052be <HAL_TIM_IC_CaptureCallback>
 80050b4:	e005      	b.n	80050c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f8f7 	bl	80052aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f908 	bl	80052d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d122      	bne.n	800511c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d11b      	bne.n	800511c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0204 	mvn.w	r2, #4
 80050ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2202      	movs	r2, #2
 80050f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f8db 	bl	80052be <HAL_TIM_IC_CaptureCallback>
 8005108:	e005      	b.n	8005116 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f8cd 	bl	80052aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f8de 	bl	80052d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b08      	cmp	r3, #8
 8005128:	d122      	bne.n	8005170 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f003 0308 	and.w	r3, r3, #8
 8005134:	2b08      	cmp	r3, #8
 8005136:	d11b      	bne.n	8005170 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0208 	mvn.w	r2, #8
 8005140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2204      	movs	r2, #4
 8005146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f8b1 	bl	80052be <HAL_TIM_IC_CaptureCallback>
 800515c:	e005      	b.n	800516a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f8a3 	bl	80052aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f8b4 	bl	80052d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 0310 	and.w	r3, r3, #16
 800517a:	2b10      	cmp	r3, #16
 800517c:	d122      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b10      	cmp	r3, #16
 800518a:	d11b      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0210 	mvn.w	r2, #16
 8005194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2208      	movs	r2, #8
 800519a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f887 	bl	80052be <HAL_TIM_IC_CaptureCallback>
 80051b0:	e005      	b.n	80051be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f879 	bl	80052aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f88a 	bl	80052d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d10e      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d107      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0201 	mvn.w	r2, #1
 80051e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7fc f872 	bl	80012d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fa:	2b80      	cmp	r3, #128	; 0x80
 80051fc:	d10e      	bne.n	800521c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005208:	2b80      	cmp	r3, #128	; 0x80
 800520a:	d107      	bne.n	800521c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f91a 	bl	8005450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522a:	d10e      	bne.n	800524a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005236:	2b80      	cmp	r3, #128	; 0x80
 8005238:	d107      	bne.n	800524a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f90d 	bl	8005464 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005254:	2b40      	cmp	r3, #64	; 0x40
 8005256:	d10e      	bne.n	8005276 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005262:	2b40      	cmp	r3, #64	; 0x40
 8005264:	d107      	bne.n	8005276 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800526e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f838 	bl	80052e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	f003 0320 	and.w	r3, r3, #32
 8005280:	2b20      	cmp	r3, #32
 8005282:	d10e      	bne.n	80052a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b20      	cmp	r3, #32
 8005290:	d107      	bne.n	80052a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f06f 0220 	mvn.w	r2, #32
 800529a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f8cd 	bl	800543c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052a2:	bf00      	nop
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
	...

080052fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a40      	ldr	r2, [pc, #256]	; (8005410 <TIM_Base_SetConfig+0x114>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d013      	beq.n	800533c <TIM_Base_SetConfig+0x40>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531a:	d00f      	beq.n	800533c <TIM_Base_SetConfig+0x40>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a3d      	ldr	r2, [pc, #244]	; (8005414 <TIM_Base_SetConfig+0x118>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00b      	beq.n	800533c <TIM_Base_SetConfig+0x40>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a3c      	ldr	r2, [pc, #240]	; (8005418 <TIM_Base_SetConfig+0x11c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d007      	beq.n	800533c <TIM_Base_SetConfig+0x40>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a3b      	ldr	r2, [pc, #236]	; (800541c <TIM_Base_SetConfig+0x120>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_Base_SetConfig+0x40>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a3a      	ldr	r2, [pc, #232]	; (8005420 <TIM_Base_SetConfig+0x124>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d108      	bne.n	800534e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a2f      	ldr	r2, [pc, #188]	; (8005410 <TIM_Base_SetConfig+0x114>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d02b      	beq.n	80053ae <TIM_Base_SetConfig+0xb2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535c:	d027      	beq.n	80053ae <TIM_Base_SetConfig+0xb2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a2c      	ldr	r2, [pc, #176]	; (8005414 <TIM_Base_SetConfig+0x118>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d023      	beq.n	80053ae <TIM_Base_SetConfig+0xb2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a2b      	ldr	r2, [pc, #172]	; (8005418 <TIM_Base_SetConfig+0x11c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d01f      	beq.n	80053ae <TIM_Base_SetConfig+0xb2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a2a      	ldr	r2, [pc, #168]	; (800541c <TIM_Base_SetConfig+0x120>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d01b      	beq.n	80053ae <TIM_Base_SetConfig+0xb2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a29      	ldr	r2, [pc, #164]	; (8005420 <TIM_Base_SetConfig+0x124>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d017      	beq.n	80053ae <TIM_Base_SetConfig+0xb2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a28      	ldr	r2, [pc, #160]	; (8005424 <TIM_Base_SetConfig+0x128>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d013      	beq.n	80053ae <TIM_Base_SetConfig+0xb2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a27      	ldr	r2, [pc, #156]	; (8005428 <TIM_Base_SetConfig+0x12c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d00f      	beq.n	80053ae <TIM_Base_SetConfig+0xb2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a26      	ldr	r2, [pc, #152]	; (800542c <TIM_Base_SetConfig+0x130>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d00b      	beq.n	80053ae <TIM_Base_SetConfig+0xb2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a25      	ldr	r2, [pc, #148]	; (8005430 <TIM_Base_SetConfig+0x134>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d007      	beq.n	80053ae <TIM_Base_SetConfig+0xb2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a24      	ldr	r2, [pc, #144]	; (8005434 <TIM_Base_SetConfig+0x138>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d003      	beq.n	80053ae <TIM_Base_SetConfig+0xb2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a23      	ldr	r2, [pc, #140]	; (8005438 <TIM_Base_SetConfig+0x13c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d108      	bne.n	80053c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a0a      	ldr	r2, [pc, #40]	; (8005410 <TIM_Base_SetConfig+0x114>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d003      	beq.n	80053f4 <TIM_Base_SetConfig+0xf8>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a0c      	ldr	r2, [pc, #48]	; (8005420 <TIM_Base_SetConfig+0x124>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d103      	bne.n	80053fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	691a      	ldr	r2, [r3, #16]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	615a      	str	r2, [r3, #20]
}
 8005402:	bf00      	nop
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40010000 	.word	0x40010000
 8005414:	40000400 	.word	0x40000400
 8005418:	40000800 	.word	0x40000800
 800541c:	40000c00 	.word	0x40000c00
 8005420:	40010400 	.word	0x40010400
 8005424:	40014000 	.word	0x40014000
 8005428:	40014400 	.word	0x40014400
 800542c:	40014800 	.word	0x40014800
 8005430:	40001800 	.word	0x40001800
 8005434:	40001c00 	.word	0x40001c00
 8005438:	40002000 	.word	0x40002000

0800543c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e040      	b.n	800550c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fc f9ca 	bl	8001834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2224      	movs	r2, #36	; 0x24
 80054a4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0201 	bic.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fba2 	bl	8005c00 <UART_SetConfig>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e022      	b.n	800550c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fdfa 	bl	80060c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fe81 	bl	800620c <UART_CheckIdleState>
 800550a:	4603      	mov	r3, r0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08a      	sub	sp, #40	; 0x28
 8005518:	af02      	add	r7, sp, #8
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	603b      	str	r3, [r7, #0]
 8005520:	4613      	mov	r3, r2
 8005522:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005528:	2b20      	cmp	r3, #32
 800552a:	d171      	bne.n	8005610 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <HAL_UART_Transmit+0x24>
 8005532:	88fb      	ldrh	r3, [r7, #6]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e06a      	b.n	8005612 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2221      	movs	r2, #33	; 0x21
 8005548:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800554a:	f7fc fad7 	bl	8001afc <HAL_GetTick>
 800554e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	88fa      	ldrh	r2, [r7, #6]
 800555c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005568:	d108      	bne.n	800557c <HAL_UART_Transmit+0x68>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d104      	bne.n	800557c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005572:	2300      	movs	r3, #0
 8005574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	e003      	b.n	8005584 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005580:	2300      	movs	r3, #0
 8005582:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005584:	e02c      	b.n	80055e0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2200      	movs	r2, #0
 800558e:	2180      	movs	r1, #128	; 0x80
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 fe72 	bl	800627a <UART_WaitOnFlagUntilTimeout>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e038      	b.n	8005612 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10b      	bne.n	80055be <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	3302      	adds	r3, #2
 80055ba:	61bb      	str	r3, [r7, #24]
 80055bc:	e007      	b.n	80055ce <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	781a      	ldrb	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	3301      	adds	r3, #1
 80055cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1cc      	bne.n	8005586 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	2200      	movs	r2, #0
 80055f4:	2140      	movs	r1, #64	; 0x40
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 fe3f 	bl	800627a <UART_WaitOnFlagUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e005      	b.n	8005612 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2220      	movs	r2, #32
 800560a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	e000      	b.n	8005612 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005610:	2302      	movs	r3, #2
  }
}
 8005612:	4618      	mov	r0, r3
 8005614:	3720      	adds	r7, #32
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
	...

0800561c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b0ba      	sub	sp, #232	; 0xe8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005642:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005646:	f640 030f 	movw	r3, #2063	; 0x80f
 800564a:	4013      	ands	r3, r2
 800564c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005654:	2b00      	cmp	r3, #0
 8005656:	d115      	bne.n	8005684 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00f      	beq.n	8005684 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005668:	f003 0320 	and.w	r3, r3, #32
 800566c:	2b00      	cmp	r3, #0
 800566e:	d009      	beq.n	8005684 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 8297 	beq.w	8005ba8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	4798      	blx	r3
      }
      return;
 8005682:	e291      	b.n	8005ba8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005684:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 8117 	beq.w	80058bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800568e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800569a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800569e:	4b85      	ldr	r3, [pc, #532]	; (80058b4 <HAL_UART_IRQHandler+0x298>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 810a 	beq.w	80058bc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d011      	beq.n	80056d8 <HAL_UART_IRQHandler+0xbc>
 80056b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00b      	beq.n	80056d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2201      	movs	r2, #1
 80056c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ce:	f043 0201 	orr.w	r2, r3, #1
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d011      	beq.n	8005708 <HAL_UART_IRQHandler+0xec>
 80056e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00b      	beq.n	8005708 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2202      	movs	r2, #2
 80056f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056fe:	f043 0204 	orr.w	r2, r3, #4
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d011      	beq.n	8005738 <HAL_UART_IRQHandler+0x11c>
 8005714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00b      	beq.n	8005738 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2204      	movs	r2, #4
 8005726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800572e:	f043 0202 	orr.w	r2, r3, #2
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800573c:	f003 0308 	and.w	r3, r3, #8
 8005740:	2b00      	cmp	r3, #0
 8005742:	d017      	beq.n	8005774 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b00      	cmp	r3, #0
 800574e:	d105      	bne.n	800575c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005754:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00b      	beq.n	8005774 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2208      	movs	r2, #8
 8005762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800576a:	f043 0208 	orr.w	r2, r3, #8
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800577c:	2b00      	cmp	r3, #0
 800577e:	d012      	beq.n	80057a6 <HAL_UART_IRQHandler+0x18a>
 8005780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005784:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00c      	beq.n	80057a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005794:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800579c:	f043 0220 	orr.w	r2, r3, #32
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 81fd 	beq.w	8005bac <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80057b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b6:	f003 0320 	and.w	r3, r3, #32
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00d      	beq.n	80057da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d007      	beq.n	80057da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ee:	2b40      	cmp	r3, #64	; 0x40
 80057f0:	d005      	beq.n	80057fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d04f      	beq.n	800589e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fe01 	bl	8006406 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580e:	2b40      	cmp	r3, #64	; 0x40
 8005810:	d141      	bne.n	8005896 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3308      	adds	r3, #8
 8005818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005820:	e853 3f00 	ldrex	r3, [r3]
 8005824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800582c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005830:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3308      	adds	r3, #8
 800583a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800583e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005842:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800584a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005856:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1d9      	bne.n	8005812 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005862:	2b00      	cmp	r3, #0
 8005864:	d013      	beq.n	800588e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800586a:	4a13      	ldr	r2, [pc, #76]	; (80058b8 <HAL_UART_IRQHandler+0x29c>)
 800586c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005872:	4618      	mov	r0, r3
 8005874:	f7fc faa0 	bl	8001db8 <HAL_DMA_Abort_IT>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d017      	beq.n	80058ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005888:	4610      	mov	r0, r2
 800588a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588c:	e00f      	b.n	80058ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f9a0 	bl	8005bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005894:	e00b      	b.n	80058ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f99c 	bl	8005bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589c:	e007      	b.n	80058ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f998 	bl	8005bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80058ac:	e17e      	b.n	8005bac <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ae:	bf00      	nop
    return;
 80058b0:	e17c      	b.n	8005bac <HAL_UART_IRQHandler+0x590>
 80058b2:	bf00      	nop
 80058b4:	04000120 	.word	0x04000120
 80058b8:	080064cf 	.word	0x080064cf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	f040 814c 	bne.w	8005b5e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ca:	f003 0310 	and.w	r3, r3, #16
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 8145 	beq.w	8005b5e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d8:	f003 0310 	and.w	r3, r3, #16
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 813e 	beq.w	8005b5e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2210      	movs	r2, #16
 80058e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f4:	2b40      	cmp	r3, #64	; 0x40
 80058f6:	f040 80b6 	bne.w	8005a66 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005906:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 8150 	beq.w	8005bb0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800591a:	429a      	cmp	r2, r3
 800591c:	f080 8148 	bcs.w	8005bb0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005926:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005934:	f000 8086 	beq.w	8005a44 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005940:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005944:	e853 3f00 	ldrex	r3, [r3]
 8005948:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800594c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005954:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	461a      	mov	r2, r3
 800595e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005962:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005966:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800596e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005972:	e841 2300 	strex	r3, r2, [r1]
 8005976:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800597a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1da      	bne.n	8005938 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3308      	adds	r3, #8
 8005988:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005994:	f023 0301 	bic.w	r3, r3, #1
 8005998:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3308      	adds	r3, #8
 80059a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e1      	bne.n	8005982 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3308      	adds	r3, #8
 80059c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059c8:	e853 3f00 	ldrex	r3, [r3]
 80059cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80059ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3308      	adds	r3, #8
 80059de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1e3      	bne.n	80059be <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a14:	f023 0310 	bic.w	r3, r3, #16
 8005a18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	461a      	mov	r2, r3
 8005a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a26:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a28:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a2e:	e841 2300 	strex	r3, r2, [r1]
 8005a32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1e4      	bne.n	8005a04 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fc f94a 	bl	8001cd8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f8c2 	bl	8005be8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a64:	e0a4      	b.n	8005bb0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 8096 	beq.w	8005bb4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005a88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 8091 	beq.w	8005bb4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005aa6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ab4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ab6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005aba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005abc:	e841 2300 	strex	r3, r2, [r1]
 8005ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e4      	bne.n	8005a92 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3308      	adds	r3, #8
 8005ace:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	623b      	str	r3, [r7, #32]
   return(result);
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	f023 0301 	bic.w	r3, r3, #1
 8005ade:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005aec:	633a      	str	r2, [r7, #48]	; 0x30
 8005aee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e3      	bne.n	8005ac8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
 8005b20:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f023 0310 	bic.w	r3, r3, #16
 8005b28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	461a      	mov	r2, r3
 8005b32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b36:	61fb      	str	r3, [r7, #28]
 8005b38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3a:	69b9      	ldr	r1, [r7, #24]
 8005b3c:	69fa      	ldr	r2, [r7, #28]
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	617b      	str	r3, [r7, #20]
   return(result);
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1e4      	bne.n	8005b14 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b54:	4619      	mov	r1, r3
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f846 	bl	8005be8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b5c:	e02a      	b.n	8005bb4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00e      	beq.n	8005b88 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d008      	beq.n	8005b88 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d01c      	beq.n	8005bb8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	4798      	blx	r3
    }
    return;
 8005b86:	e017      	b.n	8005bb8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d012      	beq.n	8005bba <HAL_UART_IRQHandler+0x59e>
 8005b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00c      	beq.n	8005bba <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fcaa 	bl	80064fa <UART_EndTransmit_IT>
    return;
 8005ba6:	e008      	b.n	8005bba <HAL_UART_IRQHandler+0x59e>
      return;
 8005ba8:	bf00      	nop
 8005baa:	e006      	b.n	8005bba <HAL_UART_IRQHandler+0x59e>
    return;
 8005bac:	bf00      	nop
 8005bae:	e004      	b.n	8005bba <HAL_UART_IRQHandler+0x59e>
      return;
 8005bb0:	bf00      	nop
 8005bb2:	e002      	b.n	8005bba <HAL_UART_IRQHandler+0x59e>
      return;
 8005bb4:	bf00      	nop
 8005bb6:	e000      	b.n	8005bba <HAL_UART_IRQHandler+0x59e>
    return;
 8005bb8:	bf00      	nop
  }

}
 8005bba:	37e8      	adds	r7, #232	; 0xe8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b088      	sub	sp, #32
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	431a      	orrs	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	4ba6      	ldr	r3, [pc, #664]	; (8005ec4 <UART_SetConfig+0x2c4>)
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6812      	ldr	r2, [r2, #0]
 8005c32:	6979      	ldr	r1, [r7, #20]
 8005c34:	430b      	orrs	r3, r1
 8005c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a94      	ldr	r2, [pc, #592]	; (8005ec8 <UART_SetConfig+0x2c8>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d120      	bne.n	8005cbe <UART_SetConfig+0xbe>
 8005c7c:	4b93      	ldr	r3, [pc, #588]	; (8005ecc <UART_SetConfig+0x2cc>)
 8005c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c82:	f003 0303 	and.w	r3, r3, #3
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d816      	bhi.n	8005cb8 <UART_SetConfig+0xb8>
 8005c8a:	a201      	add	r2, pc, #4	; (adr r2, 8005c90 <UART_SetConfig+0x90>)
 8005c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c90:	08005ca1 	.word	0x08005ca1
 8005c94:	08005cad 	.word	0x08005cad
 8005c98:	08005ca7 	.word	0x08005ca7
 8005c9c:	08005cb3 	.word	0x08005cb3
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	77fb      	strb	r3, [r7, #31]
 8005ca4:	e150      	b.n	8005f48 <UART_SetConfig+0x348>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	77fb      	strb	r3, [r7, #31]
 8005caa:	e14d      	b.n	8005f48 <UART_SetConfig+0x348>
 8005cac:	2304      	movs	r3, #4
 8005cae:	77fb      	strb	r3, [r7, #31]
 8005cb0:	e14a      	b.n	8005f48 <UART_SetConfig+0x348>
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	77fb      	strb	r3, [r7, #31]
 8005cb6:	e147      	b.n	8005f48 <UART_SetConfig+0x348>
 8005cb8:	2310      	movs	r3, #16
 8005cba:	77fb      	strb	r3, [r7, #31]
 8005cbc:	e144      	b.n	8005f48 <UART_SetConfig+0x348>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a83      	ldr	r2, [pc, #524]	; (8005ed0 <UART_SetConfig+0x2d0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d132      	bne.n	8005d2e <UART_SetConfig+0x12e>
 8005cc8:	4b80      	ldr	r3, [pc, #512]	; (8005ecc <UART_SetConfig+0x2cc>)
 8005cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cce:	f003 030c 	and.w	r3, r3, #12
 8005cd2:	2b0c      	cmp	r3, #12
 8005cd4:	d828      	bhi.n	8005d28 <UART_SetConfig+0x128>
 8005cd6:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <UART_SetConfig+0xdc>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005d11 	.word	0x08005d11
 8005ce0:	08005d29 	.word	0x08005d29
 8005ce4:	08005d29 	.word	0x08005d29
 8005ce8:	08005d29 	.word	0x08005d29
 8005cec:	08005d1d 	.word	0x08005d1d
 8005cf0:	08005d29 	.word	0x08005d29
 8005cf4:	08005d29 	.word	0x08005d29
 8005cf8:	08005d29 	.word	0x08005d29
 8005cfc:	08005d17 	.word	0x08005d17
 8005d00:	08005d29 	.word	0x08005d29
 8005d04:	08005d29 	.word	0x08005d29
 8005d08:	08005d29 	.word	0x08005d29
 8005d0c:	08005d23 	.word	0x08005d23
 8005d10:	2300      	movs	r3, #0
 8005d12:	77fb      	strb	r3, [r7, #31]
 8005d14:	e118      	b.n	8005f48 <UART_SetConfig+0x348>
 8005d16:	2302      	movs	r3, #2
 8005d18:	77fb      	strb	r3, [r7, #31]
 8005d1a:	e115      	b.n	8005f48 <UART_SetConfig+0x348>
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	77fb      	strb	r3, [r7, #31]
 8005d20:	e112      	b.n	8005f48 <UART_SetConfig+0x348>
 8005d22:	2308      	movs	r3, #8
 8005d24:	77fb      	strb	r3, [r7, #31]
 8005d26:	e10f      	b.n	8005f48 <UART_SetConfig+0x348>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	77fb      	strb	r3, [r7, #31]
 8005d2c:	e10c      	b.n	8005f48 <UART_SetConfig+0x348>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a68      	ldr	r2, [pc, #416]	; (8005ed4 <UART_SetConfig+0x2d4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d120      	bne.n	8005d7a <UART_SetConfig+0x17a>
 8005d38:	4b64      	ldr	r3, [pc, #400]	; (8005ecc <UART_SetConfig+0x2cc>)
 8005d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d42:	2b30      	cmp	r3, #48	; 0x30
 8005d44:	d013      	beq.n	8005d6e <UART_SetConfig+0x16e>
 8005d46:	2b30      	cmp	r3, #48	; 0x30
 8005d48:	d814      	bhi.n	8005d74 <UART_SetConfig+0x174>
 8005d4a:	2b20      	cmp	r3, #32
 8005d4c:	d009      	beq.n	8005d62 <UART_SetConfig+0x162>
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d810      	bhi.n	8005d74 <UART_SetConfig+0x174>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <UART_SetConfig+0x15c>
 8005d56:	2b10      	cmp	r3, #16
 8005d58:	d006      	beq.n	8005d68 <UART_SetConfig+0x168>
 8005d5a:	e00b      	b.n	8005d74 <UART_SetConfig+0x174>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	77fb      	strb	r3, [r7, #31]
 8005d60:	e0f2      	b.n	8005f48 <UART_SetConfig+0x348>
 8005d62:	2302      	movs	r3, #2
 8005d64:	77fb      	strb	r3, [r7, #31]
 8005d66:	e0ef      	b.n	8005f48 <UART_SetConfig+0x348>
 8005d68:	2304      	movs	r3, #4
 8005d6a:	77fb      	strb	r3, [r7, #31]
 8005d6c:	e0ec      	b.n	8005f48 <UART_SetConfig+0x348>
 8005d6e:	2308      	movs	r3, #8
 8005d70:	77fb      	strb	r3, [r7, #31]
 8005d72:	e0e9      	b.n	8005f48 <UART_SetConfig+0x348>
 8005d74:	2310      	movs	r3, #16
 8005d76:	77fb      	strb	r3, [r7, #31]
 8005d78:	e0e6      	b.n	8005f48 <UART_SetConfig+0x348>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a56      	ldr	r2, [pc, #344]	; (8005ed8 <UART_SetConfig+0x2d8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d120      	bne.n	8005dc6 <UART_SetConfig+0x1c6>
 8005d84:	4b51      	ldr	r3, [pc, #324]	; (8005ecc <UART_SetConfig+0x2cc>)
 8005d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8005d90:	d013      	beq.n	8005dba <UART_SetConfig+0x1ba>
 8005d92:	2bc0      	cmp	r3, #192	; 0xc0
 8005d94:	d814      	bhi.n	8005dc0 <UART_SetConfig+0x1c0>
 8005d96:	2b80      	cmp	r3, #128	; 0x80
 8005d98:	d009      	beq.n	8005dae <UART_SetConfig+0x1ae>
 8005d9a:	2b80      	cmp	r3, #128	; 0x80
 8005d9c:	d810      	bhi.n	8005dc0 <UART_SetConfig+0x1c0>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <UART_SetConfig+0x1a8>
 8005da2:	2b40      	cmp	r3, #64	; 0x40
 8005da4:	d006      	beq.n	8005db4 <UART_SetConfig+0x1b4>
 8005da6:	e00b      	b.n	8005dc0 <UART_SetConfig+0x1c0>
 8005da8:	2300      	movs	r3, #0
 8005daa:	77fb      	strb	r3, [r7, #31]
 8005dac:	e0cc      	b.n	8005f48 <UART_SetConfig+0x348>
 8005dae:	2302      	movs	r3, #2
 8005db0:	77fb      	strb	r3, [r7, #31]
 8005db2:	e0c9      	b.n	8005f48 <UART_SetConfig+0x348>
 8005db4:	2304      	movs	r3, #4
 8005db6:	77fb      	strb	r3, [r7, #31]
 8005db8:	e0c6      	b.n	8005f48 <UART_SetConfig+0x348>
 8005dba:	2308      	movs	r3, #8
 8005dbc:	77fb      	strb	r3, [r7, #31]
 8005dbe:	e0c3      	b.n	8005f48 <UART_SetConfig+0x348>
 8005dc0:	2310      	movs	r3, #16
 8005dc2:	77fb      	strb	r3, [r7, #31]
 8005dc4:	e0c0      	b.n	8005f48 <UART_SetConfig+0x348>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a44      	ldr	r2, [pc, #272]	; (8005edc <UART_SetConfig+0x2dc>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d125      	bne.n	8005e1c <UART_SetConfig+0x21c>
 8005dd0:	4b3e      	ldr	r3, [pc, #248]	; (8005ecc <UART_SetConfig+0x2cc>)
 8005dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dde:	d017      	beq.n	8005e10 <UART_SetConfig+0x210>
 8005de0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005de4:	d817      	bhi.n	8005e16 <UART_SetConfig+0x216>
 8005de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dea:	d00b      	beq.n	8005e04 <UART_SetConfig+0x204>
 8005dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005df0:	d811      	bhi.n	8005e16 <UART_SetConfig+0x216>
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <UART_SetConfig+0x1fe>
 8005df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dfa:	d006      	beq.n	8005e0a <UART_SetConfig+0x20a>
 8005dfc:	e00b      	b.n	8005e16 <UART_SetConfig+0x216>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	77fb      	strb	r3, [r7, #31]
 8005e02:	e0a1      	b.n	8005f48 <UART_SetConfig+0x348>
 8005e04:	2302      	movs	r3, #2
 8005e06:	77fb      	strb	r3, [r7, #31]
 8005e08:	e09e      	b.n	8005f48 <UART_SetConfig+0x348>
 8005e0a:	2304      	movs	r3, #4
 8005e0c:	77fb      	strb	r3, [r7, #31]
 8005e0e:	e09b      	b.n	8005f48 <UART_SetConfig+0x348>
 8005e10:	2308      	movs	r3, #8
 8005e12:	77fb      	strb	r3, [r7, #31]
 8005e14:	e098      	b.n	8005f48 <UART_SetConfig+0x348>
 8005e16:	2310      	movs	r3, #16
 8005e18:	77fb      	strb	r3, [r7, #31]
 8005e1a:	e095      	b.n	8005f48 <UART_SetConfig+0x348>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a2f      	ldr	r2, [pc, #188]	; (8005ee0 <UART_SetConfig+0x2e0>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d125      	bne.n	8005e72 <UART_SetConfig+0x272>
 8005e26:	4b29      	ldr	r3, [pc, #164]	; (8005ecc <UART_SetConfig+0x2cc>)
 8005e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e34:	d017      	beq.n	8005e66 <UART_SetConfig+0x266>
 8005e36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e3a:	d817      	bhi.n	8005e6c <UART_SetConfig+0x26c>
 8005e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e40:	d00b      	beq.n	8005e5a <UART_SetConfig+0x25a>
 8005e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e46:	d811      	bhi.n	8005e6c <UART_SetConfig+0x26c>
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <UART_SetConfig+0x254>
 8005e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e50:	d006      	beq.n	8005e60 <UART_SetConfig+0x260>
 8005e52:	e00b      	b.n	8005e6c <UART_SetConfig+0x26c>
 8005e54:	2301      	movs	r3, #1
 8005e56:	77fb      	strb	r3, [r7, #31]
 8005e58:	e076      	b.n	8005f48 <UART_SetConfig+0x348>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	77fb      	strb	r3, [r7, #31]
 8005e5e:	e073      	b.n	8005f48 <UART_SetConfig+0x348>
 8005e60:	2304      	movs	r3, #4
 8005e62:	77fb      	strb	r3, [r7, #31]
 8005e64:	e070      	b.n	8005f48 <UART_SetConfig+0x348>
 8005e66:	2308      	movs	r3, #8
 8005e68:	77fb      	strb	r3, [r7, #31]
 8005e6a:	e06d      	b.n	8005f48 <UART_SetConfig+0x348>
 8005e6c:	2310      	movs	r3, #16
 8005e6e:	77fb      	strb	r3, [r7, #31]
 8005e70:	e06a      	b.n	8005f48 <UART_SetConfig+0x348>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a1b      	ldr	r2, [pc, #108]	; (8005ee4 <UART_SetConfig+0x2e4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d138      	bne.n	8005eee <UART_SetConfig+0x2ee>
 8005e7c:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <UART_SetConfig+0x2cc>)
 8005e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e82:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005e86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e8a:	d017      	beq.n	8005ebc <UART_SetConfig+0x2bc>
 8005e8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e90:	d82a      	bhi.n	8005ee8 <UART_SetConfig+0x2e8>
 8005e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e96:	d00b      	beq.n	8005eb0 <UART_SetConfig+0x2b0>
 8005e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e9c:	d824      	bhi.n	8005ee8 <UART_SetConfig+0x2e8>
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <UART_SetConfig+0x2aa>
 8005ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea6:	d006      	beq.n	8005eb6 <UART_SetConfig+0x2b6>
 8005ea8:	e01e      	b.n	8005ee8 <UART_SetConfig+0x2e8>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	77fb      	strb	r3, [r7, #31]
 8005eae:	e04b      	b.n	8005f48 <UART_SetConfig+0x348>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	77fb      	strb	r3, [r7, #31]
 8005eb4:	e048      	b.n	8005f48 <UART_SetConfig+0x348>
 8005eb6:	2304      	movs	r3, #4
 8005eb8:	77fb      	strb	r3, [r7, #31]
 8005eba:	e045      	b.n	8005f48 <UART_SetConfig+0x348>
 8005ebc:	2308      	movs	r3, #8
 8005ebe:	77fb      	strb	r3, [r7, #31]
 8005ec0:	e042      	b.n	8005f48 <UART_SetConfig+0x348>
 8005ec2:	bf00      	nop
 8005ec4:	efff69f3 	.word	0xefff69f3
 8005ec8:	40011000 	.word	0x40011000
 8005ecc:	40023800 	.word	0x40023800
 8005ed0:	40004400 	.word	0x40004400
 8005ed4:	40004800 	.word	0x40004800
 8005ed8:	40004c00 	.word	0x40004c00
 8005edc:	40005000 	.word	0x40005000
 8005ee0:	40011400 	.word	0x40011400
 8005ee4:	40007800 	.word	0x40007800
 8005ee8:	2310      	movs	r3, #16
 8005eea:	77fb      	strb	r3, [r7, #31]
 8005eec:	e02c      	b.n	8005f48 <UART_SetConfig+0x348>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a72      	ldr	r2, [pc, #456]	; (80060bc <UART_SetConfig+0x4bc>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d125      	bne.n	8005f44 <UART_SetConfig+0x344>
 8005ef8:	4b71      	ldr	r3, [pc, #452]	; (80060c0 <UART_SetConfig+0x4c0>)
 8005efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f02:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f06:	d017      	beq.n	8005f38 <UART_SetConfig+0x338>
 8005f08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f0c:	d817      	bhi.n	8005f3e <UART_SetConfig+0x33e>
 8005f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f12:	d00b      	beq.n	8005f2c <UART_SetConfig+0x32c>
 8005f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f18:	d811      	bhi.n	8005f3e <UART_SetConfig+0x33e>
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <UART_SetConfig+0x326>
 8005f1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f22:	d006      	beq.n	8005f32 <UART_SetConfig+0x332>
 8005f24:	e00b      	b.n	8005f3e <UART_SetConfig+0x33e>
 8005f26:	2300      	movs	r3, #0
 8005f28:	77fb      	strb	r3, [r7, #31]
 8005f2a:	e00d      	b.n	8005f48 <UART_SetConfig+0x348>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	77fb      	strb	r3, [r7, #31]
 8005f30:	e00a      	b.n	8005f48 <UART_SetConfig+0x348>
 8005f32:	2304      	movs	r3, #4
 8005f34:	77fb      	strb	r3, [r7, #31]
 8005f36:	e007      	b.n	8005f48 <UART_SetConfig+0x348>
 8005f38:	2308      	movs	r3, #8
 8005f3a:	77fb      	strb	r3, [r7, #31]
 8005f3c:	e004      	b.n	8005f48 <UART_SetConfig+0x348>
 8005f3e:	2310      	movs	r3, #16
 8005f40:	77fb      	strb	r3, [r7, #31]
 8005f42:	e001      	b.n	8005f48 <UART_SetConfig+0x348>
 8005f44:	2310      	movs	r3, #16
 8005f46:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f50:	d15b      	bne.n	800600a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005f52:	7ffb      	ldrb	r3, [r7, #31]
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d828      	bhi.n	8005faa <UART_SetConfig+0x3aa>
 8005f58:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <UART_SetConfig+0x360>)
 8005f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5e:	bf00      	nop
 8005f60:	08005f85 	.word	0x08005f85
 8005f64:	08005f8d 	.word	0x08005f8d
 8005f68:	08005f95 	.word	0x08005f95
 8005f6c:	08005fab 	.word	0x08005fab
 8005f70:	08005f9b 	.word	0x08005f9b
 8005f74:	08005fab 	.word	0x08005fab
 8005f78:	08005fab 	.word	0x08005fab
 8005f7c:	08005fab 	.word	0x08005fab
 8005f80:	08005fa3 	.word	0x08005fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f84:	f7fe f984 	bl	8004290 <HAL_RCC_GetPCLK1Freq>
 8005f88:	61b8      	str	r0, [r7, #24]
        break;
 8005f8a:	e013      	b.n	8005fb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f8c:	f7fe f994 	bl	80042b8 <HAL_RCC_GetPCLK2Freq>
 8005f90:	61b8      	str	r0, [r7, #24]
        break;
 8005f92:	e00f      	b.n	8005fb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f94:	4b4b      	ldr	r3, [pc, #300]	; (80060c4 <UART_SetConfig+0x4c4>)
 8005f96:	61bb      	str	r3, [r7, #24]
        break;
 8005f98:	e00c      	b.n	8005fb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f9a:	f7fe f867 	bl	800406c <HAL_RCC_GetSysClockFreq>
 8005f9e:	61b8      	str	r0, [r7, #24]
        break;
 8005fa0:	e008      	b.n	8005fb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fa6:	61bb      	str	r3, [r7, #24]
        break;
 8005fa8:	e004      	b.n	8005fb4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	77bb      	strb	r3, [r7, #30]
        break;
 8005fb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d074      	beq.n	80060a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	005a      	lsls	r2, r3, #1
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	085b      	lsrs	r3, r3, #1
 8005fc4:	441a      	add	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	2b0f      	cmp	r3, #15
 8005fd4:	d916      	bls.n	8006004 <UART_SetConfig+0x404>
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fdc:	d212      	bcs.n	8006004 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f023 030f 	bic.w	r3, r3, #15
 8005fe6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	085b      	lsrs	r3, r3, #1
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	89fb      	ldrh	r3, [r7, #14]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	89fa      	ldrh	r2, [r7, #14]
 8006000:	60da      	str	r2, [r3, #12]
 8006002:	e04f      	b.n	80060a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	77bb      	strb	r3, [r7, #30]
 8006008:	e04c      	b.n	80060a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800600a:	7ffb      	ldrb	r3, [r7, #31]
 800600c:	2b08      	cmp	r3, #8
 800600e:	d828      	bhi.n	8006062 <UART_SetConfig+0x462>
 8006010:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <UART_SetConfig+0x418>)
 8006012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006016:	bf00      	nop
 8006018:	0800603d 	.word	0x0800603d
 800601c:	08006045 	.word	0x08006045
 8006020:	0800604d 	.word	0x0800604d
 8006024:	08006063 	.word	0x08006063
 8006028:	08006053 	.word	0x08006053
 800602c:	08006063 	.word	0x08006063
 8006030:	08006063 	.word	0x08006063
 8006034:	08006063 	.word	0x08006063
 8006038:	0800605b 	.word	0x0800605b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800603c:	f7fe f928 	bl	8004290 <HAL_RCC_GetPCLK1Freq>
 8006040:	61b8      	str	r0, [r7, #24]
        break;
 8006042:	e013      	b.n	800606c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006044:	f7fe f938 	bl	80042b8 <HAL_RCC_GetPCLK2Freq>
 8006048:	61b8      	str	r0, [r7, #24]
        break;
 800604a:	e00f      	b.n	800606c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800604c:	4b1d      	ldr	r3, [pc, #116]	; (80060c4 <UART_SetConfig+0x4c4>)
 800604e:	61bb      	str	r3, [r7, #24]
        break;
 8006050:	e00c      	b.n	800606c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006052:	f7fe f80b 	bl	800406c <HAL_RCC_GetSysClockFreq>
 8006056:	61b8      	str	r0, [r7, #24]
        break;
 8006058:	e008      	b.n	800606c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800605a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800605e:	61bb      	str	r3, [r7, #24]
        break;
 8006060:	e004      	b.n	800606c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	77bb      	strb	r3, [r7, #30]
        break;
 800606a:	bf00      	nop
    }

    if (pclk != 0U)
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d018      	beq.n	80060a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	085a      	lsrs	r2, r3, #1
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	441a      	add	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	fbb2 f3f3 	udiv	r3, r2, r3
 8006084:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	2b0f      	cmp	r3, #15
 800608a:	d909      	bls.n	80060a0 <UART_SetConfig+0x4a0>
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006092:	d205      	bcs.n	80060a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	b29a      	uxth	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	60da      	str	r2, [r3, #12]
 800609e:	e001      	b.n	80060a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80060b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3720      	adds	r7, #32
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	40007c00 	.word	0x40007c00
 80060c0:	40023800 	.word	0x40023800
 80060c4:	00f42400 	.word	0x00f42400

080060c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00a      	beq.n	80060f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00a      	beq.n	8006136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	f003 0308 	and.w	r3, r3, #8
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00a      	beq.n	8006158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	f003 0310 	and.w	r3, r3, #16
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00a      	beq.n	800617a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	f003 0320 	and.w	r3, r3, #32
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01a      	beq.n	80061de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061c6:	d10a      	bne.n	80061de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00a      	beq.n	8006200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	605a      	str	r2, [r3, #4]
  }
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af02      	add	r7, sp, #8
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800621c:	f7fb fc6e 	bl	8001afc <HAL_GetTick>
 8006220:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0308 	and.w	r3, r3, #8
 800622c:	2b08      	cmp	r3, #8
 800622e:	d10e      	bne.n	800624e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f81b 	bl	800627a <UART_WaitOnFlagUntilTimeout>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e011      	b.n	8006272 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2220      	movs	r2, #32
 8006258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b09c      	sub	sp, #112	; 0x70
 800627e:	af00      	add	r7, sp, #0
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	603b      	str	r3, [r7, #0]
 8006286:	4613      	mov	r3, r2
 8006288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800628a:	e0a7      	b.n	80063dc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800628c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800628e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006292:	f000 80a3 	beq.w	80063dc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006296:	f7fb fc31 	bl	8001afc <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d302      	bcc.n	80062ac <UART_WaitOnFlagUntilTimeout+0x32>
 80062a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d13f      	bne.n	800632c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062b4:	e853 3f00 	ldrex	r3, [r3]
 80062b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062c0:	667b      	str	r3, [r7, #100]	; 0x64
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062cc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062d2:	e841 2300 	strex	r3, r2, [r1]
 80062d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1e6      	bne.n	80062ac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3308      	adds	r3, #8
 80062e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e8:	e853 3f00 	ldrex	r3, [r3]
 80062ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f0:	f023 0301 	bic.w	r3, r3, #1
 80062f4:	663b      	str	r3, [r7, #96]	; 0x60
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	3308      	adds	r3, #8
 80062fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8006300:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006302:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006304:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006306:	e841 2300 	strex	r3, r2, [r1]
 800630a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800630c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1e5      	bne.n	80062de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2220      	movs	r2, #32
 8006316:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2220      	movs	r2, #32
 800631c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e068      	b.n	80063fe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0304 	and.w	r3, r3, #4
 8006336:	2b00      	cmp	r3, #0
 8006338:	d050      	beq.n	80063dc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006348:	d148      	bne.n	80063dc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006352:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	e853 3f00 	ldrex	r3, [r3]
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006368:	66fb      	str	r3, [r7, #108]	; 0x6c
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006372:	637b      	str	r3, [r7, #52]	; 0x34
 8006374:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006376:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800637a:	e841 2300 	strex	r3, r2, [r1]
 800637e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1e6      	bne.n	8006354 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3308      	adds	r3, #8
 800638c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	e853 3f00 	ldrex	r3, [r3]
 8006394:	613b      	str	r3, [r7, #16]
   return(result);
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f023 0301 	bic.w	r3, r3, #1
 800639c:	66bb      	str	r3, [r7, #104]	; 0x68
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3308      	adds	r3, #8
 80063a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063a6:	623a      	str	r2, [r7, #32]
 80063a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063aa:	69f9      	ldr	r1, [r7, #28]
 80063ac:	6a3a      	ldr	r2, [r7, #32]
 80063ae:	e841 2300 	strex	r3, r2, [r1]
 80063b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1e5      	bne.n	8006386 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2220      	movs	r2, #32
 80063be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e010      	b.n	80063fe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	69da      	ldr	r2, [r3, #28]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	4013      	ands	r3, r2
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	bf0c      	ite	eq
 80063ec:	2301      	moveq	r3, #1
 80063ee:	2300      	movne	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	79fb      	ldrb	r3, [r7, #7]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	f43f af48 	beq.w	800628c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3770      	adds	r7, #112	; 0x70
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006406:	b480      	push	{r7}
 8006408:	b095      	sub	sp, #84	; 0x54
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	461a      	mov	r2, r3
 800642a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800642c:	643b      	str	r3, [r7, #64]	; 0x40
 800642e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006432:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800643a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e6      	bne.n	800640e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3308      	adds	r3, #8
 8006446:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	e853 3f00 	ldrex	r3, [r3]
 800644e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	f023 0301 	bic.w	r3, r3, #1
 8006456:	64bb      	str	r3, [r7, #72]	; 0x48
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3308      	adds	r3, #8
 800645e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006460:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006462:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006468:	e841 2300 	strex	r3, r2, [r1]
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1e5      	bne.n	8006440 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006478:	2b01      	cmp	r3, #1
 800647a:	d118      	bne.n	80064ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	e853 3f00 	ldrex	r3, [r3]
 8006488:	60bb      	str	r3, [r7, #8]
   return(result);
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	f023 0310 	bic.w	r3, r3, #16
 8006490:	647b      	str	r3, [r7, #68]	; 0x44
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800649a:	61bb      	str	r3, [r7, #24]
 800649c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649e:	6979      	ldr	r1, [r7, #20]
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	e841 2300 	strex	r3, r2, [r1]
 80064a6:	613b      	str	r3, [r7, #16]
   return(result);
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1e6      	bne.n	800647c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2220      	movs	r2, #32
 80064b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80064c2:	bf00      	nop
 80064c4:	3754      	adds	r7, #84	; 0x54
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b084      	sub	sp, #16
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f7ff fb71 	bl	8005bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064f2:	bf00      	nop
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b088      	sub	sp, #32
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	e853 3f00 	ldrex	r3, [r3]
 800650e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006516:	61fb      	str	r3, [r7, #28]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	461a      	mov	r2, r3
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006524:	6979      	ldr	r1, [r7, #20]
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	e841 2300 	strex	r3, r2, [r1]
 800652c:	613b      	str	r3, [r7, #16]
   return(result);
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e6      	bne.n	8006502 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2220      	movs	r2, #32
 8006538:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff fb3d 	bl	8005bc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006546:	bf00      	nop
 8006548:	3720      	adds	r7, #32
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f043 0201 	orr.w	r2, r3, #1
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f023 0201 	bic.w	r2, r3, #1
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
	...

08006594 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3301      	adds	r3, #1
 80065a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4a13      	ldr	r2, [pc, #76]	; (80065f8 <USB_FlushTxFifo+0x64>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d901      	bls.n	80065b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e01b      	b.n	80065ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	daf2      	bge.n	80065a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	019b      	lsls	r3, r3, #6
 80065c4:	f043 0220 	orr.w	r2, r3, #32
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3301      	adds	r3, #1
 80065d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4a08      	ldr	r2, [pc, #32]	; (80065f8 <USB_FlushTxFifo+0x64>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d901      	bls.n	80065de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e006      	b.n	80065ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b20      	cmp	r3, #32
 80065e8:	d0f0      	beq.n	80065cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	00030d40 	.word	0x00030d40

080065fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3301      	adds	r3, #1
 800660c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4a11      	ldr	r2, [pc, #68]	; (8006658 <USB_FlushRxFifo+0x5c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d901      	bls.n	800661a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e018      	b.n	800664c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	daf2      	bge.n	8006608 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2210      	movs	r2, #16
 800662a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	3301      	adds	r3, #1
 8006630:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4a08      	ldr	r2, [pc, #32]	; (8006658 <USB_FlushRxFifo+0x5c>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d901      	bls.n	800663e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e006      	b.n	800664c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	f003 0310 	and.w	r3, r3, #16
 8006646:	2b10      	cmp	r3, #16
 8006648:	d0f0      	beq.n	800662c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	00030d40 	.word	0x00030d40

0800665c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800665c:	b480      	push	{r7}
 800665e:	b08b      	sub	sp, #44	; 0x2c
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	4613      	mov	r3, r2
 8006668:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006672:	88fb      	ldrh	r3, [r7, #6]
 8006674:	089b      	lsrs	r3, r3, #2
 8006676:	b29b      	uxth	r3, r3
 8006678:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800667a:	88fb      	ldrh	r3, [r7, #6]
 800667c:	f003 0303 	and.w	r3, r3, #3
 8006680:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006682:	2300      	movs	r3, #0
 8006684:	623b      	str	r3, [r7, #32]
 8006686:	e014      	b.n	80066b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	601a      	str	r2, [r3, #0]
    pDest++;
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	3301      	adds	r3, #1
 8006698:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	3301      	adds	r3, #1
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	3301      	adds	r3, #1
 80066a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a8:	3301      	adds	r3, #1
 80066aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	3301      	adds	r3, #1
 80066b0:	623b      	str	r3, [r7, #32]
 80066b2:	6a3a      	ldr	r2, [r7, #32]
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d3e6      	bcc.n	8006688 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80066ba:	8bfb      	ldrh	r3, [r7, #30]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d01e      	beq.n	80066fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ca:	461a      	mov	r2, r3
 80066cc:	f107 0310 	add.w	r3, r7, #16
 80066d0:	6812      	ldr	r2, [r2, #0]
 80066d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	fa22 f303 	lsr.w	r3, r2, r3
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	701a      	strb	r2, [r3, #0]
      i++;
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	3301      	adds	r3, #1
 80066ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	3301      	adds	r3, #1
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80066f2:	8bfb      	ldrh	r3, [r7, #30]
 80066f4:	3b01      	subs	r3, #1
 80066f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80066f8:	8bfb      	ldrh	r3, [r7, #30]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1ea      	bne.n	80066d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006700:	4618      	mov	r0, r3
 8006702:	372c      	adds	r7, #44	; 0x2c
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	4013      	ands	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006724:	68fb      	ldr	r3, [r7, #12]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006732:	b480      	push	{r7}
 8006734:	b085      	sub	sp, #20
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	460b      	mov	r3, r1
 800673c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006742:	78fb      	ldrb	r3, [r7, #3]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006752:	78fb      	ldrb	r3, [r7, #3]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	4413      	add	r3, r2
 800675a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	4013      	ands	r3, r2
 8006764:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006766:	68bb      	ldr	r3, [r7, #8]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	f003 0301 	and.w	r3, r3, #1
}
 8006784:	4618      	mov	r0, r3
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067ae:	f023 0303 	bic.w	r3, r3, #3
 80067b2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	f003 0303 	and.w	r3, r3, #3
 80067c2:	68f9      	ldr	r1, [r7, #12]
 80067c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80067c8:	4313      	orrs	r3, r2
 80067ca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80067cc:	78fb      	ldrb	r3, [r7, #3]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d107      	bne.n	80067e2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067d8:	461a      	mov	r2, r3
 80067da:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80067de:	6053      	str	r3, [r2, #4]
 80067e0:	e009      	b.n	80067f6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80067e2:	78fb      	ldrb	r3, [r7, #3]
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d106      	bne.n	80067f6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ee:	461a      	mov	r2, r3
 80067f0:	f241 7370 	movw	r3, #6000	; 0x1770
 80067f4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	b29b      	uxth	r3, r3
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006826:	b480      	push	{r7}
 8006828:	b089      	sub	sp, #36	; 0x24
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	460b      	mov	r3, r1
 8006830:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006836:	78fb      	ldrb	r3, [r7, #3]
 8006838:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	4413      	add	r3, r2
 8006846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	0c9b      	lsrs	r3, r3, #18
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	4413      	add	r3, r2
 800685c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	0fdb      	lsrs	r3, r3, #31
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f003 0320 	and.w	r3, r3, #32
 8006872:	2b20      	cmp	r3, #32
 8006874:	d104      	bne.n	8006880 <USB_HC_Halt+0x5a>
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	e0c8      	b.n	8006a12 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <USB_HC_Halt+0x66>
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	2b02      	cmp	r3, #2
 800688a:	d163      	bne.n	8006954 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	4413      	add	r3, r2
 8006894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	0151      	lsls	r1, r2, #5
 800689e:	69fa      	ldr	r2, [r7, #28]
 80068a0:	440a      	add	r2, r1
 80068a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068aa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f003 0320 	and.w	r3, r3, #32
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f040 80ab 	bne.w	8006a10 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d133      	bne.n	800692e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	0151      	lsls	r1, r2, #5
 80068d8:	69fa      	ldr	r2, [r7, #28]
 80068da:	440a      	add	r2, r1
 80068dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068e4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	0151      	lsls	r1, r2, #5
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	440a      	add	r2, r1
 80068fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006900:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006904:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3301      	adds	r3, #1
 800690a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006912:	d81d      	bhi.n	8006950 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	4413      	add	r3, r2
 800691c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006926:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800692a:	d0ec      	beq.n	8006906 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800692c:	e070      	b.n	8006a10 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	4413      	add	r3, r2
 8006936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	0151      	lsls	r1, r2, #5
 8006940:	69fa      	ldr	r2, [r7, #28]
 8006942:	440a      	add	r2, r1
 8006944:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006948:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800694c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800694e:	e05f      	b.n	8006a10 <USB_HC_Halt+0x1ea>
            break;
 8006950:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006952:	e05d      	b.n	8006a10 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	4413      	add	r3, r2
 800695c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	0151      	lsls	r1, r2, #5
 8006966:	69fa      	ldr	r2, [r7, #28]
 8006968:	440a      	add	r2, r1
 800696a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800696e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006972:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d133      	bne.n	80069ec <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	4413      	add	r3, r2
 800698c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	69fa      	ldr	r2, [r7, #28]
 8006998:	440a      	add	r2, r1
 800699a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800699e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069a2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069c2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3301      	adds	r3, #1
 80069c8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069d0:	d81d      	bhi.n	8006a0e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069e8:	d0ec      	beq.n	80069c4 <USB_HC_Halt+0x19e>
 80069ea:	e011      	b.n	8006a10 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	015a      	lsls	r2, r3, #5
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	69ba      	ldr	r2, [r7, #24]
 80069fc:	0151      	lsls	r1, r2, #5
 80069fe:	69fa      	ldr	r2, [r7, #28]
 8006a00:	440a      	add	r2, r1
 8006a02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a0a:	6013      	str	r3, [r2, #0]
 8006a0c:	e000      	b.n	8006a10 <USB_HC_Halt+0x1ea>
          break;
 8006a0e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3724      	adds	r7, #36	; 0x24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b088      	sub	sp, #32
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7ff fd9c 	bl	8006570 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a38:	2110      	movs	r1, #16
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7ff fdaa 	bl	8006594 <USB_FlushTxFifo>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff fdd6 	bl	80065fc <USB_FlushRxFifo>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	61bb      	str	r3, [r7, #24]
 8006a5e:	e01f      	b.n	8006aa0 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a76:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a7e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a86:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a94:	461a      	mov	r2, r3
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	61bb      	str	r3, [r7, #24]
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	2b0f      	cmp	r3, #15
 8006aa4:	d9dc      	bls.n	8006a60 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	e034      	b.n	8006b16 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ac2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006aca:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ad2:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006af2:	d80c      	bhi.n	8006b0e <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b0a:	d0ec      	beq.n	8006ae6 <USB_StopHost+0xc8>
 8006b0c:	e000      	b.n	8006b10 <USB_StopHost+0xf2>
        break;
 8006b0e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	3301      	adds	r3, #1
 8006b14:	61bb      	str	r3, [r7, #24]
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	2b0f      	cmp	r3, #15
 8006b1a:	d9c7      	bls.n	8006aac <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b22:	461a      	mov	r2, r3
 8006b24:	f04f 33ff 	mov.w	r3, #4294967295
 8006b28:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b30:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7ff fd0b 	bl	800654e <USB_EnableGlobalInt>

  return ret;
 8006b38:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3720      	adds	r7, #32
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
	...

08006b44 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8006b4c:	1d39      	adds	r1, r7, #4
 8006b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b52:	2201      	movs	r2, #1
 8006b54:	4803      	ldr	r0, [pc, #12]	; (8006b64 <__io_putchar+0x20>)
 8006b56:	f7fe fcdd 	bl	8005514 <HAL_UART_Transmit>

  return ch;
 8006b5a:	687b      	ldr	r3, [r7, #4]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	20000364 	.word	0x20000364

08006b68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006b68:	b480      	push	{r7}
 8006b6a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006b6c:	bf00      	nop
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
	...

08006b78 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b7e:	f3ef 8305 	mrs	r3, IPSR
 8006b82:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10f      	bne.n	8006baa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b8e:	607b      	str	r3, [r7, #4]
  return(result);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d105      	bne.n	8006ba2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b96:	f3ef 8311 	mrs	r3, BASEPRI
 8006b9a:	603b      	str	r3, [r7, #0]
  return(result);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d007      	beq.n	8006bb2 <osKernelInitialize+0x3a>
 8006ba2:	4b0e      	ldr	r3, [pc, #56]	; (8006bdc <osKernelInitialize+0x64>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d103      	bne.n	8006bb2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006baa:	f06f 0305 	mvn.w	r3, #5
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	e00c      	b.n	8006bcc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006bb2:	4b0a      	ldr	r3, [pc, #40]	; (8006bdc <osKernelInitialize+0x64>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d105      	bne.n	8006bc6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006bba:	4b08      	ldr	r3, [pc, #32]	; (8006bdc <osKernelInitialize+0x64>)
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60fb      	str	r3, [r7, #12]
 8006bc4:	e002      	b.n	8006bcc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	200006f4 	.word	0x200006f4

08006be0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006be6:	f3ef 8305 	mrs	r3, IPSR
 8006bea:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10f      	bne.n	8006c12 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8006bf6:	607b      	str	r3, [r7, #4]
  return(result);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d105      	bne.n	8006c0a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bfe:	f3ef 8311 	mrs	r3, BASEPRI
 8006c02:	603b      	str	r3, [r7, #0]
  return(result);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d007      	beq.n	8006c1a <osKernelStart+0x3a>
 8006c0a:	4b0f      	ldr	r3, [pc, #60]	; (8006c48 <osKernelStart+0x68>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d103      	bne.n	8006c1a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006c12:	f06f 0305 	mvn.w	r3, #5
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	e010      	b.n	8006c3c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006c1a:	4b0b      	ldr	r3, [pc, #44]	; (8006c48 <osKernelStart+0x68>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d109      	bne.n	8006c36 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006c22:	f7ff ffa1 	bl	8006b68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006c26:	4b08      	ldr	r3, [pc, #32]	; (8006c48 <osKernelStart+0x68>)
 8006c28:	2202      	movs	r2, #2
 8006c2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006c2c:	f001 fd5a 	bl	80086e4 <vTaskStartScheduler>
      stat = osOK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	e002      	b.n	8006c3c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006c36:	f04f 33ff 	mov.w	r3, #4294967295
 8006c3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	200006f4 	.word	0x200006f4

08006c4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b090      	sub	sp, #64	; 0x40
 8006c50:	af04      	add	r7, sp, #16
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c5c:	f3ef 8305 	mrs	r3, IPSR
 8006c60:	61fb      	str	r3, [r7, #28]
  return(result);
 8006c62:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f040 808f 	bne.w	8006d88 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d105      	bne.n	8006c82 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c76:	f3ef 8311 	mrs	r3, BASEPRI
 8006c7a:	617b      	str	r3, [r7, #20]
  return(result);
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <osThreadNew+0x3e>
 8006c82:	4b44      	ldr	r3, [pc, #272]	; (8006d94 <osThreadNew+0x148>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d07e      	beq.n	8006d88 <osThreadNew+0x13c>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d07b      	beq.n	8006d88 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006c90:	2380      	movs	r3, #128	; 0x80
 8006c92:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006c94:	2318      	movs	r3, #24
 8006c96:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d045      	beq.n	8006d34 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <osThreadNew+0x6a>
        name = attr->name;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d002      	beq.n	8006cc4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d008      	beq.n	8006cdc <osThreadNew+0x90>
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	2b38      	cmp	r3, #56	; 0x38
 8006cce:	d805      	bhi.n	8006cdc <osThreadNew+0x90>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <osThreadNew+0x94>
        return (NULL);
 8006cdc:	2300      	movs	r3, #0
 8006cde:	e054      	b.n	8006d8a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	089b      	lsrs	r3, r3, #2
 8006cee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00e      	beq.n	8006d16 <osThreadNew+0xca>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	2bbb      	cmp	r3, #187	; 0xbb
 8006cfe:	d90a      	bls.n	8006d16 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d006      	beq.n	8006d16 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <osThreadNew+0xca>
        mem = 1;
 8006d10:	2301      	movs	r3, #1
 8006d12:	623b      	str	r3, [r7, #32]
 8006d14:	e010      	b.n	8006d38 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10c      	bne.n	8006d38 <osThreadNew+0xec>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d108      	bne.n	8006d38 <osThreadNew+0xec>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d104      	bne.n	8006d38 <osThreadNew+0xec>
          mem = 0;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	623b      	str	r3, [r7, #32]
 8006d32:	e001      	b.n	8006d38 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006d34:	2300      	movs	r3, #0
 8006d36:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d110      	bne.n	8006d60 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d46:	9202      	str	r2, [sp, #8]
 8006d48:	9301      	str	r3, [sp, #4]
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f001 facf 	bl	80082f8 <xTaskCreateStatic>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	613b      	str	r3, [r7, #16]
 8006d5e:	e013      	b.n	8006d88 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d110      	bne.n	8006d88 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	f107 0310 	add.w	r3, r7, #16
 8006d6e:	9301      	str	r3, [sp, #4]
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f001 fb20 	bl	80083be <xTaskCreate>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d001      	beq.n	8006d88 <osThreadNew+0x13c>
          hTask = NULL;
 8006d84:	2300      	movs	r3, #0
 8006d86:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006d88:	693b      	ldr	r3, [r7, #16]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3730      	adds	r7, #48	; 0x30
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	200006f4 	.word	0x200006f4

08006d98 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006da0:	f3ef 8305 	mrs	r3, IPSR
 8006da4:	613b      	str	r3, [r7, #16]
  return(result);
 8006da6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10f      	bne.n	8006dcc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dac:	f3ef 8310 	mrs	r3, PRIMASK
 8006db0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d105      	bne.n	8006dc4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006db8:	f3ef 8311 	mrs	r3, BASEPRI
 8006dbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d007      	beq.n	8006dd4 <osDelay+0x3c>
 8006dc4:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <osDelay+0x58>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d103      	bne.n	8006dd4 <osDelay+0x3c>
    stat = osErrorISR;
 8006dcc:	f06f 0305 	mvn.w	r3, #5
 8006dd0:	617b      	str	r3, [r7, #20]
 8006dd2:	e007      	b.n	8006de4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f001 fc4a 	bl	8008678 <vTaskDelay>
    }
  }

  return (stat);
 8006de4:	697b      	ldr	r3, [r7, #20]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3718      	adds	r7, #24
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	200006f4 	.word	0x200006f4

08006df4 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b08a      	sub	sp, #40	; 0x28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	603b      	str	r3, [r7, #0]
 8006e00:	4613      	mov	r3, r2
 8006e02:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e0c:	f3ef 8305 	mrs	r3, IPSR
 8006e10:	61fb      	str	r3, [r7, #28]
  return(result);
 8006e12:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10f      	bne.n	8006e38 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e18:	f3ef 8310 	mrs	r3, PRIMASK
 8006e1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d105      	bne.n	8006e30 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e24:	f3ef 8311 	mrs	r3, BASEPRI
 8006e28:	617b      	str	r3, [r7, #20]
  return(result);
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d02c      	beq.n	8006e8a <osMessageQueuePut+0x96>
 8006e30:	4b28      	ldr	r3, [pc, #160]	; (8006ed4 <osMessageQueuePut+0xe0>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d128      	bne.n	8006e8a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d005      	beq.n	8006e4a <osMessageQueuePut+0x56>
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <osMessageQueuePut+0x56>
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006e4a:	f06f 0303 	mvn.w	r3, #3
 8006e4e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e50:	e039      	b.n	8006ec6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006e52:	2300      	movs	r3, #0
 8006e54:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006e56:	f107 0210 	add.w	r2, r7, #16
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	68b9      	ldr	r1, [r7, #8]
 8006e5e:	6a38      	ldr	r0, [r7, #32]
 8006e60:	f000 ff56 	bl	8007d10 <xQueueGenericSendFromISR>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d003      	beq.n	8006e72 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006e6a:	f06f 0302 	mvn.w	r3, #2
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e70:	e029      	b.n	8006ec6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d026      	beq.n	8006ec6 <osMessageQueuePut+0xd2>
 8006e78:	4b17      	ldr	r3, [pc, #92]	; (8006ed8 <osMessageQueuePut+0xe4>)
 8006e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e7e:	601a      	str	r2, [r3, #0]
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e88:	e01d      	b.n	8006ec6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <osMessageQueuePut+0xa2>
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d103      	bne.n	8006e9e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006e96:	f06f 0303 	mvn.w	r3, #3
 8006e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e9c:	e014      	b.n	8006ec8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	68b9      	ldr	r1, [r7, #8]
 8006ea4:	6a38      	ldr	r0, [r7, #32]
 8006ea6:	f000 fe2d 	bl	8007b04 <xQueueGenericSend>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d00b      	beq.n	8006ec8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006eb6:	f06f 0301 	mvn.w	r3, #1
 8006eba:	627b      	str	r3, [r7, #36]	; 0x24
 8006ebc:	e004      	b.n	8006ec8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006ebe:	f06f 0302 	mvn.w	r3, #2
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec4:	e000      	b.n	8006ec8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ec6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3728      	adds	r7, #40	; 0x28
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	200006f4 	.word	0x200006f4
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4a07      	ldr	r2, [pc, #28]	; (8006f08 <vApplicationGetIdleTaskMemory+0x2c>)
 8006eec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	4a06      	ldr	r2, [pc, #24]	; (8006f0c <vApplicationGetIdleTaskMemory+0x30>)
 8006ef2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2280      	movs	r2, #128	; 0x80
 8006ef8:	601a      	str	r2, [r3, #0]
}
 8006efa:	bf00      	nop
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	200006f8 	.word	0x200006f8
 8006f0c:	200007b4 	.word	0x200007b4

08006f10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4a07      	ldr	r2, [pc, #28]	; (8006f3c <vApplicationGetTimerTaskMemory+0x2c>)
 8006f20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	4a06      	ldr	r2, [pc, #24]	; (8006f40 <vApplicationGetTimerTaskMemory+0x30>)
 8006f26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f2e:	601a      	str	r2, [r3, #0]
}
 8006f30:	bf00      	nop
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	200009b4 	.word	0x200009b4
 8006f40:	20000a70 	.word	0x20000a70

08006f44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08a      	sub	sp, #40	; 0x28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f50:	f001 fc3c 	bl	80087cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f54:	4b5b      	ldr	r3, [pc, #364]	; (80070c4 <pvPortMalloc+0x180>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f5c:	f000 f91a 	bl	8007194 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f60:	4b59      	ldr	r3, [pc, #356]	; (80070c8 <pvPortMalloc+0x184>)
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4013      	ands	r3, r2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f040 8092 	bne.w	8007092 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d01f      	beq.n	8006fb4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006f74:	2208      	movs	r2, #8
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4413      	add	r3, r2
 8006f7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d016      	beq.n	8006fb4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f023 0307 	bic.w	r3, r3, #7
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f003 0307 	and.w	r3, r3, #7
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00c      	beq.n	8006fb4 <pvPortMalloc+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	b672      	cpsid	i
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	b662      	cpsie	i
 8006fae:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006fb0:	bf00      	nop
 8006fb2:	e7fe      	b.n	8006fb2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d06b      	beq.n	8007092 <pvPortMalloc+0x14e>
 8006fba:	4b44      	ldr	r3, [pc, #272]	; (80070cc <pvPortMalloc+0x188>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d866      	bhi.n	8007092 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006fc4:	4b42      	ldr	r3, [pc, #264]	; (80070d0 <pvPortMalloc+0x18c>)
 8006fc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006fc8:	4b41      	ldr	r3, [pc, #260]	; (80070d0 <pvPortMalloc+0x18c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fce:	e004      	b.n	8006fda <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d903      	bls.n	8006fec <pvPortMalloc+0xa8>
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1f1      	bne.n	8006fd0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006fec:	4b35      	ldr	r3, [pc, #212]	; (80070c4 <pvPortMalloc+0x180>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d04d      	beq.n	8007092 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2208      	movs	r2, #8
 8006ffc:	4413      	add	r3, r2
 8006ffe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	1ad2      	subs	r2, r2, r3
 8007010:	2308      	movs	r3, #8
 8007012:	005b      	lsls	r3, r3, #1
 8007014:	429a      	cmp	r2, r3
 8007016:	d921      	bls.n	800705c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4413      	add	r3, r2
 800701e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00c      	beq.n	8007044 <pvPortMalloc+0x100>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702e:	b672      	cpsid	i
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	b662      	cpsie	i
 800703e:	613b      	str	r3, [r7, #16]
}
 8007040:	bf00      	nop
 8007042:	e7fe      	b.n	8007042 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	1ad2      	subs	r2, r2, r3
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007056:	69b8      	ldr	r0, [r7, #24]
 8007058:	f000 f8fe 	bl	8007258 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800705c:	4b1b      	ldr	r3, [pc, #108]	; (80070cc <pvPortMalloc+0x188>)
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	4a19      	ldr	r2, [pc, #100]	; (80070cc <pvPortMalloc+0x188>)
 8007068:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800706a:	4b18      	ldr	r3, [pc, #96]	; (80070cc <pvPortMalloc+0x188>)
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	4b19      	ldr	r3, [pc, #100]	; (80070d4 <pvPortMalloc+0x190>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	429a      	cmp	r2, r3
 8007074:	d203      	bcs.n	800707e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007076:	4b15      	ldr	r3, [pc, #84]	; (80070cc <pvPortMalloc+0x188>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a16      	ldr	r2, [pc, #88]	; (80070d4 <pvPortMalloc+0x190>)
 800707c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	4b11      	ldr	r3, [pc, #68]	; (80070c8 <pvPortMalloc+0x184>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	431a      	orrs	r2, r3
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	2200      	movs	r2, #0
 8007090:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007092:	f001 fba9 	bl	80087e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00c      	beq.n	80070ba <pvPortMalloc+0x176>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a4:	b672      	cpsid	i
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	b662      	cpsie	i
 80070b4:	60fb      	str	r3, [r7, #12]
}
 80070b6:	bf00      	nop
 80070b8:	e7fe      	b.n	80070b8 <pvPortMalloc+0x174>
	return pvReturn;
 80070ba:	69fb      	ldr	r3, [r7, #28]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3728      	adds	r7, #40	; 0x28
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	20004a78 	.word	0x20004a78
 80070c8:	20004a84 	.word	0x20004a84
 80070cc:	20004a7c 	.word	0x20004a7c
 80070d0:	20004a70 	.word	0x20004a70
 80070d4:	20004a80 	.word	0x20004a80

080070d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d04c      	beq.n	8007184 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80070ea:	2308      	movs	r3, #8
 80070ec:	425b      	negs	r3, r3
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	4413      	add	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	4b23      	ldr	r3, [pc, #140]	; (800718c <vPortFree+0xb4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4013      	ands	r3, r2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10c      	bne.n	8007120 <vPortFree+0x48>
	__asm volatile
 8007106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710a:	b672      	cpsid	i
 800710c:	f383 8811 	msr	BASEPRI, r3
 8007110:	f3bf 8f6f 	isb	sy
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	b662      	cpsie	i
 800711a:	60fb      	str	r3, [r7, #12]
}
 800711c:	bf00      	nop
 800711e:	e7fe      	b.n	800711e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00c      	beq.n	8007142 <vPortFree+0x6a>
	__asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	b672      	cpsid	i
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	b662      	cpsie	i
 800713c:	60bb      	str	r3, [r7, #8]
}
 800713e:	bf00      	nop
 8007140:	e7fe      	b.n	8007140 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	4b11      	ldr	r3, [pc, #68]	; (800718c <vPortFree+0xb4>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4013      	ands	r3, r2
 800714c:	2b00      	cmp	r3, #0
 800714e:	d019      	beq.n	8007184 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d115      	bne.n	8007184 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	4b0b      	ldr	r3, [pc, #44]	; (800718c <vPortFree+0xb4>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	43db      	mvns	r3, r3
 8007162:	401a      	ands	r2, r3
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007168:	f001 fb30 	bl	80087cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	4b07      	ldr	r3, [pc, #28]	; (8007190 <vPortFree+0xb8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4413      	add	r3, r2
 8007176:	4a06      	ldr	r2, [pc, #24]	; (8007190 <vPortFree+0xb8>)
 8007178:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800717a:	6938      	ldr	r0, [r7, #16]
 800717c:	f000 f86c 	bl	8007258 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007180:	f001 fb32 	bl	80087e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007184:	bf00      	nop
 8007186:	3718      	adds	r7, #24
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20004a84 	.word	0x20004a84
 8007190:	20004a7c 	.word	0x20004a7c

08007194 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800719a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800719e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071a0:	4b27      	ldr	r3, [pc, #156]	; (8007240 <prvHeapInit+0xac>)
 80071a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00c      	beq.n	80071c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	3307      	adds	r3, #7
 80071b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f023 0307 	bic.w	r3, r3, #7
 80071ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	4a1f      	ldr	r2, [pc, #124]	; (8007240 <prvHeapInit+0xac>)
 80071c4:	4413      	add	r3, r2
 80071c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071cc:	4a1d      	ldr	r2, [pc, #116]	; (8007244 <prvHeapInit+0xb0>)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80071d2:	4b1c      	ldr	r3, [pc, #112]	; (8007244 <prvHeapInit+0xb0>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	4413      	add	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80071e0:	2208      	movs	r2, #8
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	1a9b      	subs	r3, r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f023 0307 	bic.w	r3, r3, #7
 80071ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4a15      	ldr	r2, [pc, #84]	; (8007248 <prvHeapInit+0xb4>)
 80071f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80071f6:	4b14      	ldr	r3, [pc, #80]	; (8007248 <prvHeapInit+0xb4>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2200      	movs	r2, #0
 80071fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071fe:	4b12      	ldr	r3, [pc, #72]	; (8007248 <prvHeapInit+0xb4>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	1ad2      	subs	r2, r2, r3
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007214:	4b0c      	ldr	r3, [pc, #48]	; (8007248 <prvHeapInit+0xb4>)
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	4a0a      	ldr	r2, [pc, #40]	; (800724c <prvHeapInit+0xb8>)
 8007222:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	4a09      	ldr	r2, [pc, #36]	; (8007250 <prvHeapInit+0xbc>)
 800722a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800722c:	4b09      	ldr	r3, [pc, #36]	; (8007254 <prvHeapInit+0xc0>)
 800722e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007232:	601a      	str	r2, [r3, #0]
}
 8007234:	bf00      	nop
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	20000e70 	.word	0x20000e70
 8007244:	20004a70 	.word	0x20004a70
 8007248:	20004a78 	.word	0x20004a78
 800724c:	20004a80 	.word	0x20004a80
 8007250:	20004a7c 	.word	0x20004a7c
 8007254:	20004a84 	.word	0x20004a84

08007258 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007260:	4b28      	ldr	r3, [pc, #160]	; (8007304 <prvInsertBlockIntoFreeList+0xac>)
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	e002      	b.n	800726c <prvInsertBlockIntoFreeList+0x14>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	429a      	cmp	r2, r3
 8007274:	d8f7      	bhi.n	8007266 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	4413      	add	r3, r2
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	429a      	cmp	r2, r3
 8007286:	d108      	bne.n	800729a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	441a      	add	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	441a      	add	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d118      	bne.n	80072e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	4b15      	ldr	r3, [pc, #84]	; (8007308 <prvInsertBlockIntoFreeList+0xb0>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d00d      	beq.n	80072d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	441a      	add	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	e008      	b.n	80072e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80072d6:	4b0c      	ldr	r3, [pc, #48]	; (8007308 <prvInsertBlockIntoFreeList+0xb0>)
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	e003      	b.n	80072e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d002      	beq.n	80072f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072f6:	bf00      	nop
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	20004a70 	.word	0x20004a70
 8007308:	20004a78 	.word	0x20004a78

0800730c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f103 0208 	add.w	r2, r3, #8
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f04f 32ff 	mov.w	r2, #4294967295
 8007324:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f103 0208 	add.w	r2, r3, #8
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f103 0208 	add.w	r2, r3, #8
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800735a:	bf00      	nop
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007366:	b480      	push	{r7}
 8007368:	b085      	sub	sp, #20
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	601a      	str	r2, [r3, #0]
}
 80073a2:	bf00      	nop
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073ae:	b480      	push	{r7}
 80073b0:	b085      	sub	sp, #20
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c4:	d103      	bne.n	80073ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	60fb      	str	r3, [r7, #12]
 80073cc:	e00c      	b.n	80073e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	3308      	adds	r3, #8
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	e002      	b.n	80073dc <vListInsert+0x2e>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d2f6      	bcs.n	80073d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	683a      	ldr	r2, [r7, #0]
 80073f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	601a      	str	r2, [r3, #0]
}
 8007414:	bf00      	nop
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	6892      	ldr	r2, [r2, #8]
 8007436:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	6852      	ldr	r2, [r2, #4]
 8007440:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	429a      	cmp	r2, r3
 800744a:	d103      	bne.n	8007454 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	1e5a      	subs	r2, r3, #1
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	3b04      	subs	r3, #4
 8007484:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800748c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3b04      	subs	r3, #4
 8007492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	f023 0201 	bic.w	r2, r3, #1
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3b04      	subs	r3, #4
 80074a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074a4:	4a0c      	ldr	r2, [pc, #48]	; (80074d8 <pxPortInitialiseStack+0x64>)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3b14      	subs	r3, #20
 80074ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	3b04      	subs	r3, #4
 80074ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f06f 0202 	mvn.w	r2, #2
 80074c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3b20      	subs	r3, #32
 80074c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80074ca:	68fb      	ldr	r3, [r7, #12]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	080074dd 	.word	0x080074dd

080074dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80074e2:	2300      	movs	r3, #0
 80074e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074e6:	4b14      	ldr	r3, [pc, #80]	; (8007538 <prvTaskExitError+0x5c>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ee:	d00c      	beq.n	800750a <prvTaskExitError+0x2e>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	b672      	cpsid	i
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	b662      	cpsie	i
 8007504:	60fb      	str	r3, [r7, #12]
}
 8007506:	bf00      	nop
 8007508:	e7fe      	b.n	8007508 <prvTaskExitError+0x2c>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750e:	b672      	cpsid	i
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	b662      	cpsie	i
 800751e:	60bb      	str	r3, [r7, #8]
}
 8007520:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007522:	bf00      	nop
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d0fc      	beq.n	8007524 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800752a:	bf00      	nop
 800752c:	bf00      	nop
 800752e:	3714      	adds	r7, #20
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr
 8007538:	2000000c 	.word	0x2000000c
 800753c:	00000000 	.word	0x00000000

08007540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007540:	4b07      	ldr	r3, [pc, #28]	; (8007560 <pxCurrentTCBConst2>)
 8007542:	6819      	ldr	r1, [r3, #0]
 8007544:	6808      	ldr	r0, [r1, #0]
 8007546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800754a:	f380 8809 	msr	PSP, r0
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f04f 0000 	mov.w	r0, #0
 8007556:	f380 8811 	msr	BASEPRI, r0
 800755a:	4770      	bx	lr
 800755c:	f3af 8000 	nop.w

08007560 <pxCurrentTCBConst2>:
 8007560:	20004ad0 	.word	0x20004ad0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop

08007568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007568:	4808      	ldr	r0, [pc, #32]	; (800758c <prvPortStartFirstTask+0x24>)
 800756a:	6800      	ldr	r0, [r0, #0]
 800756c:	6800      	ldr	r0, [r0, #0]
 800756e:	f380 8808 	msr	MSP, r0
 8007572:	f04f 0000 	mov.w	r0, #0
 8007576:	f380 8814 	msr	CONTROL, r0
 800757a:	b662      	cpsie	i
 800757c:	b661      	cpsie	f
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	df00      	svc	0
 8007588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800758a:	bf00      	nop
 800758c:	e000ed08 	.word	0xe000ed08

08007590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007596:	4b37      	ldr	r3, [pc, #220]	; (8007674 <xPortStartScheduler+0xe4>)
 8007598:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	22ff      	movs	r2, #255	; 0xff
 80075a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075b0:	78fb      	ldrb	r3, [r7, #3]
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	4b2f      	ldr	r3, [pc, #188]	; (8007678 <xPortStartScheduler+0xe8>)
 80075bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075be:	4b2f      	ldr	r3, [pc, #188]	; (800767c <xPortStartScheduler+0xec>)
 80075c0:	2207      	movs	r2, #7
 80075c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075c4:	e009      	b.n	80075da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80075c6:	4b2d      	ldr	r3, [pc, #180]	; (800767c <xPortStartScheduler+0xec>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	4a2b      	ldr	r2, [pc, #172]	; (800767c <xPortStartScheduler+0xec>)
 80075ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80075d0:	78fb      	ldrb	r3, [r7, #3]
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075da:	78fb      	ldrb	r3, [r7, #3]
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e2:	2b80      	cmp	r3, #128	; 0x80
 80075e4:	d0ef      	beq.n	80075c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075e6:	4b25      	ldr	r3, [pc, #148]	; (800767c <xPortStartScheduler+0xec>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f1c3 0307 	rsb	r3, r3, #7
 80075ee:	2b04      	cmp	r3, #4
 80075f0:	d00c      	beq.n	800760c <xPortStartScheduler+0x7c>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	b672      	cpsid	i
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	b662      	cpsie	i
 8007606:	60bb      	str	r3, [r7, #8]
}
 8007608:	bf00      	nop
 800760a:	e7fe      	b.n	800760a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800760c:	4b1b      	ldr	r3, [pc, #108]	; (800767c <xPortStartScheduler+0xec>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	021b      	lsls	r3, r3, #8
 8007612:	4a1a      	ldr	r2, [pc, #104]	; (800767c <xPortStartScheduler+0xec>)
 8007614:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007616:	4b19      	ldr	r3, [pc, #100]	; (800767c <xPortStartScheduler+0xec>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800761e:	4a17      	ldr	r2, [pc, #92]	; (800767c <xPortStartScheduler+0xec>)
 8007620:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	b2da      	uxtb	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800762a:	4b15      	ldr	r3, [pc, #84]	; (8007680 <xPortStartScheduler+0xf0>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a14      	ldr	r2, [pc, #80]	; (8007680 <xPortStartScheduler+0xf0>)
 8007630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007634:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007636:	4b12      	ldr	r3, [pc, #72]	; (8007680 <xPortStartScheduler+0xf0>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a11      	ldr	r2, [pc, #68]	; (8007680 <xPortStartScheduler+0xf0>)
 800763c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007640:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007642:	f000 f8dd 	bl	8007800 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007646:	4b0f      	ldr	r3, [pc, #60]	; (8007684 <xPortStartScheduler+0xf4>)
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800764c:	f000 f8fc 	bl	8007848 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007650:	4b0d      	ldr	r3, [pc, #52]	; (8007688 <xPortStartScheduler+0xf8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a0c      	ldr	r2, [pc, #48]	; (8007688 <xPortStartScheduler+0xf8>)
 8007656:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800765a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800765c:	f7ff ff84 	bl	8007568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007660:	f001 fa2e 	bl	8008ac0 <vTaskSwitchContext>
	prvTaskExitError();
 8007664:	f7ff ff3a 	bl	80074dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	e000e400 	.word	0xe000e400
 8007678:	20004a88 	.word	0x20004a88
 800767c:	20004a8c 	.word	0x20004a8c
 8007680:	e000ed20 	.word	0xe000ed20
 8007684:	2000000c 	.word	0x2000000c
 8007688:	e000ef34 	.word	0xe000ef34

0800768c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007696:	b672      	cpsid	i
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	b662      	cpsie	i
 80076a6:	607b      	str	r3, [r7, #4]
}
 80076a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80076aa:	4b10      	ldr	r3, [pc, #64]	; (80076ec <vPortEnterCritical+0x60>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	3301      	adds	r3, #1
 80076b0:	4a0e      	ldr	r2, [pc, #56]	; (80076ec <vPortEnterCritical+0x60>)
 80076b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80076b4:	4b0d      	ldr	r3, [pc, #52]	; (80076ec <vPortEnterCritical+0x60>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d111      	bne.n	80076e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80076bc:	4b0c      	ldr	r3, [pc, #48]	; (80076f0 <vPortEnterCritical+0x64>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00c      	beq.n	80076e0 <vPortEnterCritical+0x54>
	__asm volatile
 80076c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ca:	b672      	cpsid	i
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	b662      	cpsie	i
 80076da:	603b      	str	r3, [r7, #0]
}
 80076dc:	bf00      	nop
 80076de:	e7fe      	b.n	80076de <vPortEnterCritical+0x52>
	}
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	2000000c 	.word	0x2000000c
 80076f0:	e000ed04 	.word	0xe000ed04

080076f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076fa:	4b13      	ldr	r3, [pc, #76]	; (8007748 <vPortExitCritical+0x54>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10c      	bne.n	800771c <vPortExitCritical+0x28>
	__asm volatile
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	b672      	cpsid	i
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	b662      	cpsie	i
 8007716:	607b      	str	r3, [r7, #4]
}
 8007718:	bf00      	nop
 800771a:	e7fe      	b.n	800771a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800771c:	4b0a      	ldr	r3, [pc, #40]	; (8007748 <vPortExitCritical+0x54>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3b01      	subs	r3, #1
 8007722:	4a09      	ldr	r2, [pc, #36]	; (8007748 <vPortExitCritical+0x54>)
 8007724:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007726:	4b08      	ldr	r3, [pc, #32]	; (8007748 <vPortExitCritical+0x54>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d105      	bne.n	800773a <vPortExitCritical+0x46>
 800772e:	2300      	movs	r3, #0
 8007730:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007738:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800773a:	bf00      	nop
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	2000000c 	.word	0x2000000c
 800774c:	00000000 	.word	0x00000000

08007750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007750:	f3ef 8009 	mrs	r0, PSP
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	4b15      	ldr	r3, [pc, #84]	; (80077b0 <pxCurrentTCBConst>)
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	f01e 0f10 	tst.w	lr, #16
 8007760:	bf08      	it	eq
 8007762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776a:	6010      	str	r0, [r2, #0]
 800776c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007774:	b672      	cpsid	i
 8007776:	f380 8811 	msr	BASEPRI, r0
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	b662      	cpsie	i
 8007784:	f001 f99c 	bl	8008ac0 <vTaskSwitchContext>
 8007788:	f04f 0000 	mov.w	r0, #0
 800778c:	f380 8811 	msr	BASEPRI, r0
 8007790:	bc09      	pop	{r0, r3}
 8007792:	6819      	ldr	r1, [r3, #0]
 8007794:	6808      	ldr	r0, [r1, #0]
 8007796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779a:	f01e 0f10 	tst.w	lr, #16
 800779e:	bf08      	it	eq
 80077a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80077a4:	f380 8809 	msr	PSP, r0
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop

080077b0 <pxCurrentTCBConst>:
 80077b0:	20004ad0 	.word	0x20004ad0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80077b4:	bf00      	nop
 80077b6:	bf00      	nop

080077b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c2:	b672      	cpsid	i
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	b662      	cpsie	i
 80077d2:	607b      	str	r3, [r7, #4]
}
 80077d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80077d6:	f001 f8b7 	bl	8008948 <xTaskIncrementTick>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80077e0:	4b06      	ldr	r3, [pc, #24]	; (80077fc <SysTick_Handler+0x44>)
 80077e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	2300      	movs	r3, #0
 80077ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	f383 8811 	msr	BASEPRI, r3
}
 80077f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077f4:	bf00      	nop
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	e000ed04 	.word	0xe000ed04

08007800 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007800:	b480      	push	{r7}
 8007802:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007804:	4b0b      	ldr	r3, [pc, #44]	; (8007834 <vPortSetupTimerInterrupt+0x34>)
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800780a:	4b0b      	ldr	r3, [pc, #44]	; (8007838 <vPortSetupTimerInterrupt+0x38>)
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007810:	4b0a      	ldr	r3, [pc, #40]	; (800783c <vPortSetupTimerInterrupt+0x3c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a0a      	ldr	r2, [pc, #40]	; (8007840 <vPortSetupTimerInterrupt+0x40>)
 8007816:	fba2 2303 	umull	r2, r3, r2, r3
 800781a:	099b      	lsrs	r3, r3, #6
 800781c:	4a09      	ldr	r2, [pc, #36]	; (8007844 <vPortSetupTimerInterrupt+0x44>)
 800781e:	3b01      	subs	r3, #1
 8007820:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007822:	4b04      	ldr	r3, [pc, #16]	; (8007834 <vPortSetupTimerInterrupt+0x34>)
 8007824:	2207      	movs	r2, #7
 8007826:	601a      	str	r2, [r3, #0]
}
 8007828:	bf00      	nop
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	e000e010 	.word	0xe000e010
 8007838:	e000e018 	.word	0xe000e018
 800783c:	20000000 	.word	0x20000000
 8007840:	10624dd3 	.word	0x10624dd3
 8007844:	e000e014 	.word	0xe000e014

08007848 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007848:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007858 <vPortEnableVFP+0x10>
 800784c:	6801      	ldr	r1, [r0, #0]
 800784e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007852:	6001      	str	r1, [r0, #0]
 8007854:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007856:	bf00      	nop
 8007858:	e000ed88 	.word	0xe000ed88

0800785c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007862:	f3ef 8305 	mrs	r3, IPSR
 8007866:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2b0f      	cmp	r3, #15
 800786c:	d916      	bls.n	800789c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800786e:	4a19      	ldr	r2, [pc, #100]	; (80078d4 <vPortValidateInterruptPriority+0x78>)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4413      	add	r3, r2
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007878:	4b17      	ldr	r3, [pc, #92]	; (80078d8 <vPortValidateInterruptPriority+0x7c>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	7afa      	ldrb	r2, [r7, #11]
 800787e:	429a      	cmp	r2, r3
 8007880:	d20c      	bcs.n	800789c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007886:	b672      	cpsid	i
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	b662      	cpsie	i
 8007896:	607b      	str	r3, [r7, #4]
}
 8007898:	bf00      	nop
 800789a:	e7fe      	b.n	800789a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800789c:	4b0f      	ldr	r3, [pc, #60]	; (80078dc <vPortValidateInterruptPriority+0x80>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80078a4:	4b0e      	ldr	r3, [pc, #56]	; (80078e0 <vPortValidateInterruptPriority+0x84>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d90c      	bls.n	80078c6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	b672      	cpsid	i
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	b662      	cpsie	i
 80078c0:	603b      	str	r3, [r7, #0]
}
 80078c2:	bf00      	nop
 80078c4:	e7fe      	b.n	80078c4 <vPortValidateInterruptPriority+0x68>
	}
 80078c6:	bf00      	nop
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	e000e3f0 	.word	0xe000e3f0
 80078d8:	20004a88 	.word	0x20004a88
 80078dc:	e000ed0c 	.word	0xe000ed0c
 80078e0:	20004a8c 	.word	0x20004a8c

080078e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10c      	bne.n	8007912 <xQueueGenericReset+0x2e>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	b672      	cpsid	i
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	b662      	cpsie	i
 800790c:	60bb      	str	r3, [r7, #8]
}
 800790e:	bf00      	nop
 8007910:	e7fe      	b.n	8007910 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007912:	f7ff febb 	bl	800768c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800791e:	68f9      	ldr	r1, [r7, #12]
 8007920:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007922:	fb01 f303 	mul.w	r3, r1, r3
 8007926:	441a      	add	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007942:	3b01      	subs	r3, #1
 8007944:	68f9      	ldr	r1, [r7, #12]
 8007946:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007948:	fb01 f303 	mul.w	r3, r1, r3
 800794c:	441a      	add	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	22ff      	movs	r2, #255	; 0xff
 8007956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	22ff      	movs	r2, #255	; 0xff
 800795e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d114      	bne.n	8007992 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d01a      	beq.n	80079a6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3310      	adds	r3, #16
 8007974:	4618      	mov	r0, r3
 8007976:	f001 f95d 	bl	8008c34 <xTaskRemoveFromEventList>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d012      	beq.n	80079a6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007980:	4b0c      	ldr	r3, [pc, #48]	; (80079b4 <xQueueGenericReset+0xd0>)
 8007982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	f3bf 8f6f 	isb	sy
 8007990:	e009      	b.n	80079a6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	3310      	adds	r3, #16
 8007996:	4618      	mov	r0, r3
 8007998:	f7ff fcb8 	bl	800730c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	3324      	adds	r3, #36	; 0x24
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7ff fcb3 	bl	800730c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079a6:	f7ff fea5 	bl	80076f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079aa:	2301      	movs	r3, #1
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	e000ed04 	.word	0xe000ed04

080079b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08e      	sub	sp, #56	; 0x38
 80079bc:	af02      	add	r7, sp, #8
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10c      	bne.n	80079e6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d0:	b672      	cpsid	i
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	b662      	cpsie	i
 80079e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079e2:	bf00      	nop
 80079e4:	e7fe      	b.n	80079e4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10c      	bne.n	8007a06 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f0:	b672      	cpsid	i
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	b662      	cpsie	i
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a02:	bf00      	nop
 8007a04:	e7fe      	b.n	8007a04 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <xQueueGenericCreateStatic+0x5a>
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <xQueueGenericCreateStatic+0x5e>
 8007a12:	2301      	movs	r3, #1
 8007a14:	e000      	b.n	8007a18 <xQueueGenericCreateStatic+0x60>
 8007a16:	2300      	movs	r3, #0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10c      	bne.n	8007a36 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a20:	b672      	cpsid	i
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	b662      	cpsie	i
 8007a30:	623b      	str	r3, [r7, #32]
}
 8007a32:	bf00      	nop
 8007a34:	e7fe      	b.n	8007a34 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d102      	bne.n	8007a42 <xQueueGenericCreateStatic+0x8a>
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <xQueueGenericCreateStatic+0x8e>
 8007a42:	2301      	movs	r3, #1
 8007a44:	e000      	b.n	8007a48 <xQueueGenericCreateStatic+0x90>
 8007a46:	2300      	movs	r3, #0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10c      	bne.n	8007a66 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a50:	b672      	cpsid	i
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	b662      	cpsie	i
 8007a60:	61fb      	str	r3, [r7, #28]
}
 8007a62:	bf00      	nop
 8007a64:	e7fe      	b.n	8007a64 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a66:	2350      	movs	r3, #80	; 0x50
 8007a68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	2b50      	cmp	r3, #80	; 0x50
 8007a6e:	d00c      	beq.n	8007a8a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a74:	b672      	cpsid	i
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	b662      	cpsie	i
 8007a84:	61bb      	str	r3, [r7, #24]
}
 8007a86:	bf00      	nop
 8007a88:	e7fe      	b.n	8007a88 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a8a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00d      	beq.n	8007ab2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	68b9      	ldr	r1, [r7, #8]
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 f805 	bl	8007abc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3730      	adds	r7, #48	; 0x30
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
 8007ac8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d103      	bne.n	8007ad8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	69ba      	ldr	r2, [r7, #24]
 8007ad4:	601a      	str	r2, [r3, #0]
 8007ad6:	e002      	b.n	8007ade <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007aea:	2101      	movs	r1, #1
 8007aec:	69b8      	ldr	r0, [r7, #24]
 8007aee:	f7ff fef9 	bl	80078e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	78fa      	ldrb	r2, [r7, #3]
 8007af6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007afa:	bf00      	nop
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
	...

08007b04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b08e      	sub	sp, #56	; 0x38
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
 8007b10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007b12:	2300      	movs	r3, #0
 8007b14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d10c      	bne.n	8007b3a <xQueueGenericSend+0x36>
	__asm volatile
 8007b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b24:	b672      	cpsid	i
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	b662      	cpsie	i
 8007b34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b36:	bf00      	nop
 8007b38:	e7fe      	b.n	8007b38 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d103      	bne.n	8007b48 <xQueueGenericSend+0x44>
 8007b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <xQueueGenericSend+0x48>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e000      	b.n	8007b4e <xQueueGenericSend+0x4a>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10c      	bne.n	8007b6c <xQueueGenericSend+0x68>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	b672      	cpsid	i
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	b662      	cpsie	i
 8007b66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b68:	bf00      	nop
 8007b6a:	e7fe      	b.n	8007b6a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d103      	bne.n	8007b7a <xQueueGenericSend+0x76>
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d101      	bne.n	8007b7e <xQueueGenericSend+0x7a>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e000      	b.n	8007b80 <xQueueGenericSend+0x7c>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10c      	bne.n	8007b9e <xQueueGenericSend+0x9a>
	__asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	b672      	cpsid	i
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	b662      	cpsie	i
 8007b98:	623b      	str	r3, [r7, #32]
}
 8007b9a:	bf00      	nop
 8007b9c:	e7fe      	b.n	8007b9c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b9e:	f001 fa13 	bl	8008fc8 <xTaskGetSchedulerState>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d102      	bne.n	8007bae <xQueueGenericSend+0xaa>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <xQueueGenericSend+0xae>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e000      	b.n	8007bb4 <xQueueGenericSend+0xb0>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10c      	bne.n	8007bd2 <xQueueGenericSend+0xce>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	b672      	cpsid	i
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	b662      	cpsie	i
 8007bcc:	61fb      	str	r3, [r7, #28]
}
 8007bce:	bf00      	nop
 8007bd0:	e7fe      	b.n	8007bd0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bd2:	f7ff fd5b 	bl	800768c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d302      	bcc.n	8007be8 <xQueueGenericSend+0xe4>
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d129      	bne.n	8007c3c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	68b9      	ldr	r1, [r7, #8]
 8007bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bee:	f000 fa15 	bl	800801c <prvCopyDataToQueue>
 8007bf2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d010      	beq.n	8007c1e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfe:	3324      	adds	r3, #36	; 0x24
 8007c00:	4618      	mov	r0, r3
 8007c02:	f001 f817 	bl	8008c34 <xTaskRemoveFromEventList>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d013      	beq.n	8007c34 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007c0c:	4b3f      	ldr	r3, [pc, #252]	; (8007d0c <xQueueGenericSend+0x208>)
 8007c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	e00a      	b.n	8007c34 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d007      	beq.n	8007c34 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007c24:	4b39      	ldr	r3, [pc, #228]	; (8007d0c <xQueueGenericSend+0x208>)
 8007c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c2a:	601a      	str	r2, [r3, #0]
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007c34:	f7ff fd5e 	bl	80076f4 <vPortExitCritical>
				return pdPASS;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e063      	b.n	8007d04 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d103      	bne.n	8007c4a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c42:	f7ff fd57 	bl	80076f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007c46:	2300      	movs	r3, #0
 8007c48:	e05c      	b.n	8007d04 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d106      	bne.n	8007c5e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c50:	f107 0314 	add.w	r3, r7, #20
 8007c54:	4618      	mov	r0, r3
 8007c56:	f001 f853 	bl	8008d00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c5e:	f7ff fd49 	bl	80076f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c62:	f000 fdb3 	bl	80087cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c66:	f7ff fd11 	bl	800768c <vPortEnterCritical>
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c70:	b25b      	sxtb	r3, r3
 8007c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c76:	d103      	bne.n	8007c80 <xQueueGenericSend+0x17c>
 8007c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c86:	b25b      	sxtb	r3, r3
 8007c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8c:	d103      	bne.n	8007c96 <xQueueGenericSend+0x192>
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c96:	f7ff fd2d 	bl	80076f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c9a:	1d3a      	adds	r2, r7, #4
 8007c9c:	f107 0314 	add.w	r3, r7, #20
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f001 f842 	bl	8008d2c <xTaskCheckForTimeOut>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d124      	bne.n	8007cf8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007cae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cb0:	f000 faac 	bl	800820c <prvIsQueueFull>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d018      	beq.n	8007cec <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbc:	3310      	adds	r3, #16
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 ff62 	bl	8008b8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007cc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cca:	f000 fa37 	bl	800813c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007cce:	f000 fd8b 	bl	80087e8 <xTaskResumeAll>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f47f af7c 	bne.w	8007bd2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007cda:	4b0c      	ldr	r3, [pc, #48]	; (8007d0c <xQueueGenericSend+0x208>)
 8007cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	e772      	b.n	8007bd2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cee:	f000 fa25 	bl	800813c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cf2:	f000 fd79 	bl	80087e8 <xTaskResumeAll>
 8007cf6:	e76c      	b.n	8007bd2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cfa:	f000 fa1f 	bl	800813c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cfe:	f000 fd73 	bl	80087e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007d02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3738      	adds	r7, #56	; 0x38
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	e000ed04 	.word	0xe000ed04

08007d10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b08e      	sub	sp, #56	; 0x38
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
 8007d1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10c      	bne.n	8007d42 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2c:	b672      	cpsid	i
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	b662      	cpsie	i
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d3e:	bf00      	nop
 8007d40:	e7fe      	b.n	8007d40 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d103      	bne.n	8007d50 <xQueueGenericSendFromISR+0x40>
 8007d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d101      	bne.n	8007d54 <xQueueGenericSendFromISR+0x44>
 8007d50:	2301      	movs	r3, #1
 8007d52:	e000      	b.n	8007d56 <xQueueGenericSendFromISR+0x46>
 8007d54:	2300      	movs	r3, #0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10c      	bne.n	8007d74 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5e:	b672      	cpsid	i
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	b662      	cpsie	i
 8007d6e:	623b      	str	r3, [r7, #32]
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d103      	bne.n	8007d82 <xQueueGenericSendFromISR+0x72>
 8007d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d101      	bne.n	8007d86 <xQueueGenericSendFromISR+0x76>
 8007d82:	2301      	movs	r3, #1
 8007d84:	e000      	b.n	8007d88 <xQueueGenericSendFromISR+0x78>
 8007d86:	2300      	movs	r3, #0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10c      	bne.n	8007da6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d90:	b672      	cpsid	i
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	b662      	cpsie	i
 8007da0:	61fb      	str	r3, [r7, #28]
}
 8007da2:	bf00      	nop
 8007da4:	e7fe      	b.n	8007da4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007da6:	f7ff fd59 	bl	800785c <vPortValidateInterruptPriority>
	__asm volatile
 8007daa:	f3ef 8211 	mrs	r2, BASEPRI
 8007dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db2:	b672      	cpsid	i
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	b662      	cpsie	i
 8007dc2:	61ba      	str	r2, [r7, #24]
 8007dc4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007dc6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d302      	bcc.n	8007ddc <xQueueGenericSendFromISR+0xcc>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d12c      	bne.n	8007e36 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	68b9      	ldr	r1, [r7, #8]
 8007dea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dec:	f000 f916 	bl	800801c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007df0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df8:	d112      	bne.n	8007e20 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d016      	beq.n	8007e30 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	3324      	adds	r3, #36	; 0x24
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 ff14 	bl	8008c34 <xTaskRemoveFromEventList>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00e      	beq.n	8007e30 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00b      	beq.n	8007e30 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	e007      	b.n	8007e30 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e24:	3301      	adds	r3, #1
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	b25a      	sxtb	r2, r3
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007e30:	2301      	movs	r3, #1
 8007e32:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007e34:	e001      	b.n	8007e3a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e36:	2300      	movs	r3, #0
 8007e38:	637b      	str	r3, [r7, #52]	; 0x34
 8007e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	f383 8811 	msr	BASEPRI, r3
}
 8007e44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3738      	adds	r7, #56	; 0x38
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08c      	sub	sp, #48	; 0x30
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10c      	bne.n	8007e84 <xQueueReceive+0x34>
	__asm volatile
 8007e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6e:	b672      	cpsid	i
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	b662      	cpsie	i
 8007e7e:	623b      	str	r3, [r7, #32]
}
 8007e80:	bf00      	nop
 8007e82:	e7fe      	b.n	8007e82 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d103      	bne.n	8007e92 <xQueueReceive+0x42>
 8007e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <xQueueReceive+0x46>
 8007e92:	2301      	movs	r3, #1
 8007e94:	e000      	b.n	8007e98 <xQueueReceive+0x48>
 8007e96:	2300      	movs	r3, #0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10c      	bne.n	8007eb6 <xQueueReceive+0x66>
	__asm volatile
 8007e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea0:	b672      	cpsid	i
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	b662      	cpsie	i
 8007eb0:	61fb      	str	r3, [r7, #28]
}
 8007eb2:	bf00      	nop
 8007eb4:	e7fe      	b.n	8007eb4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007eb6:	f001 f887 	bl	8008fc8 <xTaskGetSchedulerState>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d102      	bne.n	8007ec6 <xQueueReceive+0x76>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <xQueueReceive+0x7a>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e000      	b.n	8007ecc <xQueueReceive+0x7c>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10c      	bne.n	8007eea <xQueueReceive+0x9a>
	__asm volatile
 8007ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed4:	b672      	cpsid	i
 8007ed6:	f383 8811 	msr	BASEPRI, r3
 8007eda:	f3bf 8f6f 	isb	sy
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	b662      	cpsie	i
 8007ee4:	61bb      	str	r3, [r7, #24]
}
 8007ee6:	bf00      	nop
 8007ee8:	e7fe      	b.n	8007ee8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007eea:	f7ff fbcf 	bl	800768c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d01f      	beq.n	8007f3a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007efa:	68b9      	ldr	r1, [r7, #8]
 8007efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007efe:	f000 f8f7 	bl	80080f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	1e5a      	subs	r2, r3, #1
 8007f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00f      	beq.n	8007f32 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f14:	3310      	adds	r3, #16
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 fe8c 	bl	8008c34 <xTaskRemoveFromEventList>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d007      	beq.n	8007f32 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f22:	4b3d      	ldr	r3, [pc, #244]	; (8008018 <xQueueReceive+0x1c8>)
 8007f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f32:	f7ff fbdf 	bl	80076f4 <vPortExitCritical>
				return pdPASS;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e069      	b.n	800800e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d103      	bne.n	8007f48 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f40:	f7ff fbd8 	bl	80076f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f44:	2300      	movs	r3, #0
 8007f46:	e062      	b.n	800800e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d106      	bne.n	8007f5c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f4e:	f107 0310 	add.w	r3, r7, #16
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fed4 	bl	8008d00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f5c:	f7ff fbca 	bl	80076f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f60:	f000 fc34 	bl	80087cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f64:	f7ff fb92 	bl	800768c <vPortEnterCritical>
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f6e:	b25b      	sxtb	r3, r3
 8007f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f74:	d103      	bne.n	8007f7e <xQueueReceive+0x12e>
 8007f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f84:	b25b      	sxtb	r3, r3
 8007f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8a:	d103      	bne.n	8007f94 <xQueueReceive+0x144>
 8007f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f94:	f7ff fbae 	bl	80076f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f98:	1d3a      	adds	r2, r7, #4
 8007f9a:	f107 0310 	add.w	r3, r7, #16
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 fec3 	bl	8008d2c <xTaskCheckForTimeOut>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d123      	bne.n	8007ff4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fae:	f000 f917 	bl	80081e0 <prvIsQueueEmpty>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d017      	beq.n	8007fe8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fba:	3324      	adds	r3, #36	; 0x24
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fde3 	bl	8008b8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fc8:	f000 f8b8 	bl	800813c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fcc:	f000 fc0c 	bl	80087e8 <xTaskResumeAll>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d189      	bne.n	8007eea <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007fd6:	4b10      	ldr	r3, [pc, #64]	; (8008018 <xQueueReceive+0x1c8>)
 8007fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	e780      	b.n	8007eea <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fea:	f000 f8a7 	bl	800813c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fee:	f000 fbfb 	bl	80087e8 <xTaskResumeAll>
 8007ff2:	e77a      	b.n	8007eea <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ff6:	f000 f8a1 	bl	800813c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ffa:	f000 fbf5 	bl	80087e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008000:	f000 f8ee 	bl	80081e0 <prvIsQueueEmpty>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	f43f af6f 	beq.w	8007eea <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800800c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800800e:	4618      	mov	r0, r3
 8008010:	3730      	adds	r7, #48	; 0x30
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	e000ed04 	.word	0xe000ed04

0800801c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008028:	2300      	movs	r3, #0
 800802a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008030:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10d      	bne.n	8008056 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d14d      	bne.n	80080de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	4618      	mov	r0, r3
 8008048:	f000 ffdc 	bl	8009004 <xTaskPriorityDisinherit>
 800804c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	609a      	str	r2, [r3, #8]
 8008054:	e043      	b.n	80080de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d119      	bne.n	8008090 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6858      	ldr	r0, [r3, #4]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008064:	461a      	mov	r2, r3
 8008066:	68b9      	ldr	r1, [r7, #8]
 8008068:	f001 fdf8 	bl	8009c5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	685a      	ldr	r2, [r3, #4]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008074:	441a      	add	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	429a      	cmp	r2, r3
 8008084:	d32b      	bcc.n	80080de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	605a      	str	r2, [r3, #4]
 800808e:	e026      	b.n	80080de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	68d8      	ldr	r0, [r3, #12]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008098:	461a      	mov	r2, r3
 800809a:	68b9      	ldr	r1, [r7, #8]
 800809c:	f001 fdde 	bl	8009c5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	68da      	ldr	r2, [r3, #12]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a8:	425b      	negs	r3, r3
 80080aa:	441a      	add	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	68da      	ldr	r2, [r3, #12]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d207      	bcs.n	80080cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c4:	425b      	negs	r3, r3
 80080c6:	441a      	add	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d105      	bne.n	80080de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d002      	beq.n	80080de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	3b01      	subs	r3, #1
 80080dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	1c5a      	adds	r2, r3, #1
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80080e6:	697b      	ldr	r3, [r7, #20]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d018      	beq.n	8008134 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68da      	ldr	r2, [r3, #12]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810a:	441a      	add	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68da      	ldr	r2, [r3, #12]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	429a      	cmp	r2, r3
 800811a:	d303      	bcc.n	8008124 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	68d9      	ldr	r1, [r3, #12]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812c:	461a      	mov	r2, r3
 800812e:	6838      	ldr	r0, [r7, #0]
 8008130:	f001 fd94 	bl	8009c5c <memcpy>
	}
}
 8008134:	bf00      	nop
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008144:	f7ff faa2 	bl	800768c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800814e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008150:	e011      	b.n	8008176 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008156:	2b00      	cmp	r3, #0
 8008158:	d012      	beq.n	8008180 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	3324      	adds	r3, #36	; 0x24
 800815e:	4618      	mov	r0, r3
 8008160:	f000 fd68 	bl	8008c34 <xTaskRemoveFromEventList>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800816a:	f000 fe45 	bl	8008df8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800816e:	7bfb      	ldrb	r3, [r7, #15]
 8008170:	3b01      	subs	r3, #1
 8008172:	b2db      	uxtb	r3, r3
 8008174:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800817a:	2b00      	cmp	r3, #0
 800817c:	dce9      	bgt.n	8008152 <prvUnlockQueue+0x16>
 800817e:	e000      	b.n	8008182 <prvUnlockQueue+0x46>
					break;
 8008180:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	22ff      	movs	r2, #255	; 0xff
 8008186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800818a:	f7ff fab3 	bl	80076f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800818e:	f7ff fa7d 	bl	800768c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008198:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800819a:	e011      	b.n	80081c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d012      	beq.n	80081ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3310      	adds	r3, #16
 80081a8:	4618      	mov	r0, r3
 80081aa:	f000 fd43 	bl	8008c34 <xTaskRemoveFromEventList>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80081b4:	f000 fe20 	bl	8008df8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80081b8:	7bbb      	ldrb	r3, [r7, #14]
 80081ba:	3b01      	subs	r3, #1
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	dce9      	bgt.n	800819c <prvUnlockQueue+0x60>
 80081c8:	e000      	b.n	80081cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80081ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	22ff      	movs	r2, #255	; 0xff
 80081d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80081d4:	f7ff fa8e 	bl	80076f4 <vPortExitCritical>
}
 80081d8:	bf00      	nop
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081e8:	f7ff fa50 	bl	800768c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d102      	bne.n	80081fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80081f4:	2301      	movs	r3, #1
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	e001      	b.n	80081fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80081fa:	2300      	movs	r3, #0
 80081fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081fe:	f7ff fa79 	bl	80076f4 <vPortExitCritical>

	return xReturn;
 8008202:	68fb      	ldr	r3, [r7, #12]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008214:	f7ff fa3a 	bl	800768c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008220:	429a      	cmp	r2, r3
 8008222:	d102      	bne.n	800822a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008224:	2301      	movs	r3, #1
 8008226:	60fb      	str	r3, [r7, #12]
 8008228:	e001      	b.n	800822e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800822a:	2300      	movs	r3, #0
 800822c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800822e:	f7ff fa61 	bl	80076f4 <vPortExitCritical>

	return xReturn;
 8008232:	68fb      	ldr	r3, [r7, #12]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008246:	2300      	movs	r3, #0
 8008248:	60fb      	str	r3, [r7, #12]
 800824a:	e014      	b.n	8008276 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800824c:	4a0f      	ldr	r2, [pc, #60]	; (800828c <vQueueAddToRegistry+0x50>)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10b      	bne.n	8008270 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008258:	490c      	ldr	r1, [pc, #48]	; (800828c <vQueueAddToRegistry+0x50>)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008262:	4a0a      	ldr	r2, [pc, #40]	; (800828c <vQueueAddToRegistry+0x50>)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	00db      	lsls	r3, r3, #3
 8008268:	4413      	add	r3, r2
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800826e:	e006      	b.n	800827e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	3301      	adds	r3, #1
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2b07      	cmp	r3, #7
 800827a:	d9e7      	bls.n	800824c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800827c:	bf00      	nop
 800827e:	bf00      	nop
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	20004a90 	.word	0x20004a90

08008290 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80082a0:	f7ff f9f4 	bl	800768c <vPortEnterCritical>
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082aa:	b25b      	sxtb	r3, r3
 80082ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b0:	d103      	bne.n	80082ba <vQueueWaitForMessageRestricted+0x2a>
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082c0:	b25b      	sxtb	r3, r3
 80082c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c6:	d103      	bne.n	80082d0 <vQueueWaitForMessageRestricted+0x40>
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082d0:	f7ff fa10 	bl	80076f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d106      	bne.n	80082ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	3324      	adds	r3, #36	; 0x24
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	68b9      	ldr	r1, [r7, #8]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 fc77 	bl	8008bd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80082ea:	6978      	ldr	r0, [r7, #20]
 80082ec:	f7ff ff26 	bl	800813c <prvUnlockQueue>
	}
 80082f0:	bf00      	nop
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b08e      	sub	sp, #56	; 0x38
 80082fc:	af04      	add	r7, sp, #16
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
 8008304:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10c      	bne.n	8008326 <xTaskCreateStatic+0x2e>
	__asm volatile
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	b672      	cpsid	i
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	b662      	cpsie	i
 8008320:	623b      	str	r3, [r7, #32]
}
 8008322:	bf00      	nop
 8008324:	e7fe      	b.n	8008324 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10c      	bne.n	8008346 <xTaskCreateStatic+0x4e>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008330:	b672      	cpsid	i
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	b662      	cpsie	i
 8008340:	61fb      	str	r3, [r7, #28]
}
 8008342:	bf00      	nop
 8008344:	e7fe      	b.n	8008344 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008346:	23bc      	movs	r3, #188	; 0xbc
 8008348:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	2bbc      	cmp	r3, #188	; 0xbc
 800834e:	d00c      	beq.n	800836a <xTaskCreateStatic+0x72>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	b672      	cpsid	i
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	b662      	cpsie	i
 8008364:	61bb      	str	r3, [r7, #24]
}
 8008366:	bf00      	nop
 8008368:	e7fe      	b.n	8008368 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800836a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836e:	2b00      	cmp	r3, #0
 8008370:	d01e      	beq.n	80083b0 <xTaskCreateStatic+0xb8>
 8008372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008374:	2b00      	cmp	r3, #0
 8008376:	d01b      	beq.n	80083b0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008380:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	2202      	movs	r2, #2
 8008386:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800838a:	2300      	movs	r3, #0
 800838c:	9303      	str	r3, [sp, #12]
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	9302      	str	r3, [sp, #8]
 8008392:	f107 0314 	add.w	r3, r7, #20
 8008396:	9301      	str	r3, [sp, #4]
 8008398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	68b9      	ldr	r1, [r7, #8]
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f000 f850 	bl	8008448 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083aa:	f000 f8f5 	bl	8008598 <prvAddNewTaskToReadyList>
 80083ae:	e001      	b.n	80083b4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80083b0:	2300      	movs	r3, #0
 80083b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80083b4:	697b      	ldr	r3, [r7, #20]
	}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3728      	adds	r7, #40	; 0x28
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b08c      	sub	sp, #48	; 0x30
 80083c2:	af04      	add	r7, sp, #16
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	603b      	str	r3, [r7, #0]
 80083ca:	4613      	mov	r3, r2
 80083cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80083ce:	88fb      	ldrh	r3, [r7, #6]
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fe fdb6 	bl	8006f44 <pvPortMalloc>
 80083d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00e      	beq.n	80083fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80083e0:	20bc      	movs	r0, #188	; 0xbc
 80083e2:	f7fe fdaf 	bl	8006f44 <pvPortMalloc>
 80083e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	631a      	str	r2, [r3, #48]	; 0x30
 80083f4:	e005      	b.n	8008402 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80083f6:	6978      	ldr	r0, [r7, #20]
 80083f8:	f7fe fe6e 	bl	80070d8 <vPortFree>
 80083fc:	e001      	b.n	8008402 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80083fe:	2300      	movs	r3, #0
 8008400:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d017      	beq.n	8008438 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008410:	88fa      	ldrh	r2, [r7, #6]
 8008412:	2300      	movs	r3, #0
 8008414:	9303      	str	r3, [sp, #12]
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	9302      	str	r3, [sp, #8]
 800841a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841c:	9301      	str	r3, [sp, #4]
 800841e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	68b9      	ldr	r1, [r7, #8]
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 f80e 	bl	8008448 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800842c:	69f8      	ldr	r0, [r7, #28]
 800842e:	f000 f8b3 	bl	8008598 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008432:	2301      	movs	r3, #1
 8008434:	61bb      	str	r3, [r7, #24]
 8008436:	e002      	b.n	800843e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008438:	f04f 33ff 	mov.w	r3, #4294967295
 800843c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800843e:	69bb      	ldr	r3, [r7, #24]
	}
 8008440:	4618      	mov	r0, r3
 8008442:	3720      	adds	r7, #32
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b088      	sub	sp, #32
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
 8008454:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008458:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	461a      	mov	r2, r3
 8008460:	21a5      	movs	r1, #165	; 0xa5
 8008462:	f001 fc09 	bl	8009c78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800846a:	6879      	ldr	r1, [r7, #4]
 800846c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008470:	440b      	add	r3, r1
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4413      	add	r3, r2
 8008476:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	f023 0307 	bic.w	r3, r3, #7
 800847e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	f003 0307 	and.w	r3, r3, #7
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00c      	beq.n	80084a4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848e:	b672      	cpsid	i
 8008490:	f383 8811 	msr	BASEPRI, r3
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	b662      	cpsie	i
 800849e:	617b      	str	r3, [r7, #20]
}
 80084a0:	bf00      	nop
 80084a2:	e7fe      	b.n	80084a2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d01f      	beq.n	80084ea <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084aa:	2300      	movs	r3, #0
 80084ac:	61fb      	str	r3, [r7, #28]
 80084ae:	e012      	b.n	80084d6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	4413      	add	r3, r2
 80084b6:	7819      	ldrb	r1, [r3, #0]
 80084b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	4413      	add	r3, r2
 80084be:	3334      	adds	r3, #52	; 0x34
 80084c0:	460a      	mov	r2, r1
 80084c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	4413      	add	r3, r2
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d006      	beq.n	80084de <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	3301      	adds	r3, #1
 80084d4:	61fb      	str	r3, [r7, #28]
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	2b0f      	cmp	r3, #15
 80084da:	d9e9      	bls.n	80084b0 <prvInitialiseNewTask+0x68>
 80084dc:	e000      	b.n	80084e0 <prvInitialiseNewTask+0x98>
			{
				break;
 80084de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084e8:	e003      	b.n	80084f2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80084ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f4:	2b37      	cmp	r3, #55	; 0x37
 80084f6:	d901      	bls.n	80084fc <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80084f8:	2337      	movs	r3, #55	; 0x37
 80084fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80084fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008500:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008506:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850a:	2200      	movs	r2, #0
 800850c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	3304      	adds	r3, #4
 8008512:	4618      	mov	r0, r3
 8008514:	f7fe ff1a 	bl	800734c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851a:	3318      	adds	r3, #24
 800851c:	4618      	mov	r0, r3
 800851e:	f7fe ff15 	bl	800734c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008526:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008536:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	2200      	movs	r2, #0
 800853c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008542:	2200      	movs	r2, #0
 8008544:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854a:	3354      	adds	r3, #84	; 0x54
 800854c:	2260      	movs	r2, #96	; 0x60
 800854e:	2100      	movs	r1, #0
 8008550:	4618      	mov	r0, r3
 8008552:	f001 fb91 	bl	8009c78 <memset>
 8008556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008558:	4a0c      	ldr	r2, [pc, #48]	; (800858c <prvInitialiseNewTask+0x144>)
 800855a:	659a      	str	r2, [r3, #88]	; 0x58
 800855c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855e:	4a0c      	ldr	r2, [pc, #48]	; (8008590 <prvInitialiseNewTask+0x148>)
 8008560:	65da      	str	r2, [r3, #92]	; 0x5c
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	4a0b      	ldr	r2, [pc, #44]	; (8008594 <prvInitialiseNewTask+0x14c>)
 8008566:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008568:	683a      	ldr	r2, [r7, #0]
 800856a:	68f9      	ldr	r1, [r7, #12]
 800856c:	69b8      	ldr	r0, [r7, #24]
 800856e:	f7fe ff81 	bl	8007474 <pxPortInitialiseStack>
 8008572:	4602      	mov	r2, r0
 8008574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008576:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800857e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008582:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008584:	bf00      	nop
 8008586:	3720      	adds	r7, #32
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	0800c740 	.word	0x0800c740
 8008590:	0800c760 	.word	0x0800c760
 8008594:	0800c720 	.word	0x0800c720

08008598 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80085a0:	f7ff f874 	bl	800768c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80085a4:	4b2d      	ldr	r3, [pc, #180]	; (800865c <prvAddNewTaskToReadyList+0xc4>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	3301      	adds	r3, #1
 80085aa:	4a2c      	ldr	r2, [pc, #176]	; (800865c <prvAddNewTaskToReadyList+0xc4>)
 80085ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80085ae:	4b2c      	ldr	r3, [pc, #176]	; (8008660 <prvAddNewTaskToReadyList+0xc8>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d109      	bne.n	80085ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80085b6:	4a2a      	ldr	r2, [pc, #168]	; (8008660 <prvAddNewTaskToReadyList+0xc8>)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085bc:	4b27      	ldr	r3, [pc, #156]	; (800865c <prvAddNewTaskToReadyList+0xc4>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d110      	bne.n	80085e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80085c4:	f000 fc3c 	bl	8008e40 <prvInitialiseTaskLists>
 80085c8:	e00d      	b.n	80085e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80085ca:	4b26      	ldr	r3, [pc, #152]	; (8008664 <prvAddNewTaskToReadyList+0xcc>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d109      	bne.n	80085e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085d2:	4b23      	ldr	r3, [pc, #140]	; (8008660 <prvAddNewTaskToReadyList+0xc8>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085dc:	429a      	cmp	r2, r3
 80085de:	d802      	bhi.n	80085e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80085e0:	4a1f      	ldr	r2, [pc, #124]	; (8008660 <prvAddNewTaskToReadyList+0xc8>)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80085e6:	4b20      	ldr	r3, [pc, #128]	; (8008668 <prvAddNewTaskToReadyList+0xd0>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3301      	adds	r3, #1
 80085ec:	4a1e      	ldr	r2, [pc, #120]	; (8008668 <prvAddNewTaskToReadyList+0xd0>)
 80085ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80085f0:	4b1d      	ldr	r3, [pc, #116]	; (8008668 <prvAddNewTaskToReadyList+0xd0>)
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fc:	4b1b      	ldr	r3, [pc, #108]	; (800866c <prvAddNewTaskToReadyList+0xd4>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	429a      	cmp	r2, r3
 8008602:	d903      	bls.n	800860c <prvAddNewTaskToReadyList+0x74>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008608:	4a18      	ldr	r2, [pc, #96]	; (800866c <prvAddNewTaskToReadyList+0xd4>)
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008610:	4613      	mov	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4a15      	ldr	r2, [pc, #84]	; (8008670 <prvAddNewTaskToReadyList+0xd8>)
 800861a:	441a      	add	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	3304      	adds	r3, #4
 8008620:	4619      	mov	r1, r3
 8008622:	4610      	mov	r0, r2
 8008624:	f7fe fe9f 	bl	8007366 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008628:	f7ff f864 	bl	80076f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800862c:	4b0d      	ldr	r3, [pc, #52]	; (8008664 <prvAddNewTaskToReadyList+0xcc>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00e      	beq.n	8008652 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008634:	4b0a      	ldr	r3, [pc, #40]	; (8008660 <prvAddNewTaskToReadyList+0xc8>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863e:	429a      	cmp	r2, r3
 8008640:	d207      	bcs.n	8008652 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008642:	4b0c      	ldr	r3, [pc, #48]	; (8008674 <prvAddNewTaskToReadyList+0xdc>)
 8008644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008648:	601a      	str	r2, [r3, #0]
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008652:	bf00      	nop
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	20004fa4 	.word	0x20004fa4
 8008660:	20004ad0 	.word	0x20004ad0
 8008664:	20004fb0 	.word	0x20004fb0
 8008668:	20004fc0 	.word	0x20004fc0
 800866c:	20004fac 	.word	0x20004fac
 8008670:	20004ad4 	.word	0x20004ad4
 8008674:	e000ed04 	.word	0xe000ed04

08008678 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008680:	2300      	movs	r3, #0
 8008682:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d019      	beq.n	80086be <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800868a:	4b14      	ldr	r3, [pc, #80]	; (80086dc <vTaskDelay+0x64>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00c      	beq.n	80086ac <vTaskDelay+0x34>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008696:	b672      	cpsid	i
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	b662      	cpsie	i
 80086a6:	60bb      	str	r3, [r7, #8]
}
 80086a8:	bf00      	nop
 80086aa:	e7fe      	b.n	80086aa <vTaskDelay+0x32>
			vTaskSuspendAll();
 80086ac:	f000 f88e 	bl	80087cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80086b0:	2100      	movs	r1, #0
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fd18 	bl	80090e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80086b8:	f000 f896 	bl	80087e8 <xTaskResumeAll>
 80086bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d107      	bne.n	80086d4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80086c4:	4b06      	ldr	r3, [pc, #24]	; (80086e0 <vTaskDelay+0x68>)
 80086c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086d4:	bf00      	nop
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	20004fcc 	.word	0x20004fcc
 80086e0:	e000ed04 	.word	0xe000ed04

080086e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b08a      	sub	sp, #40	; 0x28
 80086e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80086ea:	2300      	movs	r3, #0
 80086ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80086ee:	2300      	movs	r3, #0
 80086f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80086f2:	463a      	mov	r2, r7
 80086f4:	1d39      	adds	r1, r7, #4
 80086f6:	f107 0308 	add.w	r3, r7, #8
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fe fbee 	bl	8006edc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	9202      	str	r2, [sp, #8]
 8008708:	9301      	str	r3, [sp, #4]
 800870a:	2300      	movs	r3, #0
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	2300      	movs	r3, #0
 8008710:	460a      	mov	r2, r1
 8008712:	4926      	ldr	r1, [pc, #152]	; (80087ac <vTaskStartScheduler+0xc8>)
 8008714:	4826      	ldr	r0, [pc, #152]	; (80087b0 <vTaskStartScheduler+0xcc>)
 8008716:	f7ff fdef 	bl	80082f8 <xTaskCreateStatic>
 800871a:	4603      	mov	r3, r0
 800871c:	4a25      	ldr	r2, [pc, #148]	; (80087b4 <vTaskStartScheduler+0xd0>)
 800871e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008720:	4b24      	ldr	r3, [pc, #144]	; (80087b4 <vTaskStartScheduler+0xd0>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008728:	2301      	movs	r3, #1
 800872a:	617b      	str	r3, [r7, #20]
 800872c:	e001      	b.n	8008732 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800872e:	2300      	movs	r3, #0
 8008730:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d102      	bne.n	800873e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008738:	f000 fd2a 	bl	8009190 <xTimerCreateTimerTask>
 800873c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d11d      	bne.n	8008780 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008748:	b672      	cpsid	i
 800874a:	f383 8811 	msr	BASEPRI, r3
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	b662      	cpsie	i
 8008758:	613b      	str	r3, [r7, #16]
}
 800875a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800875c:	4b16      	ldr	r3, [pc, #88]	; (80087b8 <vTaskStartScheduler+0xd4>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3354      	adds	r3, #84	; 0x54
 8008762:	4a16      	ldr	r2, [pc, #88]	; (80087bc <vTaskStartScheduler+0xd8>)
 8008764:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008766:	4b16      	ldr	r3, [pc, #88]	; (80087c0 <vTaskStartScheduler+0xdc>)
 8008768:	f04f 32ff 	mov.w	r2, #4294967295
 800876c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800876e:	4b15      	ldr	r3, [pc, #84]	; (80087c4 <vTaskStartScheduler+0xe0>)
 8008770:	2201      	movs	r2, #1
 8008772:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008774:	4b14      	ldr	r3, [pc, #80]	; (80087c8 <vTaskStartScheduler+0xe4>)
 8008776:	2200      	movs	r2, #0
 8008778:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800877a:	f7fe ff09 	bl	8007590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800877e:	e010      	b.n	80087a2 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008786:	d10c      	bne.n	80087a2 <vTaskStartScheduler+0xbe>
	__asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878c:	b672      	cpsid	i
 800878e:	f383 8811 	msr	BASEPRI, r3
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	b662      	cpsie	i
 800879c:	60fb      	str	r3, [r7, #12]
}
 800879e:	bf00      	nop
 80087a0:	e7fe      	b.n	80087a0 <vTaskStartScheduler+0xbc>
}
 80087a2:	bf00      	nop
 80087a4:	3718      	adds	r7, #24
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	0800c6cc 	.word	0x0800c6cc
 80087b0:	08008e11 	.word	0x08008e11
 80087b4:	20004fc8 	.word	0x20004fc8
 80087b8:	20004ad0 	.word	0x20004ad0
 80087bc:	20000010 	.word	0x20000010
 80087c0:	20004fc4 	.word	0x20004fc4
 80087c4:	20004fb0 	.word	0x20004fb0
 80087c8:	20004fa8 	.word	0x20004fa8

080087cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80087cc:	b480      	push	{r7}
 80087ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80087d0:	4b04      	ldr	r3, [pc, #16]	; (80087e4 <vTaskSuspendAll+0x18>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3301      	adds	r3, #1
 80087d6:	4a03      	ldr	r2, [pc, #12]	; (80087e4 <vTaskSuspendAll+0x18>)
 80087d8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80087da:	bf00      	nop
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	20004fcc 	.word	0x20004fcc

080087e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80087ee:	2300      	movs	r3, #0
 80087f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80087f2:	2300      	movs	r3, #0
 80087f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80087f6:	4b43      	ldr	r3, [pc, #268]	; (8008904 <xTaskResumeAll+0x11c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10c      	bne.n	8008818 <xTaskResumeAll+0x30>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	b672      	cpsid	i
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	b662      	cpsie	i
 8008812:	603b      	str	r3, [r7, #0]
}
 8008814:	bf00      	nop
 8008816:	e7fe      	b.n	8008816 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008818:	f7fe ff38 	bl	800768c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800881c:	4b39      	ldr	r3, [pc, #228]	; (8008904 <xTaskResumeAll+0x11c>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3b01      	subs	r3, #1
 8008822:	4a38      	ldr	r2, [pc, #224]	; (8008904 <xTaskResumeAll+0x11c>)
 8008824:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008826:	4b37      	ldr	r3, [pc, #220]	; (8008904 <xTaskResumeAll+0x11c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d162      	bne.n	80088f4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800882e:	4b36      	ldr	r3, [pc, #216]	; (8008908 <xTaskResumeAll+0x120>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d05e      	beq.n	80088f4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008836:	e02f      	b.n	8008898 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008838:	4b34      	ldr	r3, [pc, #208]	; (800890c <xTaskResumeAll+0x124>)
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3318      	adds	r3, #24
 8008844:	4618      	mov	r0, r3
 8008846:	f7fe fdeb 	bl	8007420 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	3304      	adds	r3, #4
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe fde6 	bl	8007420 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008858:	4b2d      	ldr	r3, [pc, #180]	; (8008910 <xTaskResumeAll+0x128>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	429a      	cmp	r2, r3
 800885e:	d903      	bls.n	8008868 <xTaskResumeAll+0x80>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008864:	4a2a      	ldr	r2, [pc, #168]	; (8008910 <xTaskResumeAll+0x128>)
 8008866:	6013      	str	r3, [r2, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800886c:	4613      	mov	r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	4a27      	ldr	r2, [pc, #156]	; (8008914 <xTaskResumeAll+0x12c>)
 8008876:	441a      	add	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	3304      	adds	r3, #4
 800887c:	4619      	mov	r1, r3
 800887e:	4610      	mov	r0, r2
 8008880:	f7fe fd71 	bl	8007366 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008888:	4b23      	ldr	r3, [pc, #140]	; (8008918 <xTaskResumeAll+0x130>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888e:	429a      	cmp	r2, r3
 8008890:	d302      	bcc.n	8008898 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008892:	4b22      	ldr	r3, [pc, #136]	; (800891c <xTaskResumeAll+0x134>)
 8008894:	2201      	movs	r2, #1
 8008896:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008898:	4b1c      	ldr	r3, [pc, #112]	; (800890c <xTaskResumeAll+0x124>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1cb      	bne.n	8008838 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d001      	beq.n	80088aa <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80088a6:	f000 fb6f 	bl	8008f88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80088aa:	4b1d      	ldr	r3, [pc, #116]	; (8008920 <xTaskResumeAll+0x138>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d010      	beq.n	80088d8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80088b6:	f000 f847 	bl	8008948 <xTaskIncrementTick>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d002      	beq.n	80088c6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80088c0:	4b16      	ldr	r3, [pc, #88]	; (800891c <xTaskResumeAll+0x134>)
 80088c2:	2201      	movs	r2, #1
 80088c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1f1      	bne.n	80088b6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80088d2:	4b13      	ldr	r3, [pc, #76]	; (8008920 <xTaskResumeAll+0x138>)
 80088d4:	2200      	movs	r2, #0
 80088d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80088d8:	4b10      	ldr	r3, [pc, #64]	; (800891c <xTaskResumeAll+0x134>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d009      	beq.n	80088f4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80088e0:	2301      	movs	r3, #1
 80088e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80088e4:	4b0f      	ldr	r3, [pc, #60]	; (8008924 <xTaskResumeAll+0x13c>)
 80088e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088f4:	f7fe fefe 	bl	80076f4 <vPortExitCritical>

	return xAlreadyYielded;
 80088f8:	68bb      	ldr	r3, [r7, #8]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	20004fcc 	.word	0x20004fcc
 8008908:	20004fa4 	.word	0x20004fa4
 800890c:	20004f64 	.word	0x20004f64
 8008910:	20004fac 	.word	0x20004fac
 8008914:	20004ad4 	.word	0x20004ad4
 8008918:	20004ad0 	.word	0x20004ad0
 800891c:	20004fb8 	.word	0x20004fb8
 8008920:	20004fb4 	.word	0x20004fb4
 8008924:	e000ed04 	.word	0xe000ed04

08008928 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800892e:	4b05      	ldr	r3, [pc, #20]	; (8008944 <xTaskGetTickCount+0x1c>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008934:	687b      	ldr	r3, [r7, #4]
}
 8008936:	4618      	mov	r0, r3
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	20004fa8 	.word	0x20004fa8

08008948 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b086      	sub	sp, #24
 800894c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800894e:	2300      	movs	r3, #0
 8008950:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008952:	4b50      	ldr	r3, [pc, #320]	; (8008a94 <xTaskIncrementTick+0x14c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	f040 808b 	bne.w	8008a72 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800895c:	4b4e      	ldr	r3, [pc, #312]	; (8008a98 <xTaskIncrementTick+0x150>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3301      	adds	r3, #1
 8008962:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008964:	4a4c      	ldr	r2, [pc, #304]	; (8008a98 <xTaskIncrementTick+0x150>)
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d122      	bne.n	80089b6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008970:	4b4a      	ldr	r3, [pc, #296]	; (8008a9c <xTaskIncrementTick+0x154>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00c      	beq.n	8008994 <xTaskIncrementTick+0x4c>
	__asm volatile
 800897a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897e:	b672      	cpsid	i
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	b662      	cpsie	i
 800898e:	603b      	str	r3, [r7, #0]
}
 8008990:	bf00      	nop
 8008992:	e7fe      	b.n	8008992 <xTaskIncrementTick+0x4a>
 8008994:	4b41      	ldr	r3, [pc, #260]	; (8008a9c <xTaskIncrementTick+0x154>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	60fb      	str	r3, [r7, #12]
 800899a:	4b41      	ldr	r3, [pc, #260]	; (8008aa0 <xTaskIncrementTick+0x158>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a3f      	ldr	r2, [pc, #252]	; (8008a9c <xTaskIncrementTick+0x154>)
 80089a0:	6013      	str	r3, [r2, #0]
 80089a2:	4a3f      	ldr	r2, [pc, #252]	; (8008aa0 <xTaskIncrementTick+0x158>)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6013      	str	r3, [r2, #0]
 80089a8:	4b3e      	ldr	r3, [pc, #248]	; (8008aa4 <xTaskIncrementTick+0x15c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3301      	adds	r3, #1
 80089ae:	4a3d      	ldr	r2, [pc, #244]	; (8008aa4 <xTaskIncrementTick+0x15c>)
 80089b0:	6013      	str	r3, [r2, #0]
 80089b2:	f000 fae9 	bl	8008f88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80089b6:	4b3c      	ldr	r3, [pc, #240]	; (8008aa8 <xTaskIncrementTick+0x160>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d349      	bcc.n	8008a54 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089c0:	4b36      	ldr	r3, [pc, #216]	; (8008a9c <xTaskIncrementTick+0x154>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d104      	bne.n	80089d4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089ca:	4b37      	ldr	r3, [pc, #220]	; (8008aa8 <xTaskIncrementTick+0x160>)
 80089cc:	f04f 32ff 	mov.w	r2, #4294967295
 80089d0:	601a      	str	r2, [r3, #0]
					break;
 80089d2:	e03f      	b.n	8008a54 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d4:	4b31      	ldr	r3, [pc, #196]	; (8008a9c <xTaskIncrementTick+0x154>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d203      	bcs.n	80089f4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80089ec:	4a2e      	ldr	r2, [pc, #184]	; (8008aa8 <xTaskIncrementTick+0x160>)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80089f2:	e02f      	b.n	8008a54 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	3304      	adds	r3, #4
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7fe fd11 	bl	8007420 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d004      	beq.n	8008a10 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	3318      	adds	r3, #24
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fe fd08 	bl	8007420 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a14:	4b25      	ldr	r3, [pc, #148]	; (8008aac <xTaskIncrementTick+0x164>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d903      	bls.n	8008a24 <xTaskIncrementTick+0xdc>
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a20:	4a22      	ldr	r2, [pc, #136]	; (8008aac <xTaskIncrementTick+0x164>)
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a28:	4613      	mov	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4a1f      	ldr	r2, [pc, #124]	; (8008ab0 <xTaskIncrementTick+0x168>)
 8008a32:	441a      	add	r2, r3
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	3304      	adds	r3, #4
 8008a38:	4619      	mov	r1, r3
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	f7fe fc93 	bl	8007366 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a44:	4b1b      	ldr	r3, [pc, #108]	; (8008ab4 <xTaskIncrementTick+0x16c>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d3b8      	bcc.n	80089c0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a52:	e7b5      	b.n	80089c0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a54:	4b17      	ldr	r3, [pc, #92]	; (8008ab4 <xTaskIncrementTick+0x16c>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a5a:	4915      	ldr	r1, [pc, #84]	; (8008ab0 <xTaskIncrementTick+0x168>)
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	4413      	add	r3, r2
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	440b      	add	r3, r1
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d907      	bls.n	8008a7c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	617b      	str	r3, [r7, #20]
 8008a70:	e004      	b.n	8008a7c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008a72:	4b11      	ldr	r3, [pc, #68]	; (8008ab8 <xTaskIncrementTick+0x170>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3301      	adds	r3, #1
 8008a78:	4a0f      	ldr	r2, [pc, #60]	; (8008ab8 <xTaskIncrementTick+0x170>)
 8008a7a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008a7c:	4b0f      	ldr	r3, [pc, #60]	; (8008abc <xTaskIncrementTick+0x174>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008a84:	2301      	movs	r3, #1
 8008a86:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008a88:	697b      	ldr	r3, [r7, #20]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3718      	adds	r7, #24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20004fcc 	.word	0x20004fcc
 8008a98:	20004fa8 	.word	0x20004fa8
 8008a9c:	20004f5c 	.word	0x20004f5c
 8008aa0:	20004f60 	.word	0x20004f60
 8008aa4:	20004fbc 	.word	0x20004fbc
 8008aa8:	20004fc4 	.word	0x20004fc4
 8008aac:	20004fac 	.word	0x20004fac
 8008ab0:	20004ad4 	.word	0x20004ad4
 8008ab4:	20004ad0 	.word	0x20004ad0
 8008ab8:	20004fb4 	.word	0x20004fb4
 8008abc:	20004fb8 	.word	0x20004fb8

08008ac0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ac6:	4b2b      	ldr	r3, [pc, #172]	; (8008b74 <vTaskSwitchContext+0xb4>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ace:	4b2a      	ldr	r3, [pc, #168]	; (8008b78 <vTaskSwitchContext+0xb8>)
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ad4:	e048      	b.n	8008b68 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8008ad6:	4b28      	ldr	r3, [pc, #160]	; (8008b78 <vTaskSwitchContext+0xb8>)
 8008ad8:	2200      	movs	r2, #0
 8008ada:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008adc:	4b27      	ldr	r3, [pc, #156]	; (8008b7c <vTaskSwitchContext+0xbc>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	60fb      	str	r3, [r7, #12]
 8008ae2:	e012      	b.n	8008b0a <vTaskSwitchContext+0x4a>
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10c      	bne.n	8008b04 <vTaskSwitchContext+0x44>
	__asm volatile
 8008aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aee:	b672      	cpsid	i
 8008af0:	f383 8811 	msr	BASEPRI, r3
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	b662      	cpsie	i
 8008afe:	607b      	str	r3, [r7, #4]
}
 8008b00:	bf00      	nop
 8008b02:	e7fe      	b.n	8008b02 <vTaskSwitchContext+0x42>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	3b01      	subs	r3, #1
 8008b08:	60fb      	str	r3, [r7, #12]
 8008b0a:	491d      	ldr	r1, [pc, #116]	; (8008b80 <vTaskSwitchContext+0xc0>)
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	440b      	add	r3, r1
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d0e2      	beq.n	8008ae4 <vTaskSwitchContext+0x24>
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	4613      	mov	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4a15      	ldr	r2, [pc, #84]	; (8008b80 <vTaskSwitchContext+0xc0>)
 8008b2a:	4413      	add	r3, r2
 8008b2c:	60bb      	str	r3, [r7, #8]
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	605a      	str	r2, [r3, #4]
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	685a      	ldr	r2, [r3, #4]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	3308      	adds	r3, #8
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d104      	bne.n	8008b4e <vTaskSwitchContext+0x8e>
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	685a      	ldr	r2, [r3, #4]
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	605a      	str	r2, [r3, #4]
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	4a0b      	ldr	r2, [pc, #44]	; (8008b84 <vTaskSwitchContext+0xc4>)
 8008b56:	6013      	str	r3, [r2, #0]
 8008b58:	4a08      	ldr	r2, [pc, #32]	; (8008b7c <vTaskSwitchContext+0xbc>)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008b5e:	4b09      	ldr	r3, [pc, #36]	; (8008b84 <vTaskSwitchContext+0xc4>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3354      	adds	r3, #84	; 0x54
 8008b64:	4a08      	ldr	r2, [pc, #32]	; (8008b88 <vTaskSwitchContext+0xc8>)
 8008b66:	6013      	str	r3, [r2, #0]
}
 8008b68:	bf00      	nop
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr
 8008b74:	20004fcc 	.word	0x20004fcc
 8008b78:	20004fb8 	.word	0x20004fb8
 8008b7c:	20004fac 	.word	0x20004fac
 8008b80:	20004ad4 	.word	0x20004ad4
 8008b84:	20004ad0 	.word	0x20004ad0
 8008b88:	20000010 	.word	0x20000010

08008b8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10c      	bne.n	8008bb6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba0:	b672      	cpsid	i
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	b662      	cpsie	i
 8008bb0:	60fb      	str	r3, [r7, #12]
}
 8008bb2:	bf00      	nop
 8008bb4:	e7fe      	b.n	8008bb4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bb6:	4b07      	ldr	r3, [pc, #28]	; (8008bd4 <vTaskPlaceOnEventList+0x48>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3318      	adds	r3, #24
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f7fe fbf5 	bl	80073ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	6838      	ldr	r0, [r7, #0]
 8008bc8:	f000 fa8e 	bl	80090e8 <prvAddCurrentTaskToDelayedList>
}
 8008bcc:	bf00      	nop
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	20004ad0 	.word	0x20004ad0

08008bd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10c      	bne.n	8008c04 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	b672      	cpsid	i
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	b662      	cpsie	i
 8008bfe:	617b      	str	r3, [r7, #20]
}
 8008c00:	bf00      	nop
 8008c02:	e7fe      	b.n	8008c02 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c04:	4b0a      	ldr	r3, [pc, #40]	; (8008c30 <vTaskPlaceOnEventListRestricted+0x58>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3318      	adds	r3, #24
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f7fe fbaa 	bl	8007366 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d002      	beq.n	8008c1e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008c18:	f04f 33ff 	mov.w	r3, #4294967295
 8008c1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	68b8      	ldr	r0, [r7, #8]
 8008c22:	f000 fa61 	bl	80090e8 <prvAddCurrentTaskToDelayedList>
	}
 8008c26:	bf00      	nop
 8008c28:	3718      	adds	r7, #24
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	20004ad0 	.word	0x20004ad0

08008c34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10c      	bne.n	8008c64 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4e:	b672      	cpsid	i
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	b662      	cpsie	i
 8008c5e:	60fb      	str	r3, [r7, #12]
}
 8008c60:	bf00      	nop
 8008c62:	e7fe      	b.n	8008c62 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	3318      	adds	r3, #24
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7fe fbd9 	bl	8007420 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c6e:	4b1e      	ldr	r3, [pc, #120]	; (8008ce8 <xTaskRemoveFromEventList+0xb4>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d11d      	bne.n	8008cb2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	3304      	adds	r3, #4
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe fbd0 	bl	8007420 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c84:	4b19      	ldr	r3, [pc, #100]	; (8008cec <xTaskRemoveFromEventList+0xb8>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d903      	bls.n	8008c94 <xTaskRemoveFromEventList+0x60>
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c90:	4a16      	ldr	r2, [pc, #88]	; (8008cec <xTaskRemoveFromEventList+0xb8>)
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c98:	4613      	mov	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4a13      	ldr	r2, [pc, #76]	; (8008cf0 <xTaskRemoveFromEventList+0xbc>)
 8008ca2:	441a      	add	r2, r3
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	4619      	mov	r1, r3
 8008caa:	4610      	mov	r0, r2
 8008cac:	f7fe fb5b 	bl	8007366 <vListInsertEnd>
 8008cb0:	e005      	b.n	8008cbe <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	3318      	adds	r3, #24
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	480e      	ldr	r0, [pc, #56]	; (8008cf4 <xTaskRemoveFromEventList+0xc0>)
 8008cba:	f7fe fb54 	bl	8007366 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc2:	4b0d      	ldr	r3, [pc, #52]	; (8008cf8 <xTaskRemoveFromEventList+0xc4>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d905      	bls.n	8008cd8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008cd0:	4b0a      	ldr	r3, [pc, #40]	; (8008cfc <xTaskRemoveFromEventList+0xc8>)
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	601a      	str	r2, [r3, #0]
 8008cd6:	e001      	b.n	8008cdc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008cdc:	697b      	ldr	r3, [r7, #20]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20004fcc 	.word	0x20004fcc
 8008cec:	20004fac 	.word	0x20004fac
 8008cf0:	20004ad4 	.word	0x20004ad4
 8008cf4:	20004f64 	.word	0x20004f64
 8008cf8:	20004ad0 	.word	0x20004ad0
 8008cfc:	20004fb8 	.word	0x20004fb8

08008d00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d08:	4b06      	ldr	r3, [pc, #24]	; (8008d24 <vTaskInternalSetTimeOutState+0x24>)
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d10:	4b05      	ldr	r3, [pc, #20]	; (8008d28 <vTaskInternalSetTimeOutState+0x28>)
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	605a      	str	r2, [r3, #4]
}
 8008d18:	bf00      	nop
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr
 8008d24:	20004fbc 	.word	0x20004fbc
 8008d28:	20004fa8 	.word	0x20004fa8

08008d2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b088      	sub	sp, #32
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10c      	bne.n	8008d56 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d40:	b672      	cpsid	i
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	b662      	cpsie	i
 8008d50:	613b      	str	r3, [r7, #16]
}
 8008d52:	bf00      	nop
 8008d54:	e7fe      	b.n	8008d54 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d10c      	bne.n	8008d76 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d60:	b672      	cpsid	i
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	b662      	cpsie	i
 8008d70:	60fb      	str	r3, [r7, #12]
}
 8008d72:	bf00      	nop
 8008d74:	e7fe      	b.n	8008d74 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008d76:	f7fe fc89 	bl	800768c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d7a:	4b1d      	ldr	r3, [pc, #116]	; (8008df0 <xTaskCheckForTimeOut+0xc4>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d92:	d102      	bne.n	8008d9a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d94:	2300      	movs	r3, #0
 8008d96:	61fb      	str	r3, [r7, #28]
 8008d98:	e023      	b.n	8008de2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	4b15      	ldr	r3, [pc, #84]	; (8008df4 <xTaskCheckForTimeOut+0xc8>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d007      	beq.n	8008db6 <xTaskCheckForTimeOut+0x8a>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d302      	bcc.n	8008db6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008db0:	2301      	movs	r3, #1
 8008db2:	61fb      	str	r3, [r7, #28]
 8008db4:	e015      	b.n	8008de2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d20b      	bcs.n	8008dd8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	1ad2      	subs	r2, r2, r3
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7ff ff97 	bl	8008d00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	61fb      	str	r3, [r7, #28]
 8008dd6:	e004      	b.n	8008de2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008dde:	2301      	movs	r3, #1
 8008de0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008de2:	f7fe fc87 	bl	80076f4 <vPortExitCritical>

	return xReturn;
 8008de6:	69fb      	ldr	r3, [r7, #28]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3720      	adds	r7, #32
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	20004fa8 	.word	0x20004fa8
 8008df4:	20004fbc 	.word	0x20004fbc

08008df8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008dfc:	4b03      	ldr	r3, [pc, #12]	; (8008e0c <vTaskMissedYield+0x14>)
 8008dfe:	2201      	movs	r2, #1
 8008e00:	601a      	str	r2, [r3, #0]
}
 8008e02:	bf00      	nop
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	20004fb8 	.word	0x20004fb8

08008e10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e18:	f000 f852 	bl	8008ec0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e1c:	4b06      	ldr	r3, [pc, #24]	; (8008e38 <prvIdleTask+0x28>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d9f9      	bls.n	8008e18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e24:	4b05      	ldr	r3, [pc, #20]	; (8008e3c <prvIdleTask+0x2c>)
 8008e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e2a:	601a      	str	r2, [r3, #0]
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e34:	e7f0      	b.n	8008e18 <prvIdleTask+0x8>
 8008e36:	bf00      	nop
 8008e38:	20004ad4 	.word	0x20004ad4
 8008e3c:	e000ed04 	.word	0xe000ed04

08008e40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e46:	2300      	movs	r3, #0
 8008e48:	607b      	str	r3, [r7, #4]
 8008e4a:	e00c      	b.n	8008e66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4a12      	ldr	r2, [pc, #72]	; (8008ea0 <prvInitialiseTaskLists+0x60>)
 8008e58:	4413      	add	r3, r2
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fe fa56 	bl	800730c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3301      	adds	r3, #1
 8008e64:	607b      	str	r3, [r7, #4]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b37      	cmp	r3, #55	; 0x37
 8008e6a:	d9ef      	bls.n	8008e4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e6c:	480d      	ldr	r0, [pc, #52]	; (8008ea4 <prvInitialiseTaskLists+0x64>)
 8008e6e:	f7fe fa4d 	bl	800730c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e72:	480d      	ldr	r0, [pc, #52]	; (8008ea8 <prvInitialiseTaskLists+0x68>)
 8008e74:	f7fe fa4a 	bl	800730c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e78:	480c      	ldr	r0, [pc, #48]	; (8008eac <prvInitialiseTaskLists+0x6c>)
 8008e7a:	f7fe fa47 	bl	800730c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e7e:	480c      	ldr	r0, [pc, #48]	; (8008eb0 <prvInitialiseTaskLists+0x70>)
 8008e80:	f7fe fa44 	bl	800730c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e84:	480b      	ldr	r0, [pc, #44]	; (8008eb4 <prvInitialiseTaskLists+0x74>)
 8008e86:	f7fe fa41 	bl	800730c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e8a:	4b0b      	ldr	r3, [pc, #44]	; (8008eb8 <prvInitialiseTaskLists+0x78>)
 8008e8c:	4a05      	ldr	r2, [pc, #20]	; (8008ea4 <prvInitialiseTaskLists+0x64>)
 8008e8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e90:	4b0a      	ldr	r3, [pc, #40]	; (8008ebc <prvInitialiseTaskLists+0x7c>)
 8008e92:	4a05      	ldr	r2, [pc, #20]	; (8008ea8 <prvInitialiseTaskLists+0x68>)
 8008e94:	601a      	str	r2, [r3, #0]
}
 8008e96:	bf00      	nop
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20004ad4 	.word	0x20004ad4
 8008ea4:	20004f34 	.word	0x20004f34
 8008ea8:	20004f48 	.word	0x20004f48
 8008eac:	20004f64 	.word	0x20004f64
 8008eb0:	20004f78 	.word	0x20004f78
 8008eb4:	20004f90 	.word	0x20004f90
 8008eb8:	20004f5c 	.word	0x20004f5c
 8008ebc:	20004f60 	.word	0x20004f60

08008ec0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ec6:	e019      	b.n	8008efc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ec8:	f7fe fbe0 	bl	800768c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ecc:	4b10      	ldr	r3, [pc, #64]	; (8008f10 <prvCheckTasksWaitingTermination+0x50>)
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fe faa1 	bl	8007420 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ede:	4b0d      	ldr	r3, [pc, #52]	; (8008f14 <prvCheckTasksWaitingTermination+0x54>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	4a0b      	ldr	r2, [pc, #44]	; (8008f14 <prvCheckTasksWaitingTermination+0x54>)
 8008ee6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ee8:	4b0b      	ldr	r3, [pc, #44]	; (8008f18 <prvCheckTasksWaitingTermination+0x58>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3b01      	subs	r3, #1
 8008eee:	4a0a      	ldr	r2, [pc, #40]	; (8008f18 <prvCheckTasksWaitingTermination+0x58>)
 8008ef0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ef2:	f7fe fbff 	bl	80076f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f810 	bl	8008f1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008efc:	4b06      	ldr	r3, [pc, #24]	; (8008f18 <prvCheckTasksWaitingTermination+0x58>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1e1      	bne.n	8008ec8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f04:	bf00      	nop
 8008f06:	bf00      	nop
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20004f78 	.word	0x20004f78
 8008f14:	20004fa4 	.word	0x20004fa4
 8008f18:	20004f8c 	.word	0x20004f8c

08008f1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	3354      	adds	r3, #84	; 0x54
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f001 fc93 	bl	800a854 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d108      	bne.n	8008f4a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fe f8cb 	bl	80070d8 <vPortFree>
				vPortFree( pxTCB );
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f7fe f8c8 	bl	80070d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f48:	e01a      	b.n	8008f80 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d103      	bne.n	8008f5c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7fe f8bf 	bl	80070d8 <vPortFree>
	}
 8008f5a:	e011      	b.n	8008f80 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d00c      	beq.n	8008f80 <prvDeleteTCB+0x64>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6a:	b672      	cpsid	i
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	b662      	cpsie	i
 8008f7a:	60fb      	str	r3, [r7, #12]
}
 8008f7c:	bf00      	nop
 8008f7e:	e7fe      	b.n	8008f7e <prvDeleteTCB+0x62>
	}
 8008f80:	bf00      	nop
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f8e:	4b0c      	ldr	r3, [pc, #48]	; (8008fc0 <prvResetNextTaskUnblockTime+0x38>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d104      	bne.n	8008fa2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f98:	4b0a      	ldr	r3, [pc, #40]	; (8008fc4 <prvResetNextTaskUnblockTime+0x3c>)
 8008f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008fa0:	e008      	b.n	8008fb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fa2:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <prvResetNextTaskUnblockTime+0x38>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	4a04      	ldr	r2, [pc, #16]	; (8008fc4 <prvResetNextTaskUnblockTime+0x3c>)
 8008fb2:	6013      	str	r3, [r2, #0]
}
 8008fb4:	bf00      	nop
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr
 8008fc0:	20004f5c 	.word	0x20004f5c
 8008fc4:	20004fc4 	.word	0x20004fc4

08008fc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008fce:	4b0b      	ldr	r3, [pc, #44]	; (8008ffc <xTaskGetSchedulerState+0x34>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d102      	bne.n	8008fdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	607b      	str	r3, [r7, #4]
 8008fda:	e008      	b.n	8008fee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fdc:	4b08      	ldr	r3, [pc, #32]	; (8009000 <xTaskGetSchedulerState+0x38>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d102      	bne.n	8008fea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	607b      	str	r3, [r7, #4]
 8008fe8:	e001      	b.n	8008fee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008fea:	2300      	movs	r3, #0
 8008fec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008fee:	687b      	ldr	r3, [r7, #4]
	}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	20004fb0 	.word	0x20004fb0
 8009000:	20004fcc 	.word	0x20004fcc

08009004 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009004:	b580      	push	{r7, lr}
 8009006:	b086      	sub	sp, #24
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009010:	2300      	movs	r3, #0
 8009012:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d05a      	beq.n	80090d0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800901a:	4b30      	ldr	r3, [pc, #192]	; (80090dc <xTaskPriorityDisinherit+0xd8>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	429a      	cmp	r2, r3
 8009022:	d00c      	beq.n	800903e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009028:	b672      	cpsid	i
 800902a:	f383 8811 	msr	BASEPRI, r3
 800902e:	f3bf 8f6f 	isb	sy
 8009032:	f3bf 8f4f 	dsb	sy
 8009036:	b662      	cpsie	i
 8009038:	60fb      	str	r3, [r7, #12]
}
 800903a:	bf00      	nop
 800903c:	e7fe      	b.n	800903c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009042:	2b00      	cmp	r3, #0
 8009044:	d10c      	bne.n	8009060 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904a:	b672      	cpsid	i
 800904c:	f383 8811 	msr	BASEPRI, r3
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	b662      	cpsie	i
 800905a:	60bb      	str	r3, [r7, #8]
}
 800905c:	bf00      	nop
 800905e:	e7fe      	b.n	800905e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009064:	1e5a      	subs	r2, r3, #1
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009072:	429a      	cmp	r2, r3
 8009074:	d02c      	beq.n	80090d0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800907a:	2b00      	cmp	r3, #0
 800907c:	d128      	bne.n	80090d0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	3304      	adds	r3, #4
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe f9cc 	bl	8007420 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009094:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a0:	4b0f      	ldr	r3, [pc, #60]	; (80090e0 <xTaskPriorityDisinherit+0xdc>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d903      	bls.n	80090b0 <xTaskPriorityDisinherit+0xac>
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ac:	4a0c      	ldr	r2, [pc, #48]	; (80090e0 <xTaskPriorityDisinherit+0xdc>)
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b4:	4613      	mov	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4a09      	ldr	r2, [pc, #36]	; (80090e4 <xTaskPriorityDisinherit+0xe0>)
 80090be:	441a      	add	r2, r3
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	3304      	adds	r3, #4
 80090c4:	4619      	mov	r1, r3
 80090c6:	4610      	mov	r0, r2
 80090c8:	f7fe f94d 	bl	8007366 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80090cc:	2301      	movs	r3, #1
 80090ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090d0:	697b      	ldr	r3, [r7, #20]
	}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3718      	adds	r7, #24
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	20004ad0 	.word	0x20004ad0
 80090e0:	20004fac 	.word	0x20004fac
 80090e4:	20004ad4 	.word	0x20004ad4

080090e8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090f2:	4b21      	ldr	r3, [pc, #132]	; (8009178 <prvAddCurrentTaskToDelayedList+0x90>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090f8:	4b20      	ldr	r3, [pc, #128]	; (800917c <prvAddCurrentTaskToDelayedList+0x94>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3304      	adds	r3, #4
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe f98e 	bl	8007420 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910a:	d10a      	bne.n	8009122 <prvAddCurrentTaskToDelayedList+0x3a>
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d007      	beq.n	8009122 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009112:	4b1a      	ldr	r3, [pc, #104]	; (800917c <prvAddCurrentTaskToDelayedList+0x94>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3304      	adds	r3, #4
 8009118:	4619      	mov	r1, r3
 800911a:	4819      	ldr	r0, [pc, #100]	; (8009180 <prvAddCurrentTaskToDelayedList+0x98>)
 800911c:	f7fe f923 	bl	8007366 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009120:	e026      	b.n	8009170 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4413      	add	r3, r2
 8009128:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800912a:	4b14      	ldr	r3, [pc, #80]	; (800917c <prvAddCurrentTaskToDelayedList+0x94>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68ba      	ldr	r2, [r7, #8]
 8009130:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	429a      	cmp	r2, r3
 8009138:	d209      	bcs.n	800914e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800913a:	4b12      	ldr	r3, [pc, #72]	; (8009184 <prvAddCurrentTaskToDelayedList+0x9c>)
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	4b0f      	ldr	r3, [pc, #60]	; (800917c <prvAddCurrentTaskToDelayedList+0x94>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3304      	adds	r3, #4
 8009144:	4619      	mov	r1, r3
 8009146:	4610      	mov	r0, r2
 8009148:	f7fe f931 	bl	80073ae <vListInsert>
}
 800914c:	e010      	b.n	8009170 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800914e:	4b0e      	ldr	r3, [pc, #56]	; (8009188 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	4b0a      	ldr	r3, [pc, #40]	; (800917c <prvAddCurrentTaskToDelayedList+0x94>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	3304      	adds	r3, #4
 8009158:	4619      	mov	r1, r3
 800915a:	4610      	mov	r0, r2
 800915c:	f7fe f927 	bl	80073ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009160:	4b0a      	ldr	r3, [pc, #40]	; (800918c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68ba      	ldr	r2, [r7, #8]
 8009166:	429a      	cmp	r2, r3
 8009168:	d202      	bcs.n	8009170 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800916a:	4a08      	ldr	r2, [pc, #32]	; (800918c <prvAddCurrentTaskToDelayedList+0xa4>)
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	6013      	str	r3, [r2, #0]
}
 8009170:	bf00      	nop
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	20004fa8 	.word	0x20004fa8
 800917c:	20004ad0 	.word	0x20004ad0
 8009180:	20004f90 	.word	0x20004f90
 8009184:	20004f60 	.word	0x20004f60
 8009188:	20004f5c 	.word	0x20004f5c
 800918c:	20004fc4 	.word	0x20004fc4

08009190 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b08a      	sub	sp, #40	; 0x28
 8009194:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009196:	2300      	movs	r3, #0
 8009198:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800919a:	f000 fb15 	bl	80097c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800919e:	4b1d      	ldr	r3, [pc, #116]	; (8009214 <xTimerCreateTimerTask+0x84>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d021      	beq.n	80091ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80091a6:	2300      	movs	r3, #0
 80091a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80091aa:	2300      	movs	r3, #0
 80091ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80091ae:	1d3a      	adds	r2, r7, #4
 80091b0:	f107 0108 	add.w	r1, r7, #8
 80091b4:	f107 030c 	add.w	r3, r7, #12
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7fd fea9 	bl	8006f10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80091be:	6879      	ldr	r1, [r7, #4]
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	9202      	str	r2, [sp, #8]
 80091c6:	9301      	str	r3, [sp, #4]
 80091c8:	2302      	movs	r3, #2
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	2300      	movs	r3, #0
 80091ce:	460a      	mov	r2, r1
 80091d0:	4911      	ldr	r1, [pc, #68]	; (8009218 <xTimerCreateTimerTask+0x88>)
 80091d2:	4812      	ldr	r0, [pc, #72]	; (800921c <xTimerCreateTimerTask+0x8c>)
 80091d4:	f7ff f890 	bl	80082f8 <xTaskCreateStatic>
 80091d8:	4603      	mov	r3, r0
 80091da:	4a11      	ldr	r2, [pc, #68]	; (8009220 <xTimerCreateTimerTask+0x90>)
 80091dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80091de:	4b10      	ldr	r3, [pc, #64]	; (8009220 <xTimerCreateTimerTask+0x90>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d001      	beq.n	80091ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80091e6:	2301      	movs	r3, #1
 80091e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10c      	bne.n	800920a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	b672      	cpsid	i
 80091f6:	f383 8811 	msr	BASEPRI, r3
 80091fa:	f3bf 8f6f 	isb	sy
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	b662      	cpsie	i
 8009204:	613b      	str	r3, [r7, #16]
}
 8009206:	bf00      	nop
 8009208:	e7fe      	b.n	8009208 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800920a:	697b      	ldr	r3, [r7, #20]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3718      	adds	r7, #24
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	20005000 	.word	0x20005000
 8009218:	0800c6d4 	.word	0x0800c6d4
 800921c:	08009361 	.word	0x08009361
 8009220:	20005004 	.word	0x20005004

08009224 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b08a      	sub	sp, #40	; 0x28
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
 8009230:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009232:	2300      	movs	r3, #0
 8009234:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10c      	bne.n	8009256 <xTimerGenericCommand+0x32>
	__asm volatile
 800923c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009240:	b672      	cpsid	i
 8009242:	f383 8811 	msr	BASEPRI, r3
 8009246:	f3bf 8f6f 	isb	sy
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	b662      	cpsie	i
 8009250:	623b      	str	r3, [r7, #32]
}
 8009252:	bf00      	nop
 8009254:	e7fe      	b.n	8009254 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009256:	4b1a      	ldr	r3, [pc, #104]	; (80092c0 <xTimerGenericCommand+0x9c>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d02a      	beq.n	80092b4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	2b05      	cmp	r3, #5
 800926e:	dc18      	bgt.n	80092a2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009270:	f7ff feaa 	bl	8008fc8 <xTaskGetSchedulerState>
 8009274:	4603      	mov	r3, r0
 8009276:	2b02      	cmp	r3, #2
 8009278:	d109      	bne.n	800928e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800927a:	4b11      	ldr	r3, [pc, #68]	; (80092c0 <xTimerGenericCommand+0x9c>)
 800927c:	6818      	ldr	r0, [r3, #0]
 800927e:	f107 0110 	add.w	r1, r7, #16
 8009282:	2300      	movs	r3, #0
 8009284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009286:	f7fe fc3d 	bl	8007b04 <xQueueGenericSend>
 800928a:	6278      	str	r0, [r7, #36]	; 0x24
 800928c:	e012      	b.n	80092b4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800928e:	4b0c      	ldr	r3, [pc, #48]	; (80092c0 <xTimerGenericCommand+0x9c>)
 8009290:	6818      	ldr	r0, [r3, #0]
 8009292:	f107 0110 	add.w	r1, r7, #16
 8009296:	2300      	movs	r3, #0
 8009298:	2200      	movs	r2, #0
 800929a:	f7fe fc33 	bl	8007b04 <xQueueGenericSend>
 800929e:	6278      	str	r0, [r7, #36]	; 0x24
 80092a0:	e008      	b.n	80092b4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80092a2:	4b07      	ldr	r3, [pc, #28]	; (80092c0 <xTimerGenericCommand+0x9c>)
 80092a4:	6818      	ldr	r0, [r3, #0]
 80092a6:	f107 0110 	add.w	r1, r7, #16
 80092aa:	2300      	movs	r3, #0
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	f7fe fd2f 	bl	8007d10 <xQueueGenericSendFromISR>
 80092b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3728      	adds	r7, #40	; 0x28
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	20005000 	.word	0x20005000

080092c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b088      	sub	sp, #32
 80092c8:	af02      	add	r7, sp, #8
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092ce:	4b23      	ldr	r3, [pc, #140]	; (800935c <prvProcessExpiredTimer+0x98>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	3304      	adds	r3, #4
 80092dc:	4618      	mov	r0, r3
 80092de:	f7fe f89f 	bl	8007420 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092e8:	f003 0304 	and.w	r3, r3, #4
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d024      	beq.n	800933a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	699a      	ldr	r2, [r3, #24]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	18d1      	adds	r1, r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	6978      	ldr	r0, [r7, #20]
 80092fe:	f000 f8d3 	bl	80094a8 <prvInsertTimerInActiveList>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d021      	beq.n	800934c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009308:	2300      	movs	r3, #0
 800930a:	9300      	str	r3, [sp, #0]
 800930c:	2300      	movs	r3, #0
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	2100      	movs	r1, #0
 8009312:	6978      	ldr	r0, [r7, #20]
 8009314:	f7ff ff86 	bl	8009224 <xTimerGenericCommand>
 8009318:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d115      	bne.n	800934c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	b672      	cpsid	i
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	b662      	cpsie	i
 8009334:	60fb      	str	r3, [r7, #12]
}
 8009336:	bf00      	nop
 8009338:	e7fe      	b.n	8009338 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009340:	f023 0301 	bic.w	r3, r3, #1
 8009344:	b2da      	uxtb	r2, r3
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	6a1b      	ldr	r3, [r3, #32]
 8009350:	6978      	ldr	r0, [r7, #20]
 8009352:	4798      	blx	r3
}
 8009354:	bf00      	nop
 8009356:	3718      	adds	r7, #24
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	20004ff8 	.word	0x20004ff8

08009360 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009368:	f107 0308 	add.w	r3, r7, #8
 800936c:	4618      	mov	r0, r3
 800936e:	f000 f857 	bl	8009420 <prvGetNextExpireTime>
 8009372:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	4619      	mov	r1, r3
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f000 f803 	bl	8009384 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800937e:	f000 f8d5 	bl	800952c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009382:	e7f1      	b.n	8009368 <prvTimerTask+0x8>

08009384 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800938e:	f7ff fa1d 	bl	80087cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009392:	f107 0308 	add.w	r3, r7, #8
 8009396:	4618      	mov	r0, r3
 8009398:	f000 f866 	bl	8009468 <prvSampleTimeNow>
 800939c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d130      	bne.n	8009406 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10a      	bne.n	80093c0 <prvProcessTimerOrBlockTask+0x3c>
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d806      	bhi.n	80093c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80093b2:	f7ff fa19 	bl	80087e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80093b6:	68f9      	ldr	r1, [r7, #12]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7ff ff83 	bl	80092c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80093be:	e024      	b.n	800940a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d008      	beq.n	80093d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80093c6:	4b13      	ldr	r3, [pc, #76]	; (8009414 <prvProcessTimerOrBlockTask+0x90>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d101      	bne.n	80093d4 <prvProcessTimerOrBlockTask+0x50>
 80093d0:	2301      	movs	r3, #1
 80093d2:	e000      	b.n	80093d6 <prvProcessTimerOrBlockTask+0x52>
 80093d4:	2300      	movs	r3, #0
 80093d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80093d8:	4b0f      	ldr	r3, [pc, #60]	; (8009418 <prvProcessTimerOrBlockTask+0x94>)
 80093da:	6818      	ldr	r0, [r3, #0]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	4619      	mov	r1, r3
 80093e6:	f7fe ff53 	bl	8008290 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80093ea:	f7ff f9fd 	bl	80087e8 <xTaskResumeAll>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d10a      	bne.n	800940a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80093f4:	4b09      	ldr	r3, [pc, #36]	; (800941c <prvProcessTimerOrBlockTask+0x98>)
 80093f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	f3bf 8f6f 	isb	sy
}
 8009404:	e001      	b.n	800940a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009406:	f7ff f9ef 	bl	80087e8 <xTaskResumeAll>
}
 800940a:	bf00      	nop
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	20004ffc 	.word	0x20004ffc
 8009418:	20005000 	.word	0x20005000
 800941c:	e000ed04 	.word	0xe000ed04

08009420 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009428:	4b0e      	ldr	r3, [pc, #56]	; (8009464 <prvGetNextExpireTime+0x44>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d101      	bne.n	8009436 <prvGetNextExpireTime+0x16>
 8009432:	2201      	movs	r2, #1
 8009434:	e000      	b.n	8009438 <prvGetNextExpireTime+0x18>
 8009436:	2200      	movs	r2, #0
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d105      	bne.n	8009450 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009444:	4b07      	ldr	r3, [pc, #28]	; (8009464 <prvGetNextExpireTime+0x44>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	60fb      	str	r3, [r7, #12]
 800944e:	e001      	b.n	8009454 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009450:	2300      	movs	r3, #0
 8009452:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009454:	68fb      	ldr	r3, [r7, #12]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	20004ff8 	.word	0x20004ff8

08009468 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009470:	f7ff fa5a 	bl	8008928 <xTaskGetTickCount>
 8009474:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009476:	4b0b      	ldr	r3, [pc, #44]	; (80094a4 <prvSampleTimeNow+0x3c>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	429a      	cmp	r2, r3
 800947e:	d205      	bcs.n	800948c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009480:	f000 f93c 	bl	80096fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	601a      	str	r2, [r3, #0]
 800948a:	e002      	b.n	8009492 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009492:	4a04      	ldr	r2, [pc, #16]	; (80094a4 <prvSampleTimeNow+0x3c>)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009498:	68fb      	ldr	r3, [r7, #12]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	20005008 	.word	0x20005008

080094a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
 80094b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80094b6:	2300      	movs	r3, #0
 80094b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d812      	bhi.n	80094f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	1ad2      	subs	r2, r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	699b      	ldr	r3, [r3, #24]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d302      	bcc.n	80094e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80094dc:	2301      	movs	r3, #1
 80094de:	617b      	str	r3, [r7, #20]
 80094e0:	e01b      	b.n	800951a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80094e2:	4b10      	ldr	r3, [pc, #64]	; (8009524 <prvInsertTimerInActiveList+0x7c>)
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	3304      	adds	r3, #4
 80094ea:	4619      	mov	r1, r3
 80094ec:	4610      	mov	r0, r2
 80094ee:	f7fd ff5e 	bl	80073ae <vListInsert>
 80094f2:	e012      	b.n	800951a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d206      	bcs.n	800950a <prvInsertTimerInActiveList+0x62>
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	429a      	cmp	r2, r3
 8009502:	d302      	bcc.n	800950a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009504:	2301      	movs	r3, #1
 8009506:	617b      	str	r3, [r7, #20]
 8009508:	e007      	b.n	800951a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800950a:	4b07      	ldr	r3, [pc, #28]	; (8009528 <prvInsertTimerInActiveList+0x80>)
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	3304      	adds	r3, #4
 8009512:	4619      	mov	r1, r3
 8009514:	4610      	mov	r0, r2
 8009516:	f7fd ff4a 	bl	80073ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800951a:	697b      	ldr	r3, [r7, #20]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3718      	adds	r7, #24
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	20004ffc 	.word	0x20004ffc
 8009528:	20004ff8 	.word	0x20004ff8

0800952c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b08e      	sub	sp, #56	; 0x38
 8009530:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009532:	e0d0      	b.n	80096d6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	da1a      	bge.n	8009570 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800953a:	1d3b      	adds	r3, r7, #4
 800953c:	3304      	adds	r3, #4
 800953e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10c      	bne.n	8009560 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8009546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954a:	b672      	cpsid	i
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	b662      	cpsie	i
 800955a:	61fb      	str	r3, [r7, #28]
}
 800955c:	bf00      	nop
 800955e:	e7fe      	b.n	800955e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009566:	6850      	ldr	r0, [r2, #4]
 8009568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800956a:	6892      	ldr	r2, [r2, #8]
 800956c:	4611      	mov	r1, r2
 800956e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2b00      	cmp	r3, #0
 8009574:	f2c0 80ae 	blt.w	80096d4 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	695b      	ldr	r3, [r3, #20]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d004      	beq.n	800958e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009586:	3304      	adds	r3, #4
 8009588:	4618      	mov	r0, r3
 800958a:	f7fd ff49 	bl	8007420 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800958e:	463b      	mov	r3, r7
 8009590:	4618      	mov	r0, r3
 8009592:	f7ff ff69 	bl	8009468 <prvSampleTimeNow>
 8009596:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b09      	cmp	r3, #9
 800959c:	f200 809b 	bhi.w	80096d6 <prvProcessReceivedCommands+0x1aa>
 80095a0:	a201      	add	r2, pc, #4	; (adr r2, 80095a8 <prvProcessReceivedCommands+0x7c>)
 80095a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a6:	bf00      	nop
 80095a8:	080095d1 	.word	0x080095d1
 80095ac:	080095d1 	.word	0x080095d1
 80095b0:	080095d1 	.word	0x080095d1
 80095b4:	08009649 	.word	0x08009649
 80095b8:	0800965d 	.word	0x0800965d
 80095bc:	080096ab 	.word	0x080096ab
 80095c0:	080095d1 	.word	0x080095d1
 80095c4:	080095d1 	.word	0x080095d1
 80095c8:	08009649 	.word	0x08009649
 80095cc:	0800965d 	.word	0x0800965d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095d6:	f043 0301 	orr.w	r3, r3, #1
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e6:	699b      	ldr	r3, [r3, #24]
 80095e8:	18d1      	adds	r1, r2, r3
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095f0:	f7ff ff5a 	bl	80094a8 <prvInsertTimerInActiveList>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d06d      	beq.n	80096d6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009600:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009608:	f003 0304 	and.w	r3, r3, #4
 800960c:	2b00      	cmp	r3, #0
 800960e:	d062      	beq.n	80096d6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	441a      	add	r2, r3
 8009618:	2300      	movs	r3, #0
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	2300      	movs	r3, #0
 800961e:	2100      	movs	r1, #0
 8009620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009622:	f7ff fdff 	bl	8009224 <xTimerGenericCommand>
 8009626:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009628:	6a3b      	ldr	r3, [r7, #32]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d153      	bne.n	80096d6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009632:	b672      	cpsid	i
 8009634:	f383 8811 	msr	BASEPRI, r3
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	b662      	cpsie	i
 8009642:	61bb      	str	r3, [r7, #24]
}
 8009644:	bf00      	nop
 8009646:	e7fe      	b.n	8009646 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800964e:	f023 0301 	bic.w	r3, r3, #1
 8009652:	b2da      	uxtb	r2, r3
 8009654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800965a:	e03c      	b.n	80096d6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800965c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009662:	f043 0301 	orr.w	r3, r3, #1
 8009666:	b2da      	uxtb	r2, r3
 8009668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009672:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10c      	bne.n	8009696 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800967c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009680:	b672      	cpsid	i
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	b662      	cpsie	i
 8009690:	617b      	str	r3, [r7, #20]
}
 8009692:	bf00      	nop
 8009694:	e7fe      	b.n	8009694 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009698:	699a      	ldr	r2, [r3, #24]
 800969a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969c:	18d1      	adds	r1, r2, r3
 800969e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096a4:	f7ff ff00 	bl	80094a8 <prvInsertTimerInActiveList>
					break;
 80096a8:	e015      	b.n	80096d6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80096aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096b0:	f003 0302 	and.w	r3, r3, #2
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d103      	bne.n	80096c0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80096b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ba:	f7fd fd0d 	bl	80070d8 <vPortFree>
 80096be:	e00a      	b.n	80096d6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096c6:	f023 0301 	bic.w	r3, r3, #1
 80096ca:	b2da      	uxtb	r2, r3
 80096cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80096d2:	e000      	b.n	80096d6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80096d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096d6:	4b08      	ldr	r3, [pc, #32]	; (80096f8 <prvProcessReceivedCommands+0x1cc>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	1d39      	adds	r1, r7, #4
 80096dc:	2200      	movs	r2, #0
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fe fbb6 	bl	8007e50 <xQueueReceive>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f47f af24 	bne.w	8009534 <prvProcessReceivedCommands+0x8>
	}
}
 80096ec:	bf00      	nop
 80096ee:	bf00      	nop
 80096f0:	3730      	adds	r7, #48	; 0x30
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	20005000 	.word	0x20005000

080096fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b088      	sub	sp, #32
 8009700:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009702:	e04a      	b.n	800979a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009704:	4b2e      	ldr	r3, [pc, #184]	; (80097c0 <prvSwitchTimerLists+0xc4>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800970e:	4b2c      	ldr	r3, [pc, #176]	; (80097c0 <prvSwitchTimerLists+0xc4>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	3304      	adds	r3, #4
 800971c:	4618      	mov	r0, r3
 800971e:	f7fd fe7f 	bl	8007420 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009730:	f003 0304 	and.w	r3, r3, #4
 8009734:	2b00      	cmp	r3, #0
 8009736:	d030      	beq.n	800979a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	693a      	ldr	r2, [r7, #16]
 800973e:	4413      	add	r3, r2
 8009740:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	429a      	cmp	r2, r3
 8009748:	d90e      	bls.n	8009768 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009756:	4b1a      	ldr	r3, [pc, #104]	; (80097c0 <prvSwitchTimerLists+0xc4>)
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	3304      	adds	r3, #4
 800975e:	4619      	mov	r1, r3
 8009760:	4610      	mov	r0, r2
 8009762:	f7fd fe24 	bl	80073ae <vListInsert>
 8009766:	e018      	b.n	800979a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009768:	2300      	movs	r3, #0
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	2300      	movs	r3, #0
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	2100      	movs	r1, #0
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f7ff fd56 	bl	8009224 <xTimerGenericCommand>
 8009778:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10c      	bne.n	800979a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	b672      	cpsid	i
 8009786:	f383 8811 	msr	BASEPRI, r3
 800978a:	f3bf 8f6f 	isb	sy
 800978e:	f3bf 8f4f 	dsb	sy
 8009792:	b662      	cpsie	i
 8009794:	603b      	str	r3, [r7, #0]
}
 8009796:	bf00      	nop
 8009798:	e7fe      	b.n	8009798 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800979a:	4b09      	ldr	r3, [pc, #36]	; (80097c0 <prvSwitchTimerLists+0xc4>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1af      	bne.n	8009704 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80097a4:	4b06      	ldr	r3, [pc, #24]	; (80097c0 <prvSwitchTimerLists+0xc4>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80097aa:	4b06      	ldr	r3, [pc, #24]	; (80097c4 <prvSwitchTimerLists+0xc8>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a04      	ldr	r2, [pc, #16]	; (80097c0 <prvSwitchTimerLists+0xc4>)
 80097b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80097b2:	4a04      	ldr	r2, [pc, #16]	; (80097c4 <prvSwitchTimerLists+0xc8>)
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	6013      	str	r3, [r2, #0]
}
 80097b8:	bf00      	nop
 80097ba:	3718      	adds	r7, #24
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	20004ff8 	.word	0x20004ff8
 80097c4:	20004ffc 	.word	0x20004ffc

080097c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80097ce:	f7fd ff5d 	bl	800768c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80097d2:	4b15      	ldr	r3, [pc, #84]	; (8009828 <prvCheckForValidListAndQueue+0x60>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d120      	bne.n	800981c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80097da:	4814      	ldr	r0, [pc, #80]	; (800982c <prvCheckForValidListAndQueue+0x64>)
 80097dc:	f7fd fd96 	bl	800730c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80097e0:	4813      	ldr	r0, [pc, #76]	; (8009830 <prvCheckForValidListAndQueue+0x68>)
 80097e2:	f7fd fd93 	bl	800730c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80097e6:	4b13      	ldr	r3, [pc, #76]	; (8009834 <prvCheckForValidListAndQueue+0x6c>)
 80097e8:	4a10      	ldr	r2, [pc, #64]	; (800982c <prvCheckForValidListAndQueue+0x64>)
 80097ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80097ec:	4b12      	ldr	r3, [pc, #72]	; (8009838 <prvCheckForValidListAndQueue+0x70>)
 80097ee:	4a10      	ldr	r2, [pc, #64]	; (8009830 <prvCheckForValidListAndQueue+0x68>)
 80097f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80097f2:	2300      	movs	r3, #0
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	4b11      	ldr	r3, [pc, #68]	; (800983c <prvCheckForValidListAndQueue+0x74>)
 80097f8:	4a11      	ldr	r2, [pc, #68]	; (8009840 <prvCheckForValidListAndQueue+0x78>)
 80097fa:	2110      	movs	r1, #16
 80097fc:	200a      	movs	r0, #10
 80097fe:	f7fe f8db 	bl	80079b8 <xQueueGenericCreateStatic>
 8009802:	4603      	mov	r3, r0
 8009804:	4a08      	ldr	r2, [pc, #32]	; (8009828 <prvCheckForValidListAndQueue+0x60>)
 8009806:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009808:	4b07      	ldr	r3, [pc, #28]	; (8009828 <prvCheckForValidListAndQueue+0x60>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d005      	beq.n	800981c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009810:	4b05      	ldr	r3, [pc, #20]	; (8009828 <prvCheckForValidListAndQueue+0x60>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	490b      	ldr	r1, [pc, #44]	; (8009844 <prvCheckForValidListAndQueue+0x7c>)
 8009816:	4618      	mov	r0, r3
 8009818:	f7fe fd10 	bl	800823c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800981c:	f7fd ff6a 	bl	80076f4 <vPortExitCritical>
}
 8009820:	bf00      	nop
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20005000 	.word	0x20005000
 800982c:	20004fd0 	.word	0x20004fd0
 8009830:	20004fe4 	.word	0x20004fe4
 8009834:	20004ff8 	.word	0x20004ff8
 8009838:	20004ffc 	.word	0x20004ffc
 800983c:	200050ac 	.word	0x200050ac
 8009840:	2000500c 	.word	0x2000500c
 8009844:	0800c6dc 	.word	0x0800c6dc

08009848 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 8009856:	1c5a      	adds	r2, r3, #1
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8c3 2594 	str.w	r2, [r3, #1428]	; 0x594
  USBH_HandleSof(phost);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f804 	bl	800986c <USBH_HandleSof>
}
 8009864:	bf00      	nop
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	b2db      	uxtb	r3, r3
 800987a:	2b0b      	cmp	r3, #11
 800987c:	d10a      	bne.n	8009894 <USBH_HandleSof+0x28>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8009884:	2b00      	cmp	r3, #0
 8009886:	d005      	beq.n	8009894 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	4798      	blx	r3
  }
}
 8009894:	bf00      	nop
 8009896:	3708      	adds	r7, #8
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 05a8 	ldr.w	r0, [r3, #1448]	; 0x5a8
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f503 61b6 	add.w	r1, r3, #1456	; 0x5b0
 80098c0:	2300      	movs	r3, #0
 80098c2:	2200      	movs	r2, #0
 80098c4:	f7fd fa96 	bl	8006df4 <osMessageQueuePut>
#endif
#endif

  return;
 80098c8:	bf00      	nop
}
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80098e0:	bf00      	nop
}
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 05a8 	ldr.w	r0, [r3, #1448]	; 0x5a8
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f503 61b6 	add.w	r1, r3, #1456	; 0x5b0
 8009920:	2300      	movs	r3, #0
 8009922:	2200      	movs	r2, #0
 8009924:	f7fd fa66 	bl	8006df4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b082      	sub	sp, #8
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2201      	movs	r2, #1
 800993e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f7f8 f857 	bl	8001a06 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	791b      	ldrb	r3, [r3, #4]
 800995c:	4619      	mov	r1, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f830 	bl	80099c4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	795b      	ldrb	r3, [r3, #5]
 8009968:	4619      	mov	r1, r3
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f82a 	bl	80099c4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 05a8 	ldr.w	r0, [r3, #1448]	; 0x5a8
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f503 61b6 	add.w	r1, r3, #1456	; 0x5b0
 8009984:	2300      	movs	r3, #0
 8009986:	2200      	movs	r2, #0
 8009988:	f7fd fa34 	bl	8006df4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b082      	sub	sp, #8
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 05a8 	ldr.w	r0, [r3, #1448]	; 0x5a8
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f503 61b6 	add.w	r1, r3, #1456	; 0x5b0
 80099b2:	2300      	movs	r3, #0
 80099b4:	2200      	movs	r2, #0
 80099b6:	f7fd fa1d 	bl	8006df4 <osMessageQueuePut>
#endif

  return USBH_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	460b      	mov	r3, r1
 80099ce:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80099d0:	78fb      	ldrb	r3, [r7, #3]
 80099d2:	2b0f      	cmp	r3, #15
 80099d4:	d80f      	bhi.n	80099f6 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80099d6:	78fb      	ldrb	r3, [r7, #3]
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4413      	add	r3, r2
 80099e2:	685a      	ldr	r2, [r3, #4]
 80099e4:	78fb      	ldrb	r3, [r7, #3]
 80099e6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80099ea:	6879      	ldr	r1, [r7, #4]
 80099ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	440b      	add	r3, r1
 80099f4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <__errno>:
 8009a04:	4b01      	ldr	r3, [pc, #4]	; (8009a0c <__errno+0x8>)
 8009a06:	6818      	ldr	r0, [r3, #0]
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	20000010 	.word	0x20000010

08009a10 <std>:
 8009a10:	2300      	movs	r3, #0
 8009a12:	b510      	push	{r4, lr}
 8009a14:	4604      	mov	r4, r0
 8009a16:	e9c0 3300 	strd	r3, r3, [r0]
 8009a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a1e:	6083      	str	r3, [r0, #8]
 8009a20:	8181      	strh	r1, [r0, #12]
 8009a22:	6643      	str	r3, [r0, #100]	; 0x64
 8009a24:	81c2      	strh	r2, [r0, #14]
 8009a26:	6183      	str	r3, [r0, #24]
 8009a28:	4619      	mov	r1, r3
 8009a2a:	2208      	movs	r2, #8
 8009a2c:	305c      	adds	r0, #92	; 0x5c
 8009a2e:	f000 f923 	bl	8009c78 <memset>
 8009a32:	4b05      	ldr	r3, [pc, #20]	; (8009a48 <std+0x38>)
 8009a34:	6263      	str	r3, [r4, #36]	; 0x24
 8009a36:	4b05      	ldr	r3, [pc, #20]	; (8009a4c <std+0x3c>)
 8009a38:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a3a:	4b05      	ldr	r3, [pc, #20]	; (8009a50 <std+0x40>)
 8009a3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a3e:	4b05      	ldr	r3, [pc, #20]	; (8009a54 <std+0x44>)
 8009a40:	6224      	str	r4, [r4, #32]
 8009a42:	6323      	str	r3, [r4, #48]	; 0x30
 8009a44:	bd10      	pop	{r4, pc}
 8009a46:	bf00      	nop
 8009a48:	0800a92d 	.word	0x0800a92d
 8009a4c:	0800a94f 	.word	0x0800a94f
 8009a50:	0800a987 	.word	0x0800a987
 8009a54:	0800a9ab 	.word	0x0800a9ab

08009a58 <_cleanup_r>:
 8009a58:	4901      	ldr	r1, [pc, #4]	; (8009a60 <_cleanup_r+0x8>)
 8009a5a:	f000 b8af 	b.w	8009bbc <_fwalk_reent>
 8009a5e:	bf00      	nop
 8009a60:	0800b979 	.word	0x0800b979

08009a64 <__sfmoreglue>:
 8009a64:	b570      	push	{r4, r5, r6, lr}
 8009a66:	2268      	movs	r2, #104	; 0x68
 8009a68:	1e4d      	subs	r5, r1, #1
 8009a6a:	4355      	muls	r5, r2
 8009a6c:	460e      	mov	r6, r1
 8009a6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a72:	f000 f975 	bl	8009d60 <_malloc_r>
 8009a76:	4604      	mov	r4, r0
 8009a78:	b140      	cbz	r0, 8009a8c <__sfmoreglue+0x28>
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	e9c0 1600 	strd	r1, r6, [r0]
 8009a80:	300c      	adds	r0, #12
 8009a82:	60a0      	str	r0, [r4, #8]
 8009a84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a88:	f000 f8f6 	bl	8009c78 <memset>
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	bd70      	pop	{r4, r5, r6, pc}

08009a90 <__sfp_lock_acquire>:
 8009a90:	4801      	ldr	r0, [pc, #4]	; (8009a98 <__sfp_lock_acquire+0x8>)
 8009a92:	f000 b8d8 	b.w	8009c46 <__retarget_lock_acquire_recursive>
 8009a96:	bf00      	nop
 8009a98:	200050fd 	.word	0x200050fd

08009a9c <__sfp_lock_release>:
 8009a9c:	4801      	ldr	r0, [pc, #4]	; (8009aa4 <__sfp_lock_release+0x8>)
 8009a9e:	f000 b8d3 	b.w	8009c48 <__retarget_lock_release_recursive>
 8009aa2:	bf00      	nop
 8009aa4:	200050fd 	.word	0x200050fd

08009aa8 <__sinit_lock_acquire>:
 8009aa8:	4801      	ldr	r0, [pc, #4]	; (8009ab0 <__sinit_lock_acquire+0x8>)
 8009aaa:	f000 b8cc 	b.w	8009c46 <__retarget_lock_acquire_recursive>
 8009aae:	bf00      	nop
 8009ab0:	200050fe 	.word	0x200050fe

08009ab4 <__sinit_lock_release>:
 8009ab4:	4801      	ldr	r0, [pc, #4]	; (8009abc <__sinit_lock_release+0x8>)
 8009ab6:	f000 b8c7 	b.w	8009c48 <__retarget_lock_release_recursive>
 8009aba:	bf00      	nop
 8009abc:	200050fe 	.word	0x200050fe

08009ac0 <__sinit>:
 8009ac0:	b510      	push	{r4, lr}
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	f7ff fff0 	bl	8009aa8 <__sinit_lock_acquire>
 8009ac8:	69a3      	ldr	r3, [r4, #24]
 8009aca:	b11b      	cbz	r3, 8009ad4 <__sinit+0x14>
 8009acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ad0:	f7ff bff0 	b.w	8009ab4 <__sinit_lock_release>
 8009ad4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ad8:	6523      	str	r3, [r4, #80]	; 0x50
 8009ada:	4b13      	ldr	r3, [pc, #76]	; (8009b28 <__sinit+0x68>)
 8009adc:	4a13      	ldr	r2, [pc, #76]	; (8009b2c <__sinit+0x6c>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ae2:	42a3      	cmp	r3, r4
 8009ae4:	bf04      	itt	eq
 8009ae6:	2301      	moveq	r3, #1
 8009ae8:	61a3      	streq	r3, [r4, #24]
 8009aea:	4620      	mov	r0, r4
 8009aec:	f000 f820 	bl	8009b30 <__sfp>
 8009af0:	6060      	str	r0, [r4, #4]
 8009af2:	4620      	mov	r0, r4
 8009af4:	f000 f81c 	bl	8009b30 <__sfp>
 8009af8:	60a0      	str	r0, [r4, #8]
 8009afa:	4620      	mov	r0, r4
 8009afc:	f000 f818 	bl	8009b30 <__sfp>
 8009b00:	2200      	movs	r2, #0
 8009b02:	60e0      	str	r0, [r4, #12]
 8009b04:	2104      	movs	r1, #4
 8009b06:	6860      	ldr	r0, [r4, #4]
 8009b08:	f7ff ff82 	bl	8009a10 <std>
 8009b0c:	68a0      	ldr	r0, [r4, #8]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	2109      	movs	r1, #9
 8009b12:	f7ff ff7d 	bl	8009a10 <std>
 8009b16:	68e0      	ldr	r0, [r4, #12]
 8009b18:	2202      	movs	r2, #2
 8009b1a:	2112      	movs	r1, #18
 8009b1c:	f7ff ff78 	bl	8009a10 <std>
 8009b20:	2301      	movs	r3, #1
 8009b22:	61a3      	str	r3, [r4, #24]
 8009b24:	e7d2      	b.n	8009acc <__sinit+0xc>
 8009b26:	bf00      	nop
 8009b28:	0800c780 	.word	0x0800c780
 8009b2c:	08009a59 	.word	0x08009a59

08009b30 <__sfp>:
 8009b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b32:	4607      	mov	r7, r0
 8009b34:	f7ff ffac 	bl	8009a90 <__sfp_lock_acquire>
 8009b38:	4b1e      	ldr	r3, [pc, #120]	; (8009bb4 <__sfp+0x84>)
 8009b3a:	681e      	ldr	r6, [r3, #0]
 8009b3c:	69b3      	ldr	r3, [r6, #24]
 8009b3e:	b913      	cbnz	r3, 8009b46 <__sfp+0x16>
 8009b40:	4630      	mov	r0, r6
 8009b42:	f7ff ffbd 	bl	8009ac0 <__sinit>
 8009b46:	3648      	adds	r6, #72	; 0x48
 8009b48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	d503      	bpl.n	8009b58 <__sfp+0x28>
 8009b50:	6833      	ldr	r3, [r6, #0]
 8009b52:	b30b      	cbz	r3, 8009b98 <__sfp+0x68>
 8009b54:	6836      	ldr	r6, [r6, #0]
 8009b56:	e7f7      	b.n	8009b48 <__sfp+0x18>
 8009b58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b5c:	b9d5      	cbnz	r5, 8009b94 <__sfp+0x64>
 8009b5e:	4b16      	ldr	r3, [pc, #88]	; (8009bb8 <__sfp+0x88>)
 8009b60:	60e3      	str	r3, [r4, #12]
 8009b62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b66:	6665      	str	r5, [r4, #100]	; 0x64
 8009b68:	f000 f86c 	bl	8009c44 <__retarget_lock_init_recursive>
 8009b6c:	f7ff ff96 	bl	8009a9c <__sfp_lock_release>
 8009b70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b78:	6025      	str	r5, [r4, #0]
 8009b7a:	61a5      	str	r5, [r4, #24]
 8009b7c:	2208      	movs	r2, #8
 8009b7e:	4629      	mov	r1, r5
 8009b80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b84:	f000 f878 	bl	8009c78 <memset>
 8009b88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b90:	4620      	mov	r0, r4
 8009b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b94:	3468      	adds	r4, #104	; 0x68
 8009b96:	e7d9      	b.n	8009b4c <__sfp+0x1c>
 8009b98:	2104      	movs	r1, #4
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	f7ff ff62 	bl	8009a64 <__sfmoreglue>
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	6030      	str	r0, [r6, #0]
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	d1d5      	bne.n	8009b54 <__sfp+0x24>
 8009ba8:	f7ff ff78 	bl	8009a9c <__sfp_lock_release>
 8009bac:	230c      	movs	r3, #12
 8009bae:	603b      	str	r3, [r7, #0]
 8009bb0:	e7ee      	b.n	8009b90 <__sfp+0x60>
 8009bb2:	bf00      	nop
 8009bb4:	0800c780 	.word	0x0800c780
 8009bb8:	ffff0001 	.word	0xffff0001

08009bbc <_fwalk_reent>:
 8009bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bc0:	4606      	mov	r6, r0
 8009bc2:	4688      	mov	r8, r1
 8009bc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009bc8:	2700      	movs	r7, #0
 8009bca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bce:	f1b9 0901 	subs.w	r9, r9, #1
 8009bd2:	d505      	bpl.n	8009be0 <_fwalk_reent+0x24>
 8009bd4:	6824      	ldr	r4, [r4, #0]
 8009bd6:	2c00      	cmp	r4, #0
 8009bd8:	d1f7      	bne.n	8009bca <_fwalk_reent+0xe>
 8009bda:	4638      	mov	r0, r7
 8009bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009be0:	89ab      	ldrh	r3, [r5, #12]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d907      	bls.n	8009bf6 <_fwalk_reent+0x3a>
 8009be6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bea:	3301      	adds	r3, #1
 8009bec:	d003      	beq.n	8009bf6 <_fwalk_reent+0x3a>
 8009bee:	4629      	mov	r1, r5
 8009bf0:	4630      	mov	r0, r6
 8009bf2:	47c0      	blx	r8
 8009bf4:	4307      	orrs	r7, r0
 8009bf6:	3568      	adds	r5, #104	; 0x68
 8009bf8:	e7e9      	b.n	8009bce <_fwalk_reent+0x12>
	...

08009bfc <__libc_init_array>:
 8009bfc:	b570      	push	{r4, r5, r6, lr}
 8009bfe:	4d0d      	ldr	r5, [pc, #52]	; (8009c34 <__libc_init_array+0x38>)
 8009c00:	4c0d      	ldr	r4, [pc, #52]	; (8009c38 <__libc_init_array+0x3c>)
 8009c02:	1b64      	subs	r4, r4, r5
 8009c04:	10a4      	asrs	r4, r4, #2
 8009c06:	2600      	movs	r6, #0
 8009c08:	42a6      	cmp	r6, r4
 8009c0a:	d109      	bne.n	8009c20 <__libc_init_array+0x24>
 8009c0c:	4d0b      	ldr	r5, [pc, #44]	; (8009c3c <__libc_init_array+0x40>)
 8009c0e:	4c0c      	ldr	r4, [pc, #48]	; (8009c40 <__libc_init_array+0x44>)
 8009c10:	f002 fd38 	bl	800c684 <_init>
 8009c14:	1b64      	subs	r4, r4, r5
 8009c16:	10a4      	asrs	r4, r4, #2
 8009c18:	2600      	movs	r6, #0
 8009c1a:	42a6      	cmp	r6, r4
 8009c1c:	d105      	bne.n	8009c2a <__libc_init_array+0x2e>
 8009c1e:	bd70      	pop	{r4, r5, r6, pc}
 8009c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c24:	4798      	blx	r3
 8009c26:	3601      	adds	r6, #1
 8009c28:	e7ee      	b.n	8009c08 <__libc_init_array+0xc>
 8009c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c2e:	4798      	blx	r3
 8009c30:	3601      	adds	r6, #1
 8009c32:	e7f2      	b.n	8009c1a <__libc_init_array+0x1e>
 8009c34:	0800cb04 	.word	0x0800cb04
 8009c38:	0800cb04 	.word	0x0800cb04
 8009c3c:	0800cb04 	.word	0x0800cb04
 8009c40:	0800cb08 	.word	0x0800cb08

08009c44 <__retarget_lock_init_recursive>:
 8009c44:	4770      	bx	lr

08009c46 <__retarget_lock_acquire_recursive>:
 8009c46:	4770      	bx	lr

08009c48 <__retarget_lock_release_recursive>:
 8009c48:	4770      	bx	lr
	...

08009c4c <malloc>:
 8009c4c:	4b02      	ldr	r3, [pc, #8]	; (8009c58 <malloc+0xc>)
 8009c4e:	4601      	mov	r1, r0
 8009c50:	6818      	ldr	r0, [r3, #0]
 8009c52:	f000 b885 	b.w	8009d60 <_malloc_r>
 8009c56:	bf00      	nop
 8009c58:	20000010 	.word	0x20000010

08009c5c <memcpy>:
 8009c5c:	440a      	add	r2, r1
 8009c5e:	4291      	cmp	r1, r2
 8009c60:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c64:	d100      	bne.n	8009c68 <memcpy+0xc>
 8009c66:	4770      	bx	lr
 8009c68:	b510      	push	{r4, lr}
 8009c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c72:	4291      	cmp	r1, r2
 8009c74:	d1f9      	bne.n	8009c6a <memcpy+0xe>
 8009c76:	bd10      	pop	{r4, pc}

08009c78 <memset>:
 8009c78:	4402      	add	r2, r0
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d100      	bne.n	8009c82 <memset+0xa>
 8009c80:	4770      	bx	lr
 8009c82:	f803 1b01 	strb.w	r1, [r3], #1
 8009c86:	e7f9      	b.n	8009c7c <memset+0x4>

08009c88 <_free_r>:
 8009c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c8a:	2900      	cmp	r1, #0
 8009c8c:	d044      	beq.n	8009d18 <_free_r+0x90>
 8009c8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c92:	9001      	str	r0, [sp, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f1a1 0404 	sub.w	r4, r1, #4
 8009c9a:	bfb8      	it	lt
 8009c9c:	18e4      	addlt	r4, r4, r3
 8009c9e:	f001 ff23 	bl	800bae8 <__malloc_lock>
 8009ca2:	4a1e      	ldr	r2, [pc, #120]	; (8009d1c <_free_r+0x94>)
 8009ca4:	9801      	ldr	r0, [sp, #4]
 8009ca6:	6813      	ldr	r3, [r2, #0]
 8009ca8:	b933      	cbnz	r3, 8009cb8 <_free_r+0x30>
 8009caa:	6063      	str	r3, [r4, #4]
 8009cac:	6014      	str	r4, [r2, #0]
 8009cae:	b003      	add	sp, #12
 8009cb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cb4:	f001 bf1e 	b.w	800baf4 <__malloc_unlock>
 8009cb8:	42a3      	cmp	r3, r4
 8009cba:	d908      	bls.n	8009cce <_free_r+0x46>
 8009cbc:	6825      	ldr	r5, [r4, #0]
 8009cbe:	1961      	adds	r1, r4, r5
 8009cc0:	428b      	cmp	r3, r1
 8009cc2:	bf01      	itttt	eq
 8009cc4:	6819      	ldreq	r1, [r3, #0]
 8009cc6:	685b      	ldreq	r3, [r3, #4]
 8009cc8:	1949      	addeq	r1, r1, r5
 8009cca:	6021      	streq	r1, [r4, #0]
 8009ccc:	e7ed      	b.n	8009caa <_free_r+0x22>
 8009cce:	461a      	mov	r2, r3
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	b10b      	cbz	r3, 8009cd8 <_free_r+0x50>
 8009cd4:	42a3      	cmp	r3, r4
 8009cd6:	d9fa      	bls.n	8009cce <_free_r+0x46>
 8009cd8:	6811      	ldr	r1, [r2, #0]
 8009cda:	1855      	adds	r5, r2, r1
 8009cdc:	42a5      	cmp	r5, r4
 8009cde:	d10b      	bne.n	8009cf8 <_free_r+0x70>
 8009ce0:	6824      	ldr	r4, [r4, #0]
 8009ce2:	4421      	add	r1, r4
 8009ce4:	1854      	adds	r4, r2, r1
 8009ce6:	42a3      	cmp	r3, r4
 8009ce8:	6011      	str	r1, [r2, #0]
 8009cea:	d1e0      	bne.n	8009cae <_free_r+0x26>
 8009cec:	681c      	ldr	r4, [r3, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	6053      	str	r3, [r2, #4]
 8009cf2:	4421      	add	r1, r4
 8009cf4:	6011      	str	r1, [r2, #0]
 8009cf6:	e7da      	b.n	8009cae <_free_r+0x26>
 8009cf8:	d902      	bls.n	8009d00 <_free_r+0x78>
 8009cfa:	230c      	movs	r3, #12
 8009cfc:	6003      	str	r3, [r0, #0]
 8009cfe:	e7d6      	b.n	8009cae <_free_r+0x26>
 8009d00:	6825      	ldr	r5, [r4, #0]
 8009d02:	1961      	adds	r1, r4, r5
 8009d04:	428b      	cmp	r3, r1
 8009d06:	bf04      	itt	eq
 8009d08:	6819      	ldreq	r1, [r3, #0]
 8009d0a:	685b      	ldreq	r3, [r3, #4]
 8009d0c:	6063      	str	r3, [r4, #4]
 8009d0e:	bf04      	itt	eq
 8009d10:	1949      	addeq	r1, r1, r5
 8009d12:	6021      	streq	r1, [r4, #0]
 8009d14:	6054      	str	r4, [r2, #4]
 8009d16:	e7ca      	b.n	8009cae <_free_r+0x26>
 8009d18:	b003      	add	sp, #12
 8009d1a:	bd30      	pop	{r4, r5, pc}
 8009d1c:	20005100 	.word	0x20005100

08009d20 <sbrk_aligned>:
 8009d20:	b570      	push	{r4, r5, r6, lr}
 8009d22:	4e0e      	ldr	r6, [pc, #56]	; (8009d5c <sbrk_aligned+0x3c>)
 8009d24:	460c      	mov	r4, r1
 8009d26:	6831      	ldr	r1, [r6, #0]
 8009d28:	4605      	mov	r5, r0
 8009d2a:	b911      	cbnz	r1, 8009d32 <sbrk_aligned+0x12>
 8009d2c:	f000 fdee 	bl	800a90c <_sbrk_r>
 8009d30:	6030      	str	r0, [r6, #0]
 8009d32:	4621      	mov	r1, r4
 8009d34:	4628      	mov	r0, r5
 8009d36:	f000 fde9 	bl	800a90c <_sbrk_r>
 8009d3a:	1c43      	adds	r3, r0, #1
 8009d3c:	d00a      	beq.n	8009d54 <sbrk_aligned+0x34>
 8009d3e:	1cc4      	adds	r4, r0, #3
 8009d40:	f024 0403 	bic.w	r4, r4, #3
 8009d44:	42a0      	cmp	r0, r4
 8009d46:	d007      	beq.n	8009d58 <sbrk_aligned+0x38>
 8009d48:	1a21      	subs	r1, r4, r0
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	f000 fdde 	bl	800a90c <_sbrk_r>
 8009d50:	3001      	adds	r0, #1
 8009d52:	d101      	bne.n	8009d58 <sbrk_aligned+0x38>
 8009d54:	f04f 34ff 	mov.w	r4, #4294967295
 8009d58:	4620      	mov	r0, r4
 8009d5a:	bd70      	pop	{r4, r5, r6, pc}
 8009d5c:	20005104 	.word	0x20005104

08009d60 <_malloc_r>:
 8009d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d64:	1ccd      	adds	r5, r1, #3
 8009d66:	f025 0503 	bic.w	r5, r5, #3
 8009d6a:	3508      	adds	r5, #8
 8009d6c:	2d0c      	cmp	r5, #12
 8009d6e:	bf38      	it	cc
 8009d70:	250c      	movcc	r5, #12
 8009d72:	2d00      	cmp	r5, #0
 8009d74:	4607      	mov	r7, r0
 8009d76:	db01      	blt.n	8009d7c <_malloc_r+0x1c>
 8009d78:	42a9      	cmp	r1, r5
 8009d7a:	d905      	bls.n	8009d88 <_malloc_r+0x28>
 8009d7c:	230c      	movs	r3, #12
 8009d7e:	603b      	str	r3, [r7, #0]
 8009d80:	2600      	movs	r6, #0
 8009d82:	4630      	mov	r0, r6
 8009d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d88:	4e2e      	ldr	r6, [pc, #184]	; (8009e44 <_malloc_r+0xe4>)
 8009d8a:	f001 fead 	bl	800bae8 <__malloc_lock>
 8009d8e:	6833      	ldr	r3, [r6, #0]
 8009d90:	461c      	mov	r4, r3
 8009d92:	bb34      	cbnz	r4, 8009de2 <_malloc_r+0x82>
 8009d94:	4629      	mov	r1, r5
 8009d96:	4638      	mov	r0, r7
 8009d98:	f7ff ffc2 	bl	8009d20 <sbrk_aligned>
 8009d9c:	1c43      	adds	r3, r0, #1
 8009d9e:	4604      	mov	r4, r0
 8009da0:	d14d      	bne.n	8009e3e <_malloc_r+0xde>
 8009da2:	6834      	ldr	r4, [r6, #0]
 8009da4:	4626      	mov	r6, r4
 8009da6:	2e00      	cmp	r6, #0
 8009da8:	d140      	bne.n	8009e2c <_malloc_r+0xcc>
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	4631      	mov	r1, r6
 8009dae:	4638      	mov	r0, r7
 8009db0:	eb04 0803 	add.w	r8, r4, r3
 8009db4:	f000 fdaa 	bl	800a90c <_sbrk_r>
 8009db8:	4580      	cmp	r8, r0
 8009dba:	d13a      	bne.n	8009e32 <_malloc_r+0xd2>
 8009dbc:	6821      	ldr	r1, [r4, #0]
 8009dbe:	3503      	adds	r5, #3
 8009dc0:	1a6d      	subs	r5, r5, r1
 8009dc2:	f025 0503 	bic.w	r5, r5, #3
 8009dc6:	3508      	adds	r5, #8
 8009dc8:	2d0c      	cmp	r5, #12
 8009dca:	bf38      	it	cc
 8009dcc:	250c      	movcc	r5, #12
 8009dce:	4629      	mov	r1, r5
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	f7ff ffa5 	bl	8009d20 <sbrk_aligned>
 8009dd6:	3001      	adds	r0, #1
 8009dd8:	d02b      	beq.n	8009e32 <_malloc_r+0xd2>
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	442b      	add	r3, r5
 8009dde:	6023      	str	r3, [r4, #0]
 8009de0:	e00e      	b.n	8009e00 <_malloc_r+0xa0>
 8009de2:	6822      	ldr	r2, [r4, #0]
 8009de4:	1b52      	subs	r2, r2, r5
 8009de6:	d41e      	bmi.n	8009e26 <_malloc_r+0xc6>
 8009de8:	2a0b      	cmp	r2, #11
 8009dea:	d916      	bls.n	8009e1a <_malloc_r+0xba>
 8009dec:	1961      	adds	r1, r4, r5
 8009dee:	42a3      	cmp	r3, r4
 8009df0:	6025      	str	r5, [r4, #0]
 8009df2:	bf18      	it	ne
 8009df4:	6059      	strne	r1, [r3, #4]
 8009df6:	6863      	ldr	r3, [r4, #4]
 8009df8:	bf08      	it	eq
 8009dfa:	6031      	streq	r1, [r6, #0]
 8009dfc:	5162      	str	r2, [r4, r5]
 8009dfe:	604b      	str	r3, [r1, #4]
 8009e00:	4638      	mov	r0, r7
 8009e02:	f104 060b 	add.w	r6, r4, #11
 8009e06:	f001 fe75 	bl	800baf4 <__malloc_unlock>
 8009e0a:	f026 0607 	bic.w	r6, r6, #7
 8009e0e:	1d23      	adds	r3, r4, #4
 8009e10:	1af2      	subs	r2, r6, r3
 8009e12:	d0b6      	beq.n	8009d82 <_malloc_r+0x22>
 8009e14:	1b9b      	subs	r3, r3, r6
 8009e16:	50a3      	str	r3, [r4, r2]
 8009e18:	e7b3      	b.n	8009d82 <_malloc_r+0x22>
 8009e1a:	6862      	ldr	r2, [r4, #4]
 8009e1c:	42a3      	cmp	r3, r4
 8009e1e:	bf0c      	ite	eq
 8009e20:	6032      	streq	r2, [r6, #0]
 8009e22:	605a      	strne	r2, [r3, #4]
 8009e24:	e7ec      	b.n	8009e00 <_malloc_r+0xa0>
 8009e26:	4623      	mov	r3, r4
 8009e28:	6864      	ldr	r4, [r4, #4]
 8009e2a:	e7b2      	b.n	8009d92 <_malloc_r+0x32>
 8009e2c:	4634      	mov	r4, r6
 8009e2e:	6876      	ldr	r6, [r6, #4]
 8009e30:	e7b9      	b.n	8009da6 <_malloc_r+0x46>
 8009e32:	230c      	movs	r3, #12
 8009e34:	603b      	str	r3, [r7, #0]
 8009e36:	4638      	mov	r0, r7
 8009e38:	f001 fe5c 	bl	800baf4 <__malloc_unlock>
 8009e3c:	e7a1      	b.n	8009d82 <_malloc_r+0x22>
 8009e3e:	6025      	str	r5, [r4, #0]
 8009e40:	e7de      	b.n	8009e00 <_malloc_r+0xa0>
 8009e42:	bf00      	nop
 8009e44:	20005100 	.word	0x20005100

08009e48 <__cvt>:
 8009e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e4c:	ec55 4b10 	vmov	r4, r5, d0
 8009e50:	2d00      	cmp	r5, #0
 8009e52:	460e      	mov	r6, r1
 8009e54:	4619      	mov	r1, r3
 8009e56:	462b      	mov	r3, r5
 8009e58:	bfbb      	ittet	lt
 8009e5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009e5e:	461d      	movlt	r5, r3
 8009e60:	2300      	movge	r3, #0
 8009e62:	232d      	movlt	r3, #45	; 0x2d
 8009e64:	700b      	strb	r3, [r1, #0]
 8009e66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009e6c:	4691      	mov	r9, r2
 8009e6e:	f023 0820 	bic.w	r8, r3, #32
 8009e72:	bfbc      	itt	lt
 8009e74:	4622      	movlt	r2, r4
 8009e76:	4614      	movlt	r4, r2
 8009e78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e7c:	d005      	beq.n	8009e8a <__cvt+0x42>
 8009e7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009e82:	d100      	bne.n	8009e86 <__cvt+0x3e>
 8009e84:	3601      	adds	r6, #1
 8009e86:	2102      	movs	r1, #2
 8009e88:	e000      	b.n	8009e8c <__cvt+0x44>
 8009e8a:	2103      	movs	r1, #3
 8009e8c:	ab03      	add	r3, sp, #12
 8009e8e:	9301      	str	r3, [sp, #4]
 8009e90:	ab02      	add	r3, sp, #8
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	ec45 4b10 	vmov	d0, r4, r5
 8009e98:	4653      	mov	r3, sl
 8009e9a:	4632      	mov	r2, r6
 8009e9c:	f000 fef8 	bl	800ac90 <_dtoa_r>
 8009ea0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009ea4:	4607      	mov	r7, r0
 8009ea6:	d102      	bne.n	8009eae <__cvt+0x66>
 8009ea8:	f019 0f01 	tst.w	r9, #1
 8009eac:	d022      	beq.n	8009ef4 <__cvt+0xac>
 8009eae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009eb2:	eb07 0906 	add.w	r9, r7, r6
 8009eb6:	d110      	bne.n	8009eda <__cvt+0x92>
 8009eb8:	783b      	ldrb	r3, [r7, #0]
 8009eba:	2b30      	cmp	r3, #48	; 0x30
 8009ebc:	d10a      	bne.n	8009ed4 <__cvt+0x8c>
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	4629      	mov	r1, r5
 8009ec6:	f7f6 fe1f 	bl	8000b08 <__aeabi_dcmpeq>
 8009eca:	b918      	cbnz	r0, 8009ed4 <__cvt+0x8c>
 8009ecc:	f1c6 0601 	rsb	r6, r6, #1
 8009ed0:	f8ca 6000 	str.w	r6, [sl]
 8009ed4:	f8da 3000 	ldr.w	r3, [sl]
 8009ed8:	4499      	add	r9, r3
 8009eda:	2200      	movs	r2, #0
 8009edc:	2300      	movs	r3, #0
 8009ede:	4620      	mov	r0, r4
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	f7f6 fe11 	bl	8000b08 <__aeabi_dcmpeq>
 8009ee6:	b108      	cbz	r0, 8009eec <__cvt+0xa4>
 8009ee8:	f8cd 900c 	str.w	r9, [sp, #12]
 8009eec:	2230      	movs	r2, #48	; 0x30
 8009eee:	9b03      	ldr	r3, [sp, #12]
 8009ef0:	454b      	cmp	r3, r9
 8009ef2:	d307      	bcc.n	8009f04 <__cvt+0xbc>
 8009ef4:	9b03      	ldr	r3, [sp, #12]
 8009ef6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ef8:	1bdb      	subs	r3, r3, r7
 8009efa:	4638      	mov	r0, r7
 8009efc:	6013      	str	r3, [r2, #0]
 8009efe:	b004      	add	sp, #16
 8009f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f04:	1c59      	adds	r1, r3, #1
 8009f06:	9103      	str	r1, [sp, #12]
 8009f08:	701a      	strb	r2, [r3, #0]
 8009f0a:	e7f0      	b.n	8009eee <__cvt+0xa6>

08009f0c <__exponent>:
 8009f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2900      	cmp	r1, #0
 8009f12:	bfb8      	it	lt
 8009f14:	4249      	neglt	r1, r1
 8009f16:	f803 2b02 	strb.w	r2, [r3], #2
 8009f1a:	bfb4      	ite	lt
 8009f1c:	222d      	movlt	r2, #45	; 0x2d
 8009f1e:	222b      	movge	r2, #43	; 0x2b
 8009f20:	2909      	cmp	r1, #9
 8009f22:	7042      	strb	r2, [r0, #1]
 8009f24:	dd2a      	ble.n	8009f7c <__exponent+0x70>
 8009f26:	f10d 0407 	add.w	r4, sp, #7
 8009f2a:	46a4      	mov	ip, r4
 8009f2c:	270a      	movs	r7, #10
 8009f2e:	46a6      	mov	lr, r4
 8009f30:	460a      	mov	r2, r1
 8009f32:	fb91 f6f7 	sdiv	r6, r1, r7
 8009f36:	fb07 1516 	mls	r5, r7, r6, r1
 8009f3a:	3530      	adds	r5, #48	; 0x30
 8009f3c:	2a63      	cmp	r2, #99	; 0x63
 8009f3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009f42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009f46:	4631      	mov	r1, r6
 8009f48:	dcf1      	bgt.n	8009f2e <__exponent+0x22>
 8009f4a:	3130      	adds	r1, #48	; 0x30
 8009f4c:	f1ae 0502 	sub.w	r5, lr, #2
 8009f50:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009f54:	1c44      	adds	r4, r0, #1
 8009f56:	4629      	mov	r1, r5
 8009f58:	4561      	cmp	r1, ip
 8009f5a:	d30a      	bcc.n	8009f72 <__exponent+0x66>
 8009f5c:	f10d 0209 	add.w	r2, sp, #9
 8009f60:	eba2 020e 	sub.w	r2, r2, lr
 8009f64:	4565      	cmp	r5, ip
 8009f66:	bf88      	it	hi
 8009f68:	2200      	movhi	r2, #0
 8009f6a:	4413      	add	r3, r2
 8009f6c:	1a18      	subs	r0, r3, r0
 8009f6e:	b003      	add	sp, #12
 8009f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f76:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009f7a:	e7ed      	b.n	8009f58 <__exponent+0x4c>
 8009f7c:	2330      	movs	r3, #48	; 0x30
 8009f7e:	3130      	adds	r1, #48	; 0x30
 8009f80:	7083      	strb	r3, [r0, #2]
 8009f82:	70c1      	strb	r1, [r0, #3]
 8009f84:	1d03      	adds	r3, r0, #4
 8009f86:	e7f1      	b.n	8009f6c <__exponent+0x60>

08009f88 <_printf_float>:
 8009f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8c:	ed2d 8b02 	vpush	{d8}
 8009f90:	b08d      	sub	sp, #52	; 0x34
 8009f92:	460c      	mov	r4, r1
 8009f94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009f98:	4616      	mov	r6, r2
 8009f9a:	461f      	mov	r7, r3
 8009f9c:	4605      	mov	r5, r0
 8009f9e:	f001 fd27 	bl	800b9f0 <_localeconv_r>
 8009fa2:	f8d0 a000 	ldr.w	sl, [r0]
 8009fa6:	4650      	mov	r0, sl
 8009fa8:	f7f6 f932 	bl	8000210 <strlen>
 8009fac:	2300      	movs	r3, #0
 8009fae:	930a      	str	r3, [sp, #40]	; 0x28
 8009fb0:	6823      	ldr	r3, [r4, #0]
 8009fb2:	9305      	str	r3, [sp, #20]
 8009fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8009fb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009fbc:	3307      	adds	r3, #7
 8009fbe:	f023 0307 	bic.w	r3, r3, #7
 8009fc2:	f103 0208 	add.w	r2, r3, #8
 8009fc6:	f8c8 2000 	str.w	r2, [r8]
 8009fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009fd2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009fd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009fda:	9307      	str	r3, [sp, #28]
 8009fdc:	f8cd 8018 	str.w	r8, [sp, #24]
 8009fe0:	ee08 0a10 	vmov	s16, r0
 8009fe4:	4b9f      	ldr	r3, [pc, #636]	; (800a264 <_printf_float+0x2dc>)
 8009fe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fea:	f04f 32ff 	mov.w	r2, #4294967295
 8009fee:	f7f6 fdbd 	bl	8000b6c <__aeabi_dcmpun>
 8009ff2:	bb88      	cbnz	r0, 800a058 <_printf_float+0xd0>
 8009ff4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ff8:	4b9a      	ldr	r3, [pc, #616]	; (800a264 <_printf_float+0x2dc>)
 8009ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8009ffe:	f7f6 fd97 	bl	8000b30 <__aeabi_dcmple>
 800a002:	bb48      	cbnz	r0, 800a058 <_printf_float+0xd0>
 800a004:	2200      	movs	r2, #0
 800a006:	2300      	movs	r3, #0
 800a008:	4640      	mov	r0, r8
 800a00a:	4649      	mov	r1, r9
 800a00c:	f7f6 fd86 	bl	8000b1c <__aeabi_dcmplt>
 800a010:	b110      	cbz	r0, 800a018 <_printf_float+0x90>
 800a012:	232d      	movs	r3, #45	; 0x2d
 800a014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a018:	4b93      	ldr	r3, [pc, #588]	; (800a268 <_printf_float+0x2e0>)
 800a01a:	4894      	ldr	r0, [pc, #592]	; (800a26c <_printf_float+0x2e4>)
 800a01c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a020:	bf94      	ite	ls
 800a022:	4698      	movls	r8, r3
 800a024:	4680      	movhi	r8, r0
 800a026:	2303      	movs	r3, #3
 800a028:	6123      	str	r3, [r4, #16]
 800a02a:	9b05      	ldr	r3, [sp, #20]
 800a02c:	f023 0204 	bic.w	r2, r3, #4
 800a030:	6022      	str	r2, [r4, #0]
 800a032:	f04f 0900 	mov.w	r9, #0
 800a036:	9700      	str	r7, [sp, #0]
 800a038:	4633      	mov	r3, r6
 800a03a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a03c:	4621      	mov	r1, r4
 800a03e:	4628      	mov	r0, r5
 800a040:	f000 f9d8 	bl	800a3f4 <_printf_common>
 800a044:	3001      	adds	r0, #1
 800a046:	f040 8090 	bne.w	800a16a <_printf_float+0x1e2>
 800a04a:	f04f 30ff 	mov.w	r0, #4294967295
 800a04e:	b00d      	add	sp, #52	; 0x34
 800a050:	ecbd 8b02 	vpop	{d8}
 800a054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a058:	4642      	mov	r2, r8
 800a05a:	464b      	mov	r3, r9
 800a05c:	4640      	mov	r0, r8
 800a05e:	4649      	mov	r1, r9
 800a060:	f7f6 fd84 	bl	8000b6c <__aeabi_dcmpun>
 800a064:	b140      	cbz	r0, 800a078 <_printf_float+0xf0>
 800a066:	464b      	mov	r3, r9
 800a068:	2b00      	cmp	r3, #0
 800a06a:	bfbc      	itt	lt
 800a06c:	232d      	movlt	r3, #45	; 0x2d
 800a06e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a072:	487f      	ldr	r0, [pc, #508]	; (800a270 <_printf_float+0x2e8>)
 800a074:	4b7f      	ldr	r3, [pc, #508]	; (800a274 <_printf_float+0x2ec>)
 800a076:	e7d1      	b.n	800a01c <_printf_float+0x94>
 800a078:	6863      	ldr	r3, [r4, #4]
 800a07a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a07e:	9206      	str	r2, [sp, #24]
 800a080:	1c5a      	adds	r2, r3, #1
 800a082:	d13f      	bne.n	800a104 <_printf_float+0x17c>
 800a084:	2306      	movs	r3, #6
 800a086:	6063      	str	r3, [r4, #4]
 800a088:	9b05      	ldr	r3, [sp, #20]
 800a08a:	6861      	ldr	r1, [r4, #4]
 800a08c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a090:	2300      	movs	r3, #0
 800a092:	9303      	str	r3, [sp, #12]
 800a094:	ab0a      	add	r3, sp, #40	; 0x28
 800a096:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a09a:	ab09      	add	r3, sp, #36	; 0x24
 800a09c:	ec49 8b10 	vmov	d0, r8, r9
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	6022      	str	r2, [r4, #0]
 800a0a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	f7ff fecd 	bl	8009e48 <__cvt>
 800a0ae:	9b06      	ldr	r3, [sp, #24]
 800a0b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0b2:	2b47      	cmp	r3, #71	; 0x47
 800a0b4:	4680      	mov	r8, r0
 800a0b6:	d108      	bne.n	800a0ca <_printf_float+0x142>
 800a0b8:	1cc8      	adds	r0, r1, #3
 800a0ba:	db02      	blt.n	800a0c2 <_printf_float+0x13a>
 800a0bc:	6863      	ldr	r3, [r4, #4]
 800a0be:	4299      	cmp	r1, r3
 800a0c0:	dd41      	ble.n	800a146 <_printf_float+0x1be>
 800a0c2:	f1ab 0b02 	sub.w	fp, fp, #2
 800a0c6:	fa5f fb8b 	uxtb.w	fp, fp
 800a0ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a0ce:	d820      	bhi.n	800a112 <_printf_float+0x18a>
 800a0d0:	3901      	subs	r1, #1
 800a0d2:	465a      	mov	r2, fp
 800a0d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a0d8:	9109      	str	r1, [sp, #36]	; 0x24
 800a0da:	f7ff ff17 	bl	8009f0c <__exponent>
 800a0de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0e0:	1813      	adds	r3, r2, r0
 800a0e2:	2a01      	cmp	r2, #1
 800a0e4:	4681      	mov	r9, r0
 800a0e6:	6123      	str	r3, [r4, #16]
 800a0e8:	dc02      	bgt.n	800a0f0 <_printf_float+0x168>
 800a0ea:	6822      	ldr	r2, [r4, #0]
 800a0ec:	07d2      	lsls	r2, r2, #31
 800a0ee:	d501      	bpl.n	800a0f4 <_printf_float+0x16c>
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	6123      	str	r3, [r4, #16]
 800a0f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d09c      	beq.n	800a036 <_printf_float+0xae>
 800a0fc:	232d      	movs	r3, #45	; 0x2d
 800a0fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a102:	e798      	b.n	800a036 <_printf_float+0xae>
 800a104:	9a06      	ldr	r2, [sp, #24]
 800a106:	2a47      	cmp	r2, #71	; 0x47
 800a108:	d1be      	bne.n	800a088 <_printf_float+0x100>
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d1bc      	bne.n	800a088 <_printf_float+0x100>
 800a10e:	2301      	movs	r3, #1
 800a110:	e7b9      	b.n	800a086 <_printf_float+0xfe>
 800a112:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a116:	d118      	bne.n	800a14a <_printf_float+0x1c2>
 800a118:	2900      	cmp	r1, #0
 800a11a:	6863      	ldr	r3, [r4, #4]
 800a11c:	dd0b      	ble.n	800a136 <_printf_float+0x1ae>
 800a11e:	6121      	str	r1, [r4, #16]
 800a120:	b913      	cbnz	r3, 800a128 <_printf_float+0x1a0>
 800a122:	6822      	ldr	r2, [r4, #0]
 800a124:	07d0      	lsls	r0, r2, #31
 800a126:	d502      	bpl.n	800a12e <_printf_float+0x1a6>
 800a128:	3301      	adds	r3, #1
 800a12a:	440b      	add	r3, r1
 800a12c:	6123      	str	r3, [r4, #16]
 800a12e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a130:	f04f 0900 	mov.w	r9, #0
 800a134:	e7de      	b.n	800a0f4 <_printf_float+0x16c>
 800a136:	b913      	cbnz	r3, 800a13e <_printf_float+0x1b6>
 800a138:	6822      	ldr	r2, [r4, #0]
 800a13a:	07d2      	lsls	r2, r2, #31
 800a13c:	d501      	bpl.n	800a142 <_printf_float+0x1ba>
 800a13e:	3302      	adds	r3, #2
 800a140:	e7f4      	b.n	800a12c <_printf_float+0x1a4>
 800a142:	2301      	movs	r3, #1
 800a144:	e7f2      	b.n	800a12c <_printf_float+0x1a4>
 800a146:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a14a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a14c:	4299      	cmp	r1, r3
 800a14e:	db05      	blt.n	800a15c <_printf_float+0x1d4>
 800a150:	6823      	ldr	r3, [r4, #0]
 800a152:	6121      	str	r1, [r4, #16]
 800a154:	07d8      	lsls	r0, r3, #31
 800a156:	d5ea      	bpl.n	800a12e <_printf_float+0x1a6>
 800a158:	1c4b      	adds	r3, r1, #1
 800a15a:	e7e7      	b.n	800a12c <_printf_float+0x1a4>
 800a15c:	2900      	cmp	r1, #0
 800a15e:	bfd4      	ite	le
 800a160:	f1c1 0202 	rsble	r2, r1, #2
 800a164:	2201      	movgt	r2, #1
 800a166:	4413      	add	r3, r2
 800a168:	e7e0      	b.n	800a12c <_printf_float+0x1a4>
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	055a      	lsls	r2, r3, #21
 800a16e:	d407      	bmi.n	800a180 <_printf_float+0x1f8>
 800a170:	6923      	ldr	r3, [r4, #16]
 800a172:	4642      	mov	r2, r8
 800a174:	4631      	mov	r1, r6
 800a176:	4628      	mov	r0, r5
 800a178:	47b8      	blx	r7
 800a17a:	3001      	adds	r0, #1
 800a17c:	d12c      	bne.n	800a1d8 <_printf_float+0x250>
 800a17e:	e764      	b.n	800a04a <_printf_float+0xc2>
 800a180:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a184:	f240 80e0 	bls.w	800a348 <_printf_float+0x3c0>
 800a188:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a18c:	2200      	movs	r2, #0
 800a18e:	2300      	movs	r3, #0
 800a190:	f7f6 fcba 	bl	8000b08 <__aeabi_dcmpeq>
 800a194:	2800      	cmp	r0, #0
 800a196:	d034      	beq.n	800a202 <_printf_float+0x27a>
 800a198:	4a37      	ldr	r2, [pc, #220]	; (800a278 <_printf_float+0x2f0>)
 800a19a:	2301      	movs	r3, #1
 800a19c:	4631      	mov	r1, r6
 800a19e:	4628      	mov	r0, r5
 800a1a0:	47b8      	blx	r7
 800a1a2:	3001      	adds	r0, #1
 800a1a4:	f43f af51 	beq.w	800a04a <_printf_float+0xc2>
 800a1a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	db02      	blt.n	800a1b6 <_printf_float+0x22e>
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	07d8      	lsls	r0, r3, #31
 800a1b4:	d510      	bpl.n	800a1d8 <_printf_float+0x250>
 800a1b6:	ee18 3a10 	vmov	r3, s16
 800a1ba:	4652      	mov	r2, sl
 800a1bc:	4631      	mov	r1, r6
 800a1be:	4628      	mov	r0, r5
 800a1c0:	47b8      	blx	r7
 800a1c2:	3001      	adds	r0, #1
 800a1c4:	f43f af41 	beq.w	800a04a <_printf_float+0xc2>
 800a1c8:	f04f 0800 	mov.w	r8, #0
 800a1cc:	f104 091a 	add.w	r9, r4, #26
 800a1d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	4543      	cmp	r3, r8
 800a1d6:	dc09      	bgt.n	800a1ec <_printf_float+0x264>
 800a1d8:	6823      	ldr	r3, [r4, #0]
 800a1da:	079b      	lsls	r3, r3, #30
 800a1dc:	f100 8105 	bmi.w	800a3ea <_printf_float+0x462>
 800a1e0:	68e0      	ldr	r0, [r4, #12]
 800a1e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1e4:	4298      	cmp	r0, r3
 800a1e6:	bfb8      	it	lt
 800a1e8:	4618      	movlt	r0, r3
 800a1ea:	e730      	b.n	800a04e <_printf_float+0xc6>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	464a      	mov	r2, r9
 800a1f0:	4631      	mov	r1, r6
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	47b8      	blx	r7
 800a1f6:	3001      	adds	r0, #1
 800a1f8:	f43f af27 	beq.w	800a04a <_printf_float+0xc2>
 800a1fc:	f108 0801 	add.w	r8, r8, #1
 800a200:	e7e6      	b.n	800a1d0 <_printf_float+0x248>
 800a202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a204:	2b00      	cmp	r3, #0
 800a206:	dc39      	bgt.n	800a27c <_printf_float+0x2f4>
 800a208:	4a1b      	ldr	r2, [pc, #108]	; (800a278 <_printf_float+0x2f0>)
 800a20a:	2301      	movs	r3, #1
 800a20c:	4631      	mov	r1, r6
 800a20e:	4628      	mov	r0, r5
 800a210:	47b8      	blx	r7
 800a212:	3001      	adds	r0, #1
 800a214:	f43f af19 	beq.w	800a04a <_printf_float+0xc2>
 800a218:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a21c:	4313      	orrs	r3, r2
 800a21e:	d102      	bne.n	800a226 <_printf_float+0x29e>
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	07d9      	lsls	r1, r3, #31
 800a224:	d5d8      	bpl.n	800a1d8 <_printf_float+0x250>
 800a226:	ee18 3a10 	vmov	r3, s16
 800a22a:	4652      	mov	r2, sl
 800a22c:	4631      	mov	r1, r6
 800a22e:	4628      	mov	r0, r5
 800a230:	47b8      	blx	r7
 800a232:	3001      	adds	r0, #1
 800a234:	f43f af09 	beq.w	800a04a <_printf_float+0xc2>
 800a238:	f04f 0900 	mov.w	r9, #0
 800a23c:	f104 0a1a 	add.w	sl, r4, #26
 800a240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a242:	425b      	negs	r3, r3
 800a244:	454b      	cmp	r3, r9
 800a246:	dc01      	bgt.n	800a24c <_printf_float+0x2c4>
 800a248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a24a:	e792      	b.n	800a172 <_printf_float+0x1ea>
 800a24c:	2301      	movs	r3, #1
 800a24e:	4652      	mov	r2, sl
 800a250:	4631      	mov	r1, r6
 800a252:	4628      	mov	r0, r5
 800a254:	47b8      	blx	r7
 800a256:	3001      	adds	r0, #1
 800a258:	f43f aef7 	beq.w	800a04a <_printf_float+0xc2>
 800a25c:	f109 0901 	add.w	r9, r9, #1
 800a260:	e7ee      	b.n	800a240 <_printf_float+0x2b8>
 800a262:	bf00      	nop
 800a264:	7fefffff 	.word	0x7fefffff
 800a268:	0800c784 	.word	0x0800c784
 800a26c:	0800c788 	.word	0x0800c788
 800a270:	0800c790 	.word	0x0800c790
 800a274:	0800c78c 	.word	0x0800c78c
 800a278:	0800c794 	.word	0x0800c794
 800a27c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a27e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a280:	429a      	cmp	r2, r3
 800a282:	bfa8      	it	ge
 800a284:	461a      	movge	r2, r3
 800a286:	2a00      	cmp	r2, #0
 800a288:	4691      	mov	r9, r2
 800a28a:	dc37      	bgt.n	800a2fc <_printf_float+0x374>
 800a28c:	f04f 0b00 	mov.w	fp, #0
 800a290:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a294:	f104 021a 	add.w	r2, r4, #26
 800a298:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a29a:	9305      	str	r3, [sp, #20]
 800a29c:	eba3 0309 	sub.w	r3, r3, r9
 800a2a0:	455b      	cmp	r3, fp
 800a2a2:	dc33      	bgt.n	800a30c <_printf_float+0x384>
 800a2a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	db3b      	blt.n	800a324 <_printf_float+0x39c>
 800a2ac:	6823      	ldr	r3, [r4, #0]
 800a2ae:	07da      	lsls	r2, r3, #31
 800a2b0:	d438      	bmi.n	800a324 <_printf_float+0x39c>
 800a2b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2b4:	9a05      	ldr	r2, [sp, #20]
 800a2b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2b8:	1a9a      	subs	r2, r3, r2
 800a2ba:	eba3 0901 	sub.w	r9, r3, r1
 800a2be:	4591      	cmp	r9, r2
 800a2c0:	bfa8      	it	ge
 800a2c2:	4691      	movge	r9, r2
 800a2c4:	f1b9 0f00 	cmp.w	r9, #0
 800a2c8:	dc35      	bgt.n	800a336 <_printf_float+0x3ae>
 800a2ca:	f04f 0800 	mov.w	r8, #0
 800a2ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2d2:	f104 0a1a 	add.w	sl, r4, #26
 800a2d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2da:	1a9b      	subs	r3, r3, r2
 800a2dc:	eba3 0309 	sub.w	r3, r3, r9
 800a2e0:	4543      	cmp	r3, r8
 800a2e2:	f77f af79 	ble.w	800a1d8 <_printf_float+0x250>
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	4652      	mov	r2, sl
 800a2ea:	4631      	mov	r1, r6
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	47b8      	blx	r7
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	f43f aeaa 	beq.w	800a04a <_printf_float+0xc2>
 800a2f6:	f108 0801 	add.w	r8, r8, #1
 800a2fa:	e7ec      	b.n	800a2d6 <_printf_float+0x34e>
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	4631      	mov	r1, r6
 800a300:	4642      	mov	r2, r8
 800a302:	4628      	mov	r0, r5
 800a304:	47b8      	blx	r7
 800a306:	3001      	adds	r0, #1
 800a308:	d1c0      	bne.n	800a28c <_printf_float+0x304>
 800a30a:	e69e      	b.n	800a04a <_printf_float+0xc2>
 800a30c:	2301      	movs	r3, #1
 800a30e:	4631      	mov	r1, r6
 800a310:	4628      	mov	r0, r5
 800a312:	9205      	str	r2, [sp, #20]
 800a314:	47b8      	blx	r7
 800a316:	3001      	adds	r0, #1
 800a318:	f43f ae97 	beq.w	800a04a <_printf_float+0xc2>
 800a31c:	9a05      	ldr	r2, [sp, #20]
 800a31e:	f10b 0b01 	add.w	fp, fp, #1
 800a322:	e7b9      	b.n	800a298 <_printf_float+0x310>
 800a324:	ee18 3a10 	vmov	r3, s16
 800a328:	4652      	mov	r2, sl
 800a32a:	4631      	mov	r1, r6
 800a32c:	4628      	mov	r0, r5
 800a32e:	47b8      	blx	r7
 800a330:	3001      	adds	r0, #1
 800a332:	d1be      	bne.n	800a2b2 <_printf_float+0x32a>
 800a334:	e689      	b.n	800a04a <_printf_float+0xc2>
 800a336:	9a05      	ldr	r2, [sp, #20]
 800a338:	464b      	mov	r3, r9
 800a33a:	4442      	add	r2, r8
 800a33c:	4631      	mov	r1, r6
 800a33e:	4628      	mov	r0, r5
 800a340:	47b8      	blx	r7
 800a342:	3001      	adds	r0, #1
 800a344:	d1c1      	bne.n	800a2ca <_printf_float+0x342>
 800a346:	e680      	b.n	800a04a <_printf_float+0xc2>
 800a348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a34a:	2a01      	cmp	r2, #1
 800a34c:	dc01      	bgt.n	800a352 <_printf_float+0x3ca>
 800a34e:	07db      	lsls	r3, r3, #31
 800a350:	d538      	bpl.n	800a3c4 <_printf_float+0x43c>
 800a352:	2301      	movs	r3, #1
 800a354:	4642      	mov	r2, r8
 800a356:	4631      	mov	r1, r6
 800a358:	4628      	mov	r0, r5
 800a35a:	47b8      	blx	r7
 800a35c:	3001      	adds	r0, #1
 800a35e:	f43f ae74 	beq.w	800a04a <_printf_float+0xc2>
 800a362:	ee18 3a10 	vmov	r3, s16
 800a366:	4652      	mov	r2, sl
 800a368:	4631      	mov	r1, r6
 800a36a:	4628      	mov	r0, r5
 800a36c:	47b8      	blx	r7
 800a36e:	3001      	adds	r0, #1
 800a370:	f43f ae6b 	beq.w	800a04a <_printf_float+0xc2>
 800a374:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a378:	2200      	movs	r2, #0
 800a37a:	2300      	movs	r3, #0
 800a37c:	f7f6 fbc4 	bl	8000b08 <__aeabi_dcmpeq>
 800a380:	b9d8      	cbnz	r0, 800a3ba <_printf_float+0x432>
 800a382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a384:	f108 0201 	add.w	r2, r8, #1
 800a388:	3b01      	subs	r3, #1
 800a38a:	4631      	mov	r1, r6
 800a38c:	4628      	mov	r0, r5
 800a38e:	47b8      	blx	r7
 800a390:	3001      	adds	r0, #1
 800a392:	d10e      	bne.n	800a3b2 <_printf_float+0x42a>
 800a394:	e659      	b.n	800a04a <_printf_float+0xc2>
 800a396:	2301      	movs	r3, #1
 800a398:	4652      	mov	r2, sl
 800a39a:	4631      	mov	r1, r6
 800a39c:	4628      	mov	r0, r5
 800a39e:	47b8      	blx	r7
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	f43f ae52 	beq.w	800a04a <_printf_float+0xc2>
 800a3a6:	f108 0801 	add.w	r8, r8, #1
 800a3aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	4543      	cmp	r3, r8
 800a3b0:	dcf1      	bgt.n	800a396 <_printf_float+0x40e>
 800a3b2:	464b      	mov	r3, r9
 800a3b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a3b8:	e6dc      	b.n	800a174 <_printf_float+0x1ec>
 800a3ba:	f04f 0800 	mov.w	r8, #0
 800a3be:	f104 0a1a 	add.w	sl, r4, #26
 800a3c2:	e7f2      	b.n	800a3aa <_printf_float+0x422>
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	4642      	mov	r2, r8
 800a3c8:	e7df      	b.n	800a38a <_printf_float+0x402>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	464a      	mov	r2, r9
 800a3ce:	4631      	mov	r1, r6
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	47b8      	blx	r7
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	f43f ae38 	beq.w	800a04a <_printf_float+0xc2>
 800a3da:	f108 0801 	add.w	r8, r8, #1
 800a3de:	68e3      	ldr	r3, [r4, #12]
 800a3e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3e2:	1a5b      	subs	r3, r3, r1
 800a3e4:	4543      	cmp	r3, r8
 800a3e6:	dcf0      	bgt.n	800a3ca <_printf_float+0x442>
 800a3e8:	e6fa      	b.n	800a1e0 <_printf_float+0x258>
 800a3ea:	f04f 0800 	mov.w	r8, #0
 800a3ee:	f104 0919 	add.w	r9, r4, #25
 800a3f2:	e7f4      	b.n	800a3de <_printf_float+0x456>

0800a3f4 <_printf_common>:
 800a3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3f8:	4616      	mov	r6, r2
 800a3fa:	4699      	mov	r9, r3
 800a3fc:	688a      	ldr	r2, [r1, #8]
 800a3fe:	690b      	ldr	r3, [r1, #16]
 800a400:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a404:	4293      	cmp	r3, r2
 800a406:	bfb8      	it	lt
 800a408:	4613      	movlt	r3, r2
 800a40a:	6033      	str	r3, [r6, #0]
 800a40c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a410:	4607      	mov	r7, r0
 800a412:	460c      	mov	r4, r1
 800a414:	b10a      	cbz	r2, 800a41a <_printf_common+0x26>
 800a416:	3301      	adds	r3, #1
 800a418:	6033      	str	r3, [r6, #0]
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	0699      	lsls	r1, r3, #26
 800a41e:	bf42      	ittt	mi
 800a420:	6833      	ldrmi	r3, [r6, #0]
 800a422:	3302      	addmi	r3, #2
 800a424:	6033      	strmi	r3, [r6, #0]
 800a426:	6825      	ldr	r5, [r4, #0]
 800a428:	f015 0506 	ands.w	r5, r5, #6
 800a42c:	d106      	bne.n	800a43c <_printf_common+0x48>
 800a42e:	f104 0a19 	add.w	sl, r4, #25
 800a432:	68e3      	ldr	r3, [r4, #12]
 800a434:	6832      	ldr	r2, [r6, #0]
 800a436:	1a9b      	subs	r3, r3, r2
 800a438:	42ab      	cmp	r3, r5
 800a43a:	dc26      	bgt.n	800a48a <_printf_common+0x96>
 800a43c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a440:	1e13      	subs	r3, r2, #0
 800a442:	6822      	ldr	r2, [r4, #0]
 800a444:	bf18      	it	ne
 800a446:	2301      	movne	r3, #1
 800a448:	0692      	lsls	r2, r2, #26
 800a44a:	d42b      	bmi.n	800a4a4 <_printf_common+0xb0>
 800a44c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a450:	4649      	mov	r1, r9
 800a452:	4638      	mov	r0, r7
 800a454:	47c0      	blx	r8
 800a456:	3001      	adds	r0, #1
 800a458:	d01e      	beq.n	800a498 <_printf_common+0xa4>
 800a45a:	6823      	ldr	r3, [r4, #0]
 800a45c:	68e5      	ldr	r5, [r4, #12]
 800a45e:	6832      	ldr	r2, [r6, #0]
 800a460:	f003 0306 	and.w	r3, r3, #6
 800a464:	2b04      	cmp	r3, #4
 800a466:	bf08      	it	eq
 800a468:	1aad      	subeq	r5, r5, r2
 800a46a:	68a3      	ldr	r3, [r4, #8]
 800a46c:	6922      	ldr	r2, [r4, #16]
 800a46e:	bf0c      	ite	eq
 800a470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a474:	2500      	movne	r5, #0
 800a476:	4293      	cmp	r3, r2
 800a478:	bfc4      	itt	gt
 800a47a:	1a9b      	subgt	r3, r3, r2
 800a47c:	18ed      	addgt	r5, r5, r3
 800a47e:	2600      	movs	r6, #0
 800a480:	341a      	adds	r4, #26
 800a482:	42b5      	cmp	r5, r6
 800a484:	d11a      	bne.n	800a4bc <_printf_common+0xc8>
 800a486:	2000      	movs	r0, #0
 800a488:	e008      	b.n	800a49c <_printf_common+0xa8>
 800a48a:	2301      	movs	r3, #1
 800a48c:	4652      	mov	r2, sl
 800a48e:	4649      	mov	r1, r9
 800a490:	4638      	mov	r0, r7
 800a492:	47c0      	blx	r8
 800a494:	3001      	adds	r0, #1
 800a496:	d103      	bne.n	800a4a0 <_printf_common+0xac>
 800a498:	f04f 30ff 	mov.w	r0, #4294967295
 800a49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4a0:	3501      	adds	r5, #1
 800a4a2:	e7c6      	b.n	800a432 <_printf_common+0x3e>
 800a4a4:	18e1      	adds	r1, r4, r3
 800a4a6:	1c5a      	adds	r2, r3, #1
 800a4a8:	2030      	movs	r0, #48	; 0x30
 800a4aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a4ae:	4422      	add	r2, r4
 800a4b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4b8:	3302      	adds	r3, #2
 800a4ba:	e7c7      	b.n	800a44c <_printf_common+0x58>
 800a4bc:	2301      	movs	r3, #1
 800a4be:	4622      	mov	r2, r4
 800a4c0:	4649      	mov	r1, r9
 800a4c2:	4638      	mov	r0, r7
 800a4c4:	47c0      	blx	r8
 800a4c6:	3001      	adds	r0, #1
 800a4c8:	d0e6      	beq.n	800a498 <_printf_common+0xa4>
 800a4ca:	3601      	adds	r6, #1
 800a4cc:	e7d9      	b.n	800a482 <_printf_common+0x8e>
	...

0800a4d0 <_printf_i>:
 800a4d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4d4:	7e0f      	ldrb	r7, [r1, #24]
 800a4d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a4d8:	2f78      	cmp	r7, #120	; 0x78
 800a4da:	4691      	mov	r9, r2
 800a4dc:	4680      	mov	r8, r0
 800a4de:	460c      	mov	r4, r1
 800a4e0:	469a      	mov	sl, r3
 800a4e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a4e6:	d807      	bhi.n	800a4f8 <_printf_i+0x28>
 800a4e8:	2f62      	cmp	r7, #98	; 0x62
 800a4ea:	d80a      	bhi.n	800a502 <_printf_i+0x32>
 800a4ec:	2f00      	cmp	r7, #0
 800a4ee:	f000 80d8 	beq.w	800a6a2 <_printf_i+0x1d2>
 800a4f2:	2f58      	cmp	r7, #88	; 0x58
 800a4f4:	f000 80a3 	beq.w	800a63e <_printf_i+0x16e>
 800a4f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a500:	e03a      	b.n	800a578 <_printf_i+0xa8>
 800a502:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a506:	2b15      	cmp	r3, #21
 800a508:	d8f6      	bhi.n	800a4f8 <_printf_i+0x28>
 800a50a:	a101      	add	r1, pc, #4	; (adr r1, 800a510 <_printf_i+0x40>)
 800a50c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a510:	0800a569 	.word	0x0800a569
 800a514:	0800a57d 	.word	0x0800a57d
 800a518:	0800a4f9 	.word	0x0800a4f9
 800a51c:	0800a4f9 	.word	0x0800a4f9
 800a520:	0800a4f9 	.word	0x0800a4f9
 800a524:	0800a4f9 	.word	0x0800a4f9
 800a528:	0800a57d 	.word	0x0800a57d
 800a52c:	0800a4f9 	.word	0x0800a4f9
 800a530:	0800a4f9 	.word	0x0800a4f9
 800a534:	0800a4f9 	.word	0x0800a4f9
 800a538:	0800a4f9 	.word	0x0800a4f9
 800a53c:	0800a689 	.word	0x0800a689
 800a540:	0800a5ad 	.word	0x0800a5ad
 800a544:	0800a66b 	.word	0x0800a66b
 800a548:	0800a4f9 	.word	0x0800a4f9
 800a54c:	0800a4f9 	.word	0x0800a4f9
 800a550:	0800a6ab 	.word	0x0800a6ab
 800a554:	0800a4f9 	.word	0x0800a4f9
 800a558:	0800a5ad 	.word	0x0800a5ad
 800a55c:	0800a4f9 	.word	0x0800a4f9
 800a560:	0800a4f9 	.word	0x0800a4f9
 800a564:	0800a673 	.word	0x0800a673
 800a568:	682b      	ldr	r3, [r5, #0]
 800a56a:	1d1a      	adds	r2, r3, #4
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	602a      	str	r2, [r5, #0]
 800a570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a578:	2301      	movs	r3, #1
 800a57a:	e0a3      	b.n	800a6c4 <_printf_i+0x1f4>
 800a57c:	6820      	ldr	r0, [r4, #0]
 800a57e:	6829      	ldr	r1, [r5, #0]
 800a580:	0606      	lsls	r6, r0, #24
 800a582:	f101 0304 	add.w	r3, r1, #4
 800a586:	d50a      	bpl.n	800a59e <_printf_i+0xce>
 800a588:	680e      	ldr	r6, [r1, #0]
 800a58a:	602b      	str	r3, [r5, #0]
 800a58c:	2e00      	cmp	r6, #0
 800a58e:	da03      	bge.n	800a598 <_printf_i+0xc8>
 800a590:	232d      	movs	r3, #45	; 0x2d
 800a592:	4276      	negs	r6, r6
 800a594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a598:	485e      	ldr	r0, [pc, #376]	; (800a714 <_printf_i+0x244>)
 800a59a:	230a      	movs	r3, #10
 800a59c:	e019      	b.n	800a5d2 <_printf_i+0x102>
 800a59e:	680e      	ldr	r6, [r1, #0]
 800a5a0:	602b      	str	r3, [r5, #0]
 800a5a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a5a6:	bf18      	it	ne
 800a5a8:	b236      	sxthne	r6, r6
 800a5aa:	e7ef      	b.n	800a58c <_printf_i+0xbc>
 800a5ac:	682b      	ldr	r3, [r5, #0]
 800a5ae:	6820      	ldr	r0, [r4, #0]
 800a5b0:	1d19      	adds	r1, r3, #4
 800a5b2:	6029      	str	r1, [r5, #0]
 800a5b4:	0601      	lsls	r1, r0, #24
 800a5b6:	d501      	bpl.n	800a5bc <_printf_i+0xec>
 800a5b8:	681e      	ldr	r6, [r3, #0]
 800a5ba:	e002      	b.n	800a5c2 <_printf_i+0xf2>
 800a5bc:	0646      	lsls	r6, r0, #25
 800a5be:	d5fb      	bpl.n	800a5b8 <_printf_i+0xe8>
 800a5c0:	881e      	ldrh	r6, [r3, #0]
 800a5c2:	4854      	ldr	r0, [pc, #336]	; (800a714 <_printf_i+0x244>)
 800a5c4:	2f6f      	cmp	r7, #111	; 0x6f
 800a5c6:	bf0c      	ite	eq
 800a5c8:	2308      	moveq	r3, #8
 800a5ca:	230a      	movne	r3, #10
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a5d2:	6865      	ldr	r5, [r4, #4]
 800a5d4:	60a5      	str	r5, [r4, #8]
 800a5d6:	2d00      	cmp	r5, #0
 800a5d8:	bfa2      	ittt	ge
 800a5da:	6821      	ldrge	r1, [r4, #0]
 800a5dc:	f021 0104 	bicge.w	r1, r1, #4
 800a5e0:	6021      	strge	r1, [r4, #0]
 800a5e2:	b90e      	cbnz	r6, 800a5e8 <_printf_i+0x118>
 800a5e4:	2d00      	cmp	r5, #0
 800a5e6:	d04d      	beq.n	800a684 <_printf_i+0x1b4>
 800a5e8:	4615      	mov	r5, r2
 800a5ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800a5ee:	fb03 6711 	mls	r7, r3, r1, r6
 800a5f2:	5dc7      	ldrb	r7, [r0, r7]
 800a5f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a5f8:	4637      	mov	r7, r6
 800a5fa:	42bb      	cmp	r3, r7
 800a5fc:	460e      	mov	r6, r1
 800a5fe:	d9f4      	bls.n	800a5ea <_printf_i+0x11a>
 800a600:	2b08      	cmp	r3, #8
 800a602:	d10b      	bne.n	800a61c <_printf_i+0x14c>
 800a604:	6823      	ldr	r3, [r4, #0]
 800a606:	07de      	lsls	r6, r3, #31
 800a608:	d508      	bpl.n	800a61c <_printf_i+0x14c>
 800a60a:	6923      	ldr	r3, [r4, #16]
 800a60c:	6861      	ldr	r1, [r4, #4]
 800a60e:	4299      	cmp	r1, r3
 800a610:	bfde      	ittt	le
 800a612:	2330      	movle	r3, #48	; 0x30
 800a614:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a618:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a61c:	1b52      	subs	r2, r2, r5
 800a61e:	6122      	str	r2, [r4, #16]
 800a620:	f8cd a000 	str.w	sl, [sp]
 800a624:	464b      	mov	r3, r9
 800a626:	aa03      	add	r2, sp, #12
 800a628:	4621      	mov	r1, r4
 800a62a:	4640      	mov	r0, r8
 800a62c:	f7ff fee2 	bl	800a3f4 <_printf_common>
 800a630:	3001      	adds	r0, #1
 800a632:	d14c      	bne.n	800a6ce <_printf_i+0x1fe>
 800a634:	f04f 30ff 	mov.w	r0, #4294967295
 800a638:	b004      	add	sp, #16
 800a63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a63e:	4835      	ldr	r0, [pc, #212]	; (800a714 <_printf_i+0x244>)
 800a640:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a644:	6829      	ldr	r1, [r5, #0]
 800a646:	6823      	ldr	r3, [r4, #0]
 800a648:	f851 6b04 	ldr.w	r6, [r1], #4
 800a64c:	6029      	str	r1, [r5, #0]
 800a64e:	061d      	lsls	r5, r3, #24
 800a650:	d514      	bpl.n	800a67c <_printf_i+0x1ac>
 800a652:	07df      	lsls	r7, r3, #31
 800a654:	bf44      	itt	mi
 800a656:	f043 0320 	orrmi.w	r3, r3, #32
 800a65a:	6023      	strmi	r3, [r4, #0]
 800a65c:	b91e      	cbnz	r6, 800a666 <_printf_i+0x196>
 800a65e:	6823      	ldr	r3, [r4, #0]
 800a660:	f023 0320 	bic.w	r3, r3, #32
 800a664:	6023      	str	r3, [r4, #0]
 800a666:	2310      	movs	r3, #16
 800a668:	e7b0      	b.n	800a5cc <_printf_i+0xfc>
 800a66a:	6823      	ldr	r3, [r4, #0]
 800a66c:	f043 0320 	orr.w	r3, r3, #32
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	2378      	movs	r3, #120	; 0x78
 800a674:	4828      	ldr	r0, [pc, #160]	; (800a718 <_printf_i+0x248>)
 800a676:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a67a:	e7e3      	b.n	800a644 <_printf_i+0x174>
 800a67c:	0659      	lsls	r1, r3, #25
 800a67e:	bf48      	it	mi
 800a680:	b2b6      	uxthmi	r6, r6
 800a682:	e7e6      	b.n	800a652 <_printf_i+0x182>
 800a684:	4615      	mov	r5, r2
 800a686:	e7bb      	b.n	800a600 <_printf_i+0x130>
 800a688:	682b      	ldr	r3, [r5, #0]
 800a68a:	6826      	ldr	r6, [r4, #0]
 800a68c:	6961      	ldr	r1, [r4, #20]
 800a68e:	1d18      	adds	r0, r3, #4
 800a690:	6028      	str	r0, [r5, #0]
 800a692:	0635      	lsls	r5, r6, #24
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	d501      	bpl.n	800a69c <_printf_i+0x1cc>
 800a698:	6019      	str	r1, [r3, #0]
 800a69a:	e002      	b.n	800a6a2 <_printf_i+0x1d2>
 800a69c:	0670      	lsls	r0, r6, #25
 800a69e:	d5fb      	bpl.n	800a698 <_printf_i+0x1c8>
 800a6a0:	8019      	strh	r1, [r3, #0]
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	6123      	str	r3, [r4, #16]
 800a6a6:	4615      	mov	r5, r2
 800a6a8:	e7ba      	b.n	800a620 <_printf_i+0x150>
 800a6aa:	682b      	ldr	r3, [r5, #0]
 800a6ac:	1d1a      	adds	r2, r3, #4
 800a6ae:	602a      	str	r2, [r5, #0]
 800a6b0:	681d      	ldr	r5, [r3, #0]
 800a6b2:	6862      	ldr	r2, [r4, #4]
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	f7f5 fdb2 	bl	8000220 <memchr>
 800a6bc:	b108      	cbz	r0, 800a6c2 <_printf_i+0x1f2>
 800a6be:	1b40      	subs	r0, r0, r5
 800a6c0:	6060      	str	r0, [r4, #4]
 800a6c2:	6863      	ldr	r3, [r4, #4]
 800a6c4:	6123      	str	r3, [r4, #16]
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6cc:	e7a8      	b.n	800a620 <_printf_i+0x150>
 800a6ce:	6923      	ldr	r3, [r4, #16]
 800a6d0:	462a      	mov	r2, r5
 800a6d2:	4649      	mov	r1, r9
 800a6d4:	4640      	mov	r0, r8
 800a6d6:	47d0      	blx	sl
 800a6d8:	3001      	adds	r0, #1
 800a6da:	d0ab      	beq.n	800a634 <_printf_i+0x164>
 800a6dc:	6823      	ldr	r3, [r4, #0]
 800a6de:	079b      	lsls	r3, r3, #30
 800a6e0:	d413      	bmi.n	800a70a <_printf_i+0x23a>
 800a6e2:	68e0      	ldr	r0, [r4, #12]
 800a6e4:	9b03      	ldr	r3, [sp, #12]
 800a6e6:	4298      	cmp	r0, r3
 800a6e8:	bfb8      	it	lt
 800a6ea:	4618      	movlt	r0, r3
 800a6ec:	e7a4      	b.n	800a638 <_printf_i+0x168>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	4632      	mov	r2, r6
 800a6f2:	4649      	mov	r1, r9
 800a6f4:	4640      	mov	r0, r8
 800a6f6:	47d0      	blx	sl
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	d09b      	beq.n	800a634 <_printf_i+0x164>
 800a6fc:	3501      	adds	r5, #1
 800a6fe:	68e3      	ldr	r3, [r4, #12]
 800a700:	9903      	ldr	r1, [sp, #12]
 800a702:	1a5b      	subs	r3, r3, r1
 800a704:	42ab      	cmp	r3, r5
 800a706:	dcf2      	bgt.n	800a6ee <_printf_i+0x21e>
 800a708:	e7eb      	b.n	800a6e2 <_printf_i+0x212>
 800a70a:	2500      	movs	r5, #0
 800a70c:	f104 0619 	add.w	r6, r4, #25
 800a710:	e7f5      	b.n	800a6fe <_printf_i+0x22e>
 800a712:	bf00      	nop
 800a714:	0800c796 	.word	0x0800c796
 800a718:	0800c7a7 	.word	0x0800c7a7

0800a71c <iprintf>:
 800a71c:	b40f      	push	{r0, r1, r2, r3}
 800a71e:	4b0a      	ldr	r3, [pc, #40]	; (800a748 <iprintf+0x2c>)
 800a720:	b513      	push	{r0, r1, r4, lr}
 800a722:	681c      	ldr	r4, [r3, #0]
 800a724:	b124      	cbz	r4, 800a730 <iprintf+0x14>
 800a726:	69a3      	ldr	r3, [r4, #24]
 800a728:	b913      	cbnz	r3, 800a730 <iprintf+0x14>
 800a72a:	4620      	mov	r0, r4
 800a72c:	f7ff f9c8 	bl	8009ac0 <__sinit>
 800a730:	ab05      	add	r3, sp, #20
 800a732:	9a04      	ldr	r2, [sp, #16]
 800a734:	68a1      	ldr	r1, [r4, #8]
 800a736:	9301      	str	r3, [sp, #4]
 800a738:	4620      	mov	r0, r4
 800a73a:	f001 fda5 	bl	800c288 <_vfiprintf_r>
 800a73e:	b002      	add	sp, #8
 800a740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a744:	b004      	add	sp, #16
 800a746:	4770      	bx	lr
 800a748:	20000010 	.word	0x20000010

0800a74c <_puts_r>:
 800a74c:	b570      	push	{r4, r5, r6, lr}
 800a74e:	460e      	mov	r6, r1
 800a750:	4605      	mov	r5, r0
 800a752:	b118      	cbz	r0, 800a75c <_puts_r+0x10>
 800a754:	6983      	ldr	r3, [r0, #24]
 800a756:	b90b      	cbnz	r3, 800a75c <_puts_r+0x10>
 800a758:	f7ff f9b2 	bl	8009ac0 <__sinit>
 800a75c:	69ab      	ldr	r3, [r5, #24]
 800a75e:	68ac      	ldr	r4, [r5, #8]
 800a760:	b913      	cbnz	r3, 800a768 <_puts_r+0x1c>
 800a762:	4628      	mov	r0, r5
 800a764:	f7ff f9ac 	bl	8009ac0 <__sinit>
 800a768:	4b2c      	ldr	r3, [pc, #176]	; (800a81c <_puts_r+0xd0>)
 800a76a:	429c      	cmp	r4, r3
 800a76c:	d120      	bne.n	800a7b0 <_puts_r+0x64>
 800a76e:	686c      	ldr	r4, [r5, #4]
 800a770:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a772:	07db      	lsls	r3, r3, #31
 800a774:	d405      	bmi.n	800a782 <_puts_r+0x36>
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	0598      	lsls	r0, r3, #22
 800a77a:	d402      	bmi.n	800a782 <_puts_r+0x36>
 800a77c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a77e:	f7ff fa62 	bl	8009c46 <__retarget_lock_acquire_recursive>
 800a782:	89a3      	ldrh	r3, [r4, #12]
 800a784:	0719      	lsls	r1, r3, #28
 800a786:	d51d      	bpl.n	800a7c4 <_puts_r+0x78>
 800a788:	6923      	ldr	r3, [r4, #16]
 800a78a:	b1db      	cbz	r3, 800a7c4 <_puts_r+0x78>
 800a78c:	3e01      	subs	r6, #1
 800a78e:	68a3      	ldr	r3, [r4, #8]
 800a790:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a794:	3b01      	subs	r3, #1
 800a796:	60a3      	str	r3, [r4, #8]
 800a798:	bb39      	cbnz	r1, 800a7ea <_puts_r+0x9e>
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	da38      	bge.n	800a810 <_puts_r+0xc4>
 800a79e:	4622      	mov	r2, r4
 800a7a0:	210a      	movs	r1, #10
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	f000 f906 	bl	800a9b4 <__swbuf_r>
 800a7a8:	3001      	adds	r0, #1
 800a7aa:	d011      	beq.n	800a7d0 <_puts_r+0x84>
 800a7ac:	250a      	movs	r5, #10
 800a7ae:	e011      	b.n	800a7d4 <_puts_r+0x88>
 800a7b0:	4b1b      	ldr	r3, [pc, #108]	; (800a820 <_puts_r+0xd4>)
 800a7b2:	429c      	cmp	r4, r3
 800a7b4:	d101      	bne.n	800a7ba <_puts_r+0x6e>
 800a7b6:	68ac      	ldr	r4, [r5, #8]
 800a7b8:	e7da      	b.n	800a770 <_puts_r+0x24>
 800a7ba:	4b1a      	ldr	r3, [pc, #104]	; (800a824 <_puts_r+0xd8>)
 800a7bc:	429c      	cmp	r4, r3
 800a7be:	bf08      	it	eq
 800a7c0:	68ec      	ldreq	r4, [r5, #12]
 800a7c2:	e7d5      	b.n	800a770 <_puts_r+0x24>
 800a7c4:	4621      	mov	r1, r4
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	f000 f958 	bl	800aa7c <__swsetup_r>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d0dd      	beq.n	800a78c <_puts_r+0x40>
 800a7d0:	f04f 35ff 	mov.w	r5, #4294967295
 800a7d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7d6:	07da      	lsls	r2, r3, #31
 800a7d8:	d405      	bmi.n	800a7e6 <_puts_r+0x9a>
 800a7da:	89a3      	ldrh	r3, [r4, #12]
 800a7dc:	059b      	lsls	r3, r3, #22
 800a7de:	d402      	bmi.n	800a7e6 <_puts_r+0x9a>
 800a7e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7e2:	f7ff fa31 	bl	8009c48 <__retarget_lock_release_recursive>
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	bd70      	pop	{r4, r5, r6, pc}
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	da04      	bge.n	800a7f8 <_puts_r+0xac>
 800a7ee:	69a2      	ldr	r2, [r4, #24]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	dc06      	bgt.n	800a802 <_puts_r+0xb6>
 800a7f4:	290a      	cmp	r1, #10
 800a7f6:	d004      	beq.n	800a802 <_puts_r+0xb6>
 800a7f8:	6823      	ldr	r3, [r4, #0]
 800a7fa:	1c5a      	adds	r2, r3, #1
 800a7fc:	6022      	str	r2, [r4, #0]
 800a7fe:	7019      	strb	r1, [r3, #0]
 800a800:	e7c5      	b.n	800a78e <_puts_r+0x42>
 800a802:	4622      	mov	r2, r4
 800a804:	4628      	mov	r0, r5
 800a806:	f000 f8d5 	bl	800a9b4 <__swbuf_r>
 800a80a:	3001      	adds	r0, #1
 800a80c:	d1bf      	bne.n	800a78e <_puts_r+0x42>
 800a80e:	e7df      	b.n	800a7d0 <_puts_r+0x84>
 800a810:	6823      	ldr	r3, [r4, #0]
 800a812:	250a      	movs	r5, #10
 800a814:	1c5a      	adds	r2, r3, #1
 800a816:	6022      	str	r2, [r4, #0]
 800a818:	701d      	strb	r5, [r3, #0]
 800a81a:	e7db      	b.n	800a7d4 <_puts_r+0x88>
 800a81c:	0800c740 	.word	0x0800c740
 800a820:	0800c760 	.word	0x0800c760
 800a824:	0800c720 	.word	0x0800c720

0800a828 <puts>:
 800a828:	4b02      	ldr	r3, [pc, #8]	; (800a834 <puts+0xc>)
 800a82a:	4601      	mov	r1, r0
 800a82c:	6818      	ldr	r0, [r3, #0]
 800a82e:	f7ff bf8d 	b.w	800a74c <_puts_r>
 800a832:	bf00      	nop
 800a834:	20000010 	.word	0x20000010

0800a838 <cleanup_glue>:
 800a838:	b538      	push	{r3, r4, r5, lr}
 800a83a:	460c      	mov	r4, r1
 800a83c:	6809      	ldr	r1, [r1, #0]
 800a83e:	4605      	mov	r5, r0
 800a840:	b109      	cbz	r1, 800a846 <cleanup_glue+0xe>
 800a842:	f7ff fff9 	bl	800a838 <cleanup_glue>
 800a846:	4621      	mov	r1, r4
 800a848:	4628      	mov	r0, r5
 800a84a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a84e:	f7ff ba1b 	b.w	8009c88 <_free_r>
	...

0800a854 <_reclaim_reent>:
 800a854:	4b2c      	ldr	r3, [pc, #176]	; (800a908 <_reclaim_reent+0xb4>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4283      	cmp	r3, r0
 800a85a:	b570      	push	{r4, r5, r6, lr}
 800a85c:	4604      	mov	r4, r0
 800a85e:	d051      	beq.n	800a904 <_reclaim_reent+0xb0>
 800a860:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a862:	b143      	cbz	r3, 800a876 <_reclaim_reent+0x22>
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d14a      	bne.n	800a900 <_reclaim_reent+0xac>
 800a86a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a86c:	6819      	ldr	r1, [r3, #0]
 800a86e:	b111      	cbz	r1, 800a876 <_reclaim_reent+0x22>
 800a870:	4620      	mov	r0, r4
 800a872:	f7ff fa09 	bl	8009c88 <_free_r>
 800a876:	6961      	ldr	r1, [r4, #20]
 800a878:	b111      	cbz	r1, 800a880 <_reclaim_reent+0x2c>
 800a87a:	4620      	mov	r0, r4
 800a87c:	f7ff fa04 	bl	8009c88 <_free_r>
 800a880:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a882:	b111      	cbz	r1, 800a88a <_reclaim_reent+0x36>
 800a884:	4620      	mov	r0, r4
 800a886:	f7ff f9ff 	bl	8009c88 <_free_r>
 800a88a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a88c:	b111      	cbz	r1, 800a894 <_reclaim_reent+0x40>
 800a88e:	4620      	mov	r0, r4
 800a890:	f7ff f9fa 	bl	8009c88 <_free_r>
 800a894:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a896:	b111      	cbz	r1, 800a89e <_reclaim_reent+0x4a>
 800a898:	4620      	mov	r0, r4
 800a89a:	f7ff f9f5 	bl	8009c88 <_free_r>
 800a89e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a8a0:	b111      	cbz	r1, 800a8a8 <_reclaim_reent+0x54>
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f7ff f9f0 	bl	8009c88 <_free_r>
 800a8a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a8aa:	b111      	cbz	r1, 800a8b2 <_reclaim_reent+0x5e>
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f7ff f9eb 	bl	8009c88 <_free_r>
 800a8b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a8b4:	b111      	cbz	r1, 800a8bc <_reclaim_reent+0x68>
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f7ff f9e6 	bl	8009c88 <_free_r>
 800a8bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8be:	b111      	cbz	r1, 800a8c6 <_reclaim_reent+0x72>
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f7ff f9e1 	bl	8009c88 <_free_r>
 800a8c6:	69a3      	ldr	r3, [r4, #24]
 800a8c8:	b1e3      	cbz	r3, 800a904 <_reclaim_reent+0xb0>
 800a8ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	4798      	blx	r3
 800a8d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a8d2:	b1b9      	cbz	r1, 800a904 <_reclaim_reent+0xb0>
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a8da:	f7ff bfad 	b.w	800a838 <cleanup_glue>
 800a8de:	5949      	ldr	r1, [r1, r5]
 800a8e0:	b941      	cbnz	r1, 800a8f4 <_reclaim_reent+0xa0>
 800a8e2:	3504      	adds	r5, #4
 800a8e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8e6:	2d80      	cmp	r5, #128	; 0x80
 800a8e8:	68d9      	ldr	r1, [r3, #12]
 800a8ea:	d1f8      	bne.n	800a8de <_reclaim_reent+0x8a>
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f7ff f9cb 	bl	8009c88 <_free_r>
 800a8f2:	e7ba      	b.n	800a86a <_reclaim_reent+0x16>
 800a8f4:	680e      	ldr	r6, [r1, #0]
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f7ff f9c6 	bl	8009c88 <_free_r>
 800a8fc:	4631      	mov	r1, r6
 800a8fe:	e7ef      	b.n	800a8e0 <_reclaim_reent+0x8c>
 800a900:	2500      	movs	r5, #0
 800a902:	e7ef      	b.n	800a8e4 <_reclaim_reent+0x90>
 800a904:	bd70      	pop	{r4, r5, r6, pc}
 800a906:	bf00      	nop
 800a908:	20000010 	.word	0x20000010

0800a90c <_sbrk_r>:
 800a90c:	b538      	push	{r3, r4, r5, lr}
 800a90e:	4d06      	ldr	r5, [pc, #24]	; (800a928 <_sbrk_r+0x1c>)
 800a910:	2300      	movs	r3, #0
 800a912:	4604      	mov	r4, r0
 800a914:	4608      	mov	r0, r1
 800a916:	602b      	str	r3, [r5, #0]
 800a918:	f7f6 ff26 	bl	8001768 <_sbrk>
 800a91c:	1c43      	adds	r3, r0, #1
 800a91e:	d102      	bne.n	800a926 <_sbrk_r+0x1a>
 800a920:	682b      	ldr	r3, [r5, #0]
 800a922:	b103      	cbz	r3, 800a926 <_sbrk_r+0x1a>
 800a924:	6023      	str	r3, [r4, #0]
 800a926:	bd38      	pop	{r3, r4, r5, pc}
 800a928:	20005108 	.word	0x20005108

0800a92c <__sread>:
 800a92c:	b510      	push	{r4, lr}
 800a92e:	460c      	mov	r4, r1
 800a930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a934:	f001 fdd8 	bl	800c4e8 <_read_r>
 800a938:	2800      	cmp	r0, #0
 800a93a:	bfab      	itete	ge
 800a93c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a93e:	89a3      	ldrhlt	r3, [r4, #12]
 800a940:	181b      	addge	r3, r3, r0
 800a942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a946:	bfac      	ite	ge
 800a948:	6563      	strge	r3, [r4, #84]	; 0x54
 800a94a:	81a3      	strhlt	r3, [r4, #12]
 800a94c:	bd10      	pop	{r4, pc}

0800a94e <__swrite>:
 800a94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a952:	461f      	mov	r7, r3
 800a954:	898b      	ldrh	r3, [r1, #12]
 800a956:	05db      	lsls	r3, r3, #23
 800a958:	4605      	mov	r5, r0
 800a95a:	460c      	mov	r4, r1
 800a95c:	4616      	mov	r6, r2
 800a95e:	d505      	bpl.n	800a96c <__swrite+0x1e>
 800a960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a964:	2302      	movs	r3, #2
 800a966:	2200      	movs	r2, #0
 800a968:	f001 f846 	bl	800b9f8 <_lseek_r>
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a976:	81a3      	strh	r3, [r4, #12]
 800a978:	4632      	mov	r2, r6
 800a97a:	463b      	mov	r3, r7
 800a97c:	4628      	mov	r0, r5
 800a97e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a982:	f000 b869 	b.w	800aa58 <_write_r>

0800a986 <__sseek>:
 800a986:	b510      	push	{r4, lr}
 800a988:	460c      	mov	r4, r1
 800a98a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a98e:	f001 f833 	bl	800b9f8 <_lseek_r>
 800a992:	1c43      	adds	r3, r0, #1
 800a994:	89a3      	ldrh	r3, [r4, #12]
 800a996:	bf15      	itete	ne
 800a998:	6560      	strne	r0, [r4, #84]	; 0x54
 800a99a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a99e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9a2:	81a3      	strheq	r3, [r4, #12]
 800a9a4:	bf18      	it	ne
 800a9a6:	81a3      	strhne	r3, [r4, #12]
 800a9a8:	bd10      	pop	{r4, pc}

0800a9aa <__sclose>:
 800a9aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ae:	f000 b8d3 	b.w	800ab58 <_close_r>
	...

0800a9b4 <__swbuf_r>:
 800a9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b6:	460e      	mov	r6, r1
 800a9b8:	4614      	mov	r4, r2
 800a9ba:	4605      	mov	r5, r0
 800a9bc:	b118      	cbz	r0, 800a9c6 <__swbuf_r+0x12>
 800a9be:	6983      	ldr	r3, [r0, #24]
 800a9c0:	b90b      	cbnz	r3, 800a9c6 <__swbuf_r+0x12>
 800a9c2:	f7ff f87d 	bl	8009ac0 <__sinit>
 800a9c6:	4b21      	ldr	r3, [pc, #132]	; (800aa4c <__swbuf_r+0x98>)
 800a9c8:	429c      	cmp	r4, r3
 800a9ca:	d12b      	bne.n	800aa24 <__swbuf_r+0x70>
 800a9cc:	686c      	ldr	r4, [r5, #4]
 800a9ce:	69a3      	ldr	r3, [r4, #24]
 800a9d0:	60a3      	str	r3, [r4, #8]
 800a9d2:	89a3      	ldrh	r3, [r4, #12]
 800a9d4:	071a      	lsls	r2, r3, #28
 800a9d6:	d52f      	bpl.n	800aa38 <__swbuf_r+0x84>
 800a9d8:	6923      	ldr	r3, [r4, #16]
 800a9da:	b36b      	cbz	r3, 800aa38 <__swbuf_r+0x84>
 800a9dc:	6923      	ldr	r3, [r4, #16]
 800a9de:	6820      	ldr	r0, [r4, #0]
 800a9e0:	1ac0      	subs	r0, r0, r3
 800a9e2:	6963      	ldr	r3, [r4, #20]
 800a9e4:	b2f6      	uxtb	r6, r6
 800a9e6:	4283      	cmp	r3, r0
 800a9e8:	4637      	mov	r7, r6
 800a9ea:	dc04      	bgt.n	800a9f6 <__swbuf_r+0x42>
 800a9ec:	4621      	mov	r1, r4
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	f000 ffc2 	bl	800b978 <_fflush_r>
 800a9f4:	bb30      	cbnz	r0, 800aa44 <__swbuf_r+0x90>
 800a9f6:	68a3      	ldr	r3, [r4, #8]
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	60a3      	str	r3, [r4, #8]
 800a9fc:	6823      	ldr	r3, [r4, #0]
 800a9fe:	1c5a      	adds	r2, r3, #1
 800aa00:	6022      	str	r2, [r4, #0]
 800aa02:	701e      	strb	r6, [r3, #0]
 800aa04:	6963      	ldr	r3, [r4, #20]
 800aa06:	3001      	adds	r0, #1
 800aa08:	4283      	cmp	r3, r0
 800aa0a:	d004      	beq.n	800aa16 <__swbuf_r+0x62>
 800aa0c:	89a3      	ldrh	r3, [r4, #12]
 800aa0e:	07db      	lsls	r3, r3, #31
 800aa10:	d506      	bpl.n	800aa20 <__swbuf_r+0x6c>
 800aa12:	2e0a      	cmp	r6, #10
 800aa14:	d104      	bne.n	800aa20 <__swbuf_r+0x6c>
 800aa16:	4621      	mov	r1, r4
 800aa18:	4628      	mov	r0, r5
 800aa1a:	f000 ffad 	bl	800b978 <_fflush_r>
 800aa1e:	b988      	cbnz	r0, 800aa44 <__swbuf_r+0x90>
 800aa20:	4638      	mov	r0, r7
 800aa22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa24:	4b0a      	ldr	r3, [pc, #40]	; (800aa50 <__swbuf_r+0x9c>)
 800aa26:	429c      	cmp	r4, r3
 800aa28:	d101      	bne.n	800aa2e <__swbuf_r+0x7a>
 800aa2a:	68ac      	ldr	r4, [r5, #8]
 800aa2c:	e7cf      	b.n	800a9ce <__swbuf_r+0x1a>
 800aa2e:	4b09      	ldr	r3, [pc, #36]	; (800aa54 <__swbuf_r+0xa0>)
 800aa30:	429c      	cmp	r4, r3
 800aa32:	bf08      	it	eq
 800aa34:	68ec      	ldreq	r4, [r5, #12]
 800aa36:	e7ca      	b.n	800a9ce <__swbuf_r+0x1a>
 800aa38:	4621      	mov	r1, r4
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	f000 f81e 	bl	800aa7c <__swsetup_r>
 800aa40:	2800      	cmp	r0, #0
 800aa42:	d0cb      	beq.n	800a9dc <__swbuf_r+0x28>
 800aa44:	f04f 37ff 	mov.w	r7, #4294967295
 800aa48:	e7ea      	b.n	800aa20 <__swbuf_r+0x6c>
 800aa4a:	bf00      	nop
 800aa4c:	0800c740 	.word	0x0800c740
 800aa50:	0800c760 	.word	0x0800c760
 800aa54:	0800c720 	.word	0x0800c720

0800aa58 <_write_r>:
 800aa58:	b538      	push	{r3, r4, r5, lr}
 800aa5a:	4d07      	ldr	r5, [pc, #28]	; (800aa78 <_write_r+0x20>)
 800aa5c:	4604      	mov	r4, r0
 800aa5e:	4608      	mov	r0, r1
 800aa60:	4611      	mov	r1, r2
 800aa62:	2200      	movs	r2, #0
 800aa64:	602a      	str	r2, [r5, #0]
 800aa66:	461a      	mov	r2, r3
 800aa68:	f7f6 fe2d 	bl	80016c6 <_write>
 800aa6c:	1c43      	adds	r3, r0, #1
 800aa6e:	d102      	bne.n	800aa76 <_write_r+0x1e>
 800aa70:	682b      	ldr	r3, [r5, #0]
 800aa72:	b103      	cbz	r3, 800aa76 <_write_r+0x1e>
 800aa74:	6023      	str	r3, [r4, #0]
 800aa76:	bd38      	pop	{r3, r4, r5, pc}
 800aa78:	20005108 	.word	0x20005108

0800aa7c <__swsetup_r>:
 800aa7c:	4b32      	ldr	r3, [pc, #200]	; (800ab48 <__swsetup_r+0xcc>)
 800aa7e:	b570      	push	{r4, r5, r6, lr}
 800aa80:	681d      	ldr	r5, [r3, #0]
 800aa82:	4606      	mov	r6, r0
 800aa84:	460c      	mov	r4, r1
 800aa86:	b125      	cbz	r5, 800aa92 <__swsetup_r+0x16>
 800aa88:	69ab      	ldr	r3, [r5, #24]
 800aa8a:	b913      	cbnz	r3, 800aa92 <__swsetup_r+0x16>
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	f7ff f817 	bl	8009ac0 <__sinit>
 800aa92:	4b2e      	ldr	r3, [pc, #184]	; (800ab4c <__swsetup_r+0xd0>)
 800aa94:	429c      	cmp	r4, r3
 800aa96:	d10f      	bne.n	800aab8 <__swsetup_r+0x3c>
 800aa98:	686c      	ldr	r4, [r5, #4]
 800aa9a:	89a3      	ldrh	r3, [r4, #12]
 800aa9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aaa0:	0719      	lsls	r1, r3, #28
 800aaa2:	d42c      	bmi.n	800aafe <__swsetup_r+0x82>
 800aaa4:	06dd      	lsls	r5, r3, #27
 800aaa6:	d411      	bmi.n	800aacc <__swsetup_r+0x50>
 800aaa8:	2309      	movs	r3, #9
 800aaaa:	6033      	str	r3, [r6, #0]
 800aaac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aab0:	81a3      	strh	r3, [r4, #12]
 800aab2:	f04f 30ff 	mov.w	r0, #4294967295
 800aab6:	e03e      	b.n	800ab36 <__swsetup_r+0xba>
 800aab8:	4b25      	ldr	r3, [pc, #148]	; (800ab50 <__swsetup_r+0xd4>)
 800aaba:	429c      	cmp	r4, r3
 800aabc:	d101      	bne.n	800aac2 <__swsetup_r+0x46>
 800aabe:	68ac      	ldr	r4, [r5, #8]
 800aac0:	e7eb      	b.n	800aa9a <__swsetup_r+0x1e>
 800aac2:	4b24      	ldr	r3, [pc, #144]	; (800ab54 <__swsetup_r+0xd8>)
 800aac4:	429c      	cmp	r4, r3
 800aac6:	bf08      	it	eq
 800aac8:	68ec      	ldreq	r4, [r5, #12]
 800aaca:	e7e6      	b.n	800aa9a <__swsetup_r+0x1e>
 800aacc:	0758      	lsls	r0, r3, #29
 800aace:	d512      	bpl.n	800aaf6 <__swsetup_r+0x7a>
 800aad0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aad2:	b141      	cbz	r1, 800aae6 <__swsetup_r+0x6a>
 800aad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aad8:	4299      	cmp	r1, r3
 800aada:	d002      	beq.n	800aae2 <__swsetup_r+0x66>
 800aadc:	4630      	mov	r0, r6
 800aade:	f7ff f8d3 	bl	8009c88 <_free_r>
 800aae2:	2300      	movs	r3, #0
 800aae4:	6363      	str	r3, [r4, #52]	; 0x34
 800aae6:	89a3      	ldrh	r3, [r4, #12]
 800aae8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aaec:	81a3      	strh	r3, [r4, #12]
 800aaee:	2300      	movs	r3, #0
 800aaf0:	6063      	str	r3, [r4, #4]
 800aaf2:	6923      	ldr	r3, [r4, #16]
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	89a3      	ldrh	r3, [r4, #12]
 800aaf8:	f043 0308 	orr.w	r3, r3, #8
 800aafc:	81a3      	strh	r3, [r4, #12]
 800aafe:	6923      	ldr	r3, [r4, #16]
 800ab00:	b94b      	cbnz	r3, 800ab16 <__swsetup_r+0x9a>
 800ab02:	89a3      	ldrh	r3, [r4, #12]
 800ab04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab0c:	d003      	beq.n	800ab16 <__swsetup_r+0x9a>
 800ab0e:	4621      	mov	r1, r4
 800ab10:	4630      	mov	r0, r6
 800ab12:	f000 ffa9 	bl	800ba68 <__smakebuf_r>
 800ab16:	89a0      	ldrh	r0, [r4, #12]
 800ab18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab1c:	f010 0301 	ands.w	r3, r0, #1
 800ab20:	d00a      	beq.n	800ab38 <__swsetup_r+0xbc>
 800ab22:	2300      	movs	r3, #0
 800ab24:	60a3      	str	r3, [r4, #8]
 800ab26:	6963      	ldr	r3, [r4, #20]
 800ab28:	425b      	negs	r3, r3
 800ab2a:	61a3      	str	r3, [r4, #24]
 800ab2c:	6923      	ldr	r3, [r4, #16]
 800ab2e:	b943      	cbnz	r3, 800ab42 <__swsetup_r+0xc6>
 800ab30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab34:	d1ba      	bne.n	800aaac <__swsetup_r+0x30>
 800ab36:	bd70      	pop	{r4, r5, r6, pc}
 800ab38:	0781      	lsls	r1, r0, #30
 800ab3a:	bf58      	it	pl
 800ab3c:	6963      	ldrpl	r3, [r4, #20]
 800ab3e:	60a3      	str	r3, [r4, #8]
 800ab40:	e7f4      	b.n	800ab2c <__swsetup_r+0xb0>
 800ab42:	2000      	movs	r0, #0
 800ab44:	e7f7      	b.n	800ab36 <__swsetup_r+0xba>
 800ab46:	bf00      	nop
 800ab48:	20000010 	.word	0x20000010
 800ab4c:	0800c740 	.word	0x0800c740
 800ab50:	0800c760 	.word	0x0800c760
 800ab54:	0800c720 	.word	0x0800c720

0800ab58 <_close_r>:
 800ab58:	b538      	push	{r3, r4, r5, lr}
 800ab5a:	4d06      	ldr	r5, [pc, #24]	; (800ab74 <_close_r+0x1c>)
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	4604      	mov	r4, r0
 800ab60:	4608      	mov	r0, r1
 800ab62:	602b      	str	r3, [r5, #0]
 800ab64:	f7f6 fdcb 	bl	80016fe <_close>
 800ab68:	1c43      	adds	r3, r0, #1
 800ab6a:	d102      	bne.n	800ab72 <_close_r+0x1a>
 800ab6c:	682b      	ldr	r3, [r5, #0]
 800ab6e:	b103      	cbz	r3, 800ab72 <_close_r+0x1a>
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	bd38      	pop	{r3, r4, r5, pc}
 800ab74:	20005108 	.word	0x20005108

0800ab78 <quorem>:
 800ab78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7c:	6903      	ldr	r3, [r0, #16]
 800ab7e:	690c      	ldr	r4, [r1, #16]
 800ab80:	42a3      	cmp	r3, r4
 800ab82:	4607      	mov	r7, r0
 800ab84:	f2c0 8081 	blt.w	800ac8a <quorem+0x112>
 800ab88:	3c01      	subs	r4, #1
 800ab8a:	f101 0814 	add.w	r8, r1, #20
 800ab8e:	f100 0514 	add.w	r5, r0, #20
 800ab92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab96:	9301      	str	r3, [sp, #4]
 800ab98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aba0:	3301      	adds	r3, #1
 800aba2:	429a      	cmp	r2, r3
 800aba4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aba8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800abac:	fbb2 f6f3 	udiv	r6, r2, r3
 800abb0:	d331      	bcc.n	800ac16 <quorem+0x9e>
 800abb2:	f04f 0e00 	mov.w	lr, #0
 800abb6:	4640      	mov	r0, r8
 800abb8:	46ac      	mov	ip, r5
 800abba:	46f2      	mov	sl, lr
 800abbc:	f850 2b04 	ldr.w	r2, [r0], #4
 800abc0:	b293      	uxth	r3, r2
 800abc2:	fb06 e303 	mla	r3, r6, r3, lr
 800abc6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800abca:	b29b      	uxth	r3, r3
 800abcc:	ebaa 0303 	sub.w	r3, sl, r3
 800abd0:	f8dc a000 	ldr.w	sl, [ip]
 800abd4:	0c12      	lsrs	r2, r2, #16
 800abd6:	fa13 f38a 	uxtah	r3, r3, sl
 800abda:	fb06 e202 	mla	r2, r6, r2, lr
 800abde:	9300      	str	r3, [sp, #0]
 800abe0:	9b00      	ldr	r3, [sp, #0]
 800abe2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800abe6:	b292      	uxth	r2, r2
 800abe8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800abec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abf0:	f8bd 3000 	ldrh.w	r3, [sp]
 800abf4:	4581      	cmp	r9, r0
 800abf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abfa:	f84c 3b04 	str.w	r3, [ip], #4
 800abfe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ac02:	d2db      	bcs.n	800abbc <quorem+0x44>
 800ac04:	f855 300b 	ldr.w	r3, [r5, fp]
 800ac08:	b92b      	cbnz	r3, 800ac16 <quorem+0x9e>
 800ac0a:	9b01      	ldr	r3, [sp, #4]
 800ac0c:	3b04      	subs	r3, #4
 800ac0e:	429d      	cmp	r5, r3
 800ac10:	461a      	mov	r2, r3
 800ac12:	d32e      	bcc.n	800ac72 <quorem+0xfa>
 800ac14:	613c      	str	r4, [r7, #16]
 800ac16:	4638      	mov	r0, r7
 800ac18:	f001 f9f4 	bl	800c004 <__mcmp>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	db24      	blt.n	800ac6a <quorem+0xf2>
 800ac20:	3601      	adds	r6, #1
 800ac22:	4628      	mov	r0, r5
 800ac24:	f04f 0c00 	mov.w	ip, #0
 800ac28:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac2c:	f8d0 e000 	ldr.w	lr, [r0]
 800ac30:	b293      	uxth	r3, r2
 800ac32:	ebac 0303 	sub.w	r3, ip, r3
 800ac36:	0c12      	lsrs	r2, r2, #16
 800ac38:	fa13 f38e 	uxtah	r3, r3, lr
 800ac3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ac40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac4a:	45c1      	cmp	r9, r8
 800ac4c:	f840 3b04 	str.w	r3, [r0], #4
 800ac50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ac54:	d2e8      	bcs.n	800ac28 <quorem+0xb0>
 800ac56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac5e:	b922      	cbnz	r2, 800ac6a <quorem+0xf2>
 800ac60:	3b04      	subs	r3, #4
 800ac62:	429d      	cmp	r5, r3
 800ac64:	461a      	mov	r2, r3
 800ac66:	d30a      	bcc.n	800ac7e <quorem+0x106>
 800ac68:	613c      	str	r4, [r7, #16]
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	b003      	add	sp, #12
 800ac6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac72:	6812      	ldr	r2, [r2, #0]
 800ac74:	3b04      	subs	r3, #4
 800ac76:	2a00      	cmp	r2, #0
 800ac78:	d1cc      	bne.n	800ac14 <quorem+0x9c>
 800ac7a:	3c01      	subs	r4, #1
 800ac7c:	e7c7      	b.n	800ac0e <quorem+0x96>
 800ac7e:	6812      	ldr	r2, [r2, #0]
 800ac80:	3b04      	subs	r3, #4
 800ac82:	2a00      	cmp	r2, #0
 800ac84:	d1f0      	bne.n	800ac68 <quorem+0xf0>
 800ac86:	3c01      	subs	r4, #1
 800ac88:	e7eb      	b.n	800ac62 <quorem+0xea>
 800ac8a:	2000      	movs	r0, #0
 800ac8c:	e7ee      	b.n	800ac6c <quorem+0xf4>
	...

0800ac90 <_dtoa_r>:
 800ac90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac94:	ed2d 8b04 	vpush	{d8-d9}
 800ac98:	ec57 6b10 	vmov	r6, r7, d0
 800ac9c:	b093      	sub	sp, #76	; 0x4c
 800ac9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aca0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aca4:	9106      	str	r1, [sp, #24]
 800aca6:	ee10 aa10 	vmov	sl, s0
 800acaa:	4604      	mov	r4, r0
 800acac:	9209      	str	r2, [sp, #36]	; 0x24
 800acae:	930c      	str	r3, [sp, #48]	; 0x30
 800acb0:	46bb      	mov	fp, r7
 800acb2:	b975      	cbnz	r5, 800acd2 <_dtoa_r+0x42>
 800acb4:	2010      	movs	r0, #16
 800acb6:	f7fe ffc9 	bl	8009c4c <malloc>
 800acba:	4602      	mov	r2, r0
 800acbc:	6260      	str	r0, [r4, #36]	; 0x24
 800acbe:	b920      	cbnz	r0, 800acca <_dtoa_r+0x3a>
 800acc0:	4ba7      	ldr	r3, [pc, #668]	; (800af60 <_dtoa_r+0x2d0>)
 800acc2:	21ea      	movs	r1, #234	; 0xea
 800acc4:	48a7      	ldr	r0, [pc, #668]	; (800af64 <_dtoa_r+0x2d4>)
 800acc6:	f001 fc21 	bl	800c50c <__assert_func>
 800acca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800acce:	6005      	str	r5, [r0, #0]
 800acd0:	60c5      	str	r5, [r0, #12]
 800acd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acd4:	6819      	ldr	r1, [r3, #0]
 800acd6:	b151      	cbz	r1, 800acee <_dtoa_r+0x5e>
 800acd8:	685a      	ldr	r2, [r3, #4]
 800acda:	604a      	str	r2, [r1, #4]
 800acdc:	2301      	movs	r3, #1
 800acde:	4093      	lsls	r3, r2
 800ace0:	608b      	str	r3, [r1, #8]
 800ace2:	4620      	mov	r0, r4
 800ace4:	f000 ff4c 	bl	800bb80 <_Bfree>
 800ace8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acea:	2200      	movs	r2, #0
 800acec:	601a      	str	r2, [r3, #0]
 800acee:	1e3b      	subs	r3, r7, #0
 800acf0:	bfaa      	itet	ge
 800acf2:	2300      	movge	r3, #0
 800acf4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800acf8:	f8c8 3000 	strge.w	r3, [r8]
 800acfc:	4b9a      	ldr	r3, [pc, #616]	; (800af68 <_dtoa_r+0x2d8>)
 800acfe:	bfbc      	itt	lt
 800ad00:	2201      	movlt	r2, #1
 800ad02:	f8c8 2000 	strlt.w	r2, [r8]
 800ad06:	ea33 030b 	bics.w	r3, r3, fp
 800ad0a:	d11b      	bne.n	800ad44 <_dtoa_r+0xb4>
 800ad0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad0e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ad12:	6013      	str	r3, [r2, #0]
 800ad14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad18:	4333      	orrs	r3, r6
 800ad1a:	f000 8592 	beq.w	800b842 <_dtoa_r+0xbb2>
 800ad1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad20:	b963      	cbnz	r3, 800ad3c <_dtoa_r+0xac>
 800ad22:	4b92      	ldr	r3, [pc, #584]	; (800af6c <_dtoa_r+0x2dc>)
 800ad24:	e022      	b.n	800ad6c <_dtoa_r+0xdc>
 800ad26:	4b92      	ldr	r3, [pc, #584]	; (800af70 <_dtoa_r+0x2e0>)
 800ad28:	9301      	str	r3, [sp, #4]
 800ad2a:	3308      	adds	r3, #8
 800ad2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad2e:	6013      	str	r3, [r2, #0]
 800ad30:	9801      	ldr	r0, [sp, #4]
 800ad32:	b013      	add	sp, #76	; 0x4c
 800ad34:	ecbd 8b04 	vpop	{d8-d9}
 800ad38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad3c:	4b8b      	ldr	r3, [pc, #556]	; (800af6c <_dtoa_r+0x2dc>)
 800ad3e:	9301      	str	r3, [sp, #4]
 800ad40:	3303      	adds	r3, #3
 800ad42:	e7f3      	b.n	800ad2c <_dtoa_r+0x9c>
 800ad44:	2200      	movs	r2, #0
 800ad46:	2300      	movs	r3, #0
 800ad48:	4650      	mov	r0, sl
 800ad4a:	4659      	mov	r1, fp
 800ad4c:	f7f5 fedc 	bl	8000b08 <__aeabi_dcmpeq>
 800ad50:	ec4b ab19 	vmov	d9, sl, fp
 800ad54:	4680      	mov	r8, r0
 800ad56:	b158      	cbz	r0, 800ad70 <_dtoa_r+0xe0>
 800ad58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	6013      	str	r3, [r2, #0]
 800ad5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f000 856b 	beq.w	800b83c <_dtoa_r+0xbac>
 800ad66:	4883      	ldr	r0, [pc, #524]	; (800af74 <_dtoa_r+0x2e4>)
 800ad68:	6018      	str	r0, [r3, #0]
 800ad6a:	1e43      	subs	r3, r0, #1
 800ad6c:	9301      	str	r3, [sp, #4]
 800ad6e:	e7df      	b.n	800ad30 <_dtoa_r+0xa0>
 800ad70:	ec4b ab10 	vmov	d0, sl, fp
 800ad74:	aa10      	add	r2, sp, #64	; 0x40
 800ad76:	a911      	add	r1, sp, #68	; 0x44
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f001 f9e9 	bl	800c150 <__d2b>
 800ad7e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ad82:	ee08 0a10 	vmov	s16, r0
 800ad86:	2d00      	cmp	r5, #0
 800ad88:	f000 8084 	beq.w	800ae94 <_dtoa_r+0x204>
 800ad8c:	ee19 3a90 	vmov	r3, s19
 800ad90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad94:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ad98:	4656      	mov	r6, sl
 800ad9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ad9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ada2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ada6:	4b74      	ldr	r3, [pc, #464]	; (800af78 <_dtoa_r+0x2e8>)
 800ada8:	2200      	movs	r2, #0
 800adaa:	4630      	mov	r0, r6
 800adac:	4639      	mov	r1, r7
 800adae:	f7f5 fa8b 	bl	80002c8 <__aeabi_dsub>
 800adb2:	a365      	add	r3, pc, #404	; (adr r3, 800af48 <_dtoa_r+0x2b8>)
 800adb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb8:	f7f5 fc3e 	bl	8000638 <__aeabi_dmul>
 800adbc:	a364      	add	r3, pc, #400	; (adr r3, 800af50 <_dtoa_r+0x2c0>)
 800adbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc2:	f7f5 fa83 	bl	80002cc <__adddf3>
 800adc6:	4606      	mov	r6, r0
 800adc8:	4628      	mov	r0, r5
 800adca:	460f      	mov	r7, r1
 800adcc:	f7f5 fbca 	bl	8000564 <__aeabi_i2d>
 800add0:	a361      	add	r3, pc, #388	; (adr r3, 800af58 <_dtoa_r+0x2c8>)
 800add2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add6:	f7f5 fc2f 	bl	8000638 <__aeabi_dmul>
 800adda:	4602      	mov	r2, r0
 800addc:	460b      	mov	r3, r1
 800adde:	4630      	mov	r0, r6
 800ade0:	4639      	mov	r1, r7
 800ade2:	f7f5 fa73 	bl	80002cc <__adddf3>
 800ade6:	4606      	mov	r6, r0
 800ade8:	460f      	mov	r7, r1
 800adea:	f7f5 fed5 	bl	8000b98 <__aeabi_d2iz>
 800adee:	2200      	movs	r2, #0
 800adf0:	9000      	str	r0, [sp, #0]
 800adf2:	2300      	movs	r3, #0
 800adf4:	4630      	mov	r0, r6
 800adf6:	4639      	mov	r1, r7
 800adf8:	f7f5 fe90 	bl	8000b1c <__aeabi_dcmplt>
 800adfc:	b150      	cbz	r0, 800ae14 <_dtoa_r+0x184>
 800adfe:	9800      	ldr	r0, [sp, #0]
 800ae00:	f7f5 fbb0 	bl	8000564 <__aeabi_i2d>
 800ae04:	4632      	mov	r2, r6
 800ae06:	463b      	mov	r3, r7
 800ae08:	f7f5 fe7e 	bl	8000b08 <__aeabi_dcmpeq>
 800ae0c:	b910      	cbnz	r0, 800ae14 <_dtoa_r+0x184>
 800ae0e:	9b00      	ldr	r3, [sp, #0]
 800ae10:	3b01      	subs	r3, #1
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	9b00      	ldr	r3, [sp, #0]
 800ae16:	2b16      	cmp	r3, #22
 800ae18:	d85a      	bhi.n	800aed0 <_dtoa_r+0x240>
 800ae1a:	9a00      	ldr	r2, [sp, #0]
 800ae1c:	4b57      	ldr	r3, [pc, #348]	; (800af7c <_dtoa_r+0x2ec>)
 800ae1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae26:	ec51 0b19 	vmov	r0, r1, d9
 800ae2a:	f7f5 fe77 	bl	8000b1c <__aeabi_dcmplt>
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	d050      	beq.n	800aed4 <_dtoa_r+0x244>
 800ae32:	9b00      	ldr	r3, [sp, #0]
 800ae34:	3b01      	subs	r3, #1
 800ae36:	9300      	str	r3, [sp, #0]
 800ae38:	2300      	movs	r3, #0
 800ae3a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae3e:	1b5d      	subs	r5, r3, r5
 800ae40:	1e6b      	subs	r3, r5, #1
 800ae42:	9305      	str	r3, [sp, #20]
 800ae44:	bf45      	ittet	mi
 800ae46:	f1c5 0301 	rsbmi	r3, r5, #1
 800ae4a:	9304      	strmi	r3, [sp, #16]
 800ae4c:	2300      	movpl	r3, #0
 800ae4e:	2300      	movmi	r3, #0
 800ae50:	bf4c      	ite	mi
 800ae52:	9305      	strmi	r3, [sp, #20]
 800ae54:	9304      	strpl	r3, [sp, #16]
 800ae56:	9b00      	ldr	r3, [sp, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	db3d      	blt.n	800aed8 <_dtoa_r+0x248>
 800ae5c:	9b05      	ldr	r3, [sp, #20]
 800ae5e:	9a00      	ldr	r2, [sp, #0]
 800ae60:	920a      	str	r2, [sp, #40]	; 0x28
 800ae62:	4413      	add	r3, r2
 800ae64:	9305      	str	r3, [sp, #20]
 800ae66:	2300      	movs	r3, #0
 800ae68:	9307      	str	r3, [sp, #28]
 800ae6a:	9b06      	ldr	r3, [sp, #24]
 800ae6c:	2b09      	cmp	r3, #9
 800ae6e:	f200 8089 	bhi.w	800af84 <_dtoa_r+0x2f4>
 800ae72:	2b05      	cmp	r3, #5
 800ae74:	bfc4      	itt	gt
 800ae76:	3b04      	subgt	r3, #4
 800ae78:	9306      	strgt	r3, [sp, #24]
 800ae7a:	9b06      	ldr	r3, [sp, #24]
 800ae7c:	f1a3 0302 	sub.w	r3, r3, #2
 800ae80:	bfcc      	ite	gt
 800ae82:	2500      	movgt	r5, #0
 800ae84:	2501      	movle	r5, #1
 800ae86:	2b03      	cmp	r3, #3
 800ae88:	f200 8087 	bhi.w	800af9a <_dtoa_r+0x30a>
 800ae8c:	e8df f003 	tbb	[pc, r3]
 800ae90:	59383a2d 	.word	0x59383a2d
 800ae94:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ae98:	441d      	add	r5, r3
 800ae9a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ae9e:	2b20      	cmp	r3, #32
 800aea0:	bfc1      	itttt	gt
 800aea2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aea6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aeaa:	fa0b f303 	lslgt.w	r3, fp, r3
 800aeae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aeb2:	bfda      	itte	le
 800aeb4:	f1c3 0320 	rsble	r3, r3, #32
 800aeb8:	fa06 f003 	lslle.w	r0, r6, r3
 800aebc:	4318      	orrgt	r0, r3
 800aebe:	f7f5 fb41 	bl	8000544 <__aeabi_ui2d>
 800aec2:	2301      	movs	r3, #1
 800aec4:	4606      	mov	r6, r0
 800aec6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aeca:	3d01      	subs	r5, #1
 800aecc:	930e      	str	r3, [sp, #56]	; 0x38
 800aece:	e76a      	b.n	800ada6 <_dtoa_r+0x116>
 800aed0:	2301      	movs	r3, #1
 800aed2:	e7b2      	b.n	800ae3a <_dtoa_r+0x1aa>
 800aed4:	900b      	str	r0, [sp, #44]	; 0x2c
 800aed6:	e7b1      	b.n	800ae3c <_dtoa_r+0x1ac>
 800aed8:	9b04      	ldr	r3, [sp, #16]
 800aeda:	9a00      	ldr	r2, [sp, #0]
 800aedc:	1a9b      	subs	r3, r3, r2
 800aede:	9304      	str	r3, [sp, #16]
 800aee0:	4253      	negs	r3, r2
 800aee2:	9307      	str	r3, [sp, #28]
 800aee4:	2300      	movs	r3, #0
 800aee6:	930a      	str	r3, [sp, #40]	; 0x28
 800aee8:	e7bf      	b.n	800ae6a <_dtoa_r+0x1da>
 800aeea:	2300      	movs	r3, #0
 800aeec:	9308      	str	r3, [sp, #32]
 800aeee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	dc55      	bgt.n	800afa0 <_dtoa_r+0x310>
 800aef4:	2301      	movs	r3, #1
 800aef6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aefa:	461a      	mov	r2, r3
 800aefc:	9209      	str	r2, [sp, #36]	; 0x24
 800aefe:	e00c      	b.n	800af1a <_dtoa_r+0x28a>
 800af00:	2301      	movs	r3, #1
 800af02:	e7f3      	b.n	800aeec <_dtoa_r+0x25c>
 800af04:	2300      	movs	r3, #0
 800af06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af08:	9308      	str	r3, [sp, #32]
 800af0a:	9b00      	ldr	r3, [sp, #0]
 800af0c:	4413      	add	r3, r2
 800af0e:	9302      	str	r3, [sp, #8]
 800af10:	3301      	adds	r3, #1
 800af12:	2b01      	cmp	r3, #1
 800af14:	9303      	str	r3, [sp, #12]
 800af16:	bfb8      	it	lt
 800af18:	2301      	movlt	r3, #1
 800af1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800af1c:	2200      	movs	r2, #0
 800af1e:	6042      	str	r2, [r0, #4]
 800af20:	2204      	movs	r2, #4
 800af22:	f102 0614 	add.w	r6, r2, #20
 800af26:	429e      	cmp	r6, r3
 800af28:	6841      	ldr	r1, [r0, #4]
 800af2a:	d93d      	bls.n	800afa8 <_dtoa_r+0x318>
 800af2c:	4620      	mov	r0, r4
 800af2e:	f000 fde7 	bl	800bb00 <_Balloc>
 800af32:	9001      	str	r0, [sp, #4]
 800af34:	2800      	cmp	r0, #0
 800af36:	d13b      	bne.n	800afb0 <_dtoa_r+0x320>
 800af38:	4b11      	ldr	r3, [pc, #68]	; (800af80 <_dtoa_r+0x2f0>)
 800af3a:	4602      	mov	r2, r0
 800af3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800af40:	e6c0      	b.n	800acc4 <_dtoa_r+0x34>
 800af42:	2301      	movs	r3, #1
 800af44:	e7df      	b.n	800af06 <_dtoa_r+0x276>
 800af46:	bf00      	nop
 800af48:	636f4361 	.word	0x636f4361
 800af4c:	3fd287a7 	.word	0x3fd287a7
 800af50:	8b60c8b3 	.word	0x8b60c8b3
 800af54:	3fc68a28 	.word	0x3fc68a28
 800af58:	509f79fb 	.word	0x509f79fb
 800af5c:	3fd34413 	.word	0x3fd34413
 800af60:	0800c7c5 	.word	0x0800c7c5
 800af64:	0800c7dc 	.word	0x0800c7dc
 800af68:	7ff00000 	.word	0x7ff00000
 800af6c:	0800c7c1 	.word	0x0800c7c1
 800af70:	0800c7b8 	.word	0x0800c7b8
 800af74:	0800c795 	.word	0x0800c795
 800af78:	3ff80000 	.word	0x3ff80000
 800af7c:	0800c8d0 	.word	0x0800c8d0
 800af80:	0800c837 	.word	0x0800c837
 800af84:	2501      	movs	r5, #1
 800af86:	2300      	movs	r3, #0
 800af88:	9306      	str	r3, [sp, #24]
 800af8a:	9508      	str	r5, [sp, #32]
 800af8c:	f04f 33ff 	mov.w	r3, #4294967295
 800af90:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af94:	2200      	movs	r2, #0
 800af96:	2312      	movs	r3, #18
 800af98:	e7b0      	b.n	800aefc <_dtoa_r+0x26c>
 800af9a:	2301      	movs	r3, #1
 800af9c:	9308      	str	r3, [sp, #32]
 800af9e:	e7f5      	b.n	800af8c <_dtoa_r+0x2fc>
 800afa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afa2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800afa6:	e7b8      	b.n	800af1a <_dtoa_r+0x28a>
 800afa8:	3101      	adds	r1, #1
 800afaa:	6041      	str	r1, [r0, #4]
 800afac:	0052      	lsls	r2, r2, #1
 800afae:	e7b8      	b.n	800af22 <_dtoa_r+0x292>
 800afb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afb2:	9a01      	ldr	r2, [sp, #4]
 800afb4:	601a      	str	r2, [r3, #0]
 800afb6:	9b03      	ldr	r3, [sp, #12]
 800afb8:	2b0e      	cmp	r3, #14
 800afba:	f200 809d 	bhi.w	800b0f8 <_dtoa_r+0x468>
 800afbe:	2d00      	cmp	r5, #0
 800afc0:	f000 809a 	beq.w	800b0f8 <_dtoa_r+0x468>
 800afc4:	9b00      	ldr	r3, [sp, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	dd32      	ble.n	800b030 <_dtoa_r+0x3a0>
 800afca:	4ab7      	ldr	r2, [pc, #732]	; (800b2a8 <_dtoa_r+0x618>)
 800afcc:	f003 030f 	and.w	r3, r3, #15
 800afd0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800afd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800afd8:	9b00      	ldr	r3, [sp, #0]
 800afda:	05d8      	lsls	r0, r3, #23
 800afdc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800afe0:	d516      	bpl.n	800b010 <_dtoa_r+0x380>
 800afe2:	4bb2      	ldr	r3, [pc, #712]	; (800b2ac <_dtoa_r+0x61c>)
 800afe4:	ec51 0b19 	vmov	r0, r1, d9
 800afe8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800afec:	f7f5 fc4e 	bl	800088c <__aeabi_ddiv>
 800aff0:	f007 070f 	and.w	r7, r7, #15
 800aff4:	4682      	mov	sl, r0
 800aff6:	468b      	mov	fp, r1
 800aff8:	2503      	movs	r5, #3
 800affa:	4eac      	ldr	r6, [pc, #688]	; (800b2ac <_dtoa_r+0x61c>)
 800affc:	b957      	cbnz	r7, 800b014 <_dtoa_r+0x384>
 800affe:	4642      	mov	r2, r8
 800b000:	464b      	mov	r3, r9
 800b002:	4650      	mov	r0, sl
 800b004:	4659      	mov	r1, fp
 800b006:	f7f5 fc41 	bl	800088c <__aeabi_ddiv>
 800b00a:	4682      	mov	sl, r0
 800b00c:	468b      	mov	fp, r1
 800b00e:	e028      	b.n	800b062 <_dtoa_r+0x3d2>
 800b010:	2502      	movs	r5, #2
 800b012:	e7f2      	b.n	800affa <_dtoa_r+0x36a>
 800b014:	07f9      	lsls	r1, r7, #31
 800b016:	d508      	bpl.n	800b02a <_dtoa_r+0x39a>
 800b018:	4640      	mov	r0, r8
 800b01a:	4649      	mov	r1, r9
 800b01c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b020:	f7f5 fb0a 	bl	8000638 <__aeabi_dmul>
 800b024:	3501      	adds	r5, #1
 800b026:	4680      	mov	r8, r0
 800b028:	4689      	mov	r9, r1
 800b02a:	107f      	asrs	r7, r7, #1
 800b02c:	3608      	adds	r6, #8
 800b02e:	e7e5      	b.n	800affc <_dtoa_r+0x36c>
 800b030:	f000 809b 	beq.w	800b16a <_dtoa_r+0x4da>
 800b034:	9b00      	ldr	r3, [sp, #0]
 800b036:	4f9d      	ldr	r7, [pc, #628]	; (800b2ac <_dtoa_r+0x61c>)
 800b038:	425e      	negs	r6, r3
 800b03a:	4b9b      	ldr	r3, [pc, #620]	; (800b2a8 <_dtoa_r+0x618>)
 800b03c:	f006 020f 	and.w	r2, r6, #15
 800b040:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b048:	ec51 0b19 	vmov	r0, r1, d9
 800b04c:	f7f5 faf4 	bl	8000638 <__aeabi_dmul>
 800b050:	1136      	asrs	r6, r6, #4
 800b052:	4682      	mov	sl, r0
 800b054:	468b      	mov	fp, r1
 800b056:	2300      	movs	r3, #0
 800b058:	2502      	movs	r5, #2
 800b05a:	2e00      	cmp	r6, #0
 800b05c:	d17a      	bne.n	800b154 <_dtoa_r+0x4c4>
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1d3      	bne.n	800b00a <_dtoa_r+0x37a>
 800b062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b064:	2b00      	cmp	r3, #0
 800b066:	f000 8082 	beq.w	800b16e <_dtoa_r+0x4de>
 800b06a:	4b91      	ldr	r3, [pc, #580]	; (800b2b0 <_dtoa_r+0x620>)
 800b06c:	2200      	movs	r2, #0
 800b06e:	4650      	mov	r0, sl
 800b070:	4659      	mov	r1, fp
 800b072:	f7f5 fd53 	bl	8000b1c <__aeabi_dcmplt>
 800b076:	2800      	cmp	r0, #0
 800b078:	d079      	beq.n	800b16e <_dtoa_r+0x4de>
 800b07a:	9b03      	ldr	r3, [sp, #12]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d076      	beq.n	800b16e <_dtoa_r+0x4de>
 800b080:	9b02      	ldr	r3, [sp, #8]
 800b082:	2b00      	cmp	r3, #0
 800b084:	dd36      	ble.n	800b0f4 <_dtoa_r+0x464>
 800b086:	9b00      	ldr	r3, [sp, #0]
 800b088:	4650      	mov	r0, sl
 800b08a:	4659      	mov	r1, fp
 800b08c:	1e5f      	subs	r7, r3, #1
 800b08e:	2200      	movs	r2, #0
 800b090:	4b88      	ldr	r3, [pc, #544]	; (800b2b4 <_dtoa_r+0x624>)
 800b092:	f7f5 fad1 	bl	8000638 <__aeabi_dmul>
 800b096:	9e02      	ldr	r6, [sp, #8]
 800b098:	4682      	mov	sl, r0
 800b09a:	468b      	mov	fp, r1
 800b09c:	3501      	adds	r5, #1
 800b09e:	4628      	mov	r0, r5
 800b0a0:	f7f5 fa60 	bl	8000564 <__aeabi_i2d>
 800b0a4:	4652      	mov	r2, sl
 800b0a6:	465b      	mov	r3, fp
 800b0a8:	f7f5 fac6 	bl	8000638 <__aeabi_dmul>
 800b0ac:	4b82      	ldr	r3, [pc, #520]	; (800b2b8 <_dtoa_r+0x628>)
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f7f5 f90c 	bl	80002cc <__adddf3>
 800b0b4:	46d0      	mov	r8, sl
 800b0b6:	46d9      	mov	r9, fp
 800b0b8:	4682      	mov	sl, r0
 800b0ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b0be:	2e00      	cmp	r6, #0
 800b0c0:	d158      	bne.n	800b174 <_dtoa_r+0x4e4>
 800b0c2:	4b7e      	ldr	r3, [pc, #504]	; (800b2bc <_dtoa_r+0x62c>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	4640      	mov	r0, r8
 800b0c8:	4649      	mov	r1, r9
 800b0ca:	f7f5 f8fd 	bl	80002c8 <__aeabi_dsub>
 800b0ce:	4652      	mov	r2, sl
 800b0d0:	465b      	mov	r3, fp
 800b0d2:	4680      	mov	r8, r0
 800b0d4:	4689      	mov	r9, r1
 800b0d6:	f7f5 fd3f 	bl	8000b58 <__aeabi_dcmpgt>
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	f040 8295 	bne.w	800b60a <_dtoa_r+0x97a>
 800b0e0:	4652      	mov	r2, sl
 800b0e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b0e6:	4640      	mov	r0, r8
 800b0e8:	4649      	mov	r1, r9
 800b0ea:	f7f5 fd17 	bl	8000b1c <__aeabi_dcmplt>
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	f040 8289 	bne.w	800b606 <_dtoa_r+0x976>
 800b0f4:	ec5b ab19 	vmov	sl, fp, d9
 800b0f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	f2c0 8148 	blt.w	800b390 <_dtoa_r+0x700>
 800b100:	9a00      	ldr	r2, [sp, #0]
 800b102:	2a0e      	cmp	r2, #14
 800b104:	f300 8144 	bgt.w	800b390 <_dtoa_r+0x700>
 800b108:	4b67      	ldr	r3, [pc, #412]	; (800b2a8 <_dtoa_r+0x618>)
 800b10a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b10e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b114:	2b00      	cmp	r3, #0
 800b116:	f280 80d5 	bge.w	800b2c4 <_dtoa_r+0x634>
 800b11a:	9b03      	ldr	r3, [sp, #12]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	f300 80d1 	bgt.w	800b2c4 <_dtoa_r+0x634>
 800b122:	f040 826f 	bne.w	800b604 <_dtoa_r+0x974>
 800b126:	4b65      	ldr	r3, [pc, #404]	; (800b2bc <_dtoa_r+0x62c>)
 800b128:	2200      	movs	r2, #0
 800b12a:	4640      	mov	r0, r8
 800b12c:	4649      	mov	r1, r9
 800b12e:	f7f5 fa83 	bl	8000638 <__aeabi_dmul>
 800b132:	4652      	mov	r2, sl
 800b134:	465b      	mov	r3, fp
 800b136:	f7f5 fd05 	bl	8000b44 <__aeabi_dcmpge>
 800b13a:	9e03      	ldr	r6, [sp, #12]
 800b13c:	4637      	mov	r7, r6
 800b13e:	2800      	cmp	r0, #0
 800b140:	f040 8245 	bne.w	800b5ce <_dtoa_r+0x93e>
 800b144:	9d01      	ldr	r5, [sp, #4]
 800b146:	2331      	movs	r3, #49	; 0x31
 800b148:	f805 3b01 	strb.w	r3, [r5], #1
 800b14c:	9b00      	ldr	r3, [sp, #0]
 800b14e:	3301      	adds	r3, #1
 800b150:	9300      	str	r3, [sp, #0]
 800b152:	e240      	b.n	800b5d6 <_dtoa_r+0x946>
 800b154:	07f2      	lsls	r2, r6, #31
 800b156:	d505      	bpl.n	800b164 <_dtoa_r+0x4d4>
 800b158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b15c:	f7f5 fa6c 	bl	8000638 <__aeabi_dmul>
 800b160:	3501      	adds	r5, #1
 800b162:	2301      	movs	r3, #1
 800b164:	1076      	asrs	r6, r6, #1
 800b166:	3708      	adds	r7, #8
 800b168:	e777      	b.n	800b05a <_dtoa_r+0x3ca>
 800b16a:	2502      	movs	r5, #2
 800b16c:	e779      	b.n	800b062 <_dtoa_r+0x3d2>
 800b16e:	9f00      	ldr	r7, [sp, #0]
 800b170:	9e03      	ldr	r6, [sp, #12]
 800b172:	e794      	b.n	800b09e <_dtoa_r+0x40e>
 800b174:	9901      	ldr	r1, [sp, #4]
 800b176:	4b4c      	ldr	r3, [pc, #304]	; (800b2a8 <_dtoa_r+0x618>)
 800b178:	4431      	add	r1, r6
 800b17a:	910d      	str	r1, [sp, #52]	; 0x34
 800b17c:	9908      	ldr	r1, [sp, #32]
 800b17e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b182:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b186:	2900      	cmp	r1, #0
 800b188:	d043      	beq.n	800b212 <_dtoa_r+0x582>
 800b18a:	494d      	ldr	r1, [pc, #308]	; (800b2c0 <_dtoa_r+0x630>)
 800b18c:	2000      	movs	r0, #0
 800b18e:	f7f5 fb7d 	bl	800088c <__aeabi_ddiv>
 800b192:	4652      	mov	r2, sl
 800b194:	465b      	mov	r3, fp
 800b196:	f7f5 f897 	bl	80002c8 <__aeabi_dsub>
 800b19a:	9d01      	ldr	r5, [sp, #4]
 800b19c:	4682      	mov	sl, r0
 800b19e:	468b      	mov	fp, r1
 800b1a0:	4649      	mov	r1, r9
 800b1a2:	4640      	mov	r0, r8
 800b1a4:	f7f5 fcf8 	bl	8000b98 <__aeabi_d2iz>
 800b1a8:	4606      	mov	r6, r0
 800b1aa:	f7f5 f9db 	bl	8000564 <__aeabi_i2d>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	4640      	mov	r0, r8
 800b1b4:	4649      	mov	r1, r9
 800b1b6:	f7f5 f887 	bl	80002c8 <__aeabi_dsub>
 800b1ba:	3630      	adds	r6, #48	; 0x30
 800b1bc:	f805 6b01 	strb.w	r6, [r5], #1
 800b1c0:	4652      	mov	r2, sl
 800b1c2:	465b      	mov	r3, fp
 800b1c4:	4680      	mov	r8, r0
 800b1c6:	4689      	mov	r9, r1
 800b1c8:	f7f5 fca8 	bl	8000b1c <__aeabi_dcmplt>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	d163      	bne.n	800b298 <_dtoa_r+0x608>
 800b1d0:	4642      	mov	r2, r8
 800b1d2:	464b      	mov	r3, r9
 800b1d4:	4936      	ldr	r1, [pc, #216]	; (800b2b0 <_dtoa_r+0x620>)
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	f7f5 f876 	bl	80002c8 <__aeabi_dsub>
 800b1dc:	4652      	mov	r2, sl
 800b1de:	465b      	mov	r3, fp
 800b1e0:	f7f5 fc9c 	bl	8000b1c <__aeabi_dcmplt>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	f040 80b5 	bne.w	800b354 <_dtoa_r+0x6c4>
 800b1ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1ec:	429d      	cmp	r5, r3
 800b1ee:	d081      	beq.n	800b0f4 <_dtoa_r+0x464>
 800b1f0:	4b30      	ldr	r3, [pc, #192]	; (800b2b4 <_dtoa_r+0x624>)
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	4650      	mov	r0, sl
 800b1f6:	4659      	mov	r1, fp
 800b1f8:	f7f5 fa1e 	bl	8000638 <__aeabi_dmul>
 800b1fc:	4b2d      	ldr	r3, [pc, #180]	; (800b2b4 <_dtoa_r+0x624>)
 800b1fe:	4682      	mov	sl, r0
 800b200:	468b      	mov	fp, r1
 800b202:	4640      	mov	r0, r8
 800b204:	4649      	mov	r1, r9
 800b206:	2200      	movs	r2, #0
 800b208:	f7f5 fa16 	bl	8000638 <__aeabi_dmul>
 800b20c:	4680      	mov	r8, r0
 800b20e:	4689      	mov	r9, r1
 800b210:	e7c6      	b.n	800b1a0 <_dtoa_r+0x510>
 800b212:	4650      	mov	r0, sl
 800b214:	4659      	mov	r1, fp
 800b216:	f7f5 fa0f 	bl	8000638 <__aeabi_dmul>
 800b21a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b21c:	9d01      	ldr	r5, [sp, #4]
 800b21e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b220:	4682      	mov	sl, r0
 800b222:	468b      	mov	fp, r1
 800b224:	4649      	mov	r1, r9
 800b226:	4640      	mov	r0, r8
 800b228:	f7f5 fcb6 	bl	8000b98 <__aeabi_d2iz>
 800b22c:	4606      	mov	r6, r0
 800b22e:	f7f5 f999 	bl	8000564 <__aeabi_i2d>
 800b232:	3630      	adds	r6, #48	; 0x30
 800b234:	4602      	mov	r2, r0
 800b236:	460b      	mov	r3, r1
 800b238:	4640      	mov	r0, r8
 800b23a:	4649      	mov	r1, r9
 800b23c:	f7f5 f844 	bl	80002c8 <__aeabi_dsub>
 800b240:	f805 6b01 	strb.w	r6, [r5], #1
 800b244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b246:	429d      	cmp	r5, r3
 800b248:	4680      	mov	r8, r0
 800b24a:	4689      	mov	r9, r1
 800b24c:	f04f 0200 	mov.w	r2, #0
 800b250:	d124      	bne.n	800b29c <_dtoa_r+0x60c>
 800b252:	4b1b      	ldr	r3, [pc, #108]	; (800b2c0 <_dtoa_r+0x630>)
 800b254:	4650      	mov	r0, sl
 800b256:	4659      	mov	r1, fp
 800b258:	f7f5 f838 	bl	80002cc <__adddf3>
 800b25c:	4602      	mov	r2, r0
 800b25e:	460b      	mov	r3, r1
 800b260:	4640      	mov	r0, r8
 800b262:	4649      	mov	r1, r9
 800b264:	f7f5 fc78 	bl	8000b58 <__aeabi_dcmpgt>
 800b268:	2800      	cmp	r0, #0
 800b26a:	d173      	bne.n	800b354 <_dtoa_r+0x6c4>
 800b26c:	4652      	mov	r2, sl
 800b26e:	465b      	mov	r3, fp
 800b270:	4913      	ldr	r1, [pc, #76]	; (800b2c0 <_dtoa_r+0x630>)
 800b272:	2000      	movs	r0, #0
 800b274:	f7f5 f828 	bl	80002c8 <__aeabi_dsub>
 800b278:	4602      	mov	r2, r0
 800b27a:	460b      	mov	r3, r1
 800b27c:	4640      	mov	r0, r8
 800b27e:	4649      	mov	r1, r9
 800b280:	f7f5 fc4c 	bl	8000b1c <__aeabi_dcmplt>
 800b284:	2800      	cmp	r0, #0
 800b286:	f43f af35 	beq.w	800b0f4 <_dtoa_r+0x464>
 800b28a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b28c:	1e6b      	subs	r3, r5, #1
 800b28e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b290:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b294:	2b30      	cmp	r3, #48	; 0x30
 800b296:	d0f8      	beq.n	800b28a <_dtoa_r+0x5fa>
 800b298:	9700      	str	r7, [sp, #0]
 800b29a:	e049      	b.n	800b330 <_dtoa_r+0x6a0>
 800b29c:	4b05      	ldr	r3, [pc, #20]	; (800b2b4 <_dtoa_r+0x624>)
 800b29e:	f7f5 f9cb 	bl	8000638 <__aeabi_dmul>
 800b2a2:	4680      	mov	r8, r0
 800b2a4:	4689      	mov	r9, r1
 800b2a6:	e7bd      	b.n	800b224 <_dtoa_r+0x594>
 800b2a8:	0800c8d0 	.word	0x0800c8d0
 800b2ac:	0800c8a8 	.word	0x0800c8a8
 800b2b0:	3ff00000 	.word	0x3ff00000
 800b2b4:	40240000 	.word	0x40240000
 800b2b8:	401c0000 	.word	0x401c0000
 800b2bc:	40140000 	.word	0x40140000
 800b2c0:	3fe00000 	.word	0x3fe00000
 800b2c4:	9d01      	ldr	r5, [sp, #4]
 800b2c6:	4656      	mov	r6, sl
 800b2c8:	465f      	mov	r7, fp
 800b2ca:	4642      	mov	r2, r8
 800b2cc:	464b      	mov	r3, r9
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	4639      	mov	r1, r7
 800b2d2:	f7f5 fadb 	bl	800088c <__aeabi_ddiv>
 800b2d6:	f7f5 fc5f 	bl	8000b98 <__aeabi_d2iz>
 800b2da:	4682      	mov	sl, r0
 800b2dc:	f7f5 f942 	bl	8000564 <__aeabi_i2d>
 800b2e0:	4642      	mov	r2, r8
 800b2e2:	464b      	mov	r3, r9
 800b2e4:	f7f5 f9a8 	bl	8000638 <__aeabi_dmul>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	4639      	mov	r1, r7
 800b2f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b2f4:	f7f4 ffe8 	bl	80002c8 <__aeabi_dsub>
 800b2f8:	f805 6b01 	strb.w	r6, [r5], #1
 800b2fc:	9e01      	ldr	r6, [sp, #4]
 800b2fe:	9f03      	ldr	r7, [sp, #12]
 800b300:	1bae      	subs	r6, r5, r6
 800b302:	42b7      	cmp	r7, r6
 800b304:	4602      	mov	r2, r0
 800b306:	460b      	mov	r3, r1
 800b308:	d135      	bne.n	800b376 <_dtoa_r+0x6e6>
 800b30a:	f7f4 ffdf 	bl	80002cc <__adddf3>
 800b30e:	4642      	mov	r2, r8
 800b310:	464b      	mov	r3, r9
 800b312:	4606      	mov	r6, r0
 800b314:	460f      	mov	r7, r1
 800b316:	f7f5 fc1f 	bl	8000b58 <__aeabi_dcmpgt>
 800b31a:	b9d0      	cbnz	r0, 800b352 <_dtoa_r+0x6c2>
 800b31c:	4642      	mov	r2, r8
 800b31e:	464b      	mov	r3, r9
 800b320:	4630      	mov	r0, r6
 800b322:	4639      	mov	r1, r7
 800b324:	f7f5 fbf0 	bl	8000b08 <__aeabi_dcmpeq>
 800b328:	b110      	cbz	r0, 800b330 <_dtoa_r+0x6a0>
 800b32a:	f01a 0f01 	tst.w	sl, #1
 800b32e:	d110      	bne.n	800b352 <_dtoa_r+0x6c2>
 800b330:	4620      	mov	r0, r4
 800b332:	ee18 1a10 	vmov	r1, s16
 800b336:	f000 fc23 	bl	800bb80 <_Bfree>
 800b33a:	2300      	movs	r3, #0
 800b33c:	9800      	ldr	r0, [sp, #0]
 800b33e:	702b      	strb	r3, [r5, #0]
 800b340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b342:	3001      	adds	r0, #1
 800b344:	6018      	str	r0, [r3, #0]
 800b346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b348:	2b00      	cmp	r3, #0
 800b34a:	f43f acf1 	beq.w	800ad30 <_dtoa_r+0xa0>
 800b34e:	601d      	str	r5, [r3, #0]
 800b350:	e4ee      	b.n	800ad30 <_dtoa_r+0xa0>
 800b352:	9f00      	ldr	r7, [sp, #0]
 800b354:	462b      	mov	r3, r5
 800b356:	461d      	mov	r5, r3
 800b358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b35c:	2a39      	cmp	r2, #57	; 0x39
 800b35e:	d106      	bne.n	800b36e <_dtoa_r+0x6de>
 800b360:	9a01      	ldr	r2, [sp, #4]
 800b362:	429a      	cmp	r2, r3
 800b364:	d1f7      	bne.n	800b356 <_dtoa_r+0x6c6>
 800b366:	9901      	ldr	r1, [sp, #4]
 800b368:	2230      	movs	r2, #48	; 0x30
 800b36a:	3701      	adds	r7, #1
 800b36c:	700a      	strb	r2, [r1, #0]
 800b36e:	781a      	ldrb	r2, [r3, #0]
 800b370:	3201      	adds	r2, #1
 800b372:	701a      	strb	r2, [r3, #0]
 800b374:	e790      	b.n	800b298 <_dtoa_r+0x608>
 800b376:	4ba6      	ldr	r3, [pc, #664]	; (800b610 <_dtoa_r+0x980>)
 800b378:	2200      	movs	r2, #0
 800b37a:	f7f5 f95d 	bl	8000638 <__aeabi_dmul>
 800b37e:	2200      	movs	r2, #0
 800b380:	2300      	movs	r3, #0
 800b382:	4606      	mov	r6, r0
 800b384:	460f      	mov	r7, r1
 800b386:	f7f5 fbbf 	bl	8000b08 <__aeabi_dcmpeq>
 800b38a:	2800      	cmp	r0, #0
 800b38c:	d09d      	beq.n	800b2ca <_dtoa_r+0x63a>
 800b38e:	e7cf      	b.n	800b330 <_dtoa_r+0x6a0>
 800b390:	9a08      	ldr	r2, [sp, #32]
 800b392:	2a00      	cmp	r2, #0
 800b394:	f000 80d7 	beq.w	800b546 <_dtoa_r+0x8b6>
 800b398:	9a06      	ldr	r2, [sp, #24]
 800b39a:	2a01      	cmp	r2, #1
 800b39c:	f300 80ba 	bgt.w	800b514 <_dtoa_r+0x884>
 800b3a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3a2:	2a00      	cmp	r2, #0
 800b3a4:	f000 80b2 	beq.w	800b50c <_dtoa_r+0x87c>
 800b3a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b3ac:	9e07      	ldr	r6, [sp, #28]
 800b3ae:	9d04      	ldr	r5, [sp, #16]
 800b3b0:	9a04      	ldr	r2, [sp, #16]
 800b3b2:	441a      	add	r2, r3
 800b3b4:	9204      	str	r2, [sp, #16]
 800b3b6:	9a05      	ldr	r2, [sp, #20]
 800b3b8:	2101      	movs	r1, #1
 800b3ba:	441a      	add	r2, r3
 800b3bc:	4620      	mov	r0, r4
 800b3be:	9205      	str	r2, [sp, #20]
 800b3c0:	f000 fc96 	bl	800bcf0 <__i2b>
 800b3c4:	4607      	mov	r7, r0
 800b3c6:	2d00      	cmp	r5, #0
 800b3c8:	dd0c      	ble.n	800b3e4 <_dtoa_r+0x754>
 800b3ca:	9b05      	ldr	r3, [sp, #20]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	dd09      	ble.n	800b3e4 <_dtoa_r+0x754>
 800b3d0:	42ab      	cmp	r3, r5
 800b3d2:	9a04      	ldr	r2, [sp, #16]
 800b3d4:	bfa8      	it	ge
 800b3d6:	462b      	movge	r3, r5
 800b3d8:	1ad2      	subs	r2, r2, r3
 800b3da:	9204      	str	r2, [sp, #16]
 800b3dc:	9a05      	ldr	r2, [sp, #20]
 800b3de:	1aed      	subs	r5, r5, r3
 800b3e0:	1ad3      	subs	r3, r2, r3
 800b3e2:	9305      	str	r3, [sp, #20]
 800b3e4:	9b07      	ldr	r3, [sp, #28]
 800b3e6:	b31b      	cbz	r3, 800b430 <_dtoa_r+0x7a0>
 800b3e8:	9b08      	ldr	r3, [sp, #32]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	f000 80af 	beq.w	800b54e <_dtoa_r+0x8be>
 800b3f0:	2e00      	cmp	r6, #0
 800b3f2:	dd13      	ble.n	800b41c <_dtoa_r+0x78c>
 800b3f4:	4639      	mov	r1, r7
 800b3f6:	4632      	mov	r2, r6
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f000 fd39 	bl	800be70 <__pow5mult>
 800b3fe:	ee18 2a10 	vmov	r2, s16
 800b402:	4601      	mov	r1, r0
 800b404:	4607      	mov	r7, r0
 800b406:	4620      	mov	r0, r4
 800b408:	f000 fc88 	bl	800bd1c <__multiply>
 800b40c:	ee18 1a10 	vmov	r1, s16
 800b410:	4680      	mov	r8, r0
 800b412:	4620      	mov	r0, r4
 800b414:	f000 fbb4 	bl	800bb80 <_Bfree>
 800b418:	ee08 8a10 	vmov	s16, r8
 800b41c:	9b07      	ldr	r3, [sp, #28]
 800b41e:	1b9a      	subs	r2, r3, r6
 800b420:	d006      	beq.n	800b430 <_dtoa_r+0x7a0>
 800b422:	ee18 1a10 	vmov	r1, s16
 800b426:	4620      	mov	r0, r4
 800b428:	f000 fd22 	bl	800be70 <__pow5mult>
 800b42c:	ee08 0a10 	vmov	s16, r0
 800b430:	2101      	movs	r1, #1
 800b432:	4620      	mov	r0, r4
 800b434:	f000 fc5c 	bl	800bcf0 <__i2b>
 800b438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	4606      	mov	r6, r0
 800b43e:	f340 8088 	ble.w	800b552 <_dtoa_r+0x8c2>
 800b442:	461a      	mov	r2, r3
 800b444:	4601      	mov	r1, r0
 800b446:	4620      	mov	r0, r4
 800b448:	f000 fd12 	bl	800be70 <__pow5mult>
 800b44c:	9b06      	ldr	r3, [sp, #24]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	4606      	mov	r6, r0
 800b452:	f340 8081 	ble.w	800b558 <_dtoa_r+0x8c8>
 800b456:	f04f 0800 	mov.w	r8, #0
 800b45a:	6933      	ldr	r3, [r6, #16]
 800b45c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b460:	6918      	ldr	r0, [r3, #16]
 800b462:	f000 fbf5 	bl	800bc50 <__hi0bits>
 800b466:	f1c0 0020 	rsb	r0, r0, #32
 800b46a:	9b05      	ldr	r3, [sp, #20]
 800b46c:	4418      	add	r0, r3
 800b46e:	f010 001f 	ands.w	r0, r0, #31
 800b472:	f000 8092 	beq.w	800b59a <_dtoa_r+0x90a>
 800b476:	f1c0 0320 	rsb	r3, r0, #32
 800b47a:	2b04      	cmp	r3, #4
 800b47c:	f340 808a 	ble.w	800b594 <_dtoa_r+0x904>
 800b480:	f1c0 001c 	rsb	r0, r0, #28
 800b484:	9b04      	ldr	r3, [sp, #16]
 800b486:	4403      	add	r3, r0
 800b488:	9304      	str	r3, [sp, #16]
 800b48a:	9b05      	ldr	r3, [sp, #20]
 800b48c:	4403      	add	r3, r0
 800b48e:	4405      	add	r5, r0
 800b490:	9305      	str	r3, [sp, #20]
 800b492:	9b04      	ldr	r3, [sp, #16]
 800b494:	2b00      	cmp	r3, #0
 800b496:	dd07      	ble.n	800b4a8 <_dtoa_r+0x818>
 800b498:	ee18 1a10 	vmov	r1, s16
 800b49c:	461a      	mov	r2, r3
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f000 fd40 	bl	800bf24 <__lshift>
 800b4a4:	ee08 0a10 	vmov	s16, r0
 800b4a8:	9b05      	ldr	r3, [sp, #20]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	dd05      	ble.n	800b4ba <_dtoa_r+0x82a>
 800b4ae:	4631      	mov	r1, r6
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f000 fd36 	bl	800bf24 <__lshift>
 800b4b8:	4606      	mov	r6, r0
 800b4ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d06e      	beq.n	800b59e <_dtoa_r+0x90e>
 800b4c0:	ee18 0a10 	vmov	r0, s16
 800b4c4:	4631      	mov	r1, r6
 800b4c6:	f000 fd9d 	bl	800c004 <__mcmp>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	da67      	bge.n	800b59e <_dtoa_r+0x90e>
 800b4ce:	9b00      	ldr	r3, [sp, #0]
 800b4d0:	3b01      	subs	r3, #1
 800b4d2:	ee18 1a10 	vmov	r1, s16
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	220a      	movs	r2, #10
 800b4da:	2300      	movs	r3, #0
 800b4dc:	4620      	mov	r0, r4
 800b4de:	f000 fb71 	bl	800bbc4 <__multadd>
 800b4e2:	9b08      	ldr	r3, [sp, #32]
 800b4e4:	ee08 0a10 	vmov	s16, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f000 81b1 	beq.w	800b850 <_dtoa_r+0xbc0>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	4639      	mov	r1, r7
 800b4f2:	220a      	movs	r2, #10
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f000 fb65 	bl	800bbc4 <__multadd>
 800b4fa:	9b02      	ldr	r3, [sp, #8]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	4607      	mov	r7, r0
 800b500:	f300 808e 	bgt.w	800b620 <_dtoa_r+0x990>
 800b504:	9b06      	ldr	r3, [sp, #24]
 800b506:	2b02      	cmp	r3, #2
 800b508:	dc51      	bgt.n	800b5ae <_dtoa_r+0x91e>
 800b50a:	e089      	b.n	800b620 <_dtoa_r+0x990>
 800b50c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b50e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b512:	e74b      	b.n	800b3ac <_dtoa_r+0x71c>
 800b514:	9b03      	ldr	r3, [sp, #12]
 800b516:	1e5e      	subs	r6, r3, #1
 800b518:	9b07      	ldr	r3, [sp, #28]
 800b51a:	42b3      	cmp	r3, r6
 800b51c:	bfbf      	itttt	lt
 800b51e:	9b07      	ldrlt	r3, [sp, #28]
 800b520:	9607      	strlt	r6, [sp, #28]
 800b522:	1af2      	sublt	r2, r6, r3
 800b524:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b526:	bfb6      	itet	lt
 800b528:	189b      	addlt	r3, r3, r2
 800b52a:	1b9e      	subge	r6, r3, r6
 800b52c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b52e:	9b03      	ldr	r3, [sp, #12]
 800b530:	bfb8      	it	lt
 800b532:	2600      	movlt	r6, #0
 800b534:	2b00      	cmp	r3, #0
 800b536:	bfb7      	itett	lt
 800b538:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b53c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b540:	1a9d      	sublt	r5, r3, r2
 800b542:	2300      	movlt	r3, #0
 800b544:	e734      	b.n	800b3b0 <_dtoa_r+0x720>
 800b546:	9e07      	ldr	r6, [sp, #28]
 800b548:	9d04      	ldr	r5, [sp, #16]
 800b54a:	9f08      	ldr	r7, [sp, #32]
 800b54c:	e73b      	b.n	800b3c6 <_dtoa_r+0x736>
 800b54e:	9a07      	ldr	r2, [sp, #28]
 800b550:	e767      	b.n	800b422 <_dtoa_r+0x792>
 800b552:	9b06      	ldr	r3, [sp, #24]
 800b554:	2b01      	cmp	r3, #1
 800b556:	dc18      	bgt.n	800b58a <_dtoa_r+0x8fa>
 800b558:	f1ba 0f00 	cmp.w	sl, #0
 800b55c:	d115      	bne.n	800b58a <_dtoa_r+0x8fa>
 800b55e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b562:	b993      	cbnz	r3, 800b58a <_dtoa_r+0x8fa>
 800b564:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b568:	0d1b      	lsrs	r3, r3, #20
 800b56a:	051b      	lsls	r3, r3, #20
 800b56c:	b183      	cbz	r3, 800b590 <_dtoa_r+0x900>
 800b56e:	9b04      	ldr	r3, [sp, #16]
 800b570:	3301      	adds	r3, #1
 800b572:	9304      	str	r3, [sp, #16]
 800b574:	9b05      	ldr	r3, [sp, #20]
 800b576:	3301      	adds	r3, #1
 800b578:	9305      	str	r3, [sp, #20]
 800b57a:	f04f 0801 	mov.w	r8, #1
 800b57e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b580:	2b00      	cmp	r3, #0
 800b582:	f47f af6a 	bne.w	800b45a <_dtoa_r+0x7ca>
 800b586:	2001      	movs	r0, #1
 800b588:	e76f      	b.n	800b46a <_dtoa_r+0x7da>
 800b58a:	f04f 0800 	mov.w	r8, #0
 800b58e:	e7f6      	b.n	800b57e <_dtoa_r+0x8ee>
 800b590:	4698      	mov	r8, r3
 800b592:	e7f4      	b.n	800b57e <_dtoa_r+0x8ee>
 800b594:	f43f af7d 	beq.w	800b492 <_dtoa_r+0x802>
 800b598:	4618      	mov	r0, r3
 800b59a:	301c      	adds	r0, #28
 800b59c:	e772      	b.n	800b484 <_dtoa_r+0x7f4>
 800b59e:	9b03      	ldr	r3, [sp, #12]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	dc37      	bgt.n	800b614 <_dtoa_r+0x984>
 800b5a4:	9b06      	ldr	r3, [sp, #24]
 800b5a6:	2b02      	cmp	r3, #2
 800b5a8:	dd34      	ble.n	800b614 <_dtoa_r+0x984>
 800b5aa:	9b03      	ldr	r3, [sp, #12]
 800b5ac:	9302      	str	r3, [sp, #8]
 800b5ae:	9b02      	ldr	r3, [sp, #8]
 800b5b0:	b96b      	cbnz	r3, 800b5ce <_dtoa_r+0x93e>
 800b5b2:	4631      	mov	r1, r6
 800b5b4:	2205      	movs	r2, #5
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f000 fb04 	bl	800bbc4 <__multadd>
 800b5bc:	4601      	mov	r1, r0
 800b5be:	4606      	mov	r6, r0
 800b5c0:	ee18 0a10 	vmov	r0, s16
 800b5c4:	f000 fd1e 	bl	800c004 <__mcmp>
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	f73f adbb 	bgt.w	800b144 <_dtoa_r+0x4b4>
 800b5ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5d0:	9d01      	ldr	r5, [sp, #4]
 800b5d2:	43db      	mvns	r3, r3
 800b5d4:	9300      	str	r3, [sp, #0]
 800b5d6:	f04f 0800 	mov.w	r8, #0
 800b5da:	4631      	mov	r1, r6
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f000 facf 	bl	800bb80 <_Bfree>
 800b5e2:	2f00      	cmp	r7, #0
 800b5e4:	f43f aea4 	beq.w	800b330 <_dtoa_r+0x6a0>
 800b5e8:	f1b8 0f00 	cmp.w	r8, #0
 800b5ec:	d005      	beq.n	800b5fa <_dtoa_r+0x96a>
 800b5ee:	45b8      	cmp	r8, r7
 800b5f0:	d003      	beq.n	800b5fa <_dtoa_r+0x96a>
 800b5f2:	4641      	mov	r1, r8
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	f000 fac3 	bl	800bb80 <_Bfree>
 800b5fa:	4639      	mov	r1, r7
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f000 fabf 	bl	800bb80 <_Bfree>
 800b602:	e695      	b.n	800b330 <_dtoa_r+0x6a0>
 800b604:	2600      	movs	r6, #0
 800b606:	4637      	mov	r7, r6
 800b608:	e7e1      	b.n	800b5ce <_dtoa_r+0x93e>
 800b60a:	9700      	str	r7, [sp, #0]
 800b60c:	4637      	mov	r7, r6
 800b60e:	e599      	b.n	800b144 <_dtoa_r+0x4b4>
 800b610:	40240000 	.word	0x40240000
 800b614:	9b08      	ldr	r3, [sp, #32]
 800b616:	2b00      	cmp	r3, #0
 800b618:	f000 80ca 	beq.w	800b7b0 <_dtoa_r+0xb20>
 800b61c:	9b03      	ldr	r3, [sp, #12]
 800b61e:	9302      	str	r3, [sp, #8]
 800b620:	2d00      	cmp	r5, #0
 800b622:	dd05      	ble.n	800b630 <_dtoa_r+0x9a0>
 800b624:	4639      	mov	r1, r7
 800b626:	462a      	mov	r2, r5
 800b628:	4620      	mov	r0, r4
 800b62a:	f000 fc7b 	bl	800bf24 <__lshift>
 800b62e:	4607      	mov	r7, r0
 800b630:	f1b8 0f00 	cmp.w	r8, #0
 800b634:	d05b      	beq.n	800b6ee <_dtoa_r+0xa5e>
 800b636:	6879      	ldr	r1, [r7, #4]
 800b638:	4620      	mov	r0, r4
 800b63a:	f000 fa61 	bl	800bb00 <_Balloc>
 800b63e:	4605      	mov	r5, r0
 800b640:	b928      	cbnz	r0, 800b64e <_dtoa_r+0x9be>
 800b642:	4b87      	ldr	r3, [pc, #540]	; (800b860 <_dtoa_r+0xbd0>)
 800b644:	4602      	mov	r2, r0
 800b646:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b64a:	f7ff bb3b 	b.w	800acc4 <_dtoa_r+0x34>
 800b64e:	693a      	ldr	r2, [r7, #16]
 800b650:	3202      	adds	r2, #2
 800b652:	0092      	lsls	r2, r2, #2
 800b654:	f107 010c 	add.w	r1, r7, #12
 800b658:	300c      	adds	r0, #12
 800b65a:	f7fe faff 	bl	8009c5c <memcpy>
 800b65e:	2201      	movs	r2, #1
 800b660:	4629      	mov	r1, r5
 800b662:	4620      	mov	r0, r4
 800b664:	f000 fc5e 	bl	800bf24 <__lshift>
 800b668:	9b01      	ldr	r3, [sp, #4]
 800b66a:	f103 0901 	add.w	r9, r3, #1
 800b66e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b672:	4413      	add	r3, r2
 800b674:	9305      	str	r3, [sp, #20]
 800b676:	f00a 0301 	and.w	r3, sl, #1
 800b67a:	46b8      	mov	r8, r7
 800b67c:	9304      	str	r3, [sp, #16]
 800b67e:	4607      	mov	r7, r0
 800b680:	4631      	mov	r1, r6
 800b682:	ee18 0a10 	vmov	r0, s16
 800b686:	f7ff fa77 	bl	800ab78 <quorem>
 800b68a:	4641      	mov	r1, r8
 800b68c:	9002      	str	r0, [sp, #8]
 800b68e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b692:	ee18 0a10 	vmov	r0, s16
 800b696:	f000 fcb5 	bl	800c004 <__mcmp>
 800b69a:	463a      	mov	r2, r7
 800b69c:	9003      	str	r0, [sp, #12]
 800b69e:	4631      	mov	r1, r6
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f000 fccb 	bl	800c03c <__mdiff>
 800b6a6:	68c2      	ldr	r2, [r0, #12]
 800b6a8:	f109 3bff 	add.w	fp, r9, #4294967295
 800b6ac:	4605      	mov	r5, r0
 800b6ae:	bb02      	cbnz	r2, 800b6f2 <_dtoa_r+0xa62>
 800b6b0:	4601      	mov	r1, r0
 800b6b2:	ee18 0a10 	vmov	r0, s16
 800b6b6:	f000 fca5 	bl	800c004 <__mcmp>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	4629      	mov	r1, r5
 800b6be:	4620      	mov	r0, r4
 800b6c0:	9207      	str	r2, [sp, #28]
 800b6c2:	f000 fa5d 	bl	800bb80 <_Bfree>
 800b6c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b6ca:	ea43 0102 	orr.w	r1, r3, r2
 800b6ce:	9b04      	ldr	r3, [sp, #16]
 800b6d0:	430b      	orrs	r3, r1
 800b6d2:	464d      	mov	r5, r9
 800b6d4:	d10f      	bne.n	800b6f6 <_dtoa_r+0xa66>
 800b6d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b6da:	d02a      	beq.n	800b732 <_dtoa_r+0xaa2>
 800b6dc:	9b03      	ldr	r3, [sp, #12]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	dd02      	ble.n	800b6e8 <_dtoa_r+0xa58>
 800b6e2:	9b02      	ldr	r3, [sp, #8]
 800b6e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b6e8:	f88b a000 	strb.w	sl, [fp]
 800b6ec:	e775      	b.n	800b5da <_dtoa_r+0x94a>
 800b6ee:	4638      	mov	r0, r7
 800b6f0:	e7ba      	b.n	800b668 <_dtoa_r+0x9d8>
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	e7e2      	b.n	800b6bc <_dtoa_r+0xa2c>
 800b6f6:	9b03      	ldr	r3, [sp, #12]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	db04      	blt.n	800b706 <_dtoa_r+0xa76>
 800b6fc:	9906      	ldr	r1, [sp, #24]
 800b6fe:	430b      	orrs	r3, r1
 800b700:	9904      	ldr	r1, [sp, #16]
 800b702:	430b      	orrs	r3, r1
 800b704:	d122      	bne.n	800b74c <_dtoa_r+0xabc>
 800b706:	2a00      	cmp	r2, #0
 800b708:	ddee      	ble.n	800b6e8 <_dtoa_r+0xa58>
 800b70a:	ee18 1a10 	vmov	r1, s16
 800b70e:	2201      	movs	r2, #1
 800b710:	4620      	mov	r0, r4
 800b712:	f000 fc07 	bl	800bf24 <__lshift>
 800b716:	4631      	mov	r1, r6
 800b718:	ee08 0a10 	vmov	s16, r0
 800b71c:	f000 fc72 	bl	800c004 <__mcmp>
 800b720:	2800      	cmp	r0, #0
 800b722:	dc03      	bgt.n	800b72c <_dtoa_r+0xa9c>
 800b724:	d1e0      	bne.n	800b6e8 <_dtoa_r+0xa58>
 800b726:	f01a 0f01 	tst.w	sl, #1
 800b72a:	d0dd      	beq.n	800b6e8 <_dtoa_r+0xa58>
 800b72c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b730:	d1d7      	bne.n	800b6e2 <_dtoa_r+0xa52>
 800b732:	2339      	movs	r3, #57	; 0x39
 800b734:	f88b 3000 	strb.w	r3, [fp]
 800b738:	462b      	mov	r3, r5
 800b73a:	461d      	mov	r5, r3
 800b73c:	3b01      	subs	r3, #1
 800b73e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b742:	2a39      	cmp	r2, #57	; 0x39
 800b744:	d071      	beq.n	800b82a <_dtoa_r+0xb9a>
 800b746:	3201      	adds	r2, #1
 800b748:	701a      	strb	r2, [r3, #0]
 800b74a:	e746      	b.n	800b5da <_dtoa_r+0x94a>
 800b74c:	2a00      	cmp	r2, #0
 800b74e:	dd07      	ble.n	800b760 <_dtoa_r+0xad0>
 800b750:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b754:	d0ed      	beq.n	800b732 <_dtoa_r+0xaa2>
 800b756:	f10a 0301 	add.w	r3, sl, #1
 800b75a:	f88b 3000 	strb.w	r3, [fp]
 800b75e:	e73c      	b.n	800b5da <_dtoa_r+0x94a>
 800b760:	9b05      	ldr	r3, [sp, #20]
 800b762:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b766:	4599      	cmp	r9, r3
 800b768:	d047      	beq.n	800b7fa <_dtoa_r+0xb6a>
 800b76a:	ee18 1a10 	vmov	r1, s16
 800b76e:	2300      	movs	r3, #0
 800b770:	220a      	movs	r2, #10
 800b772:	4620      	mov	r0, r4
 800b774:	f000 fa26 	bl	800bbc4 <__multadd>
 800b778:	45b8      	cmp	r8, r7
 800b77a:	ee08 0a10 	vmov	s16, r0
 800b77e:	f04f 0300 	mov.w	r3, #0
 800b782:	f04f 020a 	mov.w	r2, #10
 800b786:	4641      	mov	r1, r8
 800b788:	4620      	mov	r0, r4
 800b78a:	d106      	bne.n	800b79a <_dtoa_r+0xb0a>
 800b78c:	f000 fa1a 	bl	800bbc4 <__multadd>
 800b790:	4680      	mov	r8, r0
 800b792:	4607      	mov	r7, r0
 800b794:	f109 0901 	add.w	r9, r9, #1
 800b798:	e772      	b.n	800b680 <_dtoa_r+0x9f0>
 800b79a:	f000 fa13 	bl	800bbc4 <__multadd>
 800b79e:	4639      	mov	r1, r7
 800b7a0:	4680      	mov	r8, r0
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	220a      	movs	r2, #10
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f000 fa0c 	bl	800bbc4 <__multadd>
 800b7ac:	4607      	mov	r7, r0
 800b7ae:	e7f1      	b.n	800b794 <_dtoa_r+0xb04>
 800b7b0:	9b03      	ldr	r3, [sp, #12]
 800b7b2:	9302      	str	r3, [sp, #8]
 800b7b4:	9d01      	ldr	r5, [sp, #4]
 800b7b6:	ee18 0a10 	vmov	r0, s16
 800b7ba:	4631      	mov	r1, r6
 800b7bc:	f7ff f9dc 	bl	800ab78 <quorem>
 800b7c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b7c4:	9b01      	ldr	r3, [sp, #4]
 800b7c6:	f805 ab01 	strb.w	sl, [r5], #1
 800b7ca:	1aea      	subs	r2, r5, r3
 800b7cc:	9b02      	ldr	r3, [sp, #8]
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	dd09      	ble.n	800b7e6 <_dtoa_r+0xb56>
 800b7d2:	ee18 1a10 	vmov	r1, s16
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	220a      	movs	r2, #10
 800b7da:	4620      	mov	r0, r4
 800b7dc:	f000 f9f2 	bl	800bbc4 <__multadd>
 800b7e0:	ee08 0a10 	vmov	s16, r0
 800b7e4:	e7e7      	b.n	800b7b6 <_dtoa_r+0xb26>
 800b7e6:	9b02      	ldr	r3, [sp, #8]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	bfc8      	it	gt
 800b7ec:	461d      	movgt	r5, r3
 800b7ee:	9b01      	ldr	r3, [sp, #4]
 800b7f0:	bfd8      	it	le
 800b7f2:	2501      	movle	r5, #1
 800b7f4:	441d      	add	r5, r3
 800b7f6:	f04f 0800 	mov.w	r8, #0
 800b7fa:	ee18 1a10 	vmov	r1, s16
 800b7fe:	2201      	movs	r2, #1
 800b800:	4620      	mov	r0, r4
 800b802:	f000 fb8f 	bl	800bf24 <__lshift>
 800b806:	4631      	mov	r1, r6
 800b808:	ee08 0a10 	vmov	s16, r0
 800b80c:	f000 fbfa 	bl	800c004 <__mcmp>
 800b810:	2800      	cmp	r0, #0
 800b812:	dc91      	bgt.n	800b738 <_dtoa_r+0xaa8>
 800b814:	d102      	bne.n	800b81c <_dtoa_r+0xb8c>
 800b816:	f01a 0f01 	tst.w	sl, #1
 800b81a:	d18d      	bne.n	800b738 <_dtoa_r+0xaa8>
 800b81c:	462b      	mov	r3, r5
 800b81e:	461d      	mov	r5, r3
 800b820:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b824:	2a30      	cmp	r2, #48	; 0x30
 800b826:	d0fa      	beq.n	800b81e <_dtoa_r+0xb8e>
 800b828:	e6d7      	b.n	800b5da <_dtoa_r+0x94a>
 800b82a:	9a01      	ldr	r2, [sp, #4]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d184      	bne.n	800b73a <_dtoa_r+0xaaa>
 800b830:	9b00      	ldr	r3, [sp, #0]
 800b832:	3301      	adds	r3, #1
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	2331      	movs	r3, #49	; 0x31
 800b838:	7013      	strb	r3, [r2, #0]
 800b83a:	e6ce      	b.n	800b5da <_dtoa_r+0x94a>
 800b83c:	4b09      	ldr	r3, [pc, #36]	; (800b864 <_dtoa_r+0xbd4>)
 800b83e:	f7ff ba95 	b.w	800ad6c <_dtoa_r+0xdc>
 800b842:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b844:	2b00      	cmp	r3, #0
 800b846:	f47f aa6e 	bne.w	800ad26 <_dtoa_r+0x96>
 800b84a:	4b07      	ldr	r3, [pc, #28]	; (800b868 <_dtoa_r+0xbd8>)
 800b84c:	f7ff ba8e 	b.w	800ad6c <_dtoa_r+0xdc>
 800b850:	9b02      	ldr	r3, [sp, #8]
 800b852:	2b00      	cmp	r3, #0
 800b854:	dcae      	bgt.n	800b7b4 <_dtoa_r+0xb24>
 800b856:	9b06      	ldr	r3, [sp, #24]
 800b858:	2b02      	cmp	r3, #2
 800b85a:	f73f aea8 	bgt.w	800b5ae <_dtoa_r+0x91e>
 800b85e:	e7a9      	b.n	800b7b4 <_dtoa_r+0xb24>
 800b860:	0800c837 	.word	0x0800c837
 800b864:	0800c794 	.word	0x0800c794
 800b868:	0800c7b8 	.word	0x0800c7b8

0800b86c <__sflush_r>:
 800b86c:	898a      	ldrh	r2, [r1, #12]
 800b86e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b872:	4605      	mov	r5, r0
 800b874:	0710      	lsls	r0, r2, #28
 800b876:	460c      	mov	r4, r1
 800b878:	d458      	bmi.n	800b92c <__sflush_r+0xc0>
 800b87a:	684b      	ldr	r3, [r1, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	dc05      	bgt.n	800b88c <__sflush_r+0x20>
 800b880:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b882:	2b00      	cmp	r3, #0
 800b884:	dc02      	bgt.n	800b88c <__sflush_r+0x20>
 800b886:	2000      	movs	r0, #0
 800b888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b88c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b88e:	2e00      	cmp	r6, #0
 800b890:	d0f9      	beq.n	800b886 <__sflush_r+0x1a>
 800b892:	2300      	movs	r3, #0
 800b894:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b898:	682f      	ldr	r7, [r5, #0]
 800b89a:	602b      	str	r3, [r5, #0]
 800b89c:	d032      	beq.n	800b904 <__sflush_r+0x98>
 800b89e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8a0:	89a3      	ldrh	r3, [r4, #12]
 800b8a2:	075a      	lsls	r2, r3, #29
 800b8a4:	d505      	bpl.n	800b8b2 <__sflush_r+0x46>
 800b8a6:	6863      	ldr	r3, [r4, #4]
 800b8a8:	1ac0      	subs	r0, r0, r3
 800b8aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8ac:	b10b      	cbz	r3, 800b8b2 <__sflush_r+0x46>
 800b8ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8b0:	1ac0      	subs	r0, r0, r3
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8b8:	6a21      	ldr	r1, [r4, #32]
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	47b0      	blx	r6
 800b8be:	1c43      	adds	r3, r0, #1
 800b8c0:	89a3      	ldrh	r3, [r4, #12]
 800b8c2:	d106      	bne.n	800b8d2 <__sflush_r+0x66>
 800b8c4:	6829      	ldr	r1, [r5, #0]
 800b8c6:	291d      	cmp	r1, #29
 800b8c8:	d82c      	bhi.n	800b924 <__sflush_r+0xb8>
 800b8ca:	4a2a      	ldr	r2, [pc, #168]	; (800b974 <__sflush_r+0x108>)
 800b8cc:	40ca      	lsrs	r2, r1
 800b8ce:	07d6      	lsls	r6, r2, #31
 800b8d0:	d528      	bpl.n	800b924 <__sflush_r+0xb8>
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	6062      	str	r2, [r4, #4]
 800b8d6:	04d9      	lsls	r1, r3, #19
 800b8d8:	6922      	ldr	r2, [r4, #16]
 800b8da:	6022      	str	r2, [r4, #0]
 800b8dc:	d504      	bpl.n	800b8e8 <__sflush_r+0x7c>
 800b8de:	1c42      	adds	r2, r0, #1
 800b8e0:	d101      	bne.n	800b8e6 <__sflush_r+0x7a>
 800b8e2:	682b      	ldr	r3, [r5, #0]
 800b8e4:	b903      	cbnz	r3, 800b8e8 <__sflush_r+0x7c>
 800b8e6:	6560      	str	r0, [r4, #84]	; 0x54
 800b8e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8ea:	602f      	str	r7, [r5, #0]
 800b8ec:	2900      	cmp	r1, #0
 800b8ee:	d0ca      	beq.n	800b886 <__sflush_r+0x1a>
 800b8f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8f4:	4299      	cmp	r1, r3
 800b8f6:	d002      	beq.n	800b8fe <__sflush_r+0x92>
 800b8f8:	4628      	mov	r0, r5
 800b8fa:	f7fe f9c5 	bl	8009c88 <_free_r>
 800b8fe:	2000      	movs	r0, #0
 800b900:	6360      	str	r0, [r4, #52]	; 0x34
 800b902:	e7c1      	b.n	800b888 <__sflush_r+0x1c>
 800b904:	6a21      	ldr	r1, [r4, #32]
 800b906:	2301      	movs	r3, #1
 800b908:	4628      	mov	r0, r5
 800b90a:	47b0      	blx	r6
 800b90c:	1c41      	adds	r1, r0, #1
 800b90e:	d1c7      	bne.n	800b8a0 <__sflush_r+0x34>
 800b910:	682b      	ldr	r3, [r5, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d0c4      	beq.n	800b8a0 <__sflush_r+0x34>
 800b916:	2b1d      	cmp	r3, #29
 800b918:	d001      	beq.n	800b91e <__sflush_r+0xb2>
 800b91a:	2b16      	cmp	r3, #22
 800b91c:	d101      	bne.n	800b922 <__sflush_r+0xb6>
 800b91e:	602f      	str	r7, [r5, #0]
 800b920:	e7b1      	b.n	800b886 <__sflush_r+0x1a>
 800b922:	89a3      	ldrh	r3, [r4, #12]
 800b924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b928:	81a3      	strh	r3, [r4, #12]
 800b92a:	e7ad      	b.n	800b888 <__sflush_r+0x1c>
 800b92c:	690f      	ldr	r7, [r1, #16]
 800b92e:	2f00      	cmp	r7, #0
 800b930:	d0a9      	beq.n	800b886 <__sflush_r+0x1a>
 800b932:	0793      	lsls	r3, r2, #30
 800b934:	680e      	ldr	r6, [r1, #0]
 800b936:	bf08      	it	eq
 800b938:	694b      	ldreq	r3, [r1, #20]
 800b93a:	600f      	str	r7, [r1, #0]
 800b93c:	bf18      	it	ne
 800b93e:	2300      	movne	r3, #0
 800b940:	eba6 0807 	sub.w	r8, r6, r7
 800b944:	608b      	str	r3, [r1, #8]
 800b946:	f1b8 0f00 	cmp.w	r8, #0
 800b94a:	dd9c      	ble.n	800b886 <__sflush_r+0x1a>
 800b94c:	6a21      	ldr	r1, [r4, #32]
 800b94e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b950:	4643      	mov	r3, r8
 800b952:	463a      	mov	r2, r7
 800b954:	4628      	mov	r0, r5
 800b956:	47b0      	blx	r6
 800b958:	2800      	cmp	r0, #0
 800b95a:	dc06      	bgt.n	800b96a <__sflush_r+0xfe>
 800b95c:	89a3      	ldrh	r3, [r4, #12]
 800b95e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b962:	81a3      	strh	r3, [r4, #12]
 800b964:	f04f 30ff 	mov.w	r0, #4294967295
 800b968:	e78e      	b.n	800b888 <__sflush_r+0x1c>
 800b96a:	4407      	add	r7, r0
 800b96c:	eba8 0800 	sub.w	r8, r8, r0
 800b970:	e7e9      	b.n	800b946 <__sflush_r+0xda>
 800b972:	bf00      	nop
 800b974:	20400001 	.word	0x20400001

0800b978 <_fflush_r>:
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	690b      	ldr	r3, [r1, #16]
 800b97c:	4605      	mov	r5, r0
 800b97e:	460c      	mov	r4, r1
 800b980:	b913      	cbnz	r3, 800b988 <_fflush_r+0x10>
 800b982:	2500      	movs	r5, #0
 800b984:	4628      	mov	r0, r5
 800b986:	bd38      	pop	{r3, r4, r5, pc}
 800b988:	b118      	cbz	r0, 800b992 <_fflush_r+0x1a>
 800b98a:	6983      	ldr	r3, [r0, #24]
 800b98c:	b90b      	cbnz	r3, 800b992 <_fflush_r+0x1a>
 800b98e:	f7fe f897 	bl	8009ac0 <__sinit>
 800b992:	4b14      	ldr	r3, [pc, #80]	; (800b9e4 <_fflush_r+0x6c>)
 800b994:	429c      	cmp	r4, r3
 800b996:	d11b      	bne.n	800b9d0 <_fflush_r+0x58>
 800b998:	686c      	ldr	r4, [r5, #4]
 800b99a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d0ef      	beq.n	800b982 <_fflush_r+0xa>
 800b9a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b9a4:	07d0      	lsls	r0, r2, #31
 800b9a6:	d404      	bmi.n	800b9b2 <_fflush_r+0x3a>
 800b9a8:	0599      	lsls	r1, r3, #22
 800b9aa:	d402      	bmi.n	800b9b2 <_fflush_r+0x3a>
 800b9ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9ae:	f7fe f94a 	bl	8009c46 <__retarget_lock_acquire_recursive>
 800b9b2:	4628      	mov	r0, r5
 800b9b4:	4621      	mov	r1, r4
 800b9b6:	f7ff ff59 	bl	800b86c <__sflush_r>
 800b9ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9bc:	07da      	lsls	r2, r3, #31
 800b9be:	4605      	mov	r5, r0
 800b9c0:	d4e0      	bmi.n	800b984 <_fflush_r+0xc>
 800b9c2:	89a3      	ldrh	r3, [r4, #12]
 800b9c4:	059b      	lsls	r3, r3, #22
 800b9c6:	d4dd      	bmi.n	800b984 <_fflush_r+0xc>
 800b9c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9ca:	f7fe f93d 	bl	8009c48 <__retarget_lock_release_recursive>
 800b9ce:	e7d9      	b.n	800b984 <_fflush_r+0xc>
 800b9d0:	4b05      	ldr	r3, [pc, #20]	; (800b9e8 <_fflush_r+0x70>)
 800b9d2:	429c      	cmp	r4, r3
 800b9d4:	d101      	bne.n	800b9da <_fflush_r+0x62>
 800b9d6:	68ac      	ldr	r4, [r5, #8]
 800b9d8:	e7df      	b.n	800b99a <_fflush_r+0x22>
 800b9da:	4b04      	ldr	r3, [pc, #16]	; (800b9ec <_fflush_r+0x74>)
 800b9dc:	429c      	cmp	r4, r3
 800b9de:	bf08      	it	eq
 800b9e0:	68ec      	ldreq	r4, [r5, #12]
 800b9e2:	e7da      	b.n	800b99a <_fflush_r+0x22>
 800b9e4:	0800c740 	.word	0x0800c740
 800b9e8:	0800c760 	.word	0x0800c760
 800b9ec:	0800c720 	.word	0x0800c720

0800b9f0 <_localeconv_r>:
 800b9f0:	4800      	ldr	r0, [pc, #0]	; (800b9f4 <_localeconv_r+0x4>)
 800b9f2:	4770      	bx	lr
 800b9f4:	20000164 	.word	0x20000164

0800b9f8 <_lseek_r>:
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	4d07      	ldr	r5, [pc, #28]	; (800ba18 <_lseek_r+0x20>)
 800b9fc:	4604      	mov	r4, r0
 800b9fe:	4608      	mov	r0, r1
 800ba00:	4611      	mov	r1, r2
 800ba02:	2200      	movs	r2, #0
 800ba04:	602a      	str	r2, [r5, #0]
 800ba06:	461a      	mov	r2, r3
 800ba08:	f7f5 fea0 	bl	800174c <_lseek>
 800ba0c:	1c43      	adds	r3, r0, #1
 800ba0e:	d102      	bne.n	800ba16 <_lseek_r+0x1e>
 800ba10:	682b      	ldr	r3, [r5, #0]
 800ba12:	b103      	cbz	r3, 800ba16 <_lseek_r+0x1e>
 800ba14:	6023      	str	r3, [r4, #0]
 800ba16:	bd38      	pop	{r3, r4, r5, pc}
 800ba18:	20005108 	.word	0x20005108

0800ba1c <__swhatbuf_r>:
 800ba1c:	b570      	push	{r4, r5, r6, lr}
 800ba1e:	460e      	mov	r6, r1
 800ba20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba24:	2900      	cmp	r1, #0
 800ba26:	b096      	sub	sp, #88	; 0x58
 800ba28:	4614      	mov	r4, r2
 800ba2a:	461d      	mov	r5, r3
 800ba2c:	da08      	bge.n	800ba40 <__swhatbuf_r+0x24>
 800ba2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ba32:	2200      	movs	r2, #0
 800ba34:	602a      	str	r2, [r5, #0]
 800ba36:	061a      	lsls	r2, r3, #24
 800ba38:	d410      	bmi.n	800ba5c <__swhatbuf_r+0x40>
 800ba3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba3e:	e00e      	b.n	800ba5e <__swhatbuf_r+0x42>
 800ba40:	466a      	mov	r2, sp
 800ba42:	f000 fd93 	bl	800c56c <_fstat_r>
 800ba46:	2800      	cmp	r0, #0
 800ba48:	dbf1      	blt.n	800ba2e <__swhatbuf_r+0x12>
 800ba4a:	9a01      	ldr	r2, [sp, #4]
 800ba4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba54:	425a      	negs	r2, r3
 800ba56:	415a      	adcs	r2, r3
 800ba58:	602a      	str	r2, [r5, #0]
 800ba5a:	e7ee      	b.n	800ba3a <__swhatbuf_r+0x1e>
 800ba5c:	2340      	movs	r3, #64	; 0x40
 800ba5e:	2000      	movs	r0, #0
 800ba60:	6023      	str	r3, [r4, #0]
 800ba62:	b016      	add	sp, #88	; 0x58
 800ba64:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba68 <__smakebuf_r>:
 800ba68:	898b      	ldrh	r3, [r1, #12]
 800ba6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba6c:	079d      	lsls	r5, r3, #30
 800ba6e:	4606      	mov	r6, r0
 800ba70:	460c      	mov	r4, r1
 800ba72:	d507      	bpl.n	800ba84 <__smakebuf_r+0x1c>
 800ba74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba78:	6023      	str	r3, [r4, #0]
 800ba7a:	6123      	str	r3, [r4, #16]
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	6163      	str	r3, [r4, #20]
 800ba80:	b002      	add	sp, #8
 800ba82:	bd70      	pop	{r4, r5, r6, pc}
 800ba84:	ab01      	add	r3, sp, #4
 800ba86:	466a      	mov	r2, sp
 800ba88:	f7ff ffc8 	bl	800ba1c <__swhatbuf_r>
 800ba8c:	9900      	ldr	r1, [sp, #0]
 800ba8e:	4605      	mov	r5, r0
 800ba90:	4630      	mov	r0, r6
 800ba92:	f7fe f965 	bl	8009d60 <_malloc_r>
 800ba96:	b948      	cbnz	r0, 800baac <__smakebuf_r+0x44>
 800ba98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba9c:	059a      	lsls	r2, r3, #22
 800ba9e:	d4ef      	bmi.n	800ba80 <__smakebuf_r+0x18>
 800baa0:	f023 0303 	bic.w	r3, r3, #3
 800baa4:	f043 0302 	orr.w	r3, r3, #2
 800baa8:	81a3      	strh	r3, [r4, #12]
 800baaa:	e7e3      	b.n	800ba74 <__smakebuf_r+0xc>
 800baac:	4b0d      	ldr	r3, [pc, #52]	; (800bae4 <__smakebuf_r+0x7c>)
 800baae:	62b3      	str	r3, [r6, #40]	; 0x28
 800bab0:	89a3      	ldrh	r3, [r4, #12]
 800bab2:	6020      	str	r0, [r4, #0]
 800bab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bab8:	81a3      	strh	r3, [r4, #12]
 800baba:	9b00      	ldr	r3, [sp, #0]
 800babc:	6163      	str	r3, [r4, #20]
 800babe:	9b01      	ldr	r3, [sp, #4]
 800bac0:	6120      	str	r0, [r4, #16]
 800bac2:	b15b      	cbz	r3, 800badc <__smakebuf_r+0x74>
 800bac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bac8:	4630      	mov	r0, r6
 800baca:	f000 fd61 	bl	800c590 <_isatty_r>
 800bace:	b128      	cbz	r0, 800badc <__smakebuf_r+0x74>
 800bad0:	89a3      	ldrh	r3, [r4, #12]
 800bad2:	f023 0303 	bic.w	r3, r3, #3
 800bad6:	f043 0301 	orr.w	r3, r3, #1
 800bada:	81a3      	strh	r3, [r4, #12]
 800badc:	89a0      	ldrh	r0, [r4, #12]
 800bade:	4305      	orrs	r5, r0
 800bae0:	81a5      	strh	r5, [r4, #12]
 800bae2:	e7cd      	b.n	800ba80 <__smakebuf_r+0x18>
 800bae4:	08009a59 	.word	0x08009a59

0800bae8 <__malloc_lock>:
 800bae8:	4801      	ldr	r0, [pc, #4]	; (800baf0 <__malloc_lock+0x8>)
 800baea:	f7fe b8ac 	b.w	8009c46 <__retarget_lock_acquire_recursive>
 800baee:	bf00      	nop
 800baf0:	200050fc 	.word	0x200050fc

0800baf4 <__malloc_unlock>:
 800baf4:	4801      	ldr	r0, [pc, #4]	; (800bafc <__malloc_unlock+0x8>)
 800baf6:	f7fe b8a7 	b.w	8009c48 <__retarget_lock_release_recursive>
 800bafa:	bf00      	nop
 800bafc:	200050fc 	.word	0x200050fc

0800bb00 <_Balloc>:
 800bb00:	b570      	push	{r4, r5, r6, lr}
 800bb02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb04:	4604      	mov	r4, r0
 800bb06:	460d      	mov	r5, r1
 800bb08:	b976      	cbnz	r6, 800bb28 <_Balloc+0x28>
 800bb0a:	2010      	movs	r0, #16
 800bb0c:	f7fe f89e 	bl	8009c4c <malloc>
 800bb10:	4602      	mov	r2, r0
 800bb12:	6260      	str	r0, [r4, #36]	; 0x24
 800bb14:	b920      	cbnz	r0, 800bb20 <_Balloc+0x20>
 800bb16:	4b18      	ldr	r3, [pc, #96]	; (800bb78 <_Balloc+0x78>)
 800bb18:	4818      	ldr	r0, [pc, #96]	; (800bb7c <_Balloc+0x7c>)
 800bb1a:	2166      	movs	r1, #102	; 0x66
 800bb1c:	f000 fcf6 	bl	800c50c <__assert_func>
 800bb20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb24:	6006      	str	r6, [r0, #0]
 800bb26:	60c6      	str	r6, [r0, #12]
 800bb28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb2a:	68f3      	ldr	r3, [r6, #12]
 800bb2c:	b183      	cbz	r3, 800bb50 <_Balloc+0x50>
 800bb2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb36:	b9b8      	cbnz	r0, 800bb68 <_Balloc+0x68>
 800bb38:	2101      	movs	r1, #1
 800bb3a:	fa01 f605 	lsl.w	r6, r1, r5
 800bb3e:	1d72      	adds	r2, r6, #5
 800bb40:	0092      	lsls	r2, r2, #2
 800bb42:	4620      	mov	r0, r4
 800bb44:	f000 fb60 	bl	800c208 <_calloc_r>
 800bb48:	b160      	cbz	r0, 800bb64 <_Balloc+0x64>
 800bb4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb4e:	e00e      	b.n	800bb6e <_Balloc+0x6e>
 800bb50:	2221      	movs	r2, #33	; 0x21
 800bb52:	2104      	movs	r1, #4
 800bb54:	4620      	mov	r0, r4
 800bb56:	f000 fb57 	bl	800c208 <_calloc_r>
 800bb5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb5c:	60f0      	str	r0, [r6, #12]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1e4      	bne.n	800bb2e <_Balloc+0x2e>
 800bb64:	2000      	movs	r0, #0
 800bb66:	bd70      	pop	{r4, r5, r6, pc}
 800bb68:	6802      	ldr	r2, [r0, #0]
 800bb6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb6e:	2300      	movs	r3, #0
 800bb70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb74:	e7f7      	b.n	800bb66 <_Balloc+0x66>
 800bb76:	bf00      	nop
 800bb78:	0800c7c5 	.word	0x0800c7c5
 800bb7c:	0800c848 	.word	0x0800c848

0800bb80 <_Bfree>:
 800bb80:	b570      	push	{r4, r5, r6, lr}
 800bb82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb84:	4605      	mov	r5, r0
 800bb86:	460c      	mov	r4, r1
 800bb88:	b976      	cbnz	r6, 800bba8 <_Bfree+0x28>
 800bb8a:	2010      	movs	r0, #16
 800bb8c:	f7fe f85e 	bl	8009c4c <malloc>
 800bb90:	4602      	mov	r2, r0
 800bb92:	6268      	str	r0, [r5, #36]	; 0x24
 800bb94:	b920      	cbnz	r0, 800bba0 <_Bfree+0x20>
 800bb96:	4b09      	ldr	r3, [pc, #36]	; (800bbbc <_Bfree+0x3c>)
 800bb98:	4809      	ldr	r0, [pc, #36]	; (800bbc0 <_Bfree+0x40>)
 800bb9a:	218a      	movs	r1, #138	; 0x8a
 800bb9c:	f000 fcb6 	bl	800c50c <__assert_func>
 800bba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bba4:	6006      	str	r6, [r0, #0]
 800bba6:	60c6      	str	r6, [r0, #12]
 800bba8:	b13c      	cbz	r4, 800bbba <_Bfree+0x3a>
 800bbaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bbac:	6862      	ldr	r2, [r4, #4]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbb4:	6021      	str	r1, [r4, #0]
 800bbb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bbba:	bd70      	pop	{r4, r5, r6, pc}
 800bbbc:	0800c7c5 	.word	0x0800c7c5
 800bbc0:	0800c848 	.word	0x0800c848

0800bbc4 <__multadd>:
 800bbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbc8:	690d      	ldr	r5, [r1, #16]
 800bbca:	4607      	mov	r7, r0
 800bbcc:	460c      	mov	r4, r1
 800bbce:	461e      	mov	r6, r3
 800bbd0:	f101 0c14 	add.w	ip, r1, #20
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	f8dc 3000 	ldr.w	r3, [ip]
 800bbda:	b299      	uxth	r1, r3
 800bbdc:	fb02 6101 	mla	r1, r2, r1, r6
 800bbe0:	0c1e      	lsrs	r6, r3, #16
 800bbe2:	0c0b      	lsrs	r3, r1, #16
 800bbe4:	fb02 3306 	mla	r3, r2, r6, r3
 800bbe8:	b289      	uxth	r1, r1
 800bbea:	3001      	adds	r0, #1
 800bbec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bbf0:	4285      	cmp	r5, r0
 800bbf2:	f84c 1b04 	str.w	r1, [ip], #4
 800bbf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bbfa:	dcec      	bgt.n	800bbd6 <__multadd+0x12>
 800bbfc:	b30e      	cbz	r6, 800bc42 <__multadd+0x7e>
 800bbfe:	68a3      	ldr	r3, [r4, #8]
 800bc00:	42ab      	cmp	r3, r5
 800bc02:	dc19      	bgt.n	800bc38 <__multadd+0x74>
 800bc04:	6861      	ldr	r1, [r4, #4]
 800bc06:	4638      	mov	r0, r7
 800bc08:	3101      	adds	r1, #1
 800bc0a:	f7ff ff79 	bl	800bb00 <_Balloc>
 800bc0e:	4680      	mov	r8, r0
 800bc10:	b928      	cbnz	r0, 800bc1e <__multadd+0x5a>
 800bc12:	4602      	mov	r2, r0
 800bc14:	4b0c      	ldr	r3, [pc, #48]	; (800bc48 <__multadd+0x84>)
 800bc16:	480d      	ldr	r0, [pc, #52]	; (800bc4c <__multadd+0x88>)
 800bc18:	21b5      	movs	r1, #181	; 0xb5
 800bc1a:	f000 fc77 	bl	800c50c <__assert_func>
 800bc1e:	6922      	ldr	r2, [r4, #16]
 800bc20:	3202      	adds	r2, #2
 800bc22:	f104 010c 	add.w	r1, r4, #12
 800bc26:	0092      	lsls	r2, r2, #2
 800bc28:	300c      	adds	r0, #12
 800bc2a:	f7fe f817 	bl	8009c5c <memcpy>
 800bc2e:	4621      	mov	r1, r4
 800bc30:	4638      	mov	r0, r7
 800bc32:	f7ff ffa5 	bl	800bb80 <_Bfree>
 800bc36:	4644      	mov	r4, r8
 800bc38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc3c:	3501      	adds	r5, #1
 800bc3e:	615e      	str	r6, [r3, #20]
 800bc40:	6125      	str	r5, [r4, #16]
 800bc42:	4620      	mov	r0, r4
 800bc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc48:	0800c837 	.word	0x0800c837
 800bc4c:	0800c848 	.word	0x0800c848

0800bc50 <__hi0bits>:
 800bc50:	0c03      	lsrs	r3, r0, #16
 800bc52:	041b      	lsls	r3, r3, #16
 800bc54:	b9d3      	cbnz	r3, 800bc8c <__hi0bits+0x3c>
 800bc56:	0400      	lsls	r0, r0, #16
 800bc58:	2310      	movs	r3, #16
 800bc5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc5e:	bf04      	itt	eq
 800bc60:	0200      	lsleq	r0, r0, #8
 800bc62:	3308      	addeq	r3, #8
 800bc64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc68:	bf04      	itt	eq
 800bc6a:	0100      	lsleq	r0, r0, #4
 800bc6c:	3304      	addeq	r3, #4
 800bc6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc72:	bf04      	itt	eq
 800bc74:	0080      	lsleq	r0, r0, #2
 800bc76:	3302      	addeq	r3, #2
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	db05      	blt.n	800bc88 <__hi0bits+0x38>
 800bc7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc80:	f103 0301 	add.w	r3, r3, #1
 800bc84:	bf08      	it	eq
 800bc86:	2320      	moveq	r3, #32
 800bc88:	4618      	mov	r0, r3
 800bc8a:	4770      	bx	lr
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	e7e4      	b.n	800bc5a <__hi0bits+0xa>

0800bc90 <__lo0bits>:
 800bc90:	6803      	ldr	r3, [r0, #0]
 800bc92:	f013 0207 	ands.w	r2, r3, #7
 800bc96:	4601      	mov	r1, r0
 800bc98:	d00b      	beq.n	800bcb2 <__lo0bits+0x22>
 800bc9a:	07da      	lsls	r2, r3, #31
 800bc9c:	d423      	bmi.n	800bce6 <__lo0bits+0x56>
 800bc9e:	0798      	lsls	r0, r3, #30
 800bca0:	bf49      	itett	mi
 800bca2:	085b      	lsrmi	r3, r3, #1
 800bca4:	089b      	lsrpl	r3, r3, #2
 800bca6:	2001      	movmi	r0, #1
 800bca8:	600b      	strmi	r3, [r1, #0]
 800bcaa:	bf5c      	itt	pl
 800bcac:	600b      	strpl	r3, [r1, #0]
 800bcae:	2002      	movpl	r0, #2
 800bcb0:	4770      	bx	lr
 800bcb2:	b298      	uxth	r0, r3
 800bcb4:	b9a8      	cbnz	r0, 800bce2 <__lo0bits+0x52>
 800bcb6:	0c1b      	lsrs	r3, r3, #16
 800bcb8:	2010      	movs	r0, #16
 800bcba:	b2da      	uxtb	r2, r3
 800bcbc:	b90a      	cbnz	r2, 800bcc2 <__lo0bits+0x32>
 800bcbe:	3008      	adds	r0, #8
 800bcc0:	0a1b      	lsrs	r3, r3, #8
 800bcc2:	071a      	lsls	r2, r3, #28
 800bcc4:	bf04      	itt	eq
 800bcc6:	091b      	lsreq	r3, r3, #4
 800bcc8:	3004      	addeq	r0, #4
 800bcca:	079a      	lsls	r2, r3, #30
 800bccc:	bf04      	itt	eq
 800bcce:	089b      	lsreq	r3, r3, #2
 800bcd0:	3002      	addeq	r0, #2
 800bcd2:	07da      	lsls	r2, r3, #31
 800bcd4:	d403      	bmi.n	800bcde <__lo0bits+0x4e>
 800bcd6:	085b      	lsrs	r3, r3, #1
 800bcd8:	f100 0001 	add.w	r0, r0, #1
 800bcdc:	d005      	beq.n	800bcea <__lo0bits+0x5a>
 800bcde:	600b      	str	r3, [r1, #0]
 800bce0:	4770      	bx	lr
 800bce2:	4610      	mov	r0, r2
 800bce4:	e7e9      	b.n	800bcba <__lo0bits+0x2a>
 800bce6:	2000      	movs	r0, #0
 800bce8:	4770      	bx	lr
 800bcea:	2020      	movs	r0, #32
 800bcec:	4770      	bx	lr
	...

0800bcf0 <__i2b>:
 800bcf0:	b510      	push	{r4, lr}
 800bcf2:	460c      	mov	r4, r1
 800bcf4:	2101      	movs	r1, #1
 800bcf6:	f7ff ff03 	bl	800bb00 <_Balloc>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	b928      	cbnz	r0, 800bd0a <__i2b+0x1a>
 800bcfe:	4b05      	ldr	r3, [pc, #20]	; (800bd14 <__i2b+0x24>)
 800bd00:	4805      	ldr	r0, [pc, #20]	; (800bd18 <__i2b+0x28>)
 800bd02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bd06:	f000 fc01 	bl	800c50c <__assert_func>
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	6144      	str	r4, [r0, #20]
 800bd0e:	6103      	str	r3, [r0, #16]
 800bd10:	bd10      	pop	{r4, pc}
 800bd12:	bf00      	nop
 800bd14:	0800c837 	.word	0x0800c837
 800bd18:	0800c848 	.word	0x0800c848

0800bd1c <__multiply>:
 800bd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd20:	4691      	mov	r9, r2
 800bd22:	690a      	ldr	r2, [r1, #16]
 800bd24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	bfb8      	it	lt
 800bd2c:	460b      	movlt	r3, r1
 800bd2e:	460c      	mov	r4, r1
 800bd30:	bfbc      	itt	lt
 800bd32:	464c      	movlt	r4, r9
 800bd34:	4699      	movlt	r9, r3
 800bd36:	6927      	ldr	r7, [r4, #16]
 800bd38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd3c:	68a3      	ldr	r3, [r4, #8]
 800bd3e:	6861      	ldr	r1, [r4, #4]
 800bd40:	eb07 060a 	add.w	r6, r7, sl
 800bd44:	42b3      	cmp	r3, r6
 800bd46:	b085      	sub	sp, #20
 800bd48:	bfb8      	it	lt
 800bd4a:	3101      	addlt	r1, #1
 800bd4c:	f7ff fed8 	bl	800bb00 <_Balloc>
 800bd50:	b930      	cbnz	r0, 800bd60 <__multiply+0x44>
 800bd52:	4602      	mov	r2, r0
 800bd54:	4b44      	ldr	r3, [pc, #272]	; (800be68 <__multiply+0x14c>)
 800bd56:	4845      	ldr	r0, [pc, #276]	; (800be6c <__multiply+0x150>)
 800bd58:	f240 115d 	movw	r1, #349	; 0x15d
 800bd5c:	f000 fbd6 	bl	800c50c <__assert_func>
 800bd60:	f100 0514 	add.w	r5, r0, #20
 800bd64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd68:	462b      	mov	r3, r5
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	4543      	cmp	r3, r8
 800bd6e:	d321      	bcc.n	800bdb4 <__multiply+0x98>
 800bd70:	f104 0314 	add.w	r3, r4, #20
 800bd74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd78:	f109 0314 	add.w	r3, r9, #20
 800bd7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd80:	9202      	str	r2, [sp, #8]
 800bd82:	1b3a      	subs	r2, r7, r4
 800bd84:	3a15      	subs	r2, #21
 800bd86:	f022 0203 	bic.w	r2, r2, #3
 800bd8a:	3204      	adds	r2, #4
 800bd8c:	f104 0115 	add.w	r1, r4, #21
 800bd90:	428f      	cmp	r7, r1
 800bd92:	bf38      	it	cc
 800bd94:	2204      	movcc	r2, #4
 800bd96:	9201      	str	r2, [sp, #4]
 800bd98:	9a02      	ldr	r2, [sp, #8]
 800bd9a:	9303      	str	r3, [sp, #12]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d80c      	bhi.n	800bdba <__multiply+0x9e>
 800bda0:	2e00      	cmp	r6, #0
 800bda2:	dd03      	ble.n	800bdac <__multiply+0x90>
 800bda4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d05a      	beq.n	800be62 <__multiply+0x146>
 800bdac:	6106      	str	r6, [r0, #16]
 800bdae:	b005      	add	sp, #20
 800bdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb4:	f843 2b04 	str.w	r2, [r3], #4
 800bdb8:	e7d8      	b.n	800bd6c <__multiply+0x50>
 800bdba:	f8b3 a000 	ldrh.w	sl, [r3]
 800bdbe:	f1ba 0f00 	cmp.w	sl, #0
 800bdc2:	d024      	beq.n	800be0e <__multiply+0xf2>
 800bdc4:	f104 0e14 	add.w	lr, r4, #20
 800bdc8:	46a9      	mov	r9, r5
 800bdca:	f04f 0c00 	mov.w	ip, #0
 800bdce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bdd2:	f8d9 1000 	ldr.w	r1, [r9]
 800bdd6:	fa1f fb82 	uxth.w	fp, r2
 800bdda:	b289      	uxth	r1, r1
 800bddc:	fb0a 110b 	mla	r1, sl, fp, r1
 800bde0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bde4:	f8d9 2000 	ldr.w	r2, [r9]
 800bde8:	4461      	add	r1, ip
 800bdea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdee:	fb0a c20b 	mla	r2, sl, fp, ip
 800bdf2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bdf6:	b289      	uxth	r1, r1
 800bdf8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bdfc:	4577      	cmp	r7, lr
 800bdfe:	f849 1b04 	str.w	r1, [r9], #4
 800be02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800be06:	d8e2      	bhi.n	800bdce <__multiply+0xb2>
 800be08:	9a01      	ldr	r2, [sp, #4]
 800be0a:	f845 c002 	str.w	ip, [r5, r2]
 800be0e:	9a03      	ldr	r2, [sp, #12]
 800be10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be14:	3304      	adds	r3, #4
 800be16:	f1b9 0f00 	cmp.w	r9, #0
 800be1a:	d020      	beq.n	800be5e <__multiply+0x142>
 800be1c:	6829      	ldr	r1, [r5, #0]
 800be1e:	f104 0c14 	add.w	ip, r4, #20
 800be22:	46ae      	mov	lr, r5
 800be24:	f04f 0a00 	mov.w	sl, #0
 800be28:	f8bc b000 	ldrh.w	fp, [ip]
 800be2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800be30:	fb09 220b 	mla	r2, r9, fp, r2
 800be34:	4492      	add	sl, r2
 800be36:	b289      	uxth	r1, r1
 800be38:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800be3c:	f84e 1b04 	str.w	r1, [lr], #4
 800be40:	f85c 2b04 	ldr.w	r2, [ip], #4
 800be44:	f8be 1000 	ldrh.w	r1, [lr]
 800be48:	0c12      	lsrs	r2, r2, #16
 800be4a:	fb09 1102 	mla	r1, r9, r2, r1
 800be4e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800be52:	4567      	cmp	r7, ip
 800be54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be58:	d8e6      	bhi.n	800be28 <__multiply+0x10c>
 800be5a:	9a01      	ldr	r2, [sp, #4]
 800be5c:	50a9      	str	r1, [r5, r2]
 800be5e:	3504      	adds	r5, #4
 800be60:	e79a      	b.n	800bd98 <__multiply+0x7c>
 800be62:	3e01      	subs	r6, #1
 800be64:	e79c      	b.n	800bda0 <__multiply+0x84>
 800be66:	bf00      	nop
 800be68:	0800c837 	.word	0x0800c837
 800be6c:	0800c848 	.word	0x0800c848

0800be70 <__pow5mult>:
 800be70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be74:	4615      	mov	r5, r2
 800be76:	f012 0203 	ands.w	r2, r2, #3
 800be7a:	4606      	mov	r6, r0
 800be7c:	460f      	mov	r7, r1
 800be7e:	d007      	beq.n	800be90 <__pow5mult+0x20>
 800be80:	4c25      	ldr	r4, [pc, #148]	; (800bf18 <__pow5mult+0xa8>)
 800be82:	3a01      	subs	r2, #1
 800be84:	2300      	movs	r3, #0
 800be86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be8a:	f7ff fe9b 	bl	800bbc4 <__multadd>
 800be8e:	4607      	mov	r7, r0
 800be90:	10ad      	asrs	r5, r5, #2
 800be92:	d03d      	beq.n	800bf10 <__pow5mult+0xa0>
 800be94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be96:	b97c      	cbnz	r4, 800beb8 <__pow5mult+0x48>
 800be98:	2010      	movs	r0, #16
 800be9a:	f7fd fed7 	bl	8009c4c <malloc>
 800be9e:	4602      	mov	r2, r0
 800bea0:	6270      	str	r0, [r6, #36]	; 0x24
 800bea2:	b928      	cbnz	r0, 800beb0 <__pow5mult+0x40>
 800bea4:	4b1d      	ldr	r3, [pc, #116]	; (800bf1c <__pow5mult+0xac>)
 800bea6:	481e      	ldr	r0, [pc, #120]	; (800bf20 <__pow5mult+0xb0>)
 800bea8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800beac:	f000 fb2e 	bl	800c50c <__assert_func>
 800beb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800beb4:	6004      	str	r4, [r0, #0]
 800beb6:	60c4      	str	r4, [r0, #12]
 800beb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bebc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bec0:	b94c      	cbnz	r4, 800bed6 <__pow5mult+0x66>
 800bec2:	f240 2171 	movw	r1, #625	; 0x271
 800bec6:	4630      	mov	r0, r6
 800bec8:	f7ff ff12 	bl	800bcf0 <__i2b>
 800becc:	2300      	movs	r3, #0
 800bece:	f8c8 0008 	str.w	r0, [r8, #8]
 800bed2:	4604      	mov	r4, r0
 800bed4:	6003      	str	r3, [r0, #0]
 800bed6:	f04f 0900 	mov.w	r9, #0
 800beda:	07eb      	lsls	r3, r5, #31
 800bedc:	d50a      	bpl.n	800bef4 <__pow5mult+0x84>
 800bede:	4639      	mov	r1, r7
 800bee0:	4622      	mov	r2, r4
 800bee2:	4630      	mov	r0, r6
 800bee4:	f7ff ff1a 	bl	800bd1c <__multiply>
 800bee8:	4639      	mov	r1, r7
 800beea:	4680      	mov	r8, r0
 800beec:	4630      	mov	r0, r6
 800beee:	f7ff fe47 	bl	800bb80 <_Bfree>
 800bef2:	4647      	mov	r7, r8
 800bef4:	106d      	asrs	r5, r5, #1
 800bef6:	d00b      	beq.n	800bf10 <__pow5mult+0xa0>
 800bef8:	6820      	ldr	r0, [r4, #0]
 800befa:	b938      	cbnz	r0, 800bf0c <__pow5mult+0x9c>
 800befc:	4622      	mov	r2, r4
 800befe:	4621      	mov	r1, r4
 800bf00:	4630      	mov	r0, r6
 800bf02:	f7ff ff0b 	bl	800bd1c <__multiply>
 800bf06:	6020      	str	r0, [r4, #0]
 800bf08:	f8c0 9000 	str.w	r9, [r0]
 800bf0c:	4604      	mov	r4, r0
 800bf0e:	e7e4      	b.n	800beda <__pow5mult+0x6a>
 800bf10:	4638      	mov	r0, r7
 800bf12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf16:	bf00      	nop
 800bf18:	0800c998 	.word	0x0800c998
 800bf1c:	0800c7c5 	.word	0x0800c7c5
 800bf20:	0800c848 	.word	0x0800c848

0800bf24 <__lshift>:
 800bf24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf28:	460c      	mov	r4, r1
 800bf2a:	6849      	ldr	r1, [r1, #4]
 800bf2c:	6923      	ldr	r3, [r4, #16]
 800bf2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf32:	68a3      	ldr	r3, [r4, #8]
 800bf34:	4607      	mov	r7, r0
 800bf36:	4691      	mov	r9, r2
 800bf38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf3c:	f108 0601 	add.w	r6, r8, #1
 800bf40:	42b3      	cmp	r3, r6
 800bf42:	db0b      	blt.n	800bf5c <__lshift+0x38>
 800bf44:	4638      	mov	r0, r7
 800bf46:	f7ff fddb 	bl	800bb00 <_Balloc>
 800bf4a:	4605      	mov	r5, r0
 800bf4c:	b948      	cbnz	r0, 800bf62 <__lshift+0x3e>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	4b2a      	ldr	r3, [pc, #168]	; (800bffc <__lshift+0xd8>)
 800bf52:	482b      	ldr	r0, [pc, #172]	; (800c000 <__lshift+0xdc>)
 800bf54:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf58:	f000 fad8 	bl	800c50c <__assert_func>
 800bf5c:	3101      	adds	r1, #1
 800bf5e:	005b      	lsls	r3, r3, #1
 800bf60:	e7ee      	b.n	800bf40 <__lshift+0x1c>
 800bf62:	2300      	movs	r3, #0
 800bf64:	f100 0114 	add.w	r1, r0, #20
 800bf68:	f100 0210 	add.w	r2, r0, #16
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	4553      	cmp	r3, sl
 800bf70:	db37      	blt.n	800bfe2 <__lshift+0xbe>
 800bf72:	6920      	ldr	r0, [r4, #16]
 800bf74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf78:	f104 0314 	add.w	r3, r4, #20
 800bf7c:	f019 091f 	ands.w	r9, r9, #31
 800bf80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf88:	d02f      	beq.n	800bfea <__lshift+0xc6>
 800bf8a:	f1c9 0e20 	rsb	lr, r9, #32
 800bf8e:	468a      	mov	sl, r1
 800bf90:	f04f 0c00 	mov.w	ip, #0
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	fa02 f209 	lsl.w	r2, r2, r9
 800bf9a:	ea42 020c 	orr.w	r2, r2, ip
 800bf9e:	f84a 2b04 	str.w	r2, [sl], #4
 800bfa2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfa6:	4298      	cmp	r0, r3
 800bfa8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bfac:	d8f2      	bhi.n	800bf94 <__lshift+0x70>
 800bfae:	1b03      	subs	r3, r0, r4
 800bfb0:	3b15      	subs	r3, #21
 800bfb2:	f023 0303 	bic.w	r3, r3, #3
 800bfb6:	3304      	adds	r3, #4
 800bfb8:	f104 0215 	add.w	r2, r4, #21
 800bfbc:	4290      	cmp	r0, r2
 800bfbe:	bf38      	it	cc
 800bfc0:	2304      	movcc	r3, #4
 800bfc2:	f841 c003 	str.w	ip, [r1, r3]
 800bfc6:	f1bc 0f00 	cmp.w	ip, #0
 800bfca:	d001      	beq.n	800bfd0 <__lshift+0xac>
 800bfcc:	f108 0602 	add.w	r6, r8, #2
 800bfd0:	3e01      	subs	r6, #1
 800bfd2:	4638      	mov	r0, r7
 800bfd4:	612e      	str	r6, [r5, #16]
 800bfd6:	4621      	mov	r1, r4
 800bfd8:	f7ff fdd2 	bl	800bb80 <_Bfree>
 800bfdc:	4628      	mov	r0, r5
 800bfde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfe2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	e7c1      	b.n	800bf6e <__lshift+0x4a>
 800bfea:	3904      	subs	r1, #4
 800bfec:	f853 2b04 	ldr.w	r2, [r3], #4
 800bff0:	f841 2f04 	str.w	r2, [r1, #4]!
 800bff4:	4298      	cmp	r0, r3
 800bff6:	d8f9      	bhi.n	800bfec <__lshift+0xc8>
 800bff8:	e7ea      	b.n	800bfd0 <__lshift+0xac>
 800bffa:	bf00      	nop
 800bffc:	0800c837 	.word	0x0800c837
 800c000:	0800c848 	.word	0x0800c848

0800c004 <__mcmp>:
 800c004:	b530      	push	{r4, r5, lr}
 800c006:	6902      	ldr	r2, [r0, #16]
 800c008:	690c      	ldr	r4, [r1, #16]
 800c00a:	1b12      	subs	r2, r2, r4
 800c00c:	d10e      	bne.n	800c02c <__mcmp+0x28>
 800c00e:	f100 0314 	add.w	r3, r0, #20
 800c012:	3114      	adds	r1, #20
 800c014:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c018:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c01c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c020:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c024:	42a5      	cmp	r5, r4
 800c026:	d003      	beq.n	800c030 <__mcmp+0x2c>
 800c028:	d305      	bcc.n	800c036 <__mcmp+0x32>
 800c02a:	2201      	movs	r2, #1
 800c02c:	4610      	mov	r0, r2
 800c02e:	bd30      	pop	{r4, r5, pc}
 800c030:	4283      	cmp	r3, r0
 800c032:	d3f3      	bcc.n	800c01c <__mcmp+0x18>
 800c034:	e7fa      	b.n	800c02c <__mcmp+0x28>
 800c036:	f04f 32ff 	mov.w	r2, #4294967295
 800c03a:	e7f7      	b.n	800c02c <__mcmp+0x28>

0800c03c <__mdiff>:
 800c03c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c040:	460c      	mov	r4, r1
 800c042:	4606      	mov	r6, r0
 800c044:	4611      	mov	r1, r2
 800c046:	4620      	mov	r0, r4
 800c048:	4690      	mov	r8, r2
 800c04a:	f7ff ffdb 	bl	800c004 <__mcmp>
 800c04e:	1e05      	subs	r5, r0, #0
 800c050:	d110      	bne.n	800c074 <__mdiff+0x38>
 800c052:	4629      	mov	r1, r5
 800c054:	4630      	mov	r0, r6
 800c056:	f7ff fd53 	bl	800bb00 <_Balloc>
 800c05a:	b930      	cbnz	r0, 800c06a <__mdiff+0x2e>
 800c05c:	4b3a      	ldr	r3, [pc, #232]	; (800c148 <__mdiff+0x10c>)
 800c05e:	4602      	mov	r2, r0
 800c060:	f240 2132 	movw	r1, #562	; 0x232
 800c064:	4839      	ldr	r0, [pc, #228]	; (800c14c <__mdiff+0x110>)
 800c066:	f000 fa51 	bl	800c50c <__assert_func>
 800c06a:	2301      	movs	r3, #1
 800c06c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c074:	bfa4      	itt	ge
 800c076:	4643      	movge	r3, r8
 800c078:	46a0      	movge	r8, r4
 800c07a:	4630      	mov	r0, r6
 800c07c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c080:	bfa6      	itte	ge
 800c082:	461c      	movge	r4, r3
 800c084:	2500      	movge	r5, #0
 800c086:	2501      	movlt	r5, #1
 800c088:	f7ff fd3a 	bl	800bb00 <_Balloc>
 800c08c:	b920      	cbnz	r0, 800c098 <__mdiff+0x5c>
 800c08e:	4b2e      	ldr	r3, [pc, #184]	; (800c148 <__mdiff+0x10c>)
 800c090:	4602      	mov	r2, r0
 800c092:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c096:	e7e5      	b.n	800c064 <__mdiff+0x28>
 800c098:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c09c:	6926      	ldr	r6, [r4, #16]
 800c09e:	60c5      	str	r5, [r0, #12]
 800c0a0:	f104 0914 	add.w	r9, r4, #20
 800c0a4:	f108 0514 	add.w	r5, r8, #20
 800c0a8:	f100 0e14 	add.w	lr, r0, #20
 800c0ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c0b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c0b4:	f108 0210 	add.w	r2, r8, #16
 800c0b8:	46f2      	mov	sl, lr
 800c0ba:	2100      	movs	r1, #0
 800c0bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800c0c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c0c4:	fa1f f883 	uxth.w	r8, r3
 800c0c8:	fa11 f18b 	uxtah	r1, r1, fp
 800c0cc:	0c1b      	lsrs	r3, r3, #16
 800c0ce:	eba1 0808 	sub.w	r8, r1, r8
 800c0d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c0d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c0da:	fa1f f888 	uxth.w	r8, r8
 800c0de:	1419      	asrs	r1, r3, #16
 800c0e0:	454e      	cmp	r6, r9
 800c0e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c0e6:	f84a 3b04 	str.w	r3, [sl], #4
 800c0ea:	d8e7      	bhi.n	800c0bc <__mdiff+0x80>
 800c0ec:	1b33      	subs	r3, r6, r4
 800c0ee:	3b15      	subs	r3, #21
 800c0f0:	f023 0303 	bic.w	r3, r3, #3
 800c0f4:	3304      	adds	r3, #4
 800c0f6:	3415      	adds	r4, #21
 800c0f8:	42a6      	cmp	r6, r4
 800c0fa:	bf38      	it	cc
 800c0fc:	2304      	movcc	r3, #4
 800c0fe:	441d      	add	r5, r3
 800c100:	4473      	add	r3, lr
 800c102:	469e      	mov	lr, r3
 800c104:	462e      	mov	r6, r5
 800c106:	4566      	cmp	r6, ip
 800c108:	d30e      	bcc.n	800c128 <__mdiff+0xec>
 800c10a:	f10c 0203 	add.w	r2, ip, #3
 800c10e:	1b52      	subs	r2, r2, r5
 800c110:	f022 0203 	bic.w	r2, r2, #3
 800c114:	3d03      	subs	r5, #3
 800c116:	45ac      	cmp	ip, r5
 800c118:	bf38      	it	cc
 800c11a:	2200      	movcc	r2, #0
 800c11c:	441a      	add	r2, r3
 800c11e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c122:	b17b      	cbz	r3, 800c144 <__mdiff+0x108>
 800c124:	6107      	str	r7, [r0, #16]
 800c126:	e7a3      	b.n	800c070 <__mdiff+0x34>
 800c128:	f856 8b04 	ldr.w	r8, [r6], #4
 800c12c:	fa11 f288 	uxtah	r2, r1, r8
 800c130:	1414      	asrs	r4, r2, #16
 800c132:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c136:	b292      	uxth	r2, r2
 800c138:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c13c:	f84e 2b04 	str.w	r2, [lr], #4
 800c140:	1421      	asrs	r1, r4, #16
 800c142:	e7e0      	b.n	800c106 <__mdiff+0xca>
 800c144:	3f01      	subs	r7, #1
 800c146:	e7ea      	b.n	800c11e <__mdiff+0xe2>
 800c148:	0800c837 	.word	0x0800c837
 800c14c:	0800c848 	.word	0x0800c848

0800c150 <__d2b>:
 800c150:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c154:	4689      	mov	r9, r1
 800c156:	2101      	movs	r1, #1
 800c158:	ec57 6b10 	vmov	r6, r7, d0
 800c15c:	4690      	mov	r8, r2
 800c15e:	f7ff fccf 	bl	800bb00 <_Balloc>
 800c162:	4604      	mov	r4, r0
 800c164:	b930      	cbnz	r0, 800c174 <__d2b+0x24>
 800c166:	4602      	mov	r2, r0
 800c168:	4b25      	ldr	r3, [pc, #148]	; (800c200 <__d2b+0xb0>)
 800c16a:	4826      	ldr	r0, [pc, #152]	; (800c204 <__d2b+0xb4>)
 800c16c:	f240 310a 	movw	r1, #778	; 0x30a
 800c170:	f000 f9cc 	bl	800c50c <__assert_func>
 800c174:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c178:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c17c:	bb35      	cbnz	r5, 800c1cc <__d2b+0x7c>
 800c17e:	2e00      	cmp	r6, #0
 800c180:	9301      	str	r3, [sp, #4]
 800c182:	d028      	beq.n	800c1d6 <__d2b+0x86>
 800c184:	4668      	mov	r0, sp
 800c186:	9600      	str	r6, [sp, #0]
 800c188:	f7ff fd82 	bl	800bc90 <__lo0bits>
 800c18c:	9900      	ldr	r1, [sp, #0]
 800c18e:	b300      	cbz	r0, 800c1d2 <__d2b+0x82>
 800c190:	9a01      	ldr	r2, [sp, #4]
 800c192:	f1c0 0320 	rsb	r3, r0, #32
 800c196:	fa02 f303 	lsl.w	r3, r2, r3
 800c19a:	430b      	orrs	r3, r1
 800c19c:	40c2      	lsrs	r2, r0
 800c19e:	6163      	str	r3, [r4, #20]
 800c1a0:	9201      	str	r2, [sp, #4]
 800c1a2:	9b01      	ldr	r3, [sp, #4]
 800c1a4:	61a3      	str	r3, [r4, #24]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	bf14      	ite	ne
 800c1aa:	2202      	movne	r2, #2
 800c1ac:	2201      	moveq	r2, #1
 800c1ae:	6122      	str	r2, [r4, #16]
 800c1b0:	b1d5      	cbz	r5, 800c1e8 <__d2b+0x98>
 800c1b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c1b6:	4405      	add	r5, r0
 800c1b8:	f8c9 5000 	str.w	r5, [r9]
 800c1bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c1c0:	f8c8 0000 	str.w	r0, [r8]
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	b003      	add	sp, #12
 800c1c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1d0:	e7d5      	b.n	800c17e <__d2b+0x2e>
 800c1d2:	6161      	str	r1, [r4, #20]
 800c1d4:	e7e5      	b.n	800c1a2 <__d2b+0x52>
 800c1d6:	a801      	add	r0, sp, #4
 800c1d8:	f7ff fd5a 	bl	800bc90 <__lo0bits>
 800c1dc:	9b01      	ldr	r3, [sp, #4]
 800c1de:	6163      	str	r3, [r4, #20]
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	6122      	str	r2, [r4, #16]
 800c1e4:	3020      	adds	r0, #32
 800c1e6:	e7e3      	b.n	800c1b0 <__d2b+0x60>
 800c1e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c1ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c1f0:	f8c9 0000 	str.w	r0, [r9]
 800c1f4:	6918      	ldr	r0, [r3, #16]
 800c1f6:	f7ff fd2b 	bl	800bc50 <__hi0bits>
 800c1fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c1fe:	e7df      	b.n	800c1c0 <__d2b+0x70>
 800c200:	0800c837 	.word	0x0800c837
 800c204:	0800c848 	.word	0x0800c848

0800c208 <_calloc_r>:
 800c208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c20a:	fba1 2402 	umull	r2, r4, r1, r2
 800c20e:	b94c      	cbnz	r4, 800c224 <_calloc_r+0x1c>
 800c210:	4611      	mov	r1, r2
 800c212:	9201      	str	r2, [sp, #4]
 800c214:	f7fd fda4 	bl	8009d60 <_malloc_r>
 800c218:	9a01      	ldr	r2, [sp, #4]
 800c21a:	4605      	mov	r5, r0
 800c21c:	b930      	cbnz	r0, 800c22c <_calloc_r+0x24>
 800c21e:	4628      	mov	r0, r5
 800c220:	b003      	add	sp, #12
 800c222:	bd30      	pop	{r4, r5, pc}
 800c224:	220c      	movs	r2, #12
 800c226:	6002      	str	r2, [r0, #0]
 800c228:	2500      	movs	r5, #0
 800c22a:	e7f8      	b.n	800c21e <_calloc_r+0x16>
 800c22c:	4621      	mov	r1, r4
 800c22e:	f7fd fd23 	bl	8009c78 <memset>
 800c232:	e7f4      	b.n	800c21e <_calloc_r+0x16>

0800c234 <__sfputc_r>:
 800c234:	6893      	ldr	r3, [r2, #8]
 800c236:	3b01      	subs	r3, #1
 800c238:	2b00      	cmp	r3, #0
 800c23a:	b410      	push	{r4}
 800c23c:	6093      	str	r3, [r2, #8]
 800c23e:	da08      	bge.n	800c252 <__sfputc_r+0x1e>
 800c240:	6994      	ldr	r4, [r2, #24]
 800c242:	42a3      	cmp	r3, r4
 800c244:	db01      	blt.n	800c24a <__sfputc_r+0x16>
 800c246:	290a      	cmp	r1, #10
 800c248:	d103      	bne.n	800c252 <__sfputc_r+0x1e>
 800c24a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c24e:	f7fe bbb1 	b.w	800a9b4 <__swbuf_r>
 800c252:	6813      	ldr	r3, [r2, #0]
 800c254:	1c58      	adds	r0, r3, #1
 800c256:	6010      	str	r0, [r2, #0]
 800c258:	7019      	strb	r1, [r3, #0]
 800c25a:	4608      	mov	r0, r1
 800c25c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c260:	4770      	bx	lr

0800c262 <__sfputs_r>:
 800c262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c264:	4606      	mov	r6, r0
 800c266:	460f      	mov	r7, r1
 800c268:	4614      	mov	r4, r2
 800c26a:	18d5      	adds	r5, r2, r3
 800c26c:	42ac      	cmp	r4, r5
 800c26e:	d101      	bne.n	800c274 <__sfputs_r+0x12>
 800c270:	2000      	movs	r0, #0
 800c272:	e007      	b.n	800c284 <__sfputs_r+0x22>
 800c274:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c278:	463a      	mov	r2, r7
 800c27a:	4630      	mov	r0, r6
 800c27c:	f7ff ffda 	bl	800c234 <__sfputc_r>
 800c280:	1c43      	adds	r3, r0, #1
 800c282:	d1f3      	bne.n	800c26c <__sfputs_r+0xa>
 800c284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c288 <_vfiprintf_r>:
 800c288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28c:	460d      	mov	r5, r1
 800c28e:	b09d      	sub	sp, #116	; 0x74
 800c290:	4614      	mov	r4, r2
 800c292:	4698      	mov	r8, r3
 800c294:	4606      	mov	r6, r0
 800c296:	b118      	cbz	r0, 800c2a0 <_vfiprintf_r+0x18>
 800c298:	6983      	ldr	r3, [r0, #24]
 800c29a:	b90b      	cbnz	r3, 800c2a0 <_vfiprintf_r+0x18>
 800c29c:	f7fd fc10 	bl	8009ac0 <__sinit>
 800c2a0:	4b89      	ldr	r3, [pc, #548]	; (800c4c8 <_vfiprintf_r+0x240>)
 800c2a2:	429d      	cmp	r5, r3
 800c2a4:	d11b      	bne.n	800c2de <_vfiprintf_r+0x56>
 800c2a6:	6875      	ldr	r5, [r6, #4]
 800c2a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2aa:	07d9      	lsls	r1, r3, #31
 800c2ac:	d405      	bmi.n	800c2ba <_vfiprintf_r+0x32>
 800c2ae:	89ab      	ldrh	r3, [r5, #12]
 800c2b0:	059a      	lsls	r2, r3, #22
 800c2b2:	d402      	bmi.n	800c2ba <_vfiprintf_r+0x32>
 800c2b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2b6:	f7fd fcc6 	bl	8009c46 <__retarget_lock_acquire_recursive>
 800c2ba:	89ab      	ldrh	r3, [r5, #12]
 800c2bc:	071b      	lsls	r3, r3, #28
 800c2be:	d501      	bpl.n	800c2c4 <_vfiprintf_r+0x3c>
 800c2c0:	692b      	ldr	r3, [r5, #16]
 800c2c2:	b9eb      	cbnz	r3, 800c300 <_vfiprintf_r+0x78>
 800c2c4:	4629      	mov	r1, r5
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	f7fe fbd8 	bl	800aa7c <__swsetup_r>
 800c2cc:	b1c0      	cbz	r0, 800c300 <_vfiprintf_r+0x78>
 800c2ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2d0:	07dc      	lsls	r4, r3, #31
 800c2d2:	d50e      	bpl.n	800c2f2 <_vfiprintf_r+0x6a>
 800c2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d8:	b01d      	add	sp, #116	; 0x74
 800c2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2de:	4b7b      	ldr	r3, [pc, #492]	; (800c4cc <_vfiprintf_r+0x244>)
 800c2e0:	429d      	cmp	r5, r3
 800c2e2:	d101      	bne.n	800c2e8 <_vfiprintf_r+0x60>
 800c2e4:	68b5      	ldr	r5, [r6, #8]
 800c2e6:	e7df      	b.n	800c2a8 <_vfiprintf_r+0x20>
 800c2e8:	4b79      	ldr	r3, [pc, #484]	; (800c4d0 <_vfiprintf_r+0x248>)
 800c2ea:	429d      	cmp	r5, r3
 800c2ec:	bf08      	it	eq
 800c2ee:	68f5      	ldreq	r5, [r6, #12]
 800c2f0:	e7da      	b.n	800c2a8 <_vfiprintf_r+0x20>
 800c2f2:	89ab      	ldrh	r3, [r5, #12]
 800c2f4:	0598      	lsls	r0, r3, #22
 800c2f6:	d4ed      	bmi.n	800c2d4 <_vfiprintf_r+0x4c>
 800c2f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2fa:	f7fd fca5 	bl	8009c48 <__retarget_lock_release_recursive>
 800c2fe:	e7e9      	b.n	800c2d4 <_vfiprintf_r+0x4c>
 800c300:	2300      	movs	r3, #0
 800c302:	9309      	str	r3, [sp, #36]	; 0x24
 800c304:	2320      	movs	r3, #32
 800c306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c30a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c30e:	2330      	movs	r3, #48	; 0x30
 800c310:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c4d4 <_vfiprintf_r+0x24c>
 800c314:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c318:	f04f 0901 	mov.w	r9, #1
 800c31c:	4623      	mov	r3, r4
 800c31e:	469a      	mov	sl, r3
 800c320:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c324:	b10a      	cbz	r2, 800c32a <_vfiprintf_r+0xa2>
 800c326:	2a25      	cmp	r2, #37	; 0x25
 800c328:	d1f9      	bne.n	800c31e <_vfiprintf_r+0x96>
 800c32a:	ebba 0b04 	subs.w	fp, sl, r4
 800c32e:	d00b      	beq.n	800c348 <_vfiprintf_r+0xc0>
 800c330:	465b      	mov	r3, fp
 800c332:	4622      	mov	r2, r4
 800c334:	4629      	mov	r1, r5
 800c336:	4630      	mov	r0, r6
 800c338:	f7ff ff93 	bl	800c262 <__sfputs_r>
 800c33c:	3001      	adds	r0, #1
 800c33e:	f000 80aa 	beq.w	800c496 <_vfiprintf_r+0x20e>
 800c342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c344:	445a      	add	r2, fp
 800c346:	9209      	str	r2, [sp, #36]	; 0x24
 800c348:	f89a 3000 	ldrb.w	r3, [sl]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	f000 80a2 	beq.w	800c496 <_vfiprintf_r+0x20e>
 800c352:	2300      	movs	r3, #0
 800c354:	f04f 32ff 	mov.w	r2, #4294967295
 800c358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c35c:	f10a 0a01 	add.w	sl, sl, #1
 800c360:	9304      	str	r3, [sp, #16]
 800c362:	9307      	str	r3, [sp, #28]
 800c364:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c368:	931a      	str	r3, [sp, #104]	; 0x68
 800c36a:	4654      	mov	r4, sl
 800c36c:	2205      	movs	r2, #5
 800c36e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c372:	4858      	ldr	r0, [pc, #352]	; (800c4d4 <_vfiprintf_r+0x24c>)
 800c374:	f7f3 ff54 	bl	8000220 <memchr>
 800c378:	9a04      	ldr	r2, [sp, #16]
 800c37a:	b9d8      	cbnz	r0, 800c3b4 <_vfiprintf_r+0x12c>
 800c37c:	06d1      	lsls	r1, r2, #27
 800c37e:	bf44      	itt	mi
 800c380:	2320      	movmi	r3, #32
 800c382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c386:	0713      	lsls	r3, r2, #28
 800c388:	bf44      	itt	mi
 800c38a:	232b      	movmi	r3, #43	; 0x2b
 800c38c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c390:	f89a 3000 	ldrb.w	r3, [sl]
 800c394:	2b2a      	cmp	r3, #42	; 0x2a
 800c396:	d015      	beq.n	800c3c4 <_vfiprintf_r+0x13c>
 800c398:	9a07      	ldr	r2, [sp, #28]
 800c39a:	4654      	mov	r4, sl
 800c39c:	2000      	movs	r0, #0
 800c39e:	f04f 0c0a 	mov.w	ip, #10
 800c3a2:	4621      	mov	r1, r4
 800c3a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3a8:	3b30      	subs	r3, #48	; 0x30
 800c3aa:	2b09      	cmp	r3, #9
 800c3ac:	d94e      	bls.n	800c44c <_vfiprintf_r+0x1c4>
 800c3ae:	b1b0      	cbz	r0, 800c3de <_vfiprintf_r+0x156>
 800c3b0:	9207      	str	r2, [sp, #28]
 800c3b2:	e014      	b.n	800c3de <_vfiprintf_r+0x156>
 800c3b4:	eba0 0308 	sub.w	r3, r0, r8
 800c3b8:	fa09 f303 	lsl.w	r3, r9, r3
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	9304      	str	r3, [sp, #16]
 800c3c0:	46a2      	mov	sl, r4
 800c3c2:	e7d2      	b.n	800c36a <_vfiprintf_r+0xe2>
 800c3c4:	9b03      	ldr	r3, [sp, #12]
 800c3c6:	1d19      	adds	r1, r3, #4
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	9103      	str	r1, [sp, #12]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	bfbb      	ittet	lt
 800c3d0:	425b      	neglt	r3, r3
 800c3d2:	f042 0202 	orrlt.w	r2, r2, #2
 800c3d6:	9307      	strge	r3, [sp, #28]
 800c3d8:	9307      	strlt	r3, [sp, #28]
 800c3da:	bfb8      	it	lt
 800c3dc:	9204      	strlt	r2, [sp, #16]
 800c3de:	7823      	ldrb	r3, [r4, #0]
 800c3e0:	2b2e      	cmp	r3, #46	; 0x2e
 800c3e2:	d10c      	bne.n	800c3fe <_vfiprintf_r+0x176>
 800c3e4:	7863      	ldrb	r3, [r4, #1]
 800c3e6:	2b2a      	cmp	r3, #42	; 0x2a
 800c3e8:	d135      	bne.n	800c456 <_vfiprintf_r+0x1ce>
 800c3ea:	9b03      	ldr	r3, [sp, #12]
 800c3ec:	1d1a      	adds	r2, r3, #4
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	9203      	str	r2, [sp, #12]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	bfb8      	it	lt
 800c3f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3fa:	3402      	adds	r4, #2
 800c3fc:	9305      	str	r3, [sp, #20]
 800c3fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c4e4 <_vfiprintf_r+0x25c>
 800c402:	7821      	ldrb	r1, [r4, #0]
 800c404:	2203      	movs	r2, #3
 800c406:	4650      	mov	r0, sl
 800c408:	f7f3 ff0a 	bl	8000220 <memchr>
 800c40c:	b140      	cbz	r0, 800c420 <_vfiprintf_r+0x198>
 800c40e:	2340      	movs	r3, #64	; 0x40
 800c410:	eba0 000a 	sub.w	r0, r0, sl
 800c414:	fa03 f000 	lsl.w	r0, r3, r0
 800c418:	9b04      	ldr	r3, [sp, #16]
 800c41a:	4303      	orrs	r3, r0
 800c41c:	3401      	adds	r4, #1
 800c41e:	9304      	str	r3, [sp, #16]
 800c420:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c424:	482c      	ldr	r0, [pc, #176]	; (800c4d8 <_vfiprintf_r+0x250>)
 800c426:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c42a:	2206      	movs	r2, #6
 800c42c:	f7f3 fef8 	bl	8000220 <memchr>
 800c430:	2800      	cmp	r0, #0
 800c432:	d03f      	beq.n	800c4b4 <_vfiprintf_r+0x22c>
 800c434:	4b29      	ldr	r3, [pc, #164]	; (800c4dc <_vfiprintf_r+0x254>)
 800c436:	bb1b      	cbnz	r3, 800c480 <_vfiprintf_r+0x1f8>
 800c438:	9b03      	ldr	r3, [sp, #12]
 800c43a:	3307      	adds	r3, #7
 800c43c:	f023 0307 	bic.w	r3, r3, #7
 800c440:	3308      	adds	r3, #8
 800c442:	9303      	str	r3, [sp, #12]
 800c444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c446:	443b      	add	r3, r7
 800c448:	9309      	str	r3, [sp, #36]	; 0x24
 800c44a:	e767      	b.n	800c31c <_vfiprintf_r+0x94>
 800c44c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c450:	460c      	mov	r4, r1
 800c452:	2001      	movs	r0, #1
 800c454:	e7a5      	b.n	800c3a2 <_vfiprintf_r+0x11a>
 800c456:	2300      	movs	r3, #0
 800c458:	3401      	adds	r4, #1
 800c45a:	9305      	str	r3, [sp, #20]
 800c45c:	4619      	mov	r1, r3
 800c45e:	f04f 0c0a 	mov.w	ip, #10
 800c462:	4620      	mov	r0, r4
 800c464:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c468:	3a30      	subs	r2, #48	; 0x30
 800c46a:	2a09      	cmp	r2, #9
 800c46c:	d903      	bls.n	800c476 <_vfiprintf_r+0x1ee>
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d0c5      	beq.n	800c3fe <_vfiprintf_r+0x176>
 800c472:	9105      	str	r1, [sp, #20]
 800c474:	e7c3      	b.n	800c3fe <_vfiprintf_r+0x176>
 800c476:	fb0c 2101 	mla	r1, ip, r1, r2
 800c47a:	4604      	mov	r4, r0
 800c47c:	2301      	movs	r3, #1
 800c47e:	e7f0      	b.n	800c462 <_vfiprintf_r+0x1da>
 800c480:	ab03      	add	r3, sp, #12
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	462a      	mov	r2, r5
 800c486:	4b16      	ldr	r3, [pc, #88]	; (800c4e0 <_vfiprintf_r+0x258>)
 800c488:	a904      	add	r1, sp, #16
 800c48a:	4630      	mov	r0, r6
 800c48c:	f7fd fd7c 	bl	8009f88 <_printf_float>
 800c490:	4607      	mov	r7, r0
 800c492:	1c78      	adds	r0, r7, #1
 800c494:	d1d6      	bne.n	800c444 <_vfiprintf_r+0x1bc>
 800c496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c498:	07d9      	lsls	r1, r3, #31
 800c49a:	d405      	bmi.n	800c4a8 <_vfiprintf_r+0x220>
 800c49c:	89ab      	ldrh	r3, [r5, #12]
 800c49e:	059a      	lsls	r2, r3, #22
 800c4a0:	d402      	bmi.n	800c4a8 <_vfiprintf_r+0x220>
 800c4a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4a4:	f7fd fbd0 	bl	8009c48 <__retarget_lock_release_recursive>
 800c4a8:	89ab      	ldrh	r3, [r5, #12]
 800c4aa:	065b      	lsls	r3, r3, #25
 800c4ac:	f53f af12 	bmi.w	800c2d4 <_vfiprintf_r+0x4c>
 800c4b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4b2:	e711      	b.n	800c2d8 <_vfiprintf_r+0x50>
 800c4b4:	ab03      	add	r3, sp, #12
 800c4b6:	9300      	str	r3, [sp, #0]
 800c4b8:	462a      	mov	r2, r5
 800c4ba:	4b09      	ldr	r3, [pc, #36]	; (800c4e0 <_vfiprintf_r+0x258>)
 800c4bc:	a904      	add	r1, sp, #16
 800c4be:	4630      	mov	r0, r6
 800c4c0:	f7fe f806 	bl	800a4d0 <_printf_i>
 800c4c4:	e7e4      	b.n	800c490 <_vfiprintf_r+0x208>
 800c4c6:	bf00      	nop
 800c4c8:	0800c740 	.word	0x0800c740
 800c4cc:	0800c760 	.word	0x0800c760
 800c4d0:	0800c720 	.word	0x0800c720
 800c4d4:	0800c9a4 	.word	0x0800c9a4
 800c4d8:	0800c9ae 	.word	0x0800c9ae
 800c4dc:	08009f89 	.word	0x08009f89
 800c4e0:	0800c263 	.word	0x0800c263
 800c4e4:	0800c9aa 	.word	0x0800c9aa

0800c4e8 <_read_r>:
 800c4e8:	b538      	push	{r3, r4, r5, lr}
 800c4ea:	4d07      	ldr	r5, [pc, #28]	; (800c508 <_read_r+0x20>)
 800c4ec:	4604      	mov	r4, r0
 800c4ee:	4608      	mov	r0, r1
 800c4f0:	4611      	mov	r1, r2
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	602a      	str	r2, [r5, #0]
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	f7f5 f8c8 	bl	800168c <_read>
 800c4fc:	1c43      	adds	r3, r0, #1
 800c4fe:	d102      	bne.n	800c506 <_read_r+0x1e>
 800c500:	682b      	ldr	r3, [r5, #0]
 800c502:	b103      	cbz	r3, 800c506 <_read_r+0x1e>
 800c504:	6023      	str	r3, [r4, #0]
 800c506:	bd38      	pop	{r3, r4, r5, pc}
 800c508:	20005108 	.word	0x20005108

0800c50c <__assert_func>:
 800c50c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c50e:	4614      	mov	r4, r2
 800c510:	461a      	mov	r2, r3
 800c512:	4b09      	ldr	r3, [pc, #36]	; (800c538 <__assert_func+0x2c>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4605      	mov	r5, r0
 800c518:	68d8      	ldr	r0, [r3, #12]
 800c51a:	b14c      	cbz	r4, 800c530 <__assert_func+0x24>
 800c51c:	4b07      	ldr	r3, [pc, #28]	; (800c53c <__assert_func+0x30>)
 800c51e:	9100      	str	r1, [sp, #0]
 800c520:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c524:	4906      	ldr	r1, [pc, #24]	; (800c540 <__assert_func+0x34>)
 800c526:	462b      	mov	r3, r5
 800c528:	f000 f80e 	bl	800c548 <fiprintf>
 800c52c:	f000 f85f 	bl	800c5ee <abort>
 800c530:	4b04      	ldr	r3, [pc, #16]	; (800c544 <__assert_func+0x38>)
 800c532:	461c      	mov	r4, r3
 800c534:	e7f3      	b.n	800c51e <__assert_func+0x12>
 800c536:	bf00      	nop
 800c538:	20000010 	.word	0x20000010
 800c53c:	0800c9b5 	.word	0x0800c9b5
 800c540:	0800c9c2 	.word	0x0800c9c2
 800c544:	0800c9f0 	.word	0x0800c9f0

0800c548 <fiprintf>:
 800c548:	b40e      	push	{r1, r2, r3}
 800c54a:	b503      	push	{r0, r1, lr}
 800c54c:	4601      	mov	r1, r0
 800c54e:	ab03      	add	r3, sp, #12
 800c550:	4805      	ldr	r0, [pc, #20]	; (800c568 <fiprintf+0x20>)
 800c552:	f853 2b04 	ldr.w	r2, [r3], #4
 800c556:	6800      	ldr	r0, [r0, #0]
 800c558:	9301      	str	r3, [sp, #4]
 800c55a:	f7ff fe95 	bl	800c288 <_vfiprintf_r>
 800c55e:	b002      	add	sp, #8
 800c560:	f85d eb04 	ldr.w	lr, [sp], #4
 800c564:	b003      	add	sp, #12
 800c566:	4770      	bx	lr
 800c568:	20000010 	.word	0x20000010

0800c56c <_fstat_r>:
 800c56c:	b538      	push	{r3, r4, r5, lr}
 800c56e:	4d07      	ldr	r5, [pc, #28]	; (800c58c <_fstat_r+0x20>)
 800c570:	2300      	movs	r3, #0
 800c572:	4604      	mov	r4, r0
 800c574:	4608      	mov	r0, r1
 800c576:	4611      	mov	r1, r2
 800c578:	602b      	str	r3, [r5, #0]
 800c57a:	f7f5 f8cc 	bl	8001716 <_fstat>
 800c57e:	1c43      	adds	r3, r0, #1
 800c580:	d102      	bne.n	800c588 <_fstat_r+0x1c>
 800c582:	682b      	ldr	r3, [r5, #0]
 800c584:	b103      	cbz	r3, 800c588 <_fstat_r+0x1c>
 800c586:	6023      	str	r3, [r4, #0]
 800c588:	bd38      	pop	{r3, r4, r5, pc}
 800c58a:	bf00      	nop
 800c58c:	20005108 	.word	0x20005108

0800c590 <_isatty_r>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	4d06      	ldr	r5, [pc, #24]	; (800c5ac <_isatty_r+0x1c>)
 800c594:	2300      	movs	r3, #0
 800c596:	4604      	mov	r4, r0
 800c598:	4608      	mov	r0, r1
 800c59a:	602b      	str	r3, [r5, #0]
 800c59c:	f7f5 f8cb 	bl	8001736 <_isatty>
 800c5a0:	1c43      	adds	r3, r0, #1
 800c5a2:	d102      	bne.n	800c5aa <_isatty_r+0x1a>
 800c5a4:	682b      	ldr	r3, [r5, #0]
 800c5a6:	b103      	cbz	r3, 800c5aa <_isatty_r+0x1a>
 800c5a8:	6023      	str	r3, [r4, #0]
 800c5aa:	bd38      	pop	{r3, r4, r5, pc}
 800c5ac:	20005108 	.word	0x20005108

0800c5b0 <__ascii_mbtowc>:
 800c5b0:	b082      	sub	sp, #8
 800c5b2:	b901      	cbnz	r1, 800c5b6 <__ascii_mbtowc+0x6>
 800c5b4:	a901      	add	r1, sp, #4
 800c5b6:	b142      	cbz	r2, 800c5ca <__ascii_mbtowc+0x1a>
 800c5b8:	b14b      	cbz	r3, 800c5ce <__ascii_mbtowc+0x1e>
 800c5ba:	7813      	ldrb	r3, [r2, #0]
 800c5bc:	600b      	str	r3, [r1, #0]
 800c5be:	7812      	ldrb	r2, [r2, #0]
 800c5c0:	1e10      	subs	r0, r2, #0
 800c5c2:	bf18      	it	ne
 800c5c4:	2001      	movne	r0, #1
 800c5c6:	b002      	add	sp, #8
 800c5c8:	4770      	bx	lr
 800c5ca:	4610      	mov	r0, r2
 800c5cc:	e7fb      	b.n	800c5c6 <__ascii_mbtowc+0x16>
 800c5ce:	f06f 0001 	mvn.w	r0, #1
 800c5d2:	e7f8      	b.n	800c5c6 <__ascii_mbtowc+0x16>

0800c5d4 <__ascii_wctomb>:
 800c5d4:	b149      	cbz	r1, 800c5ea <__ascii_wctomb+0x16>
 800c5d6:	2aff      	cmp	r2, #255	; 0xff
 800c5d8:	bf85      	ittet	hi
 800c5da:	238a      	movhi	r3, #138	; 0x8a
 800c5dc:	6003      	strhi	r3, [r0, #0]
 800c5de:	700a      	strbls	r2, [r1, #0]
 800c5e0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c5e4:	bf98      	it	ls
 800c5e6:	2001      	movls	r0, #1
 800c5e8:	4770      	bx	lr
 800c5ea:	4608      	mov	r0, r1
 800c5ec:	4770      	bx	lr

0800c5ee <abort>:
 800c5ee:	b508      	push	{r3, lr}
 800c5f0:	2006      	movs	r0, #6
 800c5f2:	f000 f82b 	bl	800c64c <raise>
 800c5f6:	2001      	movs	r0, #1
 800c5f8:	f7f5 f83e 	bl	8001678 <_exit>

0800c5fc <_raise_r>:
 800c5fc:	291f      	cmp	r1, #31
 800c5fe:	b538      	push	{r3, r4, r5, lr}
 800c600:	4604      	mov	r4, r0
 800c602:	460d      	mov	r5, r1
 800c604:	d904      	bls.n	800c610 <_raise_r+0x14>
 800c606:	2316      	movs	r3, #22
 800c608:	6003      	str	r3, [r0, #0]
 800c60a:	f04f 30ff 	mov.w	r0, #4294967295
 800c60e:	bd38      	pop	{r3, r4, r5, pc}
 800c610:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c612:	b112      	cbz	r2, 800c61a <_raise_r+0x1e>
 800c614:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c618:	b94b      	cbnz	r3, 800c62e <_raise_r+0x32>
 800c61a:	4620      	mov	r0, r4
 800c61c:	f000 f830 	bl	800c680 <_getpid_r>
 800c620:	462a      	mov	r2, r5
 800c622:	4601      	mov	r1, r0
 800c624:	4620      	mov	r0, r4
 800c626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c62a:	f000 b817 	b.w	800c65c <_kill_r>
 800c62e:	2b01      	cmp	r3, #1
 800c630:	d00a      	beq.n	800c648 <_raise_r+0x4c>
 800c632:	1c59      	adds	r1, r3, #1
 800c634:	d103      	bne.n	800c63e <_raise_r+0x42>
 800c636:	2316      	movs	r3, #22
 800c638:	6003      	str	r3, [r0, #0]
 800c63a:	2001      	movs	r0, #1
 800c63c:	e7e7      	b.n	800c60e <_raise_r+0x12>
 800c63e:	2400      	movs	r4, #0
 800c640:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c644:	4628      	mov	r0, r5
 800c646:	4798      	blx	r3
 800c648:	2000      	movs	r0, #0
 800c64a:	e7e0      	b.n	800c60e <_raise_r+0x12>

0800c64c <raise>:
 800c64c:	4b02      	ldr	r3, [pc, #8]	; (800c658 <raise+0xc>)
 800c64e:	4601      	mov	r1, r0
 800c650:	6818      	ldr	r0, [r3, #0]
 800c652:	f7ff bfd3 	b.w	800c5fc <_raise_r>
 800c656:	bf00      	nop
 800c658:	20000010 	.word	0x20000010

0800c65c <_kill_r>:
 800c65c:	b538      	push	{r3, r4, r5, lr}
 800c65e:	4d07      	ldr	r5, [pc, #28]	; (800c67c <_kill_r+0x20>)
 800c660:	2300      	movs	r3, #0
 800c662:	4604      	mov	r4, r0
 800c664:	4608      	mov	r0, r1
 800c666:	4611      	mov	r1, r2
 800c668:	602b      	str	r3, [r5, #0]
 800c66a:	f7f4 fff5 	bl	8001658 <_kill>
 800c66e:	1c43      	adds	r3, r0, #1
 800c670:	d102      	bne.n	800c678 <_kill_r+0x1c>
 800c672:	682b      	ldr	r3, [r5, #0]
 800c674:	b103      	cbz	r3, 800c678 <_kill_r+0x1c>
 800c676:	6023      	str	r3, [r4, #0]
 800c678:	bd38      	pop	{r3, r4, r5, pc}
 800c67a:	bf00      	nop
 800c67c:	20005108 	.word	0x20005108

0800c680 <_getpid_r>:
 800c680:	f7f4 bfe2 	b.w	8001648 <_getpid>

0800c684 <_init>:
 800c684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c686:	bf00      	nop
 800c688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c68a:	bc08      	pop	{r3}
 800c68c:	469e      	mov	lr, r3
 800c68e:	4770      	bx	lr

0800c690 <_fini>:
 800c690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c692:	bf00      	nop
 800c694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c696:	bc08      	pop	{r3}
 800c698:	469e      	mov	lr, r3
 800c69a:	4770      	bx	lr
