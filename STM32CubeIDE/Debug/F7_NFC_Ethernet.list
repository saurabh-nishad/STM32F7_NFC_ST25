
F7_NFC_Ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000774  0800de80  0800de80  0001de80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5f4  0800e5f4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5f4  0800e5f4  0001e5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5fc  0800e5fc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5fc  0800e5fc  0001e5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e600  0800e600  0001e600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f2c  200001e0  0800e7e4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000510c  0800e7e4  0002510c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bb32  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005822  00000000  00000000  0004bd42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f70  00000000  00000000  00051568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d38  00000000  00000000  000534d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002de9f  00000000  00000000  00055210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c6ab  00000000  00000000  000830af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109381  00000000  00000000  000af75a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b8adb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000942c  00000000  00000000  001b8b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800de64 	.word	0x0800de64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800de64 	.word	0x0800de64

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <green_color_printf>:

static inline void red_color_printf(void) {
	printf("\033[0;31m");
}

static inline void green_color_printf(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	printf("\033[0;32m");
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <green_color_printf+0x10>)
 8000ef2:	f00b f803 	bl	800befc <iprintf>
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	0800de80 	.word	0x0800de80

08000f00 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <MX_FREERTOS_Init+0x18>)
 8000f06:	2100      	movs	r1, #0
 8000f08:	4804      	ldr	r0, [pc, #16]	; (8000f1c <MX_FREERTOS_Init+0x1c>)
 8000f0a:	f007 fa8b 	bl	8008424 <osThreadNew>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a03      	ldr	r2, [pc, #12]	; (8000f20 <MX_FREERTOS_Init+0x20>)
 8000f12:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	0800e1e0 	.word	0x0800e1e0
 8000f1c:	08000f25 	.word	0x08000f25
 8000f20:	200002ac 	.word	0x200002ac

08000f24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(NFC_LED1_TF_GPIO_Port, NFC_LED1_TF_Pin);
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4818      	ldr	r0, [pc, #96]	; (8000f90 <StartDefaultTask+0x6c>)
 8000f30:	f001 fc62 	bl	80027f8 <HAL_GPIO_TogglePin>
	  osDelay(80);
 8000f34:	2050      	movs	r0, #80	; 0x50
 8000f36:	f007 fb1b 	bl	8008570 <osDelay>
	  HAL_GPIO_TogglePin(NFC_LED2_TB_GPIO_Port, NFC_LED2_TB_Pin);
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	4814      	ldr	r0, [pc, #80]	; (8000f90 <StartDefaultTask+0x6c>)
 8000f3e:	f001 fc5b 	bl	80027f8 <HAL_GPIO_TogglePin>
	  osDelay(80);
 8000f42:	2050      	movs	r0, #80	; 0x50
 8000f44:	f007 fb14 	bl	8008570 <osDelay>
	  HAL_GPIO_TogglePin(NFC_LED3_TA_GPIO_Port, NFC_LED3_TA_Pin);
 8000f48:	2108      	movs	r1, #8
 8000f4a:	4812      	ldr	r0, [pc, #72]	; (8000f94 <StartDefaultTask+0x70>)
 8000f4c:	f001 fc54 	bl	80027f8 <HAL_GPIO_TogglePin>
	  osDelay(80);
 8000f50:	2050      	movs	r0, #80	; 0x50
 8000f52:	f007 fb0d 	bl	8008570 <osDelay>
	  HAL_GPIO_TogglePin(NFC_LED4_TV_GPIO_Port, NFC_LED4_TV_Pin);
 8000f56:	2120      	movs	r1, #32
 8000f58:	480e      	ldr	r0, [pc, #56]	; (8000f94 <StartDefaultTask+0x70>)
 8000f5a:	f001 fc4d 	bl	80027f8 <HAL_GPIO_TogglePin>
	  osDelay(80);
 8000f5e:	2050      	movs	r0, #80	; 0x50
 8000f60:	f007 fb06 	bl	8008570 <osDelay>
	  HAL_GPIO_TogglePin(NFC_LED5_AP2P_GPIO_Port, NFC_LED5_AP2P_Pin);
 8000f64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f68:	480a      	ldr	r0, [pc, #40]	; (8000f94 <StartDefaultTask+0x70>)
 8000f6a:	f001 fc45 	bl	80027f8 <HAL_GPIO_TogglePin>
	  osDelay(80);
 8000f6e:	2050      	movs	r0, #80	; 0x50
 8000f70:	f007 fafe 	bl	8008570 <osDelay>
	  HAL_GPIO_TogglePin(NFC_LED6_TX_GPIO_Port, NFC_LED6_TX_Pin);
 8000f74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f78:	4806      	ldr	r0, [pc, #24]	; (8000f94 <StartDefaultTask+0x70>)
 8000f7a:	f001 fc3d 	bl	80027f8 <HAL_GPIO_TogglePin>
	  green_color_printf();
 8000f7e:	f7ff ffb5 	bl	8000eec <green_color_printf>
	  printf("From default Task...\r\n");
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <StartDefaultTask+0x74>)
 8000f84:	f00b f840 	bl	800c008 <puts>
	  osDelay(100);
 8000f88:	2064      	movs	r0, #100	; 0x64
 8000f8a:	f007 faf1 	bl	8008570 <osDelay>
	  HAL_GPIO_TogglePin(NFC_LED1_TF_GPIO_Port, NFC_LED1_TF_Pin);
 8000f8e:	e7cd      	b.n	8000f2c <StartDefaultTask+0x8>
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40021400 	.word	0x40021400
 8000f98:	0800de94 	.word	0x0800de94

08000f9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08c      	sub	sp, #48	; 0x30
 8000fa0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	4b7a      	ldr	r3, [pc, #488]	; (800119c <MX_GPIO_Init+0x200>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a79      	ldr	r2, [pc, #484]	; (800119c <MX_GPIO_Init+0x200>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b77      	ldr	r3, [pc, #476]	; (800119c <MX_GPIO_Init+0x200>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	61bb      	str	r3, [r7, #24]
 8000fc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fca:	4b74      	ldr	r3, [pc, #464]	; (800119c <MX_GPIO_Init+0x200>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a73      	ldr	r2, [pc, #460]	; (800119c <MX_GPIO_Init+0x200>)
 8000fd0:	f043 0320 	orr.w	r3, r3, #32
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b71      	ldr	r3, [pc, #452]	; (800119c <MX_GPIO_Init+0x200>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0320 	and.w	r3, r3, #32
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe2:	4b6e      	ldr	r3, [pc, #440]	; (800119c <MX_GPIO_Init+0x200>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a6d      	ldr	r2, [pc, #436]	; (800119c <MX_GPIO_Init+0x200>)
 8000fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b6b      	ldr	r3, [pc, #428]	; (800119c <MX_GPIO_Init+0x200>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b68      	ldr	r3, [pc, #416]	; (800119c <MX_GPIO_Init+0x200>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a67      	ldr	r2, [pc, #412]	; (800119c <MX_GPIO_Init+0x200>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b65      	ldr	r3, [pc, #404]	; (800119c <MX_GPIO_Init+0x200>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b62      	ldr	r3, [pc, #392]	; (800119c <MX_GPIO_Init+0x200>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a61      	ldr	r2, [pc, #388]	; (800119c <MX_GPIO_Init+0x200>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b5f      	ldr	r3, [pc, #380]	; (800119c <MX_GPIO_Init+0x200>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102a:	4b5c      	ldr	r3, [pc, #368]	; (800119c <MX_GPIO_Init+0x200>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a5b      	ldr	r2, [pc, #364]	; (800119c <MX_GPIO_Init+0x200>)
 8001030:	f043 0308 	orr.w	r3, r3, #8
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b59      	ldr	r3, [pc, #356]	; (800119c <MX_GPIO_Init+0x200>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001042:	4b56      	ldr	r3, [pc, #344]	; (800119c <MX_GPIO_Init+0x200>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a55      	ldr	r2, [pc, #340]	; (800119c <MX_GPIO_Init+0x200>)
 8001048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b53      	ldr	r3, [pc, #332]	; (800119c <MX_GPIO_Init+0x200>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, NFC_LED3_TA_Pin|NFC_LED4_TV_Pin|NFC_LED5_AP2P_Pin|NFC_LED6_TX_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	f242 4128 	movw	r1, #9256	; 0x2428
 8001060:	484f      	ldr	r0, [pc, #316]	; (80011a0 <MX_GPIO_Init+0x204>)
 8001062:	f001 fb9d 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NFC_LED1_TF_Pin|NFC_LED2_TB_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2109      	movs	r1, #9
 800106a:	484e      	ldr	r0, [pc, #312]	; (80011a4 <MX_GPIO_Init+0x208>)
 800106c:	f001 fb98 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f244 0181 	movw	r1, #16513	; 0x4081
 8001076:	484c      	ldr	r0, [pc, #304]	; (80011a8 <MX_GPIO_Init+0x20c>)
 8001078:	f001 fb92 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_SS_GPIO_Port, NFC_SS_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001082:	484a      	ldr	r0, [pc, #296]	; (80011ac <MX_GPIO_Init+0x210>)
 8001084:	f001 fb8c 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	2140      	movs	r1, #64	; 0x40
 800108c:	4848      	ldr	r0, [pc, #288]	; (80011b0 <MX_GPIO_Init+0x214>)
 800108e:	f001 fb87 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001092:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001098:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800109c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	4619      	mov	r1, r3
 80010a8:	483e      	ldr	r0, [pc, #248]	; (80011a4 <MX_GPIO_Init+0x208>)
 80010aa:	f001 f809 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = NFC_LED3_TA_Pin|NFC_LED4_TV_Pin|NFC_LED5_AP2P_Pin|NFC_LED6_TX_Pin;
 80010ae:	f242 4328 	movw	r3, #9256	; 0x2428
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4619      	mov	r1, r3
 80010c6:	4836      	ldr	r0, [pc, #216]	; (80011a0 <MX_GPIO_Init+0x204>)
 80010c8:	f000 fffa 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NFC_LED1_TF_Pin|NFC_LED2_TB_Pin;
 80010cc:	2309      	movs	r3, #9
 80010ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	4830      	ldr	r0, [pc, #192]	; (80011a4 <MX_GPIO_Init+0x208>)
 80010e4:	f000 ffec 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NFC_IRQ_Pin;
 80010e8:	2308      	movs	r3, #8
 80010ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NFC_IRQ_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	482d      	ldr	r0, [pc, #180]	; (80011b4 <MX_GPIO_Init+0x218>)
 80010fe:	f000 ffdf 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001102:	f244 0381 	movw	r3, #16513	; 0x4081
 8001106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4823      	ldr	r0, [pc, #140]	; (80011a8 <MX_GPIO_Init+0x20c>)
 800111c:	f000 ffd0 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NFC_SS_Pin;
 8001120:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001126:	2301      	movs	r3, #1
 8001128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NFC_SS_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4619      	mov	r1, r3
 8001138:	481c      	ldr	r0, [pc, #112]	; (80011ac <MX_GPIO_Init+0x210>)
 800113a:	f000 ffc1 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800113e:	2340      	movs	r3, #64	; 0x40
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	4816      	ldr	r0, [pc, #88]	; (80011b0 <MX_GPIO_Init+0x214>)
 8001156:	f000 ffb3 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	4619      	mov	r1, r3
 800116c:	4810      	ldr	r0, [pc, #64]	; (80011b0 <MX_GPIO_Init+0x214>)
 800116e:	f000 ffa7 	bl	80020c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2105      	movs	r1, #5
 8001176:	2009      	movs	r0, #9
 8001178:	f000 fdd8 	bl	8001d2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800117c:	2009      	movs	r0, #9
 800117e:	f000 fe01 	bl	8001d84 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2105      	movs	r1, #5
 8001186:	2028      	movs	r0, #40	; 0x28
 8001188:	f000 fdd0 	bl	8001d2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800118c:	2028      	movs	r0, #40	; 0x28
 800118e:	f000 fdf9 	bl	8001d84 <HAL_NVIC_EnableIRQ>

}
 8001192:	bf00      	nop
 8001194:	3730      	adds	r7, #48	; 0x30
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40021400 	.word	0x40021400
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40020c00 	.word	0x40020c00
 80011b0:	40021800 	.word	0x40021800
 80011b4:	40020000 	.word	0x40020000

080011b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	80fb      	strh	r3, [r7, #6]
	assert_failed((uint8_t*)__FILE__,	(uint32_t)__LINE__);
 80011c2:	218c      	movs	r1, #140	; 0x8c
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x1c>)
 80011c6:	f000 f8bf 	bl	8001348 <assert_failed>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	0800deac 	.word	0x0800deac

080011d8 <red_color_printf>:
static inline void red_color_printf(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	printf("\033[0;31m");
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <red_color_printf+0x10>)
 80011de:	f00a fe8d 	bl	800befc <iprintf>
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	0800dee4 	.word	0x0800dee4

080011ec <green_color_printf>:
static inline void green_color_printf(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	printf("\033[0;32m");
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <green_color_printf+0x10>)
 80011f2:	f00a fe83 	bl	800befc <iprintf>
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	0800deec 	.word	0x0800deec

08001200 <white_color_printf>:

static inline void yellow_color_printf(void) {
	printf("\033[0;33m");
}

static inline void white_color_printf(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	printf("\033[0;37m");
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <white_color_printf+0x10>)
 8001206:	f00a fe79 	bl	800befc <iprintf>
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	0800def4 	.word	0x0800def4

08001214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001218:	f000 fc8c 	bl	8001b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121c:	f000 f80e 	bl	800123c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001220:	f7ff febc 	bl	8000f9c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001224:	f000 fb14 	bl	8001850 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001228:	f000 f8aa 	bl	8001380 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800122c:	f007 f890 	bl	8008350 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001230:	f7ff fe66 	bl	8000f00 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001234:	f007 f8c0 	bl	80083b8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001238:	e7fe      	b.n	8001238 <main+0x24>
	...

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b094      	sub	sp, #80	; 0x50
 8001240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	f107 0320 	add.w	r3, r7, #32
 8001246:	2230      	movs	r2, #48	; 0x30
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f00a f904 	bl	800b458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001260:	f002 fd60 	bl	8003d24 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001264:	4b2a      	ldr	r3, [pc, #168]	; (8001310 <SystemClock_Config+0xd4>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	4a29      	ldr	r2, [pc, #164]	; (8001310 <SystemClock_Config+0xd4>)
 800126a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126e:	6413      	str	r3, [r2, #64]	; 0x40
 8001270:	4b27      	ldr	r3, [pc, #156]	; (8001310 <SystemClock_Config+0xd4>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <SystemClock_Config+0xd8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a24      	ldr	r2, [pc, #144]	; (8001314 <SystemClock_Config+0xd8>)
 8001282:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b22      	ldr	r3, [pc, #136]	; (8001314 <SystemClock_Config+0xd8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001294:	2301      	movs	r3, #1
 8001296:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001298:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129e:	2302      	movs	r3, #2
 80012a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012a8:	2304      	movs	r3, #4
 80012aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80012ac:	23d8      	movs	r3, #216	; 0xd8
 80012ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80012b4:	2309      	movs	r3, #9
 80012b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b8:	f107 0320 	add.w	r3, r7, #32
 80012bc:	4618      	mov	r0, r3
 80012be:	f002 fd91 	bl	8003de4 <HAL_RCC_OscConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012c8:	f000 f838 	bl	800133c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012cc:	f002 fd3a 	bl	8003d44 <HAL_PWREx_EnableOverDrive>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012d6:	f000 f831 	bl	800133c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012da:	230f      	movs	r3, #15
 80012dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012de:	2302      	movs	r3, #2
 80012e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	2107      	movs	r1, #7
 80012f8:	4618      	mov	r0, r3
 80012fa:	f003 f8cd 	bl	8004498 <HAL_RCC_ClockConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001304:	f000 f81a 	bl	800133c <Error_Handler>
  }
}
 8001308:	bf00      	nop
 800130a:	3750      	adds	r7, #80	; 0x50
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	40007000 	.word	0x40007000

08001318 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800132a:	f000 fc11 	bl	8001b50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40001000 	.word	0x40001000

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001344:	e7fe      	b.n	8001344 <Error_Handler+0x8>
	...

08001348 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	red_color_printf();
 8001352:	f7ff ff41 	bl	80011d8 <red_color_printf>
	printf("Assert Failed: ");
 8001356:	4808      	ldr	r0, [pc, #32]	; (8001378 <assert_failed+0x30>)
 8001358:	f00a fdd0 	bl	800befc <iprintf>
	green_color_printf();
 800135c:	f7ff ff46 	bl	80011ec <green_color_printf>
	printf("Wrong parameters value: file %s on line %d\r\n", file, (uint)line);
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	4805      	ldr	r0, [pc, #20]	; (800137c <assert_failed+0x34>)
 8001366:	f00a fdc9 	bl	800befc <iprintf>
	white_color_printf();
 800136a:	f7ff ff49 	bl	8001200 <white_color_printf>
  /* USER CODE END 6 */
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	0800defc 	.word	0x0800defc
 800137c:	0800df0c 	.word	0x0800df0c

08001380 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <MX_SPI1_Init+0x74>)
 8001386:	4a1c      	ldr	r2, [pc, #112]	; (80013f8 <MX_SPI1_Init+0x78>)
 8001388:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800138a:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <MX_SPI1_Init+0x74>)
 800138c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001390:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <MX_SPI1_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <MX_SPI1_Init+0x74>)
 800139a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800139e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <MX_SPI1_Init+0x74>)
 80013a2:	2202      	movs	r2, #2
 80013a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <MX_SPI1_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_SPI1_Init+0x74>)
 80013ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <MX_SPI1_Init+0x74>)
 80013b6:	2208      	movs	r2, #8
 80013b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_SPI1_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_SPI1_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <MX_SPI1_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_SPI1_Init+0x74>)
 80013ce:	2207      	movs	r2, #7
 80013d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <MX_SPI1_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_SPI1_Init+0x74>)
 80013da:	2208      	movs	r2, #8
 80013dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_SPI1_Init+0x74>)
 80013e0:	f004 fb52 	bl	8005a88 <HAL_SPI_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013ea:	f7ff ffa7 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200002b0 	.word	0x200002b0
 80013f8:	40013000 	.word	0x40013000

080013fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a29      	ldr	r2, [pc, #164]	; (80014c0 <HAL_SPI_MspInit+0xc4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d14b      	bne.n	80014b6 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800141e:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <HAL_SPI_MspInit+0xc8>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a28      	ldr	r2, [pc, #160]	; (80014c4 <HAL_SPI_MspInit+0xc8>)
 8001424:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <HAL_SPI_MspInit+0xc8>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <HAL_SPI_MspInit+0xc8>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a22      	ldr	r2, [pc, #136]	; (80014c4 <HAL_SPI_MspInit+0xc8>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <HAL_SPI_MspInit+0xc8>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <HAL_SPI_MspInit+0xc8>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <HAL_SPI_MspInit+0xc8>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <HAL_SPI_MspInit+0xc8>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NFC_SCK_Pin|NFC_MISO_Pin;
 8001466:	2360      	movs	r3, #96	; 0x60
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001476:	2305      	movs	r3, #5
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4811      	ldr	r0, [pc, #68]	; (80014c8 <HAL_SPI_MspInit+0xcc>)
 8001482:	f000 fe1d 	bl	80020c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NFC_MOSI_Pin;
 8001486:	2320      	movs	r3, #32
 8001488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001496:	2305      	movs	r3, #5
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(NFC_MOSI_GPIO_Port, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	480a      	ldr	r0, [pc, #40]	; (80014cc <HAL_SPI_MspInit+0xd0>)
 80014a2:	f000 fe0d 	bl	80020c0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2105      	movs	r1, #5
 80014aa:	2023      	movs	r0, #35	; 0x23
 80014ac:	f000 fc3e 	bl	8001d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80014b0:	2023      	movs	r0, #35	; 0x23
 80014b2:	f000 fc67 	bl	8001d84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	; 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40013000 	.word	0x40013000
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020000 	.word	0x40020000
 80014cc:	40020400 	.word	0x40020400

080014d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_MspInit+0x4c>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	4a10      	ldr	r2, [pc, #64]	; (800151c <HAL_MspInit+0x4c>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	6413      	str	r3, [r2, #64]	; 0x40
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <HAL_MspInit+0x4c>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_MspInit+0x4c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <HAL_MspInit+0x4c>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <HAL_MspInit+0x4c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	210f      	movs	r1, #15
 800150a:	f06f 0001 	mvn.w	r0, #1
 800150e:	f000 fc0d 	bl	8001d2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800

08001520 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08e      	sub	sp, #56	; 0x38
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001530:	4b33      	ldr	r3, [pc, #204]	; (8001600 <HAL_InitTick+0xe0>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	4a32      	ldr	r2, [pc, #200]	; (8001600 <HAL_InitTick+0xe0>)
 8001536:	f043 0310 	orr.w	r3, r3, #16
 800153a:	6413      	str	r3, [r2, #64]	; 0x40
 800153c:	4b30      	ldr	r3, [pc, #192]	; (8001600 <HAL_InitTick+0xe0>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f003 0310 	and.w	r3, r3, #16
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001548:	f107 0210 	add.w	r2, r7, #16
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fa82 	bl	8004a5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001558:	6a3b      	ldr	r3, [r7, #32]
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	2b00      	cmp	r3, #0
 8001560:	d103      	bne.n	800156a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001562:	f003 fa53 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 8001566:	6378      	str	r0, [r7, #52]	; 0x34
 8001568:	e004      	b.n	8001574 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800156a:	f003 fa4f 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 800156e:	4603      	mov	r3, r0
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001576:	4a23      	ldr	r2, [pc, #140]	; (8001604 <HAL_InitTick+0xe4>)
 8001578:	fba2 2303 	umull	r2, r3, r2, r3
 800157c:	0c9b      	lsrs	r3, r3, #18
 800157e:	3b01      	subs	r3, #1
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <HAL_InitTick+0xe8>)
 8001584:	4a21      	ldr	r2, [pc, #132]	; (800160c <HAL_InitTick+0xec>)
 8001586:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001588:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <HAL_InitTick+0xe8>)
 800158a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800158e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001590:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <HAL_InitTick+0xe8>)
 8001592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001594:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <HAL_InitTick+0xe8>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <HAL_InitTick+0xe8>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_InitTick+0xe8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015a8:	4817      	ldr	r0, [pc, #92]	; (8001608 <HAL_InitTick+0xe8>)
 80015aa:	f004 fd99 	bl	80060e0 <HAL_TIM_Base_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d11b      	bne.n	80015f4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015bc:	4812      	ldr	r0, [pc, #72]	; (8001608 <HAL_InitTick+0xe8>)
 80015be:	f004 feb9 	bl	8006334 <HAL_TIM_Base_Start_IT>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d111      	bne.n	80015f4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015d0:	2036      	movs	r0, #54	; 0x36
 80015d2:	f000 fbd7 	bl	8001d84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b0f      	cmp	r3, #15
 80015da:	d808      	bhi.n	80015ee <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015dc:	2200      	movs	r2, #0
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	2036      	movs	r0, #54	; 0x36
 80015e2:	f000 fba3 	bl	8001d2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <HAL_InitTick+0xf0>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	e002      	b.n	80015f4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3738      	adds	r7, #56	; 0x38
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	431bde83 	.word	0x431bde83
 8001608:	20000314 	.word	0x20000314
 800160c:	40001000 	.word	0x40001000
 8001610:	20000004 	.word	0x20000004

08001614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <NMI_Handler+0x4>

0800161a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <MemManage_Handler+0x4>

08001626 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <UsageFault_Handler+0x4>

08001632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_IRQ_Pin);
 8001644:	2008      	movs	r0, #8
 8001646:	f001 f8f9 	bl	800283c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <SPI1_IRQHandler+0x10>)
 8001656:	f004 fc23 	bl	8005ea0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200002b0 	.word	0x200002b0

08001664 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <USART3_IRQHandler+0x10>)
 800166a:	f005 fa7b 	bl	8006b64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000364 	.word	0x20000364

08001678 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800167c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001680:	f001 f8dc 	bl	800283c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}

08001688 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <TIM6_DAC_IRQHandler+0x10>)
 800168e:	f004 ff1f 	bl	80064d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000314 	.word	0x20000314

0800169c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <ETH_IRQHandler+0x10>)
 80016a2:	f000 fc19 	bl	8001ed8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200001fc 	.word	0x200001fc

080016b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <OTG_FS_IRQHandler+0x10>)
 80016b6:	f001 f8d9 	bl	800286c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200003ec 	.word	0x200003ec

080016c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return 1;
 80016c8:	2301      	movs	r3, #1
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_kill>:

int _kill(int pid, int sig)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016de:	f009 fd81 	bl	800b1e4 <__errno>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2216      	movs	r2, #22
 80016e6:	601a      	str	r2, [r3, #0]
  return -1;
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <_exit>:

void _exit (int status)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ffe7 	bl	80016d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001706:	e7fe      	b.n	8001706 <_exit+0x12>

08001708 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	e00a      	b.n	8001730 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800171a:	f3af 8000 	nop.w
 800171e:	4601      	mov	r1, r0
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	60ba      	str	r2, [r7, #8]
 8001726:	b2ca      	uxtb	r2, r1
 8001728:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	3301      	adds	r3, #1
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	429a      	cmp	r2, r3
 8001736:	dbf0      	blt.n	800171a <_read+0x12>
  }

  return len;
 8001738:	687b      	ldr	r3, [r7, #4]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	e009      	b.n	8001768 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	60ba      	str	r2, [r7, #8]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f006 fddd 	bl	800831c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbf1      	blt.n	8001754 <_write+0x12>
  }
  return len;
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_close>:

int _close(int file)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017a2:	605a      	str	r2, [r3, #4]
  return 0;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <_isatty>:

int _isatty(int file)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ec:	4a14      	ldr	r2, [pc, #80]	; (8001840 <_sbrk+0x5c>)
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <_sbrk+0x60>)
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d102      	bne.n	8001806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <_sbrk+0x64>)
 8001802:	4a12      	ldr	r2, [pc, #72]	; (800184c <_sbrk+0x68>)
 8001804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <_sbrk+0x64>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	429a      	cmp	r2, r3
 8001812:	d207      	bcs.n	8001824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001814:	f009 fce6 	bl	800b1e4 <__errno>
 8001818:	4603      	mov	r3, r0
 800181a:	220c      	movs	r2, #12
 800181c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
 8001822:	e009      	b.n	8001838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <_sbrk+0x64>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	4a05      	ldr	r2, [pc, #20]	; (8001848 <_sbrk+0x64>)
 8001834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20050000 	.word	0x20050000
 8001844:	00000800 	.word	0x00000800
 8001848:	20000360 	.word	0x20000360
 800184c:	20005110 	.word	0x20005110

08001850 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <MX_USART3_UART_Init+0x58>)
 8001856:	4a15      	ldr	r2, [pc, #84]	; (80018ac <MX_USART3_UART_Init+0x5c>)
 8001858:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <MX_USART3_UART_Init+0x58>)
 800185c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001860:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_USART3_UART_Init+0x58>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <MX_USART3_UART_Init+0x58>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <MX_USART3_UART_Init+0x58>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_USART3_UART_Init+0x58>)
 8001876:	220c      	movs	r2, #12
 8001878:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <MX_USART3_UART_Init+0x58>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <MX_USART3_UART_Init+0x58>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <MX_USART3_UART_Init+0x58>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <MX_USART3_UART_Init+0x58>)
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_USART3_UART_Init+0x58>)
 8001894:	f005 f822 	bl	80068dc <HAL_UART_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800189e:	f7ff fd4d 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000364 	.word	0x20000364
 80018ac:	40004800 	.word	0x40004800

080018b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b0aa      	sub	sp, #168	; 0xa8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	2284      	movs	r2, #132	; 0x84
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f009 fdc1 	bl	800b458 <memset>
  if(uartHandle->Instance==USART3)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a26      	ldr	r2, [pc, #152]	; (8001974 <HAL_UART_MspInit+0xc4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d144      	bne.n	800196a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	4618      	mov	r0, r3
 80018f0:	f003 f8e6 	bl	8004ac0 <HAL_RCCEx_PeriphCLKConfig>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018fa:	f7ff fd1f 	bl	800133c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018fe:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <HAL_UART_MspInit+0xc8>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <HAL_UART_MspInit+0xc8>)
 8001904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
 800190a:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_UART_MspInit+0xc8>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001916:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_UART_MspInit+0xc8>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a17      	ldr	r2, [pc, #92]	; (8001978 <HAL_UART_MspInit+0xc8>)
 800191c:	f043 0308 	orr.w	r3, r3, #8
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_UART_MspInit+0xc8>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800192e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001932:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800193c:	2301      	movs	r3, #1
 800193e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001942:	2303      	movs	r3, #3
 8001944:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001948:	2307      	movs	r3, #7
 800194a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800194e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001952:	4619      	mov	r1, r3
 8001954:	4809      	ldr	r0, [pc, #36]	; (800197c <HAL_UART_MspInit+0xcc>)
 8001956:	f000 fbb3 	bl	80020c0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2105      	movs	r1, #5
 800195e:	2027      	movs	r0, #39	; 0x27
 8001960:	f000 f9e4 	bl	8001d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001964:	2027      	movs	r0, #39	; 0x27
 8001966:	f000 fa0d 	bl	8001d84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800196a:	bf00      	nop
 800196c:	37a8      	adds	r7, #168	; 0xa8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40004800 	.word	0x40004800
 8001978:	40023800 	.word	0x40023800
 800197c:	40020c00 	.word	0x40020c00

08001980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001986:	490e      	ldr	r1, [pc, #56]	; (80019c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001988:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800199c:	4c0b      	ldr	r4, [pc, #44]	; (80019cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019aa:	f000 f8b1 	bl	8001b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f009 fd15 	bl	800b3dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b2:	f7ff fc2f 	bl	8001214 <main>
  bx  lr    
 80019b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019b8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80019c4:	0800e604 	.word	0x0800e604
  ldr r2, =_sbss
 80019c8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80019cc:	2000510c 	.word	0x2000510c

080019d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC_IRQHandler>

080019d2 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80019e0:	4618      	mov	r0, r3
 80019e2:	f009 fb21 	bl	800b028 <USBH_LL_IncTimer>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80019fc:	4618      	mov	r0, r3
 80019fe:	f009 fb65 	bl	800b0cc <USBH_LL_Connect>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f009 fb7a 	bl	800b112 <USBH_LL_Disconnect>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	70fb      	strb	r3, [r7, #3]
 8001a32:	4613      	mov	r3, r2
 8001a34:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f009 fb9a 	bl	800b176 <USBH_LL_NotifyURBChange>
#endif
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f009 fb0f 	bl	800b07c <USBH_LL_PortEnabled>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8001a74:	4618      	mov	r0, r3
 8001a76:	f009 fb1b 	bl	800b0b0 <USBH_LL_PortDisabled>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 fff2 	bl	8002a82 <HAL_HCD_Stop>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 f807 	bl	8001ab8 <USBH_Get_USB_Status>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001aae:	7bbb      	ldrb	r3, [r7, #14]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d817      	bhi.n	8001afc <USBH_Get_USB_Status+0x44>
 8001acc:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <USBH_Get_USB_Status+0x1c>)
 8001ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad2:	bf00      	nop
 8001ad4:	08001ae5 	.word	0x08001ae5
 8001ad8:	08001aeb 	.word	0x08001aeb
 8001adc:	08001af1 	.word	0x08001af1
 8001ae0:	08001af7 	.word	0x08001af7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8001ae8:	e00b      	b.n	8001b02 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8001aea:	2302      	movs	r3, #2
 8001aec:	73fb      	strb	r3, [r7, #15]
    break;
 8001aee:	e008      	b.n	8001b02 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
    break;
 8001af4:	e005      	b.n	8001b02 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8001af6:	2302      	movs	r3, #2
 8001af8:	73fb      	strb	r3, [r7, #15]
    break;
 8001afa:	e002      	b.n	8001b02 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8001afc:	2302      	movs	r3, #2
 8001afe:	73fb      	strb	r3, [r7, #15]
    break;
 8001b00:	bf00      	nop
  }
  return usb_status;
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <SystemInit+0x20>)
 8001b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1a:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <SystemInit+0x20>)
 8001b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b38:	2003      	movs	r0, #3
 8001b3a:	f000 f8d7 	bl	8001cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b3e:	200f      	movs	r0, #15
 8001b40:	f7ff fcee 	bl	8001520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b44:	f7ff fcc4 	bl	80014d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_IncTick+0x20>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_IncTick+0x24>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <HAL_IncTick+0x24>)
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000008 	.word	0x20000008
 8001b74:	200006f0 	.word	0x200006f0

08001b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <HAL_GetTick+0x14>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	200006f0 	.word	0x200006f0

08001b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bac:	4013      	ands	r3, r2
 8001bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bbe:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x40>)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	60d3      	str	r3, [r2, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00
 8001bd4:	05fa0000 	.word	0x05fa0000

08001bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	f003 0307 	and.w	r3, r3, #7
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	db0b      	blt.n	8001c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4907      	ldr	r1, [pc, #28]	; (8001c2c <__NVIC_EnableIRQ+0x38>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	2001      	movs	r0, #1
 8001c16:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000e100 	.word	0xe000e100

08001c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
         );
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b07      	cmp	r3, #7
 8001cf8:	d00f      	beq.n	8001d1a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b06      	cmp	r3, #6
 8001cfe:	d00c      	beq.n	8001d1a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b05      	cmp	r3, #5
 8001d04:	d009      	beq.n	8001d1a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d006      	beq.n	8001d1a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d003      	beq.n	8001d1a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d12:	2191      	movs	r1, #145	; 0x91
 8001d14:	4804      	ldr	r0, [pc, #16]	; (8001d28 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001d16:	f7ff fb17 	bl	8001348 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ff38 	bl	8001b90 <__NVIC_SetPriorityGrouping>
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	0800df3c 	.word	0x0800df3c

08001d2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b0f      	cmp	r3, #15
 8001d42:	d903      	bls.n	8001d4c <HAL_NVIC_SetPriority+0x20>
 8001d44:	21a9      	movs	r1, #169	; 0xa9
 8001d46:	480e      	ldr	r0, [pc, #56]	; (8001d80 <HAL_NVIC_SetPriority+0x54>)
 8001d48:	f7ff fafe 	bl	8001348 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b0f      	cmp	r3, #15
 8001d50:	d903      	bls.n	8001d5a <HAL_NVIC_SetPriority+0x2e>
 8001d52:	21aa      	movs	r1, #170	; 0xaa
 8001d54:	480a      	ldr	r0, [pc, #40]	; (8001d80 <HAL_NVIC_SetPriority+0x54>)
 8001d56:	f7ff faf7 	bl	8001348 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d5a:	f7ff ff3d 	bl	8001bd8 <__NVIC_GetPriorityGrouping>
 8001d5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	68b9      	ldr	r1, [r7, #8]
 8001d64:	6978      	ldr	r0, [r7, #20]
 8001d66:	f7ff ff8d 	bl	8001c84 <NVIC_EncodePriority>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff5c 	bl	8001c30 <__NVIC_SetPriority>
}
 8001d78:	bf00      	nop
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	0800df3c 	.word	0x0800df3c

08001d84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	da03      	bge.n	8001d9e <HAL_NVIC_EnableIRQ+0x1a>
 8001d96:	21bd      	movs	r1, #189	; 0xbd
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <HAL_NVIC_EnableIRQ+0x2c>)
 8001d9a:	f7ff fad5 	bl	8001348 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ff26 	bl	8001bf4 <__NVIC_EnableIRQ>
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	0800df3c 	.word	0x0800df3c

08001db4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dc2:	f7ff fed9 	bl	8001b78 <HAL_GetTick>
 8001dc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d008      	beq.n	8001de6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2280      	movs	r2, #128	; 0x80
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e052      	b.n	8001e8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0216 	bic.w	r2, r2, #22
 8001df4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d103      	bne.n	8001e16 <HAL_DMA_Abort+0x62>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d007      	beq.n	8001e26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0208 	bic.w	r2, r2, #8
 8001e24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0201 	bic.w	r2, r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e36:	e013      	b.n	8001e60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e38:	f7ff fe9e 	bl	8001b78 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	d90c      	bls.n	8001e60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2203      	movs	r2, #3
 8001e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e015      	b.n	8001e8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1e4      	bne.n	8001e38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	223f      	movs	r2, #63	; 0x3f
 8001e74:	409a      	lsls	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d004      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00c      	b.n	8001ecc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2205      	movs	r2, #5
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0201 	bic.w	r2, r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eee:	2b40      	cmp	r3, #64	; 0x40
 8001ef0:	d112      	bne.n	8001f18 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f00:	2b40      	cmp	r3, #64	; 0x40
 8001f02:	d109      	bne.n	8001f18 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b50      	ldr	r3, [pc, #320]	; (8002050 <HAL_ETH_IRQHandler+0x178>)
 8001f10:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f8ac 	bl	8002070 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d113      	bne.n	8001f52 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d10a      	bne.n	8001f52 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f44:	461a      	mov	r2, r3
 8001f46:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001f4a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f885 	bl	800205c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f64:	d14c      	bne.n	8002000 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f78:	d142      	bne.n	8002000 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f80:	f043 0208 	orr.w	r2, r3, #8
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f9c:	d11a      	bne.n	8001fd4 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa6:	695a      	ldr	r2, [r3, #20]
 8001fa8:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <HAL_ETH_IRQHandler+0x17c>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001fc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fc8:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	22e0      	movs	r2, #224	; 0xe0
 8001fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001fd2:	e012      	b.n	8001ffa <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fdc:	695a      	ldr	r2, [r3, #20]
 8001fde:	f248 6380 	movw	r3, #34432	; 0x8680
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f248 6380 	movw	r3, #34432	; 0x8680
 8001ff8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f842 	bl	8002084 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b08      	cmp	r3, #8
 800200c:	d10e      	bne.n	800202c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f83a 	bl	8002098 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800202c:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_ETH_IRQHandler+0x180>)
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d006      	beq.n	8002046 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002038:	4b07      	ldr	r3, [pc, #28]	; (8002058 <HAL_ETH_IRQHandler+0x180>)
 800203a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800203e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f833 	bl	80020ac <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	00010040 	.word	0x00010040
 8002054:	007e2000 	.word	0x007e2000
 8002058:	40013c00 	.word	0x40013c00

0800205c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a3a      	ldr	r2, [pc, #232]	; (80021c8 <HAL_GPIO_Init+0x108>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d02b      	beq.n	800213a <HAL_GPIO_Init+0x7a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a39      	ldr	r2, [pc, #228]	; (80021cc <HAL_GPIO_Init+0x10c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d027      	beq.n	800213a <HAL_GPIO_Init+0x7a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a38      	ldr	r2, [pc, #224]	; (80021d0 <HAL_GPIO_Init+0x110>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d023      	beq.n	800213a <HAL_GPIO_Init+0x7a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a37      	ldr	r2, [pc, #220]	; (80021d4 <HAL_GPIO_Init+0x114>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d01f      	beq.n	800213a <HAL_GPIO_Init+0x7a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a36      	ldr	r2, [pc, #216]	; (80021d8 <HAL_GPIO_Init+0x118>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01b      	beq.n	800213a <HAL_GPIO_Init+0x7a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a35      	ldr	r2, [pc, #212]	; (80021dc <HAL_GPIO_Init+0x11c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d017      	beq.n	800213a <HAL_GPIO_Init+0x7a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a34      	ldr	r2, [pc, #208]	; (80021e0 <HAL_GPIO_Init+0x120>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d013      	beq.n	800213a <HAL_GPIO_Init+0x7a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a33      	ldr	r2, [pc, #204]	; (80021e4 <HAL_GPIO_Init+0x124>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00f      	beq.n	800213a <HAL_GPIO_Init+0x7a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a32      	ldr	r2, [pc, #200]	; (80021e8 <HAL_GPIO_Init+0x128>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00b      	beq.n	800213a <HAL_GPIO_Init+0x7a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a31      	ldr	r2, [pc, #196]	; (80021ec <HAL_GPIO_Init+0x12c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d007      	beq.n	800213a <HAL_GPIO_Init+0x7a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a30      	ldr	r2, [pc, #192]	; (80021f0 <HAL_GPIO_Init+0x130>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x7a>
 8002132:	21aa      	movs	r1, #170	; 0xaa
 8002134:	482f      	ldr	r0, [pc, #188]	; (80021f4 <HAL_GPIO_Init+0x134>)
 8002136:	f7ff f907 	bl	8001348 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	b29b      	uxth	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d103      	bne.n	800214c <HAL_GPIO_Init+0x8c>
 8002144:	21ab      	movs	r1, #171	; 0xab
 8002146:	482b      	ldr	r0, [pc, #172]	; (80021f4 <HAL_GPIO_Init+0x134>)
 8002148:	f7ff f8fe 	bl	8001348 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d035      	beq.n	80021c0 <HAL_GPIO_Init+0x100>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d031      	beq.n	80021c0 <HAL_GPIO_Init+0x100>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b11      	cmp	r3, #17
 8002162:	d02d      	beq.n	80021c0 <HAL_GPIO_Init+0x100>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d029      	beq.n	80021c0 <HAL_GPIO_Init+0x100>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b12      	cmp	r3, #18
 8002172:	d025      	beq.n	80021c0 <HAL_GPIO_Init+0x100>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800217c:	d020      	beq.n	80021c0 <HAL_GPIO_Init+0x100>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002186:	d01b      	beq.n	80021c0 <HAL_GPIO_Init+0x100>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002190:	d016      	beq.n	80021c0 <HAL_GPIO_Init+0x100>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800219a:	d011      	beq.n	80021c0 <HAL_GPIO_Init+0x100>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80021a4:	d00c      	beq.n	80021c0 <HAL_GPIO_Init+0x100>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80021ae:	d007      	beq.n	80021c0 <HAL_GPIO_Init+0x100>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x100>
 80021b8:	21ac      	movs	r1, #172	; 0xac
 80021ba:	480e      	ldr	r0, [pc, #56]	; (80021f4 <HAL_GPIO_Init+0x134>)
 80021bc:	f7ff f8c4 	bl	8001348 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
 80021c4:	e2c7      	b.n	8002756 <HAL_GPIO_Init+0x696>
 80021c6:	bf00      	nop
 80021c8:	40020000 	.word	0x40020000
 80021cc:	40020400 	.word	0x40020400
 80021d0:	40020800 	.word	0x40020800
 80021d4:	40020c00 	.word	0x40020c00
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40021400 	.word	0x40021400
 80021e0:	40021800 	.word	0x40021800
 80021e4:	40021c00 	.word	0x40021c00
 80021e8:	40022000 	.word	0x40022000
 80021ec:	40022400 	.word	0x40022400
 80021f0:	40022800 	.word	0x40022800
 80021f4:	0800df9c 	.word	0x0800df9c
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80021f8:	2201      	movs	r2, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	429a      	cmp	r2, r3
 8002212:	f040 829d 	bne.w	8002750 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	2b01      	cmp	r3, #1
 8002220:	d005      	beq.n	800222e <HAL_GPIO_Init+0x16e>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d144      	bne.n	80022b8 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00f      	beq.n	8002256 <HAL_GPIO_Init+0x196>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d00b      	beq.n	8002256 <HAL_GPIO_Init+0x196>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d007      	beq.n	8002256 <HAL_GPIO_Init+0x196>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b03      	cmp	r3, #3
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x196>
 800224e:	21bd      	movs	r1, #189	; 0xbd
 8002250:	4831      	ldr	r0, [pc, #196]	; (8002318 <HAL_GPIO_Init+0x258>)
 8002252:	f7ff f879 	bl	8001348 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	2203      	movs	r2, #3
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800228c:	2201      	movs	r2, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 0201 	and.w	r2, r3, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d02b      	beq.n	800231c <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00b      	beq.n	80022e4 <HAL_GPIO_Init+0x224>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d007      	beq.n	80022e4 <HAL_GPIO_Init+0x224>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x224>
 80022dc:	21ce      	movs	r1, #206	; 0xce
 80022de:	480e      	ldr	r0, [pc, #56]	; (8002318 <HAL_GPIO_Init+0x258>)
 80022e0:	f7ff f832 	bl	8001348 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	60da      	str	r2, [r3, #12]
 8002314:	e002      	b.n	800231c <HAL_GPIO_Init+0x25c>
 8002316:	bf00      	nop
 8002318:	0800df9c 	.word	0x0800df9c
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b02      	cmp	r3, #2
 8002326:	f040 8134 	bne.w	8002592 <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 810b 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	2b01      	cmp	r3, #1
 800233a:	f000 8106 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 8101 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80fc 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 80f7 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b01      	cmp	r3, #1
 8002362:	f000 80f2 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b02      	cmp	r3, #2
 800236c:	f000 80ed 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	2b02      	cmp	r3, #2
 8002376:	f000 80e8 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b02      	cmp	r3, #2
 8002380:	f000 80e3 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	2b03      	cmp	r3, #3
 800238a:	f000 80de 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b03      	cmp	r3, #3
 8002394:	f000 80d9 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b03      	cmp	r3, #3
 800239e:	f000 80d4 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	f000 80cf 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	f000 80ca 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	f000 80c5 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	f000 80c0 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	f000 80bb 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	2b04      	cmp	r3, #4
 80023da:	f000 80b6 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	f000 80b1 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	f000 80ac 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b05      	cmp	r3, #5
 80023f8:	f000 80a7 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	2b05      	cmp	r3, #5
 8002402:	f000 80a2 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	2b05      	cmp	r3, #5
 800240c:	f000 809d 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	2b05      	cmp	r3, #5
 8002416:	f000 8098 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2b05      	cmp	r3, #5
 8002420:	f000 8093 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	2b05      	cmp	r3, #5
 800242a:	f000 808e 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b06      	cmp	r3, #6
 8002434:	f000 8089 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	2b06      	cmp	r3, #6
 800243e:	f000 8084 	beq.w	800254a <HAL_GPIO_Init+0x48a>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b07      	cmp	r3, #7
 8002448:	d07f      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b07      	cmp	r3, #7
 8002450:	d07b      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b07      	cmp	r3, #7
 8002458:	d077      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b07      	cmp	r3, #7
 8002460:	d073      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b07      	cmp	r3, #7
 8002468:	d06f      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2b07      	cmp	r3, #7
 8002470:	d06b      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b07      	cmp	r3, #7
 8002478:	d067      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b08      	cmp	r3, #8
 8002480:	d063      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b08      	cmp	r3, #8
 8002488:	d05f      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b08      	cmp	r3, #8
 8002490:	d05b      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b08      	cmp	r3, #8
 8002498:	d057      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d053      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d04f      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d04b      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b09      	cmp	r3, #9
 80024b8:	d047      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b09      	cmp	r3, #9
 80024c0:	d043      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	2b09      	cmp	r3, #9
 80024c8:	d03f      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b09      	cmp	r3, #9
 80024d0:	d03b      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b09      	cmp	r3, #9
 80024d8:	d037      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	2b09      	cmp	r3, #9
 80024e0:	d033      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b09      	cmp	r3, #9
 80024e8:	d02f      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	2b0a      	cmp	r3, #10
 80024f0:	d02b      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	2b0a      	cmp	r3, #10
 80024f8:	d027      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	2b0a      	cmp	r3, #10
 8002500:	d023      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b0a      	cmp	r3, #10
 8002508:	d01f      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2b0b      	cmp	r3, #11
 8002510:	d01b      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	2b0c      	cmp	r3, #12
 8002518:	d017      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	2b0c      	cmp	r3, #12
 8002520:	d013      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b0c      	cmp	r3, #12
 8002528:	d00f      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b0f      	cmp	r3, #15
 8002530:	d00b      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b0d      	cmp	r3, #13
 8002538:	d007      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b0e      	cmp	r3, #14
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x48a>
 8002542:	21db      	movs	r1, #219	; 0xdb
 8002544:	4888      	ldr	r0, [pc, #544]	; (8002768 <HAL_GPIO_Init+0x6a8>)
 8002546:	f7fe feff 	bl	8001348 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	08da      	lsrs	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3208      	adds	r2, #8
 8002552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	220f      	movs	r2, #15
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4013      	ands	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	08da      	lsrs	r2, r3, #3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3208      	adds	r2, #8
 800258c:	69b9      	ldr	r1, [r7, #24]
 800258e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	2203      	movs	r2, #3
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0203 	and.w	r2, r3, #3
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 80be 	beq.w	8002750 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d4:	4b65      	ldr	r3, [pc, #404]	; (800276c <HAL_GPIO_Init+0x6ac>)
 80025d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d8:	4a64      	ldr	r2, [pc, #400]	; (800276c <HAL_GPIO_Init+0x6ac>)
 80025da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025de:	6453      	str	r3, [r2, #68]	; 0x44
 80025e0:	4b62      	ldr	r3, [pc, #392]	; (800276c <HAL_GPIO_Init+0x6ac>)
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025ec:	4a60      	ldr	r2, [pc, #384]	; (8002770 <HAL_GPIO_Init+0x6b0>)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	3302      	adds	r3, #2
 80025f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	220f      	movs	r2, #15
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a58      	ldr	r2, [pc, #352]	; (8002774 <HAL_GPIO_Init+0x6b4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d037      	beq.n	8002688 <HAL_GPIO_Init+0x5c8>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a57      	ldr	r2, [pc, #348]	; (8002778 <HAL_GPIO_Init+0x6b8>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d031      	beq.n	8002684 <HAL_GPIO_Init+0x5c4>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a56      	ldr	r2, [pc, #344]	; (800277c <HAL_GPIO_Init+0x6bc>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d02b      	beq.n	8002680 <HAL_GPIO_Init+0x5c0>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a55      	ldr	r2, [pc, #340]	; (8002780 <HAL_GPIO_Init+0x6c0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d025      	beq.n	800267c <HAL_GPIO_Init+0x5bc>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a54      	ldr	r2, [pc, #336]	; (8002784 <HAL_GPIO_Init+0x6c4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d01f      	beq.n	8002678 <HAL_GPIO_Init+0x5b8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a53      	ldr	r2, [pc, #332]	; (8002788 <HAL_GPIO_Init+0x6c8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d019      	beq.n	8002674 <HAL_GPIO_Init+0x5b4>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a52      	ldr	r2, [pc, #328]	; (800278c <HAL_GPIO_Init+0x6cc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d013      	beq.n	8002670 <HAL_GPIO_Init+0x5b0>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a51      	ldr	r2, [pc, #324]	; (8002790 <HAL_GPIO_Init+0x6d0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d00d      	beq.n	800266c <HAL_GPIO_Init+0x5ac>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a50      	ldr	r2, [pc, #320]	; (8002794 <HAL_GPIO_Init+0x6d4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d007      	beq.n	8002668 <HAL_GPIO_Init+0x5a8>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a4f      	ldr	r2, [pc, #316]	; (8002798 <HAL_GPIO_Init+0x6d8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d101      	bne.n	8002664 <HAL_GPIO_Init+0x5a4>
 8002660:	2309      	movs	r3, #9
 8002662:	e012      	b.n	800268a <HAL_GPIO_Init+0x5ca>
 8002664:	230a      	movs	r3, #10
 8002666:	e010      	b.n	800268a <HAL_GPIO_Init+0x5ca>
 8002668:	2308      	movs	r3, #8
 800266a:	e00e      	b.n	800268a <HAL_GPIO_Init+0x5ca>
 800266c:	2307      	movs	r3, #7
 800266e:	e00c      	b.n	800268a <HAL_GPIO_Init+0x5ca>
 8002670:	2306      	movs	r3, #6
 8002672:	e00a      	b.n	800268a <HAL_GPIO_Init+0x5ca>
 8002674:	2305      	movs	r3, #5
 8002676:	e008      	b.n	800268a <HAL_GPIO_Init+0x5ca>
 8002678:	2304      	movs	r3, #4
 800267a:	e006      	b.n	800268a <HAL_GPIO_Init+0x5ca>
 800267c:	2303      	movs	r3, #3
 800267e:	e004      	b.n	800268a <HAL_GPIO_Init+0x5ca>
 8002680:	2302      	movs	r3, #2
 8002682:	e002      	b.n	800268a <HAL_GPIO_Init+0x5ca>
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <HAL_GPIO_Init+0x5ca>
 8002688:	2300      	movs	r3, #0
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	f002 0203 	and.w	r2, r2, #3
 8002690:	0092      	lsls	r2, r2, #2
 8002692:	4093      	lsls	r3, r2
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800269a:	4935      	ldr	r1, [pc, #212]	; (8002770 <HAL_GPIO_Init+0x6b0>)
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	089b      	lsrs	r3, r3, #2
 80026a0:	3302      	adds	r3, #2
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026a8:	4b3c      	ldr	r3, [pc, #240]	; (800279c <HAL_GPIO_Init+0x6dc>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026cc:	4a33      	ldr	r2, [pc, #204]	; (800279c <HAL_GPIO_Init+0x6dc>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026d2:	4b32      	ldr	r3, [pc, #200]	; (800279c <HAL_GPIO_Init+0x6dc>)
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f6:	4a29      	ldr	r2, [pc, #164]	; (800279c <HAL_GPIO_Init+0x6dc>)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026fc:	4b27      	ldr	r3, [pc, #156]	; (800279c <HAL_GPIO_Init+0x6dc>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002720:	4a1e      	ldr	r2, [pc, #120]	; (800279c <HAL_GPIO_Init+0x6dc>)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002726:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_GPIO_Init+0x6dc>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800274a:	4a14      	ldr	r2, [pc, #80]	; (800279c <HAL_GPIO_Init+0x6dc>)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	3301      	adds	r3, #1
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	2b0f      	cmp	r3, #15
 800275a:	f67f ad4d 	bls.w	80021f8 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 800275e:	bf00      	nop
 8002760:	bf00      	nop
 8002762:	3720      	adds	r7, #32
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	0800df9c 	.word	0x0800df9c
 800276c:	40023800 	.word	0x40023800
 8002770:	40013800 	.word	0x40013800
 8002774:	40020000 	.word	0x40020000
 8002778:	40020400 	.word	0x40020400
 800277c:	40020800 	.word	0x40020800
 8002780:	40020c00 	.word	0x40020c00
 8002784:	40021000 	.word	0x40021000
 8002788:	40021400 	.word	0x40021400
 800278c:	40021800 	.word	0x40021800
 8002790:	40021c00 	.word	0x40021c00
 8002794:	40022000 	.word	0x40022000
 8002798:	40022400 	.word	0x40022400
 800279c:	40013c00 	.word	0x40013c00

080027a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]
 80027ac:	4613      	mov	r3, r2
 80027ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80027b0:	887b      	ldrh	r3, [r7, #2]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d104      	bne.n	80027c0 <HAL_GPIO_WritePin+0x20>
 80027b6:	f240 1197 	movw	r1, #407	; 0x197
 80027ba:	480e      	ldr	r0, [pc, #56]	; (80027f4 <HAL_GPIO_WritePin+0x54>)
 80027bc:	f7fe fdc4 	bl	8001348 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80027c0:	787b      	ldrb	r3, [r7, #1]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d007      	beq.n	80027d6 <HAL_GPIO_WritePin+0x36>
 80027c6:	787b      	ldrb	r3, [r7, #1]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d004      	beq.n	80027d6 <HAL_GPIO_WritePin+0x36>
 80027cc:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80027d0:	4808      	ldr	r0, [pc, #32]	; (80027f4 <HAL_GPIO_WritePin+0x54>)
 80027d2:	f7fe fdb9 	bl	8001348 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80027d6:	787b      	ldrb	r3, [r7, #1]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027dc:	887a      	ldrh	r2, [r7, #2]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80027e2:	e003      	b.n	80027ec <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	041a      	lsls	r2, r3, #16
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	619a      	str	r2, [r3, #24]
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	0800df9c 	.word	0x0800df9c

080027f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002804:	887b      	ldrh	r3, [r7, #2]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d104      	bne.n	8002814 <HAL_GPIO_TogglePin+0x1c>
 800280a:	f240 11af 	movw	r1, #431	; 0x1af
 800280e:	480a      	ldr	r0, [pc, #40]	; (8002838 <HAL_GPIO_TogglePin+0x40>)
 8002810:	f7fe fd9a 	bl	8001348 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800281a:	887a      	ldrh	r2, [r7, #2]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4013      	ands	r3, r2
 8002820:	041a      	lsls	r2, r3, #16
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	43d9      	mvns	r1, r3
 8002826:	887b      	ldrh	r3, [r7, #2]
 8002828:	400b      	ands	r3, r1
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	619a      	str	r2, [r3, #24]
}
 8002830:	bf00      	nop
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	0800df9c 	.word	0x0800df9c

0800283c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002852:	4a05      	ldr	r2, [pc, #20]	; (8002868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe fcac 	bl	80011b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40013c00 	.word	0x40013c00

0800286c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f005 fb62 	bl	8007f4c <USB_GetMode>
 8002888:	4603      	mov	r3, r0
 800288a:	2b01      	cmp	r3, #1
 800288c:	f040 80f6 	bne.w	8002a7c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f005 fb25 	bl	8007ee4 <USB_ReadInterrupts>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80ec 	beq.w	8002a7a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f005 fb1c 	bl	8007ee4 <USB_ReadInterrupts>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028b6:	d104      	bne.n	80028c2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80028c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f005 fb0c 	bl	8007ee4 <USB_ReadInterrupts>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028d6:	d104      	bne.n	80028e2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80028e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f005 fafc 	bl	8007ee4 <USB_ReadInterrupts>
 80028ec:	4603      	mov	r3, r0
 80028ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028f6:	d104      	bne.n	8002902 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002900:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f005 faec 	bl	8007ee4 <USB_ReadInterrupts>
 800290c:	4603      	mov	r3, r0
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b02      	cmp	r3, #2
 8002914:	d103      	bne.n	800291e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2202      	movs	r2, #2
 800291c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f005 fade 	bl	8007ee4 <USB_ReadInterrupts>
 8002928:	4603      	mov	r3, r0
 800292a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800292e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002932:	d11c      	bne.n	800296e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800293c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10f      	bne.n	800296e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800294e:	2110      	movs	r1, #16
 8002950:	6938      	ldr	r0, [r7, #16]
 8002952:	f005 fa0b 	bl	8007d6c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002956:	6938      	ldr	r0, [r7, #16]
 8002958:	f005 fa3c 	bl	8007dd4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2101      	movs	r1, #1
 8002962:	4618      	mov	r0, r3
 8002964:	f005 fb00 	bl	8007f68 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff f84e 	bl	8001a0a <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f005 fab6 	bl	8007ee4 <USB_ReadInterrupts>
 8002978:	4603      	mov	r3, r0
 800297a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800297e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002982:	d102      	bne.n	800298a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f001 f959 	bl	8003c3c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f005 faa8 	bl	8007ee4 <USB_ReadInterrupts>
 8002994:	4603      	mov	r3, r0
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b08      	cmp	r3, #8
 800299c:	d106      	bne.n	80029ac <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff f817 	bl	80019d2 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2208      	movs	r2, #8
 80029aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f005 fa97 	bl	8007ee4 <USB_ReadInterrupts>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b10      	cmp	r3, #16
 80029be:	d101      	bne.n	80029c4 <HAL_HCD_IRQHandler+0x158>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <HAL_HCD_IRQHandler+0x15a>
 80029c4:	2300      	movs	r3, #0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d012      	beq.n	80029f0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699a      	ldr	r2, [r3, #24]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0210 	bic.w	r2, r2, #16
 80029d8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f001 f85c 	bl	8003a98 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699a      	ldr	r2, [r3, #24]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0210 	orr.w	r2, r2, #16
 80029ee:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f005 fa75 	bl	8007ee4 <USB_ReadInterrupts>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a04:	d13a      	bne.n	8002a7c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f005 fae6 	bl	8007fdc <USB_HC_ReadInterrupt>
 8002a10:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	e025      	b.n	8002a64 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d018      	beq.n	8002a5e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a42:	d106      	bne.n	8002a52 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	4619      	mov	r1, r3
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f836 	bl	8002abc <HCD_HC_IN_IRQHandler>
 8002a50:	e005      	b.n	8002a5e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4619      	mov	r1, r3
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fc51 	bl	8003300 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	3301      	adds	r3, #1
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d3d4      	bcc.n	8002a18 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a76:	615a      	str	r2, [r3, #20]
 8002a78:	e000      	b.n	8002a7c <HAL_HCD_IRQHandler+0x210>
      return;
 8002a7a:	bf00      	nop
    }
  }
}
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_HCD_Stop+0x16>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e00d      	b.n	8002ab4 <HAL_HCD_Stop+0x32>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f005 fba6 	bl	80081f6 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f005 fa12 	bl	8007f0a <USB_ReadChInterrupts>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d11a      	bne.n	8002b26 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afc:	461a      	mov	r2, r3
 8002afe:	2304      	movs	r3, #4
 8002b00:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3361      	adds	r3, #97	; 0x61
 8002b10:	2207      	movs	r2, #7
 8002b12:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f005 fa6d 	bl	8007ffe <USB_HC_Halt>
 8002b24:	e0a2      	b.n	8002c6c <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f005 f9ea 	bl	8007f0a <USB_ReadChInterrupts>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b40:	d11b      	bne.n	8002b7a <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b54:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	212c      	movs	r1, #44	; 0x2c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	3361      	adds	r3, #97	; 0x61
 8002b64:	2208      	movs	r2, #8
 8002b66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f005 fa43 	bl	8007ffe <USB_HC_Halt>
 8002b78:	e078      	b.n	8002c6c <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f005 f9c0 	bl	8007f0a <USB_ReadChInterrupts>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d11a      	bne.n	8002bca <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	2308      	movs	r3, #8
 8002ba4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3361      	adds	r3, #97	; 0x61
 8002bb4:	2206      	movs	r2, #6
 8002bb6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f005 fa1b 	bl	8007ffe <USB_HC_Halt>
 8002bc8:	e050      	b.n	8002c6c <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f005 f998 	bl	8007f0a <USB_ReadChInterrupts>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be4:	d11b      	bne.n	8002c1e <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bf8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	3361      	adds	r3, #97	; 0x61
 8002c08:	2209      	movs	r2, #9
 8002c0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	4611      	mov	r1, r2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f005 f9f1 	bl	8007ffe <USB_HC_Halt>
 8002c1c:	e026      	b.n	8002c6c <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f005 f96e 	bl	8007f0a <USB_ReadChInterrupts>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c34:	2b80      	cmp	r3, #128	; 0x80
 8002c36:	d119      	bne.n	8002c6c <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c44:	461a      	mov	r2, r3
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	3361      	adds	r3, #97	; 0x61
 8002c58:	2207      	movs	r2, #7
 8002c5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f005 f9c9 	bl	8007ffe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	4611      	mov	r1, r2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f005 f947 	bl	8007f0a <USB_ReadChInterrupts>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c86:	d112      	bne.n	8002cae <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	4611      	mov	r1, r2
 8002c92:	4618      	mov	r0, r3
 8002c94:	f005 f9b3 	bl	8007ffe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002caa:	6093      	str	r3, [r2, #8]
 8002cac:	e325      	b.n	80032fa <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f005 f926 	bl	8007f0a <USB_ReadChInterrupts>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	f040 80e8 	bne.w	8002e9a <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	2320      	movs	r3, #32
 8002cda:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d019      	beq.n	8002d18 <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	212c      	movs	r1, #44	; 0x2c
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	3348      	adds	r3, #72	; 0x48
 8002cf2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	0159      	lsls	r1, r3, #5
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002d06:	1ad2      	subs	r2, r2, r3
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	202c      	movs	r0, #44	; 0x2c
 8002d0e:	fb00 f303 	mul.w	r3, r0, r3
 8002d12:	440b      	add	r3, r1
 8002d14:	3350      	adds	r3, #80	; 0x50
 8002d16:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3361      	adds	r3, #97	; 0x61
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	212c      	movs	r1, #44	; 0x2c
 8002d30:	fb01 f303 	mul.w	r3, r1, r3
 8002d34:	4413      	add	r3, r2
 8002d36:	335c      	adds	r3, #92	; 0x5c
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	333f      	adds	r3, #63	; 0x3f
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d009      	beq.n	8002d76 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	333f      	adds	r3, #63	; 0x3f
 8002d70:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d111      	bne.n	8002d9a <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	4611      	mov	r1, r2
 8002d80:	4618      	mov	r0, r3
 8002d82:	f005 f93c 	bl	8007ffe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	461a      	mov	r2, r3
 8002d94:	2310      	movs	r3, #16
 8002d96:	6093      	str	r3, [r2, #8]
 8002d98:	e03a      	b.n	8002e10 <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	212c      	movs	r1, #44	; 0x2c
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	333f      	adds	r3, #63	; 0x3f
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d009      	beq.n	8002dc2 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	212c      	movs	r1, #44	; 0x2c
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	333f      	adds	r3, #63	; 0x3f
 8002dbc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d126      	bne.n	8002e10 <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	0151      	lsls	r1, r2, #5
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	440a      	add	r2, r1
 8002dd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ddc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002de0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	212c      	movs	r1, #44	; 0x2c
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	3360      	adds	r3, #96	; 0x60
 8002df0:	2201      	movs	r2, #1
 8002df2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	b2d9      	uxtb	r1, r3
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	202c      	movs	r0, #44	; 0x2c
 8002dfe:	fb00 f303 	mul.w	r3, r0, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	3360      	adds	r3, #96	; 0x60
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe fe0b 	bl	8001a26 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d12b      	bne.n	8002e70 <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	212c      	movs	r1, #44	; 0x2c
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	3348      	adds	r3, #72	; 0x48
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	202c      	movs	r0, #44	; 0x2c
 8002e2e:	fb00 f202 	mul.w	r2, r0, r2
 8002e32:	440a      	add	r2, r1
 8002e34:	3240      	adds	r2, #64	; 0x40
 8002e36:	8812      	ldrh	r2, [r2, #0]
 8002e38:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 825a 	beq.w	80032fa <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	212c      	movs	r1, #44	; 0x2c
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	3354      	adds	r3, #84	; 0x54
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	f083 0301 	eor.w	r3, r3, #1
 8002e5a:	b2d8      	uxtb	r0, r3
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	212c      	movs	r1, #44	; 0x2c
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	3354      	adds	r3, #84	; 0x54
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	e244      	b.n	80032fa <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	212c      	movs	r1, #44	; 0x2c
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3354      	adds	r3, #84	; 0x54
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	f083 0301 	eor.w	r3, r3, #1
 8002e84:	b2d8      	uxtb	r0, r3
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	3354      	adds	r3, #84	; 0x54
 8002e94:	4602      	mov	r2, r0
 8002e96:	701a      	strb	r2, [r3, #0]
 8002e98:	e22f      	b.n	80032fa <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f005 f830 	bl	8007f0a <USB_ReadChInterrupts>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d109      	bne.n	8002ec8 <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2320      	movs	r3, #32
 8002ec4:	6093      	str	r3, [r2, #8]
 8002ec6:	e218      	b.n	80032fa <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f005 f819 	bl	8007f0a <USB_ReadChInterrupts>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	f040 816b 	bne.w	80031ba <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	212c      	movs	r1, #44	; 0x2c
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	4413      	add	r3, r2
 8002f02:	3361      	adds	r3, #97	; 0x61
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d112      	bne.n	8002f30 <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	212c      	movs	r1, #44	; 0x2c
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	4413      	add	r3, r2
 8002f16:	3361      	adds	r3, #97	; 0x61
 8002f18:	2202      	movs	r2, #2
 8002f1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	212c      	movs	r1, #44	; 0x2c
 8002f22:	fb01 f303 	mul.w	r3, r1, r3
 8002f26:	4413      	add	r3, r2
 8002f28:	3360      	adds	r3, #96	; 0x60
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	e135      	b.n	800319c <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	212c      	movs	r1, #44	; 0x2c
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3361      	adds	r3, #97	; 0x61
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b06      	cmp	r3, #6
 8002f42:	d112      	bne.n	8002f6a <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	212c      	movs	r1, #44	; 0x2c
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	3361      	adds	r3, #97	; 0x61
 8002f52:	2202      	movs	r2, #2
 8002f54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	212c      	movs	r1, #44	; 0x2c
 8002f5c:	fb01 f303 	mul.w	r3, r1, r3
 8002f60:	4413      	add	r3, r2
 8002f62:	3360      	adds	r3, #96	; 0x60
 8002f64:	2205      	movs	r2, #5
 8002f66:	701a      	strb	r2, [r3, #0]
 8002f68:	e118      	b.n	800319c <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	212c      	movs	r1, #44	; 0x2c
 8002f70:	fb01 f303 	mul.w	r3, r1, r3
 8002f74:	4413      	add	r3, r2
 8002f76:	3361      	adds	r3, #97	; 0x61
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b07      	cmp	r3, #7
 8002f7c:	d009      	beq.n	8002f92 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	212c      	movs	r1, #44	; 0x2c
 8002f84:	fb01 f303 	mul.w	r3, r1, r3
 8002f88:	4413      	add	r3, r2
 8002f8a:	3361      	adds	r3, #97	; 0x61
 8002f8c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f8e:	2b09      	cmp	r3, #9
 8002f90:	d159      	bne.n	8003046 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	212c      	movs	r1, #44	; 0x2c
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3361      	adds	r3, #97	; 0x61
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	212c      	movs	r1, #44	; 0x2c
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	335c      	adds	r3, #92	; 0x5c
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	202c      	movs	r0, #44	; 0x2c
 8002fbc:	fb00 f303 	mul.w	r3, r0, r3
 8002fc0:	440b      	add	r3, r1
 8002fc2:	335c      	adds	r3, #92	; 0x5c
 8002fc4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	212c      	movs	r1, #44	; 0x2c
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	335c      	adds	r3, #92	; 0x5c
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d912      	bls.n	8003000 <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	212c      	movs	r1, #44	; 0x2c
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	335c      	adds	r3, #92	; 0x5c
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3360      	adds	r3, #96	; 0x60
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ffe:	e0cd      	b.n	800319c <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	212c      	movs	r1, #44	; 0x2c
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	4413      	add	r3, r2
 800300c:	3360      	adds	r3, #96	; 0x60
 800300e:	2202      	movs	r2, #2
 8003010:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4413      	add	r3, r2
 800301a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003028:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003030:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4413      	add	r3, r2
 800303a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303e:	461a      	mov	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003044:	e0aa      	b.n	800319c <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	212c      	movs	r1, #44	; 0x2c
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	4413      	add	r3, r2
 8003052:	3361      	adds	r3, #97	; 0x61
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b05      	cmp	r3, #5
 8003058:	d109      	bne.n	800306e <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	212c      	movs	r1, #44	; 0x2c
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	4413      	add	r3, r2
 8003066:	3361      	adds	r3, #97	; 0x61
 8003068:	2202      	movs	r2, #2
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	e096      	b.n	800319c <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	212c      	movs	r1, #44	; 0x2c
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	4413      	add	r3, r2
 800307a:	3361      	adds	r3, #97	; 0x61
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b03      	cmp	r3, #3
 8003080:	d109      	bne.n	8003096 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	212c      	movs	r1, #44	; 0x2c
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	4413      	add	r3, r2
 800308e:	3361      	adds	r3, #97	; 0x61
 8003090:	2202      	movs	r2, #2
 8003092:	701a      	strb	r2, [r3, #0]
 8003094:	e082      	b.n	800319c <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	212c      	movs	r1, #44	; 0x2c
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	4413      	add	r3, r2
 80030a2:	3361      	adds	r3, #97	; 0x61
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d13f      	bne.n	800312a <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	212c      	movs	r1, #44	; 0x2c
 80030b0:	fb01 f303 	mul.w	r3, r1, r3
 80030b4:	4413      	add	r3, r2
 80030b6:	3361      	adds	r3, #97	; 0x61
 80030b8:	2202      	movs	r2, #2
 80030ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	212c      	movs	r1, #44	; 0x2c
 80030c2:	fb01 f303 	mul.w	r3, r1, r3
 80030c6:	4413      	add	r3, r2
 80030c8:	3360      	adds	r3, #96	; 0x60
 80030ca:	2202      	movs	r2, #2
 80030cc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	212c      	movs	r1, #44	; 0x2c
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	4413      	add	r3, r2
 80030da:	333f      	adds	r3, #63	; 0x3f
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	212c      	movs	r1, #44	; 0x2c
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	333f      	adds	r3, #63	; 0x3f
 80030f0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d152      	bne.n	800319c <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800310c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003114:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4413      	add	r3, r2
 800311e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003122:	461a      	mov	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	e038      	b.n	800319c <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	212c      	movs	r1, #44	; 0x2c
 8003130:	fb01 f303 	mul.w	r3, r1, r3
 8003134:	4413      	add	r3, r2
 8003136:	3361      	adds	r3, #97	; 0x61
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b08      	cmp	r3, #8
 800313c:	d123      	bne.n	8003186 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	3361      	adds	r3, #97	; 0x61
 800314c:	2202      	movs	r2, #2
 800314e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	212c      	movs	r1, #44	; 0x2c
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	4413      	add	r3, r2
 800315c:	335c      	adds	r3, #92	; 0x5c
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	202c      	movs	r0, #44	; 0x2c
 8003168:	fb00 f303 	mul.w	r3, r0, r3
 800316c:	440b      	add	r3, r1
 800316e:	335c      	adds	r3, #92	; 0x5c
 8003170:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	212c      	movs	r1, #44	; 0x2c
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	4413      	add	r3, r2
 800317e:	3360      	adds	r3, #96	; 0x60
 8003180:	2204      	movs	r2, #4
 8003182:	701a      	strb	r2, [r3, #0]
 8003184:	e00a      	b.n	800319c <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	212c      	movs	r1, #44	; 0x2c
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	4413      	add	r3, r2
 8003192:	3361      	adds	r3, #97	; 0x61
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b02      	cmp	r3, #2
 8003198:	f000 80ae 	beq.w	80032f8 <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	b2d9      	uxtb	r1, r3
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	202c      	movs	r0, #44	; 0x2c
 80031a6:	fb00 f303 	mul.w	r3, r0, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	3360      	adds	r3, #96	; 0x60
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fe fc37 	bl	8001a26 <HAL_HCD_HC_NotifyURBChange_Callback>
 80031b8:	e09f      	b.n	80032fa <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	4611      	mov	r1, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f004 fea0 	bl	8007f0a <USB_ReadChInterrupts>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d0:	2b40      	cmp	r3, #64	; 0x40
 80031d2:	d123      	bne.n	800321c <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e0:	461a      	mov	r2, r3
 80031e2:	2340      	movs	r3, #64	; 0x40
 80031e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	212c      	movs	r1, #44	; 0x2c
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	3361      	adds	r3, #97	; 0x61
 80031f4:	2205      	movs	r2, #5
 80031f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	212c      	movs	r1, #44	; 0x2c
 80031fe:	fb01 f303 	mul.w	r3, r1, r3
 8003202:	4413      	add	r3, r2
 8003204:	335c      	adds	r3, #92	; 0x5c
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f004 fef2 	bl	8007ffe <USB_HC_Halt>
 800321a:	e06e      	b.n	80032fa <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	4611      	mov	r1, r2
 8003226:	4618      	mov	r0, r3
 8003228:	f004 fe6f 	bl	8007f0a <USB_ReadChInterrupts>
 800322c:	4603      	mov	r3, r0
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	2b10      	cmp	r3, #16
 8003234:	d161      	bne.n	80032fa <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	212c      	movs	r1, #44	; 0x2c
 800323c:	fb01 f303 	mul.w	r3, r1, r3
 8003240:	4413      	add	r3, r2
 8003242:	333f      	adds	r3, #63	; 0x3f
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b03      	cmp	r3, #3
 8003248:	d11a      	bne.n	8003280 <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	212c      	movs	r1, #44	; 0x2c
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	4413      	add	r3, r2
 8003256:	335c      	adds	r3, #92	; 0x5c
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	212c      	movs	r1, #44	; 0x2c
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	4413      	add	r3, r2
 8003268:	3361      	adds	r3, #97	; 0x61
 800326a:	2204      	movs	r2, #4
 800326c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f004 fec0 	bl	8007ffe <USB_HC_Halt>
 800327e:	e031      	b.n	80032e4 <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	212c      	movs	r1, #44	; 0x2c
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	333f      	adds	r3, #63	; 0x3f
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d009      	beq.n	80032a8 <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	212c      	movs	r1, #44	; 0x2c
 800329a:	fb01 f303 	mul.w	r3, r1, r3
 800329e:	4413      	add	r3, r2
 80032a0:	333f      	adds	r3, #63	; 0x3f
 80032a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d11d      	bne.n	80032e4 <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	212c      	movs	r1, #44	; 0x2c
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	335c      	adds	r3, #92	; 0x5c
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d110      	bne.n	80032e4 <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	212c      	movs	r1, #44	; 0x2c
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	3361      	adds	r3, #97	; 0x61
 80032d0:	2204      	movs	r2, #4
 80032d2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	4611      	mov	r1, r2
 80032de:	4618      	mov	r0, r3
 80032e0:	f004 fe8d 	bl	8007ffe <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f0:	461a      	mov	r2, r3
 80032f2:	2310      	movs	r3, #16
 80032f4:	6093      	str	r3, [r2, #8]
 80032f6:	e000      	b.n	80032fa <HCD_HC_IN_IRQHandler+0x83e>
        return;
 80032f8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f004 fdf0 	bl	8007f0a <USB_ReadChInterrupts>
 800332a:	4603      	mov	r3, r0
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b04      	cmp	r3, #4
 8003332:	d11a      	bne.n	800336a <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	461a      	mov	r2, r3
 8003342:	2304      	movs	r3, #4
 8003344:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	212c      	movs	r1, #44	; 0x2c
 800334c:	fb01 f303 	mul.w	r3, r1, r3
 8003350:	4413      	add	r3, r2
 8003352:	3361      	adds	r3, #97	; 0x61
 8003354:	2207      	movs	r2, #7
 8003356:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	4611      	mov	r1, r2
 8003362:	4618      	mov	r0, r3
 8003364:	f004 fe4b 	bl	8007ffe <USB_HC_Halt>
 8003368:	e393      	b.n	8003a92 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f004 fdc8 	bl	8007f0a <USB_ReadChInterrupts>
 800337a:	4603      	mov	r3, r0
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b20      	cmp	r3, #32
 8003382:	d137      	bne.n	80033f4 <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	4413      	add	r3, r2
 800338c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003390:	461a      	mov	r2, r3
 8003392:	2320      	movs	r3, #32
 8003394:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	212c      	movs	r1, #44	; 0x2c
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	4413      	add	r3, r2
 80033a2:	333d      	adds	r3, #61	; 0x3d
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	f040 8373 	bne.w	8003a92 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	212c      	movs	r1, #44	; 0x2c
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	333d      	adds	r3, #61	; 0x3d
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	212c      	movs	r1, #44	; 0x2c
 80033c4:	fb01 f303 	mul.w	r3, r1, r3
 80033c8:	4413      	add	r3, r2
 80033ca:	3360      	adds	r3, #96	; 0x60
 80033cc:	2202      	movs	r2, #2
 80033ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	212c      	movs	r1, #44	; 0x2c
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	4413      	add	r3, r2
 80033dc:	3361      	adds	r3, #97	; 0x61
 80033de:	2203      	movs	r2, #3
 80033e0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f004 fe06 	bl	8007ffe <USB_HC_Halt>
 80033f2:	e34e      	b.n	8003a92 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f004 fd83 	bl	8007f0a <USB_ReadChInterrupts>
 8003404:	4603      	mov	r3, r0
 8003406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800340a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800340e:	d112      	bne.n	8003436 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	4413      	add	r3, r2
 8003418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341c:	461a      	mov	r2, r3
 800341e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003422:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	4611      	mov	r1, r2
 800342e:	4618      	mov	r0, r3
 8003430:	f004 fde5 	bl	8007ffe <USB_HC_Halt>
 8003434:	e32d      	b.n	8003a92 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f004 fd62 	bl	8007f0a <USB_ReadChInterrupts>
 8003446:	4603      	mov	r3, r0
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b01      	cmp	r3, #1
 800344e:	d142      	bne.n	80034d6 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	212c      	movs	r1, #44	; 0x2c
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	4413      	add	r3, r2
 800345c:	335c      	adds	r3, #92	; 0x5c
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	4611      	mov	r1, r2
 800346c:	4618      	mov	r0, r3
 800346e:	f004 fd4c 	bl	8007f0a <USB_ReadChInterrupts>
 8003472:	4603      	mov	r3, r0
 8003474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003478:	2b40      	cmp	r3, #64	; 0x40
 800347a:	d111      	bne.n	80034a0 <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	212c      	movs	r1, #44	; 0x2c
 8003482:	fb01 f303 	mul.w	r3, r1, r3
 8003486:	4413      	add	r3, r2
 8003488:	333d      	adds	r3, #61	; 0x3d
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	4413      	add	r3, r2
 8003496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349a:	461a      	mov	r2, r3
 800349c:	2340      	movs	r3, #64	; 0x40
 800349e:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ac:	461a      	mov	r2, r3
 80034ae:	2301      	movs	r3, #1
 80034b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	212c      	movs	r1, #44	; 0x2c
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	3361      	adds	r3, #97	; 0x61
 80034c0:	2201      	movs	r2, #1
 80034c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f004 fd95 	bl	8007ffe <USB_HC_Halt>
 80034d4:	e2dd      	b.n	8003a92 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f004 fd12 	bl	8007f0a <USB_ReadChInterrupts>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ec:	2b40      	cmp	r3, #64	; 0x40
 80034ee:	d12c      	bne.n	800354a <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	212c      	movs	r1, #44	; 0x2c
 80034f6:	fb01 f303 	mul.w	r3, r1, r3
 80034fa:	4413      	add	r3, r2
 80034fc:	3361      	adds	r3, #97	; 0x61
 80034fe:	2205      	movs	r2, #5
 8003500:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	212c      	movs	r1, #44	; 0x2c
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	4413      	add	r3, r2
 800350e:	333d      	adds	r3, #61	; 0x3d
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	212c      	movs	r1, #44	; 0x2c
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	335c      	adds	r3, #92	; 0x5c
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f004 fd64 	bl	8007ffe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	4413      	add	r3, r2
 800353e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003542:	461a      	mov	r2, r3
 8003544:	2340      	movs	r3, #64	; 0x40
 8003546:	6093      	str	r3, [r2, #8]
 8003548:	e2a3      	b.n	8003a92 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f004 fcd8 	bl	8007f0a <USB_ReadChInterrupts>
 800355a:	4603      	mov	r3, r0
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b08      	cmp	r3, #8
 8003562:	d11a      	bne.n	800359a <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	4413      	add	r3, r2
 800356c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003570:	461a      	mov	r2, r3
 8003572:	2308      	movs	r3, #8
 8003574:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	212c      	movs	r1, #44	; 0x2c
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	4413      	add	r3, r2
 8003582:	3361      	adds	r3, #97	; 0x61
 8003584:	2206      	movs	r2, #6
 8003586:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	4611      	mov	r1, r2
 8003592:	4618      	mov	r0, r3
 8003594:	f004 fd33 	bl	8007ffe <USB_HC_Halt>
 8003598:	e27b      	b.n	8003a92 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f004 fcb0 	bl	8007f0a <USB_ReadChInterrupts>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b10      	cmp	r3, #16
 80035b2:	d140      	bne.n	8003636 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	212c      	movs	r1, #44	; 0x2c
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	4413      	add	r3, r2
 80035c0:	335c      	adds	r3, #92	; 0x5c
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	212c      	movs	r1, #44	; 0x2c
 80035cc:	fb01 f303 	mul.w	r3, r1, r3
 80035d0:	4413      	add	r3, r2
 80035d2:	3361      	adds	r3, #97	; 0x61
 80035d4:	2204      	movs	r2, #4
 80035d6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	212c      	movs	r1, #44	; 0x2c
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	4413      	add	r3, r2
 80035e4:	333d      	adds	r3, #61	; 0x3d
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d112      	bne.n	8003612 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	212c      	movs	r1, #44	; 0x2c
 80035f2:	fb01 f303 	mul.w	r3, r1, r3
 80035f6:	4413      	add	r3, r2
 80035f8:	333c      	adds	r3, #60	; 0x3c
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d108      	bne.n	8003612 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	212c      	movs	r1, #44	; 0x2c
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	4413      	add	r3, r2
 800360c:	333d      	adds	r3, #61	; 0x3d
 800360e:	2201      	movs	r2, #1
 8003610:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f004 fcee 	bl	8007ffe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	4413      	add	r3, r2
 800362a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800362e:	461a      	mov	r2, r3
 8003630:	2310      	movs	r3, #16
 8003632:	6093      	str	r3, [r2, #8]
 8003634:	e22d      	b.n	8003a92 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f004 fc62 	bl	8007f0a <USB_ReadChInterrupts>
 8003646:	4603      	mov	r3, r0
 8003648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364c:	2b80      	cmp	r3, #128	; 0x80
 800364e:	d164      	bne.n	800371a <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d111      	bne.n	800367c <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	212c      	movs	r1, #44	; 0x2c
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	4413      	add	r3, r2
 8003664:	3361      	adds	r3, #97	; 0x61
 8003666:	2207      	movs	r2, #7
 8003668:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f004 fcc2 	bl	8007ffe <USB_HC_Halt>
 800367a:	e044      	b.n	8003706 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	212c      	movs	r1, #44	; 0x2c
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	4413      	add	r3, r2
 8003688:	335c      	adds	r3, #92	; 0x5c
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	202c      	movs	r0, #44	; 0x2c
 8003694:	fb00 f303 	mul.w	r3, r0, r3
 8003698:	440b      	add	r3, r1
 800369a:	335c      	adds	r3, #92	; 0x5c
 800369c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	212c      	movs	r1, #44	; 0x2c
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	335c      	adds	r3, #92	; 0x5c
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d920      	bls.n	80036f4 <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	212c      	movs	r1, #44	; 0x2c
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	4413      	add	r3, r2
 80036be:	335c      	adds	r3, #92	; 0x5c
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	212c      	movs	r1, #44	; 0x2c
 80036ca:	fb01 f303 	mul.w	r3, r1, r3
 80036ce:	4413      	add	r3, r2
 80036d0:	3360      	adds	r3, #96	; 0x60
 80036d2:	2204      	movs	r2, #4
 80036d4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	b2d9      	uxtb	r1, r3
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	202c      	movs	r0, #44	; 0x2c
 80036e0:	fb00 f303 	mul.w	r3, r0, r3
 80036e4:	4413      	add	r3, r2
 80036e6:	3360      	adds	r3, #96	; 0x60
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7fe f99a 	bl	8001a26 <HAL_HCD_HC_NotifyURBChange_Callback>
 80036f2:	e008      	b.n	8003706 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	212c      	movs	r1, #44	; 0x2c
 80036fa:	fb01 f303 	mul.w	r3, r1, r3
 80036fe:	4413      	add	r3, r2
 8003700:	3360      	adds	r3, #96	; 0x60
 8003702:	2202      	movs	r2, #2
 8003704:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	4413      	add	r3, r2
 800370e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003712:	461a      	mov	r2, r3
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	6093      	str	r3, [r2, #8]
 8003718:	e1bb      	b.n	8003a92 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	4611      	mov	r1, r2
 8003724:	4618      	mov	r0, r3
 8003726:	f004 fbf0 	bl	8007f0a <USB_ReadChInterrupts>
 800372a:	4603      	mov	r3, r0
 800372c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003734:	d11b      	bne.n	800376e <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	212c      	movs	r1, #44	; 0x2c
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	4413      	add	r3, r2
 8003742:	3361      	adds	r3, #97	; 0x61
 8003744:	2209      	movs	r2, #9
 8003746:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f004 fc53 	bl	8007ffe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003764:	461a      	mov	r2, r3
 8003766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800376a:	6093      	str	r3, [r2, #8]
 800376c:	e191      	b.n	8003a92 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f004 fbc6 	bl	8007f0a <USB_ReadChInterrupts>
 800377e:	4603      	mov	r3, r0
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b02      	cmp	r3, #2
 8003786:	f040 8184 	bne.w	8003a92 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	4413      	add	r3, r2
 8003792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003796:	461a      	mov	r2, r3
 8003798:	2302      	movs	r3, #2
 800379a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	212c      	movs	r1, #44	; 0x2c
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	4413      	add	r3, r2
 80037a8:	3361      	adds	r3, #97	; 0x61
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	f040 8087 	bne.w	80038c0 <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	212c      	movs	r1, #44	; 0x2c
 80037b8:	fb01 f303 	mul.w	r3, r1, r3
 80037bc:	4413      	add	r3, r2
 80037be:	3361      	adds	r3, #97	; 0x61
 80037c0:	2202      	movs	r2, #2
 80037c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	212c      	movs	r1, #44	; 0x2c
 80037ca:	fb01 f303 	mul.w	r3, r1, r3
 80037ce:	4413      	add	r3, r2
 80037d0:	3360      	adds	r3, #96	; 0x60
 80037d2:	2201      	movs	r2, #1
 80037d4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	212c      	movs	r1, #44	; 0x2c
 80037dc:	fb01 f303 	mul.w	r3, r1, r3
 80037e0:	4413      	add	r3, r2
 80037e2:	333f      	adds	r3, #63	; 0x3f
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d00a      	beq.n	8003800 <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	212c      	movs	r1, #44	; 0x2c
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	4413      	add	r3, r2
 80037f6:	333f      	adds	r3, #63	; 0x3f
 80037f8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	f040 8139 	bne.w	8003a72 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d113      	bne.n	8003830 <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	212c      	movs	r1, #44	; 0x2c
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	4413      	add	r3, r2
 8003814:	3355      	adds	r3, #85	; 0x55
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	f083 0301 	eor.w	r3, r3, #1
 800381c:	b2d8      	uxtb	r0, r3
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	212c      	movs	r1, #44	; 0x2c
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	4413      	add	r3, r2
 800382a:	3355      	adds	r3, #85	; 0x55
 800382c:	4602      	mov	r2, r0
 800382e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	2b01      	cmp	r3, #1
 8003836:	f040 811c 	bne.w	8003a72 <HCD_HC_OUT_IRQHandler+0x772>
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	212c      	movs	r1, #44	; 0x2c
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	4413      	add	r3, r2
 8003846:	334c      	adds	r3, #76	; 0x4c
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 8111 	beq.w	8003a72 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	212c      	movs	r1, #44	; 0x2c
 8003856:	fb01 f303 	mul.w	r3, r1, r3
 800385a:	4413      	add	r3, r2
 800385c:	334c      	adds	r3, #76	; 0x4c
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	202c      	movs	r0, #44	; 0x2c
 8003866:	fb00 f202 	mul.w	r2, r0, r2
 800386a:	440a      	add	r2, r1
 800386c:	3240      	adds	r2, #64	; 0x40
 800386e:	8812      	ldrh	r2, [r2, #0]
 8003870:	4413      	add	r3, r2
 8003872:	3b01      	subs	r3, #1
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	202c      	movs	r0, #44	; 0x2c
 800387a:	fb00 f202 	mul.w	r2, r0, r2
 800387e:	440a      	add	r2, r1
 8003880:	3240      	adds	r2, #64	; 0x40
 8003882:	8812      	ldrh	r2, [r2, #0]
 8003884:	fbb3 f3f2 	udiv	r3, r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80ee 	beq.w	8003a72 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	3355      	adds	r3, #85	; 0x55
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	f083 0301 	eor.w	r3, r3, #1
 80038aa:	b2d8      	uxtb	r0, r3
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	212c      	movs	r1, #44	; 0x2c
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	4413      	add	r3, r2
 80038b8:	3355      	adds	r3, #85	; 0x55
 80038ba:	4602      	mov	r2, r0
 80038bc:	701a      	strb	r2, [r3, #0]
 80038be:	e0d8      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	212c      	movs	r1, #44	; 0x2c
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	4413      	add	r3, r2
 80038cc:	3361      	adds	r3, #97	; 0x61
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d109      	bne.n	80038e8 <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	3361      	adds	r3, #97	; 0x61
 80038e2:	2202      	movs	r2, #2
 80038e4:	701a      	strb	r2, [r3, #0]
 80038e6:	e0c4      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	212c      	movs	r1, #44	; 0x2c
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	4413      	add	r3, r2
 80038f4:	3361      	adds	r3, #97	; 0x61
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d112      	bne.n	8003922 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	212c      	movs	r1, #44	; 0x2c
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	3361      	adds	r3, #97	; 0x61
 800390a:	2202      	movs	r2, #2
 800390c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	212c      	movs	r1, #44	; 0x2c
 8003914:	fb01 f303 	mul.w	r3, r1, r3
 8003918:	4413      	add	r3, r2
 800391a:	3360      	adds	r3, #96	; 0x60
 800391c:	2202      	movs	r2, #2
 800391e:	701a      	strb	r2, [r3, #0]
 8003920:	e0a7      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	212c      	movs	r1, #44	; 0x2c
 8003928:	fb01 f303 	mul.w	r3, r1, r3
 800392c:	4413      	add	r3, r2
 800392e:	3361      	adds	r3, #97	; 0x61
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b05      	cmp	r3, #5
 8003934:	d112      	bne.n	800395c <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	212c      	movs	r1, #44	; 0x2c
 800393c:	fb01 f303 	mul.w	r3, r1, r3
 8003940:	4413      	add	r3, r2
 8003942:	3361      	adds	r3, #97	; 0x61
 8003944:	2202      	movs	r2, #2
 8003946:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	212c      	movs	r1, #44	; 0x2c
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	4413      	add	r3, r2
 8003954:	3360      	adds	r3, #96	; 0x60
 8003956:	2202      	movs	r2, #2
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	e08a      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	212c      	movs	r1, #44	; 0x2c
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	3361      	adds	r3, #97	; 0x61
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b06      	cmp	r3, #6
 800396e:	d112      	bne.n	8003996 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	212c      	movs	r1, #44	; 0x2c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	4413      	add	r3, r2
 800397c:	3361      	adds	r3, #97	; 0x61
 800397e:	2202      	movs	r2, #2
 8003980:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	212c      	movs	r1, #44	; 0x2c
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	4413      	add	r3, r2
 800398e:	3360      	adds	r3, #96	; 0x60
 8003990:	2205      	movs	r2, #5
 8003992:	701a      	strb	r2, [r3, #0]
 8003994:	e06d      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	212c      	movs	r1, #44	; 0x2c
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	4413      	add	r3, r2
 80039a2:	3361      	adds	r3, #97	; 0x61
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b07      	cmp	r3, #7
 80039a8:	d009      	beq.n	80039be <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	212c      	movs	r1, #44	; 0x2c
 80039b0:	fb01 f303 	mul.w	r3, r1, r3
 80039b4:	4413      	add	r3, r2
 80039b6:	3361      	adds	r3, #97	; 0x61
 80039b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039ba:	2b09      	cmp	r3, #9
 80039bc:	d168      	bne.n	8003a90 <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	212c      	movs	r1, #44	; 0x2c
 80039c4:	fb01 f303 	mul.w	r3, r1, r3
 80039c8:	4413      	add	r3, r2
 80039ca:	3361      	adds	r3, #97	; 0x61
 80039cc:	2202      	movs	r2, #2
 80039ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	212c      	movs	r1, #44	; 0x2c
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	4413      	add	r3, r2
 80039dc:	335c      	adds	r3, #92	; 0x5c
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	202c      	movs	r0, #44	; 0x2c
 80039e8:	fb00 f303 	mul.w	r3, r0, r3
 80039ec:	440b      	add	r3, r1
 80039ee:	335c      	adds	r3, #92	; 0x5c
 80039f0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	212c      	movs	r1, #44	; 0x2c
 80039f8:	fb01 f303 	mul.w	r3, r1, r3
 80039fc:	4413      	add	r3, r2
 80039fe:	335c      	adds	r3, #92	; 0x5c
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d912      	bls.n	8003a2c <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	212c      	movs	r1, #44	; 0x2c
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	335c      	adds	r3, #92	; 0x5c
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	212c      	movs	r1, #44	; 0x2c
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	4413      	add	r3, r2
 8003a24:	3360      	adds	r3, #96	; 0x60
 8003a26:	2204      	movs	r2, #4
 8003a28:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a2a:	e021      	b.n	8003a70 <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	212c      	movs	r1, #44	; 0x2c
 8003a32:	fb01 f303 	mul.w	r3, r1, r3
 8003a36:	4413      	add	r3, r2
 8003a38:	3360      	adds	r3, #96	; 0x60
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a54:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a5c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a70:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	b2d9      	uxtb	r1, r3
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	202c      	movs	r0, #44	; 0x2c
 8003a7c:	fb00 f303 	mul.w	r3, r0, r3
 8003a80:	4413      	add	r3, r2
 8003a82:	3360      	adds	r3, #96	; 0x60
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7fd ffcc 	bl	8001a26 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a8e:	e000      	b.n	8003a92 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 8003a90:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003a92:	3720      	adds	r7, #32
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08a      	sub	sp, #40	; 0x28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f003 030f 	and.w	r3, r3, #15
 8003ab8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	0c5b      	lsrs	r3, r3, #17
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003acc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d004      	beq.n	8003ade <HCD_RXQLVL_IRQHandler+0x46>
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2b05      	cmp	r3, #5
 8003ad8:	f000 80a9 	beq.w	8003c2e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003adc:	e0aa      	b.n	8003c34 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 80a6 	beq.w	8003c32 <HCD_RXQLVL_IRQHandler+0x19a>
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	212c      	movs	r1, #44	; 0x2c
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	4413      	add	r3, r2
 8003af2:	3344      	adds	r3, #68	; 0x44
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 809b 	beq.w	8003c32 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	212c      	movs	r1, #44	; 0x2c
 8003b02:	fb01 f303 	mul.w	r3, r1, r3
 8003b06:	4413      	add	r3, r2
 8003b08:	3350      	adds	r3, #80	; 0x50
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	441a      	add	r2, r3
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	202c      	movs	r0, #44	; 0x2c
 8003b16:	fb00 f303 	mul.w	r3, r0, r3
 8003b1a:	440b      	add	r3, r1
 8003b1c:	334c      	adds	r3, #76	; 0x4c
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d87a      	bhi.n	8003c1a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6818      	ldr	r0, [r3, #0]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	212c      	movs	r1, #44	; 0x2c
 8003b2e:	fb01 f303 	mul.w	r3, r1, r3
 8003b32:	4413      	add	r3, r2
 8003b34:	3344      	adds	r3, #68	; 0x44
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	b292      	uxth	r2, r2
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	f004 f979 	bl	8007e34 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	212c      	movs	r1, #44	; 0x2c
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3344      	adds	r3, #68	; 0x44
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	441a      	add	r2, r3
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	202c      	movs	r0, #44	; 0x2c
 8003b5c:	fb00 f303 	mul.w	r3, r0, r3
 8003b60:	440b      	add	r3, r1
 8003b62:	3344      	adds	r3, #68	; 0x44
 8003b64:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	212c      	movs	r1, #44	; 0x2c
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	4413      	add	r3, r2
 8003b72:	3350      	adds	r3, #80	; 0x50
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	441a      	add	r2, r3
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	202c      	movs	r0, #44	; 0x2c
 8003b80:	fb00 f303 	mul.w	r3, r0, r3
 8003b84:	440b      	add	r3, r1
 8003b86:	3350      	adds	r3, #80	; 0x50
 8003b88:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	0cdb      	lsrs	r3, r3, #19
 8003b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b9e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	212c      	movs	r1, #44	; 0x2c
 8003ba6:	fb01 f303 	mul.w	r3, r1, r3
 8003baa:	4413      	add	r3, r2
 8003bac:	3340      	adds	r3, #64	; 0x40
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d13c      	bne.n	8003c32 <HCD_RXQLVL_IRQHandler+0x19a>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d039      	beq.n	8003c32 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bd4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bdc:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bea:	461a      	mov	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	212c      	movs	r1, #44	; 0x2c
 8003bf6:	fb01 f303 	mul.w	r3, r1, r3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3354      	adds	r3, #84	; 0x54
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	f083 0301 	eor.w	r3, r3, #1
 8003c04:	b2d8      	uxtb	r0, r3
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	212c      	movs	r1, #44	; 0x2c
 8003c0c:	fb01 f303 	mul.w	r3, r1, r3
 8003c10:	4413      	add	r3, r2
 8003c12:	3354      	adds	r3, #84	; 0x54
 8003c14:	4602      	mov	r2, r0
 8003c16:	701a      	strb	r2, [r3, #0]
      break;
 8003c18:	e00b      	b.n	8003c32 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	212c      	movs	r1, #44	; 0x2c
 8003c20:	fb01 f303 	mul.w	r3, r1, r3
 8003c24:	4413      	add	r3, r2
 8003c26:	3360      	adds	r3, #96	; 0x60
 8003c28:	2204      	movs	r2, #4
 8003c2a:	701a      	strb	r2, [r3, #0]
      break;
 8003c2c:	e001      	b.n	8003c32 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003c2e:	bf00      	nop
 8003c30:	e000      	b.n	8003c34 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003c32:	bf00      	nop
  }
}
 8003c34:	bf00      	nop
 8003c36:	3728      	adds	r7, #40	; 0x28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003c68:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d10b      	bne.n	8003c8c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d102      	bne.n	8003c84 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7fd feb5 	bl	80019ee <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f043 0302 	orr.w	r3, r3, #2
 8003c8a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d132      	bne.n	8003cfc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f043 0308 	orr.w	r3, r3, #8
 8003c9c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d126      	bne.n	8003cf6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d113      	bne.n	8003cd8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003cb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cba:	d106      	bne.n	8003cca <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2102      	movs	r1, #2
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f004 f950 	bl	8007f68 <USB_InitFSLSPClkSel>
 8003cc8:	e011      	b.n	8003cee <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2101      	movs	r1, #1
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f004 f949 	bl	8007f68 <USB_InitFSLSPClkSel>
 8003cd6:	e00a      	b.n	8003cee <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d106      	bne.n	8003cee <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003cec:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fd feab 	bl	8001a4a <HAL_HCD_PortEnabled_Callback>
 8003cf4:	e002      	b.n	8003cfc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fd feb5 	bl	8001a66 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d103      	bne.n	8003d0e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f043 0320 	orr.w	r3, r3, #32
 8003d0c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d14:	461a      	mov	r2, r3
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	6013      	str	r3, [r2, #0]
}
 8003d1a:	bf00      	nop
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a04      	ldr	r2, [pc, #16]	; (8003d40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d32:	6013      	str	r3, [r2, #0]
}
 8003d34:	bf00      	nop
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40007000 	.word	0x40007000

08003d44 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d4e:	4b23      	ldr	r3, [pc, #140]	; (8003ddc <HAL_PWREx_EnableOverDrive+0x98>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	4a22      	ldr	r2, [pc, #136]	; (8003ddc <HAL_PWREx_EnableOverDrive+0x98>)
 8003d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d58:	6413      	str	r3, [r2, #64]	; 0x40
 8003d5a:	4b20      	ldr	r3, [pc, #128]	; (8003ddc <HAL_PWREx_EnableOverDrive+0x98>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d66:	4b1e      	ldr	r3, [pc, #120]	; (8003de0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1d      	ldr	r2, [pc, #116]	; (8003de0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d70:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d72:	f7fd ff01 	bl	8001b78 <HAL_GetTick>
 8003d76:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d78:	e009      	b.n	8003d8e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d7a:	f7fd fefd 	bl	8001b78 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d88:	d901      	bls.n	8003d8e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e022      	b.n	8003dd4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d8e:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d9a:	d1ee      	bne.n	8003d7a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d9c:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0f      	ldr	r2, [pc, #60]	; (8003de0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003da8:	f7fd fee6 	bl	8001b78 <HAL_GetTick>
 8003dac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003dae:	e009      	b.n	8003dc4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003db0:	f7fd fee2 	bl	8001b78 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dbe:	d901      	bls.n	8003dc4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e007      	b.n	8003dd4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003dc4:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dd0:	d1ee      	bne.n	8003db0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40007000 	.word	0x40007000

08003de4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003dec:	2300      	movs	r3, #0
 8003dee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e345      	b.n	8004486 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b0f      	cmp	r3, #15
 8003e00:	d904      	bls.n	8003e0c <HAL_RCC_OscConfig+0x28>
 8003e02:	f240 1163 	movw	r1, #355	; 0x163
 8003e06:	4892      	ldr	r0, [pc, #584]	; (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	f7fd fa9e 	bl	8001348 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 809a 	beq.w	8003f4e <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00e      	beq.n	8003e40 <HAL_RCC_OscConfig+0x5c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e2a:	d009      	beq.n	8003e40 <HAL_RCC_OscConfig+0x5c>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e34:	d004      	beq.n	8003e40 <HAL_RCC_OscConfig+0x5c>
 8003e36:	f240 1169 	movw	r1, #361	; 0x169
 8003e3a:	4885      	ldr	r0, [pc, #532]	; (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	f7fd fa84 	bl	8001348 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e40:	4b84      	ldr	r3, [pc, #528]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 030c 	and.w	r3, r3, #12
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d00c      	beq.n	8003e66 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e4c:	4b81      	ldr	r3, [pc, #516]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 030c 	and.w	r3, r3, #12
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d112      	bne.n	8003e7e <HAL_RCC_OscConfig+0x9a>
 8003e58:	4b7e      	ldr	r3, [pc, #504]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e64:	d10b      	bne.n	8003e7e <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e66:	4b7b      	ldr	r3, [pc, #492]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d06c      	beq.n	8003f4c <HAL_RCC_OscConfig+0x168>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d168      	bne.n	8003f4c <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e303      	b.n	8004486 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e86:	d106      	bne.n	8003e96 <HAL_RCC_OscConfig+0xb2>
 8003e88:	4b72      	ldr	r3, [pc, #456]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a71      	ldr	r2, [pc, #452]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	e02e      	b.n	8003ef4 <HAL_RCC_OscConfig+0x110>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10c      	bne.n	8003eb8 <HAL_RCC_OscConfig+0xd4>
 8003e9e:	4b6d      	ldr	r3, [pc, #436]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a6c      	ldr	r2, [pc, #432]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	4b6a      	ldr	r3, [pc, #424]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a69      	ldr	r2, [pc, #420]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003eb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	e01d      	b.n	8003ef4 <HAL_RCC_OscConfig+0x110>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ec0:	d10c      	bne.n	8003edc <HAL_RCC_OscConfig+0xf8>
 8003ec2:	4b64      	ldr	r3, [pc, #400]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a63      	ldr	r2, [pc, #396]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	4b61      	ldr	r3, [pc, #388]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a60      	ldr	r2, [pc, #384]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	e00b      	b.n	8003ef4 <HAL_RCC_OscConfig+0x110>
 8003edc:	4b5d      	ldr	r3, [pc, #372]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a5c      	ldr	r2, [pc, #368]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	4b5a      	ldr	r3, [pc, #360]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a59      	ldr	r2, [pc, #356]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d013      	beq.n	8003f24 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fd fe3c 	bl	8001b78 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f04:	f7fd fe38 	bl	8001b78 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	; 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e2b7      	b.n	8004486 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f16:	4b4f      	ldr	r3, [pc, #316]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x120>
 8003f22:	e014      	b.n	8003f4e <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f24:	f7fd fe28 	bl	8001b78 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f2c:	f7fd fe24 	bl	8001b78 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b64      	cmp	r3, #100	; 0x64
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e2a3      	b.n	8004486 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3e:	4b45      	ldr	r3, [pc, #276]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x148>
 8003f4a:	e000      	b.n	8003f4e <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 8084 	beq.w	8004064 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <HAL_RCC_OscConfig+0x192>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d004      	beq.n	8003f76 <HAL_RCC_OscConfig+0x192>
 8003f6c:	f240 119b 	movw	r1, #411	; 0x19b
 8003f70:	4837      	ldr	r0, [pc, #220]	; (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003f72:	f7fd f9e9 	bl	8001348 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	2b1f      	cmp	r3, #31
 8003f7c:	d904      	bls.n	8003f88 <HAL_RCC_OscConfig+0x1a4>
 8003f7e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8003f82:	4833      	ldr	r0, [pc, #204]	; (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003f84:	f7fd f9e0 	bl	8001348 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f88:	4b32      	ldr	r3, [pc, #200]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00b      	beq.n	8003fac <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f94:	4b2f      	ldr	r3, [pc, #188]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 030c 	and.w	r3, r3, #12
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d11c      	bne.n	8003fda <HAL_RCC_OscConfig+0x1f6>
 8003fa0:	4b2c      	ldr	r3, [pc, #176]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d116      	bne.n	8003fda <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fac:	4b29      	ldr	r3, [pc, #164]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x1e0>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e260      	b.n	8004486 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc4:	4b23      	ldr	r3, [pc, #140]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	4920      	ldr	r1, [pc, #128]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd8:	e044      	b.n	8004064 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d023      	beq.n	800402a <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fe2:	4b1c      	ldr	r3, [pc, #112]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1b      	ldr	r2, [pc, #108]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fee:	f7fd fdc3 	bl	8001b78 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff6:	f7fd fdbf 	bl	8001b78 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e23e      	b.n	8004486 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004008:	4b12      	ldr	r3, [pc, #72]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f0      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004014:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	490c      	ldr	r1, [pc, #48]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8004024:	4313      	orrs	r3, r2
 8004026:	600b      	str	r3, [r1, #0]
 8004028:	e01c      	b.n	8004064 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800402a:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a09      	ldr	r2, [pc, #36]	; (8004054 <HAL_RCC_OscConfig+0x270>)
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004036:	f7fd fd9f 	bl	8001b78 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800403c:	e00c      	b.n	8004058 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800403e:	f7fd fd9b 	bl	8001b78 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d905      	bls.n	8004058 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e21a      	b.n	8004486 <HAL_RCC_OscConfig+0x6a2>
 8004050:	0800dff8 	.word	0x0800dff8
 8004054:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004058:	4b7e      	ldr	r3, [pc, #504]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1ec      	bne.n	800403e <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d043      	beq.n	80040f8 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_RCC_OscConfig+0x2a6>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d004      	beq.n	800408a <HAL_RCC_OscConfig+0x2a6>
 8004080:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004084:	4874      	ldr	r0, [pc, #464]	; (8004258 <HAL_RCC_OscConfig+0x474>)
 8004086:	f7fd f95f 	bl	8001348 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d019      	beq.n	80040c6 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004092:	4b70      	ldr	r3, [pc, #448]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004096:	4a6f      	ldr	r2, [pc, #444]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409e:	f7fd fd6b 	bl	8001b78 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a6:	f7fd fd67 	bl	8001b78 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e1e6      	b.n	8004486 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b8:	4b66      	ldr	r3, [pc, #408]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0f0      	beq.n	80040a6 <HAL_RCC_OscConfig+0x2c2>
 80040c4:	e018      	b.n	80040f8 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c6:	4b63      	ldr	r3, [pc, #396]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ca:	4a62      	ldr	r2, [pc, #392]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d2:	f7fd fd51 	bl	8001b78 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040da:	f7fd fd4d 	bl	8001b78 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e1cc      	b.n	8004486 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ec:	4b59      	ldr	r3, [pc, #356]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f0      	bne.n	80040da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 80bc 	beq.w	800427e <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00c      	beq.n	8004128 <HAL_RCC_OscConfig+0x344>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d008      	beq.n	8004128 <HAL_RCC_OscConfig+0x344>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b05      	cmp	r3, #5
 800411c:	d004      	beq.n	8004128 <HAL_RCC_OscConfig+0x344>
 800411e:	f240 2106 	movw	r1, #518	; 0x206
 8004122:	484d      	ldr	r0, [pc, #308]	; (8004258 <HAL_RCC_OscConfig+0x474>)
 8004124:	f7fd f910 	bl	8001348 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004128:	4b4a      	ldr	r3, [pc, #296]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10d      	bne.n	8004150 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004134:	4b47      	ldr	r3, [pc, #284]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	4a46      	ldr	r2, [pc, #280]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 800413a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800413e:	6413      	str	r3, [r2, #64]	; 0x40
 8004140:	4b44      	ldr	r3, [pc, #272]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800414c:	2301      	movs	r3, #1
 800414e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004150:	4b42      	ldr	r3, [pc, #264]	; (800425c <HAL_RCC_OscConfig+0x478>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d118      	bne.n	800418e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800415c:	4b3f      	ldr	r3, [pc, #252]	; (800425c <HAL_RCC_OscConfig+0x478>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a3e      	ldr	r2, [pc, #248]	; (800425c <HAL_RCC_OscConfig+0x478>)
 8004162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004166:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004168:	f7fd fd06 	bl	8001b78 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004170:	f7fd fd02 	bl	8001b78 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b64      	cmp	r3, #100	; 0x64
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e181      	b.n	8004486 <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004182:	4b36      	ldr	r3, [pc, #216]	; (800425c <HAL_RCC_OscConfig+0x478>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d106      	bne.n	80041a4 <HAL_RCC_OscConfig+0x3c0>
 8004196:	4b2f      	ldr	r3, [pc, #188]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	4a2e      	ldr	r2, [pc, #184]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	6713      	str	r3, [r2, #112]	; 0x70
 80041a2:	e02d      	b.n	8004200 <HAL_RCC_OscConfig+0x41c>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10c      	bne.n	80041c6 <HAL_RCC_OscConfig+0x3e2>
 80041ac:	4b29      	ldr	r3, [pc, #164]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80041ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b0:	4a28      	ldr	r2, [pc, #160]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80041b2:	f023 0301 	bic.w	r3, r3, #1
 80041b6:	6713      	str	r3, [r2, #112]	; 0x70
 80041b8:	4b26      	ldr	r3, [pc, #152]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80041ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041bc:	4a25      	ldr	r2, [pc, #148]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80041be:	f023 0304 	bic.w	r3, r3, #4
 80041c2:	6713      	str	r3, [r2, #112]	; 0x70
 80041c4:	e01c      	b.n	8004200 <HAL_RCC_OscConfig+0x41c>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b05      	cmp	r3, #5
 80041cc:	d10c      	bne.n	80041e8 <HAL_RCC_OscConfig+0x404>
 80041ce:	4b21      	ldr	r3, [pc, #132]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d2:	4a20      	ldr	r2, [pc, #128]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80041d4:	f043 0304 	orr.w	r3, r3, #4
 80041d8:	6713      	str	r3, [r2, #112]	; 0x70
 80041da:	4b1e      	ldr	r3, [pc, #120]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80041dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041de:	4a1d      	ldr	r2, [pc, #116]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	6713      	str	r3, [r2, #112]	; 0x70
 80041e6:	e00b      	b.n	8004200 <HAL_RCC_OscConfig+0x41c>
 80041e8:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80041ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ec:	4a19      	ldr	r2, [pc, #100]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80041ee:	f023 0301 	bic.w	r3, r3, #1
 80041f2:	6713      	str	r3, [r2, #112]	; 0x70
 80041f4:	4b17      	ldr	r3, [pc, #92]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80041f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f8:	4a16      	ldr	r2, [pc, #88]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80041fa:	f023 0304 	bic.w	r3, r3, #4
 80041fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d015      	beq.n	8004234 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004208:	f7fd fcb6 	bl	8001b78 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420e:	e00a      	b.n	8004226 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004210:	f7fd fcb2 	bl	8001b78 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	; 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e12f      	b.n	8004486 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004226:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0ee      	beq.n	8004210 <HAL_RCC_OscConfig+0x42c>
 8004232:	e01b      	b.n	800426c <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004234:	f7fd fca0 	bl	8001b78 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800423a:	e011      	b.n	8004260 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800423c:	f7fd fc9c 	bl	8001b78 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f241 3288 	movw	r2, #5000	; 0x1388
 800424a:	4293      	cmp	r3, r2
 800424c:	d908      	bls.n	8004260 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e119      	b.n	8004486 <HAL_RCC_OscConfig+0x6a2>
 8004252:	bf00      	nop
 8004254:	40023800 	.word	0x40023800
 8004258:	0800dff8 	.word	0x0800dff8
 800425c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004260:	4b8b      	ldr	r3, [pc, #556]	; (8004490 <HAL_RCC_OscConfig+0x6ac>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e7      	bne.n	800423c <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d105      	bne.n	800427e <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004272:	4b87      	ldr	r3, [pc, #540]	; (8004490 <HAL_RCC_OscConfig+0x6ac>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	4a86      	ldr	r2, [pc, #536]	; (8004490 <HAL_RCC_OscConfig+0x6ac>)
 8004278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800427c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00c      	beq.n	80042a0 <HAL_RCC_OscConfig+0x4bc>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d008      	beq.n	80042a0 <HAL_RCC_OscConfig+0x4bc>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d004      	beq.n	80042a0 <HAL_RCC_OscConfig+0x4bc>
 8004296:	f240 214a 	movw	r1, #586	; 0x24a
 800429a:	487e      	ldr	r0, [pc, #504]	; (8004494 <HAL_RCC_OscConfig+0x6b0>)
 800429c:	f7fd f854 	bl	8001348 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 80ed 	beq.w	8004484 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042aa:	4b79      	ldr	r3, [pc, #484]	; (8004490 <HAL_RCC_OscConfig+0x6ac>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	f000 80b4 	beq.w	8004420 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	2b02      	cmp	r3, #2
 80042be:	f040 8095 	bne.w	80043ec <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d009      	beq.n	80042de <HAL_RCC_OscConfig+0x4fa>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042d2:	d004      	beq.n	80042de <HAL_RCC_OscConfig+0x4fa>
 80042d4:	f240 2153 	movw	r1, #595	; 0x253
 80042d8:	486e      	ldr	r0, [pc, #440]	; (8004494 <HAL_RCC_OscConfig+0x6b0>)
 80042da:	f7fd f835 	bl	8001348 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d903      	bls.n	80042ee <HAL_RCC_OscConfig+0x50a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	2b3f      	cmp	r3, #63	; 0x3f
 80042ec:	d904      	bls.n	80042f8 <HAL_RCC_OscConfig+0x514>
 80042ee:	f44f 7115 	mov.w	r1, #596	; 0x254
 80042f2:	4868      	ldr	r0, [pc, #416]	; (8004494 <HAL_RCC_OscConfig+0x6b0>)
 80042f4:	f7fd f828 	bl	8001348 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	2b31      	cmp	r3, #49	; 0x31
 80042fe:	d904      	bls.n	800430a <HAL_RCC_OscConfig+0x526>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004308:	d904      	bls.n	8004314 <HAL_RCC_OscConfig+0x530>
 800430a:	f240 2155 	movw	r1, #597	; 0x255
 800430e:	4861      	ldr	r0, [pc, #388]	; (8004494 <HAL_RCC_OscConfig+0x6b0>)
 8004310:	f7fd f81a 	bl	8001348 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004318:	2b02      	cmp	r3, #2
 800431a:	d010      	beq.n	800433e <HAL_RCC_OscConfig+0x55a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004320:	2b04      	cmp	r3, #4
 8004322:	d00c      	beq.n	800433e <HAL_RCC_OscConfig+0x55a>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	2b06      	cmp	r3, #6
 800432a:	d008      	beq.n	800433e <HAL_RCC_OscConfig+0x55a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	2b08      	cmp	r3, #8
 8004332:	d004      	beq.n	800433e <HAL_RCC_OscConfig+0x55a>
 8004334:	f240 2156 	movw	r1, #598	; 0x256
 8004338:	4856      	ldr	r0, [pc, #344]	; (8004494 <HAL_RCC_OscConfig+0x6b0>)
 800433a:	f7fd f805 	bl	8001348 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	2b01      	cmp	r3, #1
 8004344:	d903      	bls.n	800434e <HAL_RCC_OscConfig+0x56a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434a:	2b0f      	cmp	r3, #15
 800434c:	d904      	bls.n	8004358 <HAL_RCC_OscConfig+0x574>
 800434e:	f240 2157 	movw	r1, #599	; 0x257
 8004352:	4850      	ldr	r0, [pc, #320]	; (8004494 <HAL_RCC_OscConfig+0x6b0>)
 8004354:	f7fc fff8 	bl	8001348 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004358:	4b4d      	ldr	r3, [pc, #308]	; (8004490 <HAL_RCC_OscConfig+0x6ac>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a4c      	ldr	r2, [pc, #304]	; (8004490 <HAL_RCC_OscConfig+0x6ac>)
 800435e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004364:	f7fd fc08 	bl	8001b78 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800436c:	f7fd fc04 	bl	8001b78 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e083      	b.n	8004486 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437e:	4b44      	ldr	r3, [pc, #272]	; (8004490 <HAL_RCC_OscConfig+0x6ac>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69da      	ldr	r2, [r3, #28]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	019b      	lsls	r3, r3, #6
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	085b      	lsrs	r3, r3, #1
 80043a2:	3b01      	subs	r3, #1
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	061b      	lsls	r3, r3, #24
 80043ae:	4313      	orrs	r3, r2
 80043b0:	4a37      	ldr	r2, [pc, #220]	; (8004490 <HAL_RCC_OscConfig+0x6ac>)
 80043b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043b6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b8:	4b35      	ldr	r3, [pc, #212]	; (8004490 <HAL_RCC_OscConfig+0x6ac>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a34      	ldr	r2, [pc, #208]	; (8004490 <HAL_RCC_OscConfig+0x6ac>)
 80043be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fd fbd8 	bl	8001b78 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043cc:	f7fd fbd4 	bl	8001b78 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e053      	b.n	8004486 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043de:	4b2c      	ldr	r3, [pc, #176]	; (8004490 <HAL_RCC_OscConfig+0x6ac>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x5e8>
 80043ea:	e04b      	b.n	8004484 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ec:	4b28      	ldr	r3, [pc, #160]	; (8004490 <HAL_RCC_OscConfig+0x6ac>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a27      	ldr	r2, [pc, #156]	; (8004490 <HAL_RCC_OscConfig+0x6ac>)
 80043f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7fd fbbe 	bl	8001b78 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004400:	f7fd fbba 	bl	8001b78 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e039      	b.n	8004486 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004412:	4b1f      	ldr	r3, [pc, #124]	; (8004490 <HAL_RCC_OscConfig+0x6ac>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x61c>
 800441e:	e031      	b.n	8004484 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004420:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <HAL_RCC_OscConfig+0x6ac>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d028      	beq.n	8004480 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004438:	429a      	cmp	r2, r3
 800443a:	d121      	bne.n	8004480 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004446:	429a      	cmp	r2, r3
 8004448:	d11a      	bne.n	8004480 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004450:	4013      	ands	r3, r2
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004456:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004458:	4293      	cmp	r3, r2
 800445a:	d111      	bne.n	8004480 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004466:	085b      	lsrs	r3, r3, #1
 8004468:	3b01      	subs	r3, #1
 800446a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800446c:	429a      	cmp	r2, r3
 800446e:	d107      	bne.n	8004480 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800447c:	429a      	cmp	r2, r3
 800447e:	d001      	beq.n	8004484 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e000      	b.n	8004486 <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40023800 	.word	0x40023800
 8004494:	0800dff8 	.word	0x0800dff8

08004498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e18c      	b.n	80047ca <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x28>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b0f      	cmp	r3, #15
 80044be:	d904      	bls.n	80044ca <HAL_RCC_ClockConfig+0x32>
 80044c0:	f240 21dd 	movw	r1, #733	; 0x2dd
 80044c4:	4887      	ldr	r0, [pc, #540]	; (80046e4 <HAL_RCC_ClockConfig+0x24c>)
 80044c6:	f7fc ff3f 	bl	8001348 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d031      	beq.n	8004534 <HAL_RCC_ClockConfig+0x9c>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d02e      	beq.n	8004534 <HAL_RCC_ClockConfig+0x9c>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d02b      	beq.n	8004534 <HAL_RCC_ClockConfig+0x9c>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d028      	beq.n	8004534 <HAL_RCC_ClockConfig+0x9c>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d025      	beq.n	8004534 <HAL_RCC_ClockConfig+0x9c>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b05      	cmp	r3, #5
 80044ec:	d022      	beq.n	8004534 <HAL_RCC_ClockConfig+0x9c>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b06      	cmp	r3, #6
 80044f2:	d01f      	beq.n	8004534 <HAL_RCC_ClockConfig+0x9c>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b07      	cmp	r3, #7
 80044f8:	d01c      	beq.n	8004534 <HAL_RCC_ClockConfig+0x9c>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d019      	beq.n	8004534 <HAL_RCC_ClockConfig+0x9c>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2b09      	cmp	r3, #9
 8004504:	d016      	beq.n	8004534 <HAL_RCC_ClockConfig+0x9c>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b0a      	cmp	r3, #10
 800450a:	d013      	beq.n	8004534 <HAL_RCC_ClockConfig+0x9c>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b0b      	cmp	r3, #11
 8004510:	d010      	beq.n	8004534 <HAL_RCC_ClockConfig+0x9c>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b0c      	cmp	r3, #12
 8004516:	d00d      	beq.n	8004534 <HAL_RCC_ClockConfig+0x9c>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b0d      	cmp	r3, #13
 800451c:	d00a      	beq.n	8004534 <HAL_RCC_ClockConfig+0x9c>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b0e      	cmp	r3, #14
 8004522:	d007      	beq.n	8004534 <HAL_RCC_ClockConfig+0x9c>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b0f      	cmp	r3, #15
 8004528:	d004      	beq.n	8004534 <HAL_RCC_ClockConfig+0x9c>
 800452a:	f240 21de 	movw	r1, #734	; 0x2de
 800452e:	486d      	ldr	r0, [pc, #436]	; (80046e4 <HAL_RCC_ClockConfig+0x24c>)
 8004530:	f7fc ff0a 	bl	8001348 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004534:	4b6c      	ldr	r3, [pc, #432]	; (80046e8 <HAL_RCC_ClockConfig+0x250>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d910      	bls.n	8004564 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004542:	4b69      	ldr	r3, [pc, #420]	; (80046e8 <HAL_RCC_ClockConfig+0x250>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 020f 	bic.w	r2, r3, #15
 800454a:	4967      	ldr	r1, [pc, #412]	; (80046e8 <HAL_RCC_ClockConfig+0x250>)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	4313      	orrs	r3, r2
 8004550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	4b65      	ldr	r3, [pc, #404]	; (80046e8 <HAL_RCC_ClockConfig+0x250>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e132      	b.n	80047ca <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d049      	beq.n	8004604 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800457c:	4b5b      	ldr	r3, [pc, #364]	; (80046ec <HAL_RCC_ClockConfig+0x254>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	4a5a      	ldr	r2, [pc, #360]	; (80046ec <HAL_RCC_ClockConfig+0x254>)
 8004582:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004586:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004594:	4b55      	ldr	r3, [pc, #340]	; (80046ec <HAL_RCC_ClockConfig+0x254>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4a54      	ldr	r2, [pc, #336]	; (80046ec <HAL_RCC_ClockConfig+0x254>)
 800459a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800459e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d024      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x15a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b80      	cmp	r3, #128	; 0x80
 80045ae:	d020      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x15a>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b90      	cmp	r3, #144	; 0x90
 80045b6:	d01c      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x15a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2ba0      	cmp	r3, #160	; 0xa0
 80045be:	d018      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x15a>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2bb0      	cmp	r3, #176	; 0xb0
 80045c6:	d014      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x15a>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2bc0      	cmp	r3, #192	; 0xc0
 80045ce:	d010      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x15a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2bd0      	cmp	r3, #208	; 0xd0
 80045d6:	d00c      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x15a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2be0      	cmp	r3, #224	; 0xe0
 80045de:	d008      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x15a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2bf0      	cmp	r3, #240	; 0xf0
 80045e6:	d004      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x15a>
 80045e8:	f240 3102 	movw	r1, #770	; 0x302
 80045ec:	483d      	ldr	r0, [pc, #244]	; (80046e4 <HAL_RCC_ClockConfig+0x24c>)
 80045ee:	f7fc feab 	bl	8001348 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f2:	4b3e      	ldr	r3, [pc, #248]	; (80046ec <HAL_RCC_ClockConfig+0x254>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	493b      	ldr	r1, [pc, #236]	; (80046ec <HAL_RCC_ClockConfig+0x254>)
 8004600:	4313      	orrs	r3, r2
 8004602:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d051      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00c      	beq.n	8004632 <HAL_RCC_ClockConfig+0x19a>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d008      	beq.n	8004632 <HAL_RCC_ClockConfig+0x19a>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d004      	beq.n	8004632 <HAL_RCC_ClockConfig+0x19a>
 8004628:	f240 3109 	movw	r1, #777	; 0x309
 800462c:	482d      	ldr	r0, [pc, #180]	; (80046e4 <HAL_RCC_ClockConfig+0x24c>)
 800462e:	f7fc fe8b 	bl	8001348 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d107      	bne.n	800464a <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800463a:	4b2c      	ldr	r3, [pc, #176]	; (80046ec <HAL_RCC_ClockConfig+0x254>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d115      	bne.n	8004672 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e0bf      	b.n	80047ca <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d107      	bne.n	8004662 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004652:	4b26      	ldr	r3, [pc, #152]	; (80046ec <HAL_RCC_ClockConfig+0x254>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d109      	bne.n	8004672 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e0b3      	b.n	80047ca <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004662:	4b22      	ldr	r3, [pc, #136]	; (80046ec <HAL_RCC_ClockConfig+0x254>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e0ab      	b.n	80047ca <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004672:	4b1e      	ldr	r3, [pc, #120]	; (80046ec <HAL_RCC_ClockConfig+0x254>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f023 0203 	bic.w	r2, r3, #3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	491b      	ldr	r1, [pc, #108]	; (80046ec <HAL_RCC_ClockConfig+0x254>)
 8004680:	4313      	orrs	r3, r2
 8004682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004684:	f7fd fa78 	bl	8001b78 <HAL_GetTick>
 8004688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468a:	e00a      	b.n	80046a2 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800468c:	f7fd fa74 	bl	8001b78 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f241 3288 	movw	r2, #5000	; 0x1388
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e093      	b.n	80047ca <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a2:	4b12      	ldr	r3, [pc, #72]	; (80046ec <HAL_RCC_ClockConfig+0x254>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 020c 	and.w	r2, r3, #12
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d1eb      	bne.n	800468c <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046b4:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <HAL_RCC_ClockConfig+0x250>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d216      	bcs.n	80046f0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c2:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <HAL_RCC_ClockConfig+0x250>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 020f 	bic.w	r2, r3, #15
 80046ca:	4907      	ldr	r1, [pc, #28]	; (80046e8 <HAL_RCC_ClockConfig+0x250>)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d2:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <HAL_RCC_ClockConfig+0x250>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d007      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e072      	b.n	80047ca <HAL_RCC_ClockConfig+0x332>
 80046e4:	0800dff8 	.word	0x0800dff8
 80046e8:	40023c00 	.word	0x40023c00
 80046ec:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d025      	beq.n	8004748 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d018      	beq.n	8004736 <HAL_RCC_ClockConfig+0x29e>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470c:	d013      	beq.n	8004736 <HAL_RCC_ClockConfig+0x29e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004716:	d00e      	beq.n	8004736 <HAL_RCC_ClockConfig+0x29e>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004720:	d009      	beq.n	8004736 <HAL_RCC_ClockConfig+0x29e>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800472a:	d004      	beq.n	8004736 <HAL_RCC_ClockConfig+0x29e>
 800472c:	f240 3146 	movw	r1, #838	; 0x346
 8004730:	4828      	ldr	r0, [pc, #160]	; (80047d4 <HAL_RCC_ClockConfig+0x33c>)
 8004732:	f7fc fe09 	bl	8001348 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004736:	4b28      	ldr	r3, [pc, #160]	; (80047d8 <HAL_RCC_ClockConfig+0x340>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	4925      	ldr	r1, [pc, #148]	; (80047d8 <HAL_RCC_ClockConfig+0x340>)
 8004744:	4313      	orrs	r3, r2
 8004746:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	2b00      	cmp	r3, #0
 8004752:	d026      	beq.n	80047a2 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d018      	beq.n	800478e <HAL_RCC_ClockConfig+0x2f6>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004764:	d013      	beq.n	800478e <HAL_RCC_ClockConfig+0x2f6>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800476e:	d00e      	beq.n	800478e <HAL_RCC_ClockConfig+0x2f6>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004778:	d009      	beq.n	800478e <HAL_RCC_ClockConfig+0x2f6>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004782:	d004      	beq.n	800478e <HAL_RCC_ClockConfig+0x2f6>
 8004784:	f240 314d 	movw	r1, #845	; 0x34d
 8004788:	4812      	ldr	r0, [pc, #72]	; (80047d4 <HAL_RCC_ClockConfig+0x33c>)
 800478a:	f7fc fddd 	bl	8001348 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800478e:	4b12      	ldr	r3, [pc, #72]	; (80047d8 <HAL_RCC_ClockConfig+0x340>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	490e      	ldr	r1, [pc, #56]	; (80047d8 <HAL_RCC_ClockConfig+0x340>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047a2:	f000 f821 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 80047a6:	4602      	mov	r2, r0
 80047a8:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <HAL_RCC_ClockConfig+0x340>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	091b      	lsrs	r3, r3, #4
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	490a      	ldr	r1, [pc, #40]	; (80047dc <HAL_RCC_ClockConfig+0x344>)
 80047b4:	5ccb      	ldrb	r3, [r1, r3]
 80047b6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ba:	4a09      	ldr	r2, [pc, #36]	; (80047e0 <HAL_RCC_ClockConfig+0x348>)
 80047bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047be:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <HAL_RCC_ClockConfig+0x34c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fc feac 	bl	8001520 <HAL_InitTick>

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	0800dff8 	.word	0x0800dff8
 80047d8:	40023800 	.word	0x40023800
 80047dc:	0800e204 	.word	0x0800e204
 80047e0:	20000000 	.word	0x20000000
 80047e4:	20000004 	.word	0x20000004

080047e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ec:	b094      	sub	sp, #80	; 0x50
 80047ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	647b      	str	r3, [r7, #68]	; 0x44
 80047f4:	2300      	movs	r3, #0
 80047f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047f8:	2300      	movs	r3, #0
 80047fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004800:	4b79      	ldr	r3, [pc, #484]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 030c 	and.w	r3, r3, #12
 8004808:	2b08      	cmp	r3, #8
 800480a:	d00d      	beq.n	8004828 <HAL_RCC_GetSysClockFreq+0x40>
 800480c:	2b08      	cmp	r3, #8
 800480e:	f200 80e1 	bhi.w	80049d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_RCC_GetSysClockFreq+0x34>
 8004816:	2b04      	cmp	r3, #4
 8004818:	d003      	beq.n	8004822 <HAL_RCC_GetSysClockFreq+0x3a>
 800481a:	e0db      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800481c:	4b73      	ldr	r3, [pc, #460]	; (80049ec <HAL_RCC_GetSysClockFreq+0x204>)
 800481e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004820:	e0db      	b.n	80049da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004822:	4b73      	ldr	r3, [pc, #460]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004824:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004826:	e0d8      	b.n	80049da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004828:	4b6f      	ldr	r3, [pc, #444]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004830:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004832:	4b6d      	ldr	r3, [pc, #436]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d063      	beq.n	8004906 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800483e:	4b6a      	ldr	r3, [pc, #424]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	099b      	lsrs	r3, r3, #6
 8004844:	2200      	movs	r2, #0
 8004846:	63bb      	str	r3, [r7, #56]	; 0x38
 8004848:	63fa      	str	r2, [r7, #60]	; 0x3c
 800484a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004850:	633b      	str	r3, [r7, #48]	; 0x30
 8004852:	2300      	movs	r3, #0
 8004854:	637b      	str	r3, [r7, #52]	; 0x34
 8004856:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800485a:	4622      	mov	r2, r4
 800485c:	462b      	mov	r3, r5
 800485e:	f04f 0000 	mov.w	r0, #0
 8004862:	f04f 0100 	mov.w	r1, #0
 8004866:	0159      	lsls	r1, r3, #5
 8004868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800486c:	0150      	lsls	r0, r2, #5
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	4621      	mov	r1, r4
 8004874:	1a51      	subs	r1, r2, r1
 8004876:	6139      	str	r1, [r7, #16]
 8004878:	4629      	mov	r1, r5
 800487a:	eb63 0301 	sbc.w	r3, r3, r1
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800488c:	4659      	mov	r1, fp
 800488e:	018b      	lsls	r3, r1, #6
 8004890:	4651      	mov	r1, sl
 8004892:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004896:	4651      	mov	r1, sl
 8004898:	018a      	lsls	r2, r1, #6
 800489a:	4651      	mov	r1, sl
 800489c:	ebb2 0801 	subs.w	r8, r2, r1
 80048a0:	4659      	mov	r1, fp
 80048a2:	eb63 0901 	sbc.w	r9, r3, r1
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ba:	4690      	mov	r8, r2
 80048bc:	4699      	mov	r9, r3
 80048be:	4623      	mov	r3, r4
 80048c0:	eb18 0303 	adds.w	r3, r8, r3
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	462b      	mov	r3, r5
 80048c8:	eb49 0303 	adc.w	r3, r9, r3
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048da:	4629      	mov	r1, r5
 80048dc:	024b      	lsls	r3, r1, #9
 80048de:	4621      	mov	r1, r4
 80048e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048e4:	4621      	mov	r1, r4
 80048e6:	024a      	lsls	r2, r1, #9
 80048e8:	4610      	mov	r0, r2
 80048ea:	4619      	mov	r1, r3
 80048ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ee:	2200      	movs	r2, #0
 80048f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048f8:	f7fc f976 	bl	8000be8 <__aeabi_uldivmod>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4613      	mov	r3, r2
 8004902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004904:	e058      	b.n	80049b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004906:	4b38      	ldr	r3, [pc, #224]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	099b      	lsrs	r3, r3, #6
 800490c:	2200      	movs	r2, #0
 800490e:	4618      	mov	r0, r3
 8004910:	4611      	mov	r1, r2
 8004912:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004916:	623b      	str	r3, [r7, #32]
 8004918:	2300      	movs	r3, #0
 800491a:	627b      	str	r3, [r7, #36]	; 0x24
 800491c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004920:	4642      	mov	r2, r8
 8004922:	464b      	mov	r3, r9
 8004924:	f04f 0000 	mov.w	r0, #0
 8004928:	f04f 0100 	mov.w	r1, #0
 800492c:	0159      	lsls	r1, r3, #5
 800492e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004932:	0150      	lsls	r0, r2, #5
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	4641      	mov	r1, r8
 800493a:	ebb2 0a01 	subs.w	sl, r2, r1
 800493e:	4649      	mov	r1, r9
 8004940:	eb63 0b01 	sbc.w	fp, r3, r1
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004950:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004954:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004958:	ebb2 040a 	subs.w	r4, r2, sl
 800495c:	eb63 050b 	sbc.w	r5, r3, fp
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	00eb      	lsls	r3, r5, #3
 800496a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800496e:	00e2      	lsls	r2, r4, #3
 8004970:	4614      	mov	r4, r2
 8004972:	461d      	mov	r5, r3
 8004974:	4643      	mov	r3, r8
 8004976:	18e3      	adds	r3, r4, r3
 8004978:	603b      	str	r3, [r7, #0]
 800497a:	464b      	mov	r3, r9
 800497c:	eb45 0303 	adc.w	r3, r5, r3
 8004980:	607b      	str	r3, [r7, #4]
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800498e:	4629      	mov	r1, r5
 8004990:	028b      	lsls	r3, r1, #10
 8004992:	4621      	mov	r1, r4
 8004994:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004998:	4621      	mov	r1, r4
 800499a:	028a      	lsls	r2, r1, #10
 800499c:	4610      	mov	r0, r2
 800499e:	4619      	mov	r1, r3
 80049a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049a2:	2200      	movs	r2, #0
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	61fa      	str	r2, [r7, #28]
 80049a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ac:	f7fc f91c 	bl	8000be8 <__aeabi_uldivmod>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4613      	mov	r3, r2
 80049b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80049b8:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	0c1b      	lsrs	r3, r3, #16
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	3301      	adds	r3, #1
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80049c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049d2:	e002      	b.n	80049da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049d4:	4b05      	ldr	r3, [pc, #20]	; (80049ec <HAL_RCC_GetSysClockFreq+0x204>)
 80049d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3750      	adds	r7, #80	; 0x50
 80049e0:	46bd      	mov	sp, r7
 80049e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e6:	bf00      	nop
 80049e8:	40023800 	.word	0x40023800
 80049ec:	00f42400 	.word	0x00f42400
 80049f0:	007a1200 	.word	0x007a1200

080049f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f8:	4b03      	ldr	r3, [pc, #12]	; (8004a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80049fa:	681b      	ldr	r3, [r3, #0]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	20000000 	.word	0x20000000

08004a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a10:	f7ff fff0 	bl	80049f4 <HAL_RCC_GetHCLKFreq>
 8004a14:	4602      	mov	r2, r0
 8004a16:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	0a9b      	lsrs	r3, r3, #10
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	4903      	ldr	r1, [pc, #12]	; (8004a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a22:	5ccb      	ldrb	r3, [r1, r3]
 8004a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	0800e214 	.word	0x0800e214

08004a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a38:	f7ff ffdc 	bl	80049f4 <HAL_RCC_GetHCLKFreq>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	0b5b      	lsrs	r3, r3, #13
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	4903      	ldr	r1, [pc, #12]	; (8004a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a4a:	5ccb      	ldrb	r3, [r1, r3]
 8004a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40023800 	.word	0x40023800
 8004a58:	0800e214 	.word	0x0800e214

08004a5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	220f      	movs	r2, #15
 8004a6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a6c:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 0203 	and.w	r2, r3, #3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a78:	4b0f      	ldr	r3, [pc, #60]	; (8004ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a84:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004a90:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	08db      	lsrs	r3, r3, #3
 8004a96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a9e:	4b07      	ldr	r3, [pc, #28]	; (8004abc <HAL_RCC_GetClockConfig+0x60>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 020f 	and.w	r2, r3, #15
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	601a      	str	r2, [r3, #0]
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	40023c00 	.word	0x40023c00

08004ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004acc:	2300      	movs	r3, #0
 8004ace:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f040 8089 	bne.w	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f040 8082 	bne.w	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d17b      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d175      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d16f      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d169      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d163      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d15d      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d157      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d151      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d14b      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d145      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d13f      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d139      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d133      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d12d      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d127      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d121      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d11b      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d115      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10f      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d109      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d103      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004bf4:	2172      	movs	r1, #114	; 0x72
 8004bf6:	4895      	ldr	r0, [pc, #596]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004bf8:	f7fc fba6 	bl	8001348 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01f      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c18:	d003      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004c1a:	2178      	movs	r1, #120	; 0x78
 8004c1c:	488b      	ldr	r0, [pc, #556]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004c1e:	f7fc fb93 	bl	8001348 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c22:	4b8b      	ldr	r3, [pc, #556]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	4a8a      	ldr	r2, [pc, #552]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004c28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c2c:	6093      	str	r3, [r2, #8]
 8004c2e:	4b88      	ldr	r3, [pc, #544]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c36:	4986      	ldr	r1, [pc, #536]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8004c44:	2301      	movs	r3, #1
 8004c46:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d029      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00d      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c64:	d008      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c6e:	d003      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004c70:	2188      	movs	r1, #136	; 0x88
 8004c72:	4876      	ldr	r0, [pc, #472]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004c74:	f7fc fb68 	bl	8001348 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c78:	4b75      	ldr	r3, [pc, #468]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c86:	4972      	ldr	r1, [pc, #456]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c96:	d101      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d029      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00d      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cc4:	d008      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cce:	d003      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004cd0:	219c      	movs	r1, #156	; 0x9c
 8004cd2:	485e      	ldr	r0, [pc, #376]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004cd4:	f7fc fb38 	bl	8001348 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cd8:	4b5d      	ldr	r3, [pc, #372]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	495a      	ldr	r1, [pc, #360]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf6:	d101      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8004d04:	2301      	movs	r3, #1
 8004d06:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8004d14:	2301      	movs	r3, #1
 8004d16:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8186 	beq.w	8005032 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d2e:	f000 80e4 	beq.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d3a:	f000 80de 	beq.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	4a44      	ldr	r2, [pc, #272]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	f000 80d8 	beq.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	4a42      	ldr	r2, [pc, #264]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	f000 80d2 	beq.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	4a40      	ldr	r2, [pc, #256]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	f000 80cc 	beq.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	4a3e      	ldr	r2, [pc, #248]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	f000 80c6 	beq.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	4a3c      	ldr	r2, [pc, #240]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	f000 80c0 	beq.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7e:	4a3a      	ldr	r2, [pc, #232]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	f000 80ba 	beq.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8a:	4a38      	ldr	r2, [pc, #224]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	f000 80b4 	beq.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d96:	4a36      	ldr	r2, [pc, #216]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	f000 80ae 	beq.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	4a34      	ldr	r2, [pc, #208]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	f000 80a8 	beq.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	4a32      	ldr	r2, [pc, #200]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	f000 80a2 	beq.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	4a30      	ldr	r2, [pc, #192]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	f000 809c 	beq.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc6:	4a2e      	ldr	r2, [pc, #184]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	f000 8096 	beq.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	4a2c      	ldr	r2, [pc, #176]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	f000 8090 	beq.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	4a2a      	ldr	r2, [pc, #168]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	f000 808a 	beq.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	4a28      	ldr	r2, [pc, #160]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	f000 8084 	beq.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	4a26      	ldr	r2, [pc, #152]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d07e      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	4a24      	ldr	r2, [pc, #144]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d079      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	4a23      	ldr	r2, [pc, #140]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d074      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	4a21      	ldr	r2, [pc, #132]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d06f      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	4a20      	ldr	r2, [pc, #128]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d06a      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e28:	4a1e      	ldr	r2, [pc, #120]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d065      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	4a1d      	ldr	r2, [pc, #116]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d060      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3c:	4a1b      	ldr	r2, [pc, #108]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d05b      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	4a1a      	ldr	r2, [pc, #104]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	e033      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004e4c:	0800e054 	.word	0x0800e054
 8004e50:	40023800 	.word	0x40023800
 8004e54:	00020300 	.word	0x00020300
 8004e58:	00030300 	.word	0x00030300
 8004e5c:	00040300 	.word	0x00040300
 8004e60:	00050300 	.word	0x00050300
 8004e64:	00060300 	.word	0x00060300
 8004e68:	00070300 	.word	0x00070300
 8004e6c:	00080300 	.word	0x00080300
 8004e70:	00090300 	.word	0x00090300
 8004e74:	000a0300 	.word	0x000a0300
 8004e78:	000b0300 	.word	0x000b0300
 8004e7c:	000c0300 	.word	0x000c0300
 8004e80:	000d0300 	.word	0x000d0300
 8004e84:	000e0300 	.word	0x000e0300
 8004e88:	000f0300 	.word	0x000f0300
 8004e8c:	00100300 	.word	0x00100300
 8004e90:	00110300 	.word	0x00110300
 8004e94:	00120300 	.word	0x00120300
 8004e98:	00130300 	.word	0x00130300
 8004e9c:	00140300 	.word	0x00140300
 8004ea0:	00150300 	.word	0x00150300
 8004ea4:	00160300 	.word	0x00160300
 8004ea8:	00170300 	.word	0x00170300
 8004eac:	00180300 	.word	0x00180300
 8004eb0:	00190300 	.word	0x00190300
 8004eb4:	d021      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	4a4c      	ldr	r2, [pc, #304]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d01c      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec4:	4a4a      	ldr	r2, [pc, #296]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d017      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	4a49      	ldr	r2, [pc, #292]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d012      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	4a47      	ldr	r2, [pc, #284]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00d      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	4a46      	ldr	r2, [pc, #280]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d008      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eec:	4a44      	ldr	r2, [pc, #272]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d003      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004ef2:	21b7      	movs	r1, #183	; 0xb7
 8004ef4:	4843      	ldr	r0, [pc, #268]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8004ef6:	f7fc fa27 	bl	8001348 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004efa:	4b43      	ldr	r3, [pc, #268]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	4a42      	ldr	r2, [pc, #264]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f04:	6413      	str	r3, [r2, #64]	; 0x40
 8004f06:	4b40      	ldr	r3, [pc, #256]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0e:	60bb      	str	r3, [r7, #8]
 8004f10:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f12:	4b3e      	ldr	r3, [pc, #248]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a3d      	ldr	r2, [pc, #244]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f1e:	f7fc fe2b 	bl	8001b78 <HAL_GetTick>
 8004f22:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f24:	e009      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f26:	f7fc fe27 	bl	8001b78 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b64      	cmp	r3, #100	; 0x64
 8004f32:	d902      	bls.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	f000 bd9f 	b.w	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f3a:	4b34      	ldr	r3, [pc, #208]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0ef      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f46:	4b30      	ldr	r3, [pc, #192]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f4e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d036      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d02f      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f64:	4b28      	ldr	r3, [pc, #160]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f6e:	4b26      	ldr	r3, [pc, #152]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f72:	4a25      	ldr	r2, [pc, #148]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f78:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f7a:	4b23      	ldr	r3, [pc, #140]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7e:	4a22      	ldr	r2, [pc, #136]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f86:	4a20      	ldr	r2, [pc, #128]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f8c:	4b1e      	ldr	r3, [pc, #120]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d115      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f98:	f7fc fdee 	bl	8001b78 <HAL_GetTick>
 8004f9c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f9e:	e00b      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fa0:	f7fc fdea 	bl	8001b78 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d902      	bls.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	f000 bd60 	b.w	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb8:	4b13      	ldr	r3, [pc, #76]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0ed      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fd0:	d120      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004fd2:	4b0d      	ldr	r3, [pc, #52]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004fde:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004fe0:	400b      	ands	r3, r1
 8004fe2:	4909      	ldr	r1, [pc, #36]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	608b      	str	r3, [r1, #8]
 8004fe8:	e01a      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8004fea:	bf00      	nop
 8004fec:	001a0300 	.word	0x001a0300
 8004ff0:	001b0300 	.word	0x001b0300
 8004ff4:	001c0300 	.word	0x001c0300
 8004ff8:	001d0300 	.word	0x001d0300
 8004ffc:	001e0300 	.word	0x001e0300
 8005000:	001f0300 	.word	0x001f0300
 8005004:	0800e054 	.word	0x0800e054
 8005008:	40023800 	.word	0x40023800
 800500c:	40007000 	.word	0x40007000
 8005010:	0ffffcff 	.word	0x0ffffcff
 8005014:	4b9a      	ldr	r3, [pc, #616]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	4a99      	ldr	r2, [pc, #612]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800501a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800501e:	6093      	str	r3, [r2, #8]
 8005020:	4b97      	ldr	r3, [pc, #604]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005022:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800502c:	4994      	ldr	r1, [pc, #592]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800502e:	4313      	orrs	r3, r2
 8005030:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0310 	and.w	r3, r3, #16
 800503a:	2b00      	cmp	r3, #0
 800503c:	d01d      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	2b00      	cmp	r3, #0
 8005044:	d008      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800504e:	d003      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005050:	21f1      	movs	r1, #241	; 0xf1
 8005052:	488c      	ldr	r0, [pc, #560]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005054:	f7fc f978 	bl	8001348 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005058:	4b89      	ldr	r3, [pc, #548]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800505a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800505e:	4a88      	ldr	r2, [pc, #544]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005060:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005064:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005068:	4b85      	ldr	r3, [pc, #532]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800506a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	4983      	ldr	r1, [pc, #524]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d01c      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00d      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005096:	d008      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800509c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050a0:	d003      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 80050a2:	21fb      	movs	r1, #251	; 0xfb
 80050a4:	4877      	ldr	r0, [pc, #476]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80050a6:	f7fc f94f 	bl	8001348 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050aa:	4b75      	ldr	r3, [pc, #468]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80050ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050b8:	4971      	ldr	r1, [pc, #452]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d01d      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00e      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x632>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050dc:	d009      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x632>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050e6:	d004      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x632>
 80050e8:	f240 1105 	movw	r1, #261	; 0x105
 80050ec:	4865      	ldr	r0, [pc, #404]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80050ee:	f7fc f92b 	bl	8001348 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050f2:	4b63      	ldr	r3, [pc, #396]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80050f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005100:	495f      	ldr	r1, [pc, #380]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d01d      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00e      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005124:	d009      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800512a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800512e:	d004      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8005130:	f240 110f 	movw	r1, #271	; 0x10f
 8005134:	4853      	ldr	r0, [pc, #332]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005136:	f7fc f907 	bl	8001348 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800513a:	4b51      	ldr	r3, [pc, #324]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800513c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005140:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005148:	494d      	ldr	r1, [pc, #308]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d01d      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00e      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800516c:	d009      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005172:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005176:	d004      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8005178:	f240 1119 	movw	r1, #281	; 0x119
 800517c:	4841      	ldr	r0, [pc, #260]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800517e:	f7fc f8e3 	bl	8001348 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005182:	4b3f      	ldr	r3, [pc, #252]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005188:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005190:	493b      	ldr	r1, [pc, #236]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01f      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d010      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d00c      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b8:	2b03      	cmp	r3, #3
 80051ba:	d008      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d004      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80051c4:	f240 1123 	movw	r1, #291	; 0x123
 80051c8:	482e      	ldr	r0, [pc, #184]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80051ca:	f7fc f8bd 	bl	8001348 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051ce:	4b2c      	ldr	r3, [pc, #176]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80051d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d4:	f023 0203 	bic.w	r2, r3, #3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051dc:	4928      	ldr	r1, [pc, #160]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01f      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d010      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d00c      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005204:	2b0c      	cmp	r3, #12
 8005206:	d008      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520c:	2b08      	cmp	r3, #8
 800520e:	d004      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8005210:	f240 112d 	movw	r1, #301	; 0x12d
 8005214:	481b      	ldr	r0, [pc, #108]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005216:	f7fc f897 	bl	8001348 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800521a:	4b19      	ldr	r3, [pc, #100]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800521c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005220:	f023 020c 	bic.w	r2, r3, #12
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005228:	4915      	ldr	r1, [pc, #84]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005238:	2b00      	cmp	r3, #0
 800523a:	d025      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005240:	2b00      	cmp	r3, #0
 8005242:	d010      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005248:	2b10      	cmp	r3, #16
 800524a:	d00c      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005250:	2b30      	cmp	r3, #48	; 0x30
 8005252:	d008      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005258:	2b20      	cmp	r3, #32
 800525a:	d004      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 800525c:	f240 1137 	movw	r1, #311	; 0x137
 8005260:	4808      	ldr	r0, [pc, #32]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005262:	f7fc f871 	bl	8001348 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005266:	4b06      	ldr	r3, [pc, #24]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005274:	4902      	ldr	r1, [pc, #8]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800527c:	e004      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 800527e:	bf00      	nop
 8005280:	40023800 	.word	0x40023800
 8005284:	0800e054 	.word	0x0800e054
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01f      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005298:	2b00      	cmp	r3, #0
 800529a:	d010      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a0:	2b40      	cmp	r3, #64	; 0x40
 80052a2:	d00c      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a8:	2bc0      	cmp	r3, #192	; 0xc0
 80052aa:	d008      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b0:	2b80      	cmp	r3, #128	; 0x80
 80052b2:	d004      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80052b4:	f240 1141 	movw	r1, #321	; 0x141
 80052b8:	48a0      	ldr	r0, [pc, #640]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80052ba:	f7fc f845 	bl	8001348 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052be:	4ba0      	ldr	r3, [pc, #640]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80052c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052cc:	499c      	ldr	r1, [pc, #624]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d022      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d013      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x850>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f0:	d00e      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x850>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052fa:	d009      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x850>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005304:	d004      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8005306:	f240 114b 	movw	r1, #331	; 0x14b
 800530a:	488c      	ldr	r0, [pc, #560]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800530c:	f7fc f81c 	bl	8001348 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005310:	4b8b      	ldr	r3, [pc, #556]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531e:	4988      	ldr	r1, [pc, #544]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800532e:	2b00      	cmp	r3, #0
 8005330:	d022      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005336:	2b00      	cmp	r3, #0
 8005338:	d013      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005342:	d00e      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005348:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800534c:	d009      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005356:	d004      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005358:	f240 1155 	movw	r1, #341	; 0x155
 800535c:	4877      	ldr	r0, [pc, #476]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800535e:	f7fb fff3 	bl	8001348 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005362:	4b77      	ldr	r3, [pc, #476]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005368:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005370:	4973      	ldr	r1, [pc, #460]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005372:	4313      	orrs	r3, r2
 8005374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d022      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005388:	2b00      	cmp	r3, #0
 800538a:	d013      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005394:	d00e      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800539e:	d009      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a8:	d004      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80053aa:	f240 115f 	movw	r1, #351	; 0x15f
 80053ae:	4863      	ldr	r0, [pc, #396]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80053b0:	f7fb ffca 	bl	8001348 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80053b4:	4b62      	ldr	r3, [pc, #392]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80053b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c2:	495f      	ldr	r1, [pc, #380]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d022      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d013      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x946>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053e6:	d00e      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x946>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053f0:	d009      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x946>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053fa:	d004      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x946>
 80053fc:	f240 1169 	movw	r1, #361	; 0x169
 8005400:	484e      	ldr	r0, [pc, #312]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005402:	f7fb ffa1 	bl	8001348 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005406:	4b4e      	ldr	r3, [pc, #312]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005414:	494a      	ldr	r1, [pc, #296]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d018      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800542c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005430:	d008      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005436:	2b00      	cmp	r3, #0
 8005438:	d004      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800543a:	f240 1173 	movw	r1, #371	; 0x173
 800543e:	483f      	ldr	r0, [pc, #252]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005440:	f7fb ff82 	bl	8001348 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005444:	4b3e      	ldr	r3, [pc, #248]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005452:	493b      	ldr	r1, [pc, #236]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01f      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800546a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800546e:	d008      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d004      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8005478:	f240 117d 	movw	r1, #381	; 0x17d
 800547c:	482f      	ldr	r0, [pc, #188]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800547e:	f7fb ff63 	bl	8001348 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005482:	4b2f      	ldr	r3, [pc, #188]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005488:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005490:	492b      	ldr	r1, [pc, #172]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800549c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054a0:	d101      	bne.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 80054a2:	2301      	movs	r3, #1
 80054a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 80054b2:	2301      	movs	r3, #1
 80054b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d022      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d013      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054d2:	d00e      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054dc:	d009      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054e6:	d004      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80054e8:	f240 1195 	movw	r1, #405	; 0x195
 80054ec:	4813      	ldr	r0, [pc, #76]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80054ee:	f7fb ff2b 	bl	8001348 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054f2:	4b13      	ldr	r3, [pc, #76]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80054f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005500:	490f      	ldr	r1, [pc, #60]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005502:	4313      	orrs	r3, r2
 8005504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d020      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800551a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800551e:	d009      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800552a:	f240 119f 	movw	r1, #415	; 0x19f
 800552e:	4803      	ldr	r0, [pc, #12]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005530:	f7fb ff0a 	bl	8001348 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005534:	4b02      	ldr	r3, [pc, #8]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553a:	e003      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 800553c:	0800e054 	.word	0x0800e054
 8005540:	40023800 	.word	0x40023800
 8005544:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800554e:	4910      	ldr	r1, [pc, #64]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d006      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 8155 	beq.w	8005814 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800556a:	4b09      	ldr	r3, [pc, #36]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a08      	ldr	r2, [pc, #32]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8005570:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005574:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005576:	f7fc faff 	bl	8001b78 <HAL_GetTick>
 800557a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800557c:	e00a      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800557e:	f7fc fafb 	bl	8001b78 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b64      	cmp	r3, #100	; 0x64
 800558a:	d903      	bls.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e273      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8005590:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005594:	4b9a      	ldr	r3, [pc, #616]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1ee      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	2b31      	cmp	r3, #49	; 0x31
 80055a6:	d904      	bls.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80055b0:	d904      	bls.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
 80055b2:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80055b6:	4893      	ldr	r0, [pc, #588]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80055b8:	f7fb fec6 	bl	8001348 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d02e      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d12a      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d903      	bls.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	2b07      	cmp	r3, #7
 80055de:	d904      	bls.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80055e0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80055e4:	4887      	ldr	r0, [pc, #540]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80055e6:	f7fb feaf 	bl	8001348 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055ea:	4b85      	ldr	r3, [pc, #532]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80055ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055f0:	0c1b      	lsrs	r3, r3, #16
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055f8:	4b81      	ldr	r3, [pc, #516]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80055fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055fe:	0e1b      	lsrs	r3, r3, #24
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	019a      	lsls	r2, r3, #6
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	041b      	lsls	r3, r3, #16
 8005610:	431a      	orrs	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	061b      	lsls	r3, r3, #24
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	071b      	lsls	r3, r3, #28
 800561e:	4978      	ldr	r1, [pc, #480]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d004      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800563a:	d00a      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005644:	2b00      	cmp	r3, #0
 8005646:	d048      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005650:	d143      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d903      	bls.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xba2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	2b0f      	cmp	r3, #15
 8005660:	d904      	bls.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005662:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8005666:	4867      	ldr	r0, [pc, #412]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005668:	f7fb fe6e 	bl	8001348 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	2b20      	cmp	r3, #32
 800567a:	d904      	bls.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 800567c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8005680:	4860      	ldr	r0, [pc, #384]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005682:	f7fb fe61 	bl	8001348 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005686:	4b5e      	ldr	r3, [pc, #376]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800568c:	0c1b      	lsrs	r3, r3, #16
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005694:	4b5a      	ldr	r3, [pc, #360]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800569a:	0f1b      	lsrs	r3, r3, #28
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	019a      	lsls	r2, r3, #6
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	041b      	lsls	r3, r3, #16
 80056ac:	431a      	orrs	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	061b      	lsls	r3, r3, #24
 80056b4:	431a      	orrs	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	071b      	lsls	r3, r3, #28
 80056ba:	4951      	ldr	r1, [pc, #324]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056c2:	4b4f      	ldr	r3, [pc, #316]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80056c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056c8:	f023 021f 	bic.w	r2, r3, #31
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	3b01      	subs	r3, #1
 80056d2:	494b      	ldr	r1, [pc, #300]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d032      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d010      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d00c      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d008      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	2b03      	cmp	r3, #3
 8005704:	d004      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8005706:	f240 2105 	movw	r1, #517	; 0x205
 800570a:	483e      	ldr	r0, [pc, #248]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800570c:	f7fb fe1c 	bl	8001348 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005710:	4b3b      	ldr	r3, [pc, #236]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005716:	0e1b      	lsrs	r3, r3, #24
 8005718:	f003 030f 	and.w	r3, r3, #15
 800571c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800571e:	4b38      	ldr	r3, [pc, #224]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005724:	0f1b      	lsrs	r3, r3, #28
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	019a      	lsls	r2, r3, #6
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	041b      	lsls	r3, r3, #16
 8005738:	431a      	orrs	r2, r3
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	061b      	lsls	r3, r3, #24
 800573e:	431a      	orrs	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	071b      	lsls	r3, r3, #28
 8005744:	492e      	ldr	r1, [pc, #184]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005746:	4313      	orrs	r3, r2
 8005748:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d040      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d010      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d00c      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	2b02      	cmp	r3, #2
 800576e:	d008      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	2b03      	cmp	r3, #3
 8005776:	d004      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005778:	f44f 7105 	mov.w	r1, #532	; 0x214
 800577c:	4821      	ldr	r0, [pc, #132]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800577e:	f7fb fde3 	bl	8001348 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d903      	bls.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b07      	cmp	r3, #7
 8005790:	d904      	bls.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005792:	f240 2115 	movw	r1, #533	; 0x215
 8005796:	481b      	ldr	r0, [pc, #108]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005798:	f7fb fdd6 	bl	8001348 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d903      	bls.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xcec>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	2b0f      	cmp	r3, #15
 80057aa:	d904      	bls.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 80057ac:	f240 2116 	movw	r1, #534	; 0x216
 80057b0:	4814      	ldr	r0, [pc, #80]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80057b2:	f7fb fdc9 	bl	8001348 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	019a      	lsls	r2, r3, #6
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	041b      	lsls	r3, r3, #16
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	061b      	lsls	r3, r3, #24
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	071b      	lsls	r3, r3, #28
 80057d2:	490b      	ldr	r1, [pc, #44]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057da:	4b09      	ldr	r3, [pc, #36]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a08      	ldr	r2, [pc, #32]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80057e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057e6:	f7fc f9c7 	bl	8001b78 <HAL_GetTick>
 80057ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057ec:	e00c      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057ee:	f7fc f9c3 	bl	8001b78 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b64      	cmp	r3, #100	; 0x64
 80057fa:	d905      	bls.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e13b      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8005800:	40023800 	.word	0x40023800
 8005804:	0800e054 	.word	0x0800e054
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005808:	4b9d      	ldr	r3, [pc, #628]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0ec      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	2b01      	cmp	r3, #1
 8005818:	f040 812d 	bne.w	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800581c:	4b98      	ldr	r3, [pc, #608]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a97      	ldr	r2, [pc, #604]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005828:	f7fc f9a6 	bl	8001b78 <HAL_GetTick>
 800582c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800582e:	e008      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005830:	f7fc f9a2 	bl	8001b78 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b64      	cmp	r3, #100	; 0x64
 800583c:	d901      	bls.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e11a      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005842:	4b8f      	ldr	r3, [pc, #572]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800584a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800584e:	d0ef      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	2b31      	cmp	r3, #49	; 0x31
 8005856:	d904      	bls.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005860:	d904      	bls.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8005862:	f44f 7111 	mov.w	r1, #580	; 0x244
 8005866:	4887      	ldr	r0, [pc, #540]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005868:	f7fb fd6e 	bl	8001348 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587c:	2b00      	cmp	r3, #0
 800587e:	d009      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005888:	2b00      	cmp	r3, #0
 800588a:	d048      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005890:	2b00      	cmp	r3, #0
 8005892:	d144      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d903      	bls.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	2b0f      	cmp	r3, #15
 80058a2:	d904      	bls.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xdee>
 80058a4:	f240 214b 	movw	r1, #587	; 0x24b
 80058a8:	4876      	ldr	r0, [pc, #472]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80058aa:	f7fb fd4d 	bl	8001348 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d904      	bls.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80058be:	f240 214d 	movw	r1, #589	; 0x24d
 80058c2:	4870      	ldr	r0, [pc, #448]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80058c4:	f7fb fd40 	bl	8001348 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80058c8:	4b6d      	ldr	r3, [pc, #436]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80058ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ce:	0c1b      	lsrs	r3, r3, #16
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058d6:	4b6a      	ldr	r3, [pc, #424]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80058d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058dc:	0f1b      	lsrs	r3, r3, #28
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	019a      	lsls	r2, r3, #6
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	041b      	lsls	r3, r3, #16
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	061b      	lsls	r3, r3, #24
 80058f6:	431a      	orrs	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	071b      	lsls	r3, r3, #28
 80058fc:	4960      	ldr	r1, [pc, #384]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005904:	4b5e      	ldr	r3, [pc, #376]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005906:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800590a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005912:	3b01      	subs	r3, #1
 8005914:	021b      	lsls	r3, r3, #8
 8005916:	495a      	ldr	r1, [pc, #360]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005918:	4313      	orrs	r3, r2
 800591a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d037      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xeda>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800592e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005932:	d132      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d010      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d00c      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	2b02      	cmp	r3, #2
 800594a:	d008      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	2b03      	cmp	r3, #3
 8005952:	d004      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005954:	f44f 7118 	mov.w	r1, #608	; 0x260
 8005958:	484a      	ldr	r0, [pc, #296]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800595a:	f7fb fcf5 	bl	8001348 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800595e:	4b48      	ldr	r3, [pc, #288]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005964:	0e1b      	lsrs	r3, r3, #24
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800596c:	4b44      	ldr	r3, [pc, #272]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005972:	0f1b      	lsrs	r3, r3, #28
 8005974:	f003 0307 	and.w	r3, r3, #7
 8005978:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	019a      	lsls	r2, r3, #6
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	041b      	lsls	r3, r3, #16
 8005986:	431a      	orrs	r2, r3
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	061b      	lsls	r3, r3, #24
 800598c:	431a      	orrs	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	071b      	lsls	r3, r3, #28
 8005992:	493b      	ldr	r1, [pc, #236]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d04d      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d903      	bls.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	2b07      	cmp	r3, #7
 80059b4:	d904      	bls.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 80059b6:	f240 216f 	movw	r1, #623	; 0x26f
 80059ba:	4832      	ldr	r0, [pc, #200]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80059bc:	f7fb fcc4 	bl	8001348 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d013      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059d0:	d00e      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059da:	d009      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059e4:	d004      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80059e6:	f44f 711c 	mov.w	r1, #624	; 0x270
 80059ea:	4826      	ldr	r0, [pc, #152]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80059ec:	f7fb fcac 	bl	8001348 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80059f0:	4b23      	ldr	r3, [pc, #140]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80059f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f6:	0e1b      	lsrs	r3, r3, #24
 80059f8:	f003 030f 	and.w	r3, r3, #15
 80059fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80059fe:	4b20      	ldr	r3, [pc, #128]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a04:	0c1b      	lsrs	r3, r3, #16
 8005a06:	f003 0303 	and.w	r3, r3, #3
 8005a0a:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	019a      	lsls	r2, r3, #6
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	041b      	lsls	r3, r3, #16
 8005a16:	431a      	orrs	r2, r3
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	061b      	lsls	r3, r3, #24
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	071b      	lsls	r3, r3, #28
 8005a24:	4916      	ldr	r1, [pc, #88]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a2c:	4b14      	ldr	r3, [pc, #80]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3a:	4911      	ldr	r1, [pc, #68]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a42:	4b0f      	ldr	r3, [pc, #60]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a0e      	ldr	r2, [pc, #56]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a4e:	f7fc f893 	bl	8001b78 <HAL_GetTick>
 8005a52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a54:	e008      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a56:	f7fc f88f 	bl	8001b78 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b64      	cmp	r3, #100	; 0x64
 8005a62:	d901      	bls.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e007      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a68:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a74:	d1ef      	bne.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3720      	adds	r7, #32
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40023800 	.word	0x40023800
 8005a84:	0800e054 	.word	0x0800e054

08005a88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e1fb      	b.n	8005e92 <HAL_SPI_Init+0x40a>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a83      	ldr	r2, [pc, #524]	; (8005cac <HAL_SPI_Init+0x224>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d01d      	beq.n	8005ae0 <HAL_SPI_Init+0x58>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a81      	ldr	r2, [pc, #516]	; (8005cb0 <HAL_SPI_Init+0x228>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d018      	beq.n	8005ae0 <HAL_SPI_Init+0x58>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a80      	ldr	r2, [pc, #512]	; (8005cb4 <HAL_SPI_Init+0x22c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d013      	beq.n	8005ae0 <HAL_SPI_Init+0x58>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a7e      	ldr	r2, [pc, #504]	; (8005cb8 <HAL_SPI_Init+0x230>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00e      	beq.n	8005ae0 <HAL_SPI_Init+0x58>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a7d      	ldr	r2, [pc, #500]	; (8005cbc <HAL_SPI_Init+0x234>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d009      	beq.n	8005ae0 <HAL_SPI_Init+0x58>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a7b      	ldr	r2, [pc, #492]	; (8005cc0 <HAL_SPI_Init+0x238>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d004      	beq.n	8005ae0 <HAL_SPI_Init+0x58>
 8005ad6:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005ada:	487a      	ldr	r0, [pc, #488]	; (8005cc4 <HAL_SPI_Init+0x23c>)
 8005adc:	f7fb fc34 	bl	8001348 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d009      	beq.n	8005afc <HAL_SPI_Init+0x74>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005af0:	d004      	beq.n	8005afc <HAL_SPI_Init+0x74>
 8005af2:	f240 1147 	movw	r1, #327	; 0x147
 8005af6:	4873      	ldr	r0, [pc, #460]	; (8005cc4 <HAL_SPI_Init+0x23c>)
 8005af8:	f7fb fc26 	bl	8001348 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00e      	beq.n	8005b22 <HAL_SPI_Init+0x9a>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b0c:	d009      	beq.n	8005b22 <HAL_SPI_Init+0x9a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b16:	d004      	beq.n	8005b22 <HAL_SPI_Init+0x9a>
 8005b18:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005b1c:	4869      	ldr	r0, [pc, #420]	; (8005cc4 <HAL_SPI_Init+0x23c>)
 8005b1e:	f7fb fc13 	bl	8001348 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b2a:	d040      	beq.n	8005bae <HAL_SPI_Init+0x126>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8005b34:	d03b      	beq.n	8005bae <HAL_SPI_Init+0x126>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8005b3e:	d036      	beq.n	8005bae <HAL_SPI_Init+0x126>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b48:	d031      	beq.n	8005bae <HAL_SPI_Init+0x126>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8005b52:	d02c      	beq.n	8005bae <HAL_SPI_Init+0x126>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005b5c:	d027      	beq.n	8005bae <HAL_SPI_Init+0x126>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8005b66:	d022      	beq.n	8005bae <HAL_SPI_Init+0x126>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b70:	d01d      	beq.n	8005bae <HAL_SPI_Init+0x126>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b7a:	d018      	beq.n	8005bae <HAL_SPI_Init+0x126>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005b84:	d013      	beq.n	8005bae <HAL_SPI_Init+0x126>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005b8e:	d00e      	beq.n	8005bae <HAL_SPI_Init+0x126>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b98:	d009      	beq.n	8005bae <HAL_SPI_Init+0x126>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ba2:	d004      	beq.n	8005bae <HAL_SPI_Init+0x126>
 8005ba4:	f240 1149 	movw	r1, #329	; 0x149
 8005ba8:	4846      	ldr	r0, [pc, #280]	; (8005cc4 <HAL_SPI_Init+0x23c>)
 8005baa:	f7fb fbcd 	bl	8001348 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bb6:	d00d      	beq.n	8005bd4 <HAL_SPI_Init+0x14c>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d009      	beq.n	8005bd4 <HAL_SPI_Init+0x14c>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bc8:	d004      	beq.n	8005bd4 <HAL_SPI_Init+0x14c>
 8005bca:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8005bce:	483d      	ldr	r0, [pc, #244]	; (8005cc4 <HAL_SPI_Init+0x23c>)
 8005bd0:	f7fb fbba 	bl	8001348 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d008      	beq.n	8005bee <HAL_SPI_Init+0x166>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d004      	beq.n	8005bee <HAL_SPI_Init+0x166>
 8005be4:	f240 114b 	movw	r1, #331	; 0x14b
 8005be8:	4836      	ldr	r0, [pc, #216]	; (8005cc4 <HAL_SPI_Init+0x23c>)
 8005bea:	f7fb fbad 	bl	8001348 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d020      	beq.n	8005c38 <HAL_SPI_Init+0x1b0>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	d01c      	beq.n	8005c38 <HAL_SPI_Init+0x1b0>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	2b10      	cmp	r3, #16
 8005c04:	d018      	beq.n	8005c38 <HAL_SPI_Init+0x1b0>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	2b18      	cmp	r3, #24
 8005c0c:	d014      	beq.n	8005c38 <HAL_SPI_Init+0x1b0>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	d010      	beq.n	8005c38 <HAL_SPI_Init+0x1b0>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	2b28      	cmp	r3, #40	; 0x28
 8005c1c:	d00c      	beq.n	8005c38 <HAL_SPI_Init+0x1b0>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	2b30      	cmp	r3, #48	; 0x30
 8005c24:	d008      	beq.n	8005c38 <HAL_SPI_Init+0x1b0>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	2b38      	cmp	r3, #56	; 0x38
 8005c2c:	d004      	beq.n	8005c38 <HAL_SPI_Init+0x1b0>
 8005c2e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8005c32:	4824      	ldr	r0, [pc, #144]	; (8005cc4 <HAL_SPI_Init+0x23c>)
 8005c34:	f7fb fb88 	bl	8001348 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d008      	beq.n	8005c52 <HAL_SPI_Init+0x1ca>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	2b80      	cmp	r3, #128	; 0x80
 8005c46:	d004      	beq.n	8005c52 <HAL_SPI_Init+0x1ca>
 8005c48:	f240 114d 	movw	r1, #333	; 0x14d
 8005c4c:	481d      	ldr	r0, [pc, #116]	; (8005cc4 <HAL_SPI_Init+0x23c>)
 8005c4e:	f7fb fb7b 	bl	8001348 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d008      	beq.n	8005c6c <HAL_SPI_Init+0x1e4>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	2b10      	cmp	r3, #16
 8005c60:	d004      	beq.n	8005c6c <HAL_SPI_Init+0x1e4>
 8005c62:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8005c66:	4817      	ldr	r0, [pc, #92]	; (8005cc4 <HAL_SPI_Init+0x23c>)
 8005c68:	f7fb fb6e 	bl	8001348 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d158      	bne.n	8005d26 <HAL_SPI_Init+0x29e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d008      	beq.n	8005c8e <HAL_SPI_Init+0x206>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d004      	beq.n	8005c8e <HAL_SPI_Init+0x206>
 8005c84:	f240 1151 	movw	r1, #337	; 0x151
 8005c88:	480e      	ldr	r0, [pc, #56]	; (8005cc4 <HAL_SPI_Init+0x23c>)
 8005c8a:	f7fb fb5d 	bl	8001348 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d018      	beq.n	8005cc8 <HAL_SPI_Init+0x240>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d014      	beq.n	8005cc8 <HAL_SPI_Init+0x240>
 8005c9e:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8005ca2:	4808      	ldr	r0, [pc, #32]	; (8005cc4 <HAL_SPI_Init+0x23c>)
 8005ca4:	f7fb fb50 	bl	8001348 <assert_failed>
 8005ca8:	e00e      	b.n	8005cc8 <HAL_SPI_Init+0x240>
 8005caa:	bf00      	nop
 8005cac:	40013000 	.word	0x40013000
 8005cb0:	40003800 	.word	0x40003800
 8005cb4:	40003c00 	.word	0x40003c00
 8005cb8:	40013400 	.word	0x40013400
 8005cbc:	40015000 	.word	0x40015000
 8005cc0:	40015400 	.word	0x40015400
 8005cc4:	0800e0b4 	.word	0x0800e0b4

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cd0:	d125      	bne.n	8005d1e <HAL_SPI_Init+0x296>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d050      	beq.n	8005d7c <HAL_SPI_Init+0x2f4>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	2b08      	cmp	r3, #8
 8005ce0:	d04c      	beq.n	8005d7c <HAL_SPI_Init+0x2f4>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	2b10      	cmp	r3, #16
 8005ce8:	d048      	beq.n	8005d7c <HAL_SPI_Init+0x2f4>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	2b18      	cmp	r3, #24
 8005cf0:	d044      	beq.n	8005d7c <HAL_SPI_Init+0x2f4>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d040      	beq.n	8005d7c <HAL_SPI_Init+0x2f4>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	2b28      	cmp	r3, #40	; 0x28
 8005d00:	d03c      	beq.n	8005d7c <HAL_SPI_Init+0x2f4>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	2b30      	cmp	r3, #48	; 0x30
 8005d08:	d038      	beq.n	8005d7c <HAL_SPI_Init+0x2f4>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	2b38      	cmp	r3, #56	; 0x38
 8005d10:	d034      	beq.n	8005d7c <HAL_SPI_Init+0x2f4>
 8005d12:	f44f 71ab 	mov.w	r1, #342	; 0x156
 8005d16:	4861      	ldr	r0, [pc, #388]	; (8005e9c <HAL_SPI_Init+0x414>)
 8005d18:	f7fb fb16 	bl	8001348 <assert_failed>
 8005d1c:	e02e      	b.n	8005d7c <HAL_SPI_Init+0x2f4>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	61da      	str	r2, [r3, #28]
 8005d24:	e02a      	b.n	8005d7c <HAL_SPI_Init+0x2f4>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d020      	beq.n	8005d70 <HAL_SPI_Init+0x2e8>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	2b08      	cmp	r3, #8
 8005d34:	d01c      	beq.n	8005d70 <HAL_SPI_Init+0x2e8>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	2b10      	cmp	r3, #16
 8005d3c:	d018      	beq.n	8005d70 <HAL_SPI_Init+0x2e8>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	2b18      	cmp	r3, #24
 8005d44:	d014      	beq.n	8005d70 <HAL_SPI_Init+0x2e8>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	2b20      	cmp	r3, #32
 8005d4c:	d010      	beq.n	8005d70 <HAL_SPI_Init+0x2e8>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	2b28      	cmp	r3, #40	; 0x28
 8005d54:	d00c      	beq.n	8005d70 <HAL_SPI_Init+0x2e8>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	2b30      	cmp	r3, #48	; 0x30
 8005d5c:	d008      	beq.n	8005d70 <HAL_SPI_Init+0x2e8>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	2b38      	cmp	r3, #56	; 0x38
 8005d64:	d004      	beq.n	8005d70 <HAL_SPI_Init+0x2e8>
 8005d66:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8005d6a:	484c      	ldr	r0, [pc, #304]	; (8005e9c <HAL_SPI_Init+0x414>)
 8005d6c:	f7fb faec 	bl	8001348 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d106      	bne.n	8005d9c <HAL_SPI_Init+0x314>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fb fb30 	bl	80013fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005db2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dbc:	d902      	bls.n	8005dc4 <HAL_SPI_Init+0x33c>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	e002      	b.n	8005dca <HAL_SPI_Init+0x342>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dc8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005dd2:	d007      	beq.n	8005de4 <HAL_SPI_Init+0x35c>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ddc:	d002      	beq.n	8005de4 <HAL_SPI_Init+0x35c>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005df4:	431a      	orrs	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e26:	ea42 0103 	orr.w	r1, r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	0c1b      	lsrs	r3, r3, #16
 8005e40:	f003 0204 	and.w	r2, r3, #4
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e52:	f003 0308 	and.w	r3, r3, #8
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005e60:	ea42 0103 	orr.w	r1, r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	0800e0b4 	.word	0x0800e0b4

08005ea0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	099b      	lsrs	r3, r3, #6
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10f      	bne.n	8005ee4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	099b      	lsrs	r3, r3, #6
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d004      	beq.n	8005ee4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	4798      	blx	r3
    return;
 8005ee2:	e0d7      	b.n	8006094 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	085b      	lsrs	r3, r3, #1
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <HAL_SPI_IRQHandler+0x66>
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	09db      	lsrs	r3, r3, #7
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d004      	beq.n	8005f06 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	4798      	blx	r3
    return;
 8005f04:	e0c6      	b.n	8006094 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10c      	bne.n	8005f2c <HAL_SPI_IRQHandler+0x8c>
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	099b      	lsrs	r3, r3, #6
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d106      	bne.n	8005f2c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	0a1b      	lsrs	r3, r3, #8
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 80b4 	beq.w	8006094 <HAL_SPI_IRQHandler+0x1f4>
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 80ad 	beq.w	8006094 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	099b      	lsrs	r3, r3, #6
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d023      	beq.n	8005f8e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d011      	beq.n	8005f76 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f56:	f043 0204 	orr.w	r2, r3, #4
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	e00b      	b.n	8005f8e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f76:	2300      	movs	r3, #0
 8005f78:	613b      	str	r3, [r7, #16]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	613b      	str	r3, [r7, #16]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	613b      	str	r3, [r7, #16]
 8005f8a:	693b      	ldr	r3, [r7, #16]
        return;
 8005f8c:	e082      	b.n	8006094 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	095b      	lsrs	r3, r3, #5
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d014      	beq.n	8005fc4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f9e:	f043 0201 	orr.w	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	60fb      	str	r3, [r7, #12]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	0a1b      	lsrs	r3, r3, #8
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00c      	beq.n	8005fea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd4:	f043 0208 	orr.w	r2, r3, #8
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60bb      	str	r3, [r7, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	60bb      	str	r3, [r7, #8]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d04f      	beq.n	8006092 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006000:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d104      	bne.n	800601e <HAL_SPI_IRQHandler+0x17e>
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d034      	beq.n	8006088 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0203 	bic.w	r2, r2, #3
 800602c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006032:	2b00      	cmp	r3, #0
 8006034:	d011      	beq.n	800605a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603a:	4a18      	ldr	r2, [pc, #96]	; (800609c <HAL_SPI_IRQHandler+0x1fc>)
 800603c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006042:	4618      	mov	r0, r3
 8006044:	f7fb ff26 	bl	8001e94 <HAL_DMA_Abort_IT>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d005      	beq.n	800605a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006052:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605e:	2b00      	cmp	r3, #0
 8006060:	d016      	beq.n	8006090 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006066:	4a0d      	ldr	r2, [pc, #52]	; (800609c <HAL_SPI_IRQHandler+0x1fc>)
 8006068:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606e:	4618      	mov	r0, r3
 8006070:	f7fb ff10 	bl	8001e94 <HAL_DMA_Abort_IT>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800607e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006086:	e003      	b.n	8006090 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f809 	bl	80060a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800608e:	e000      	b.n	8006092 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006090:	bf00      	nop
    return;
 8006092:	bf00      	nop
  }
}
 8006094:	3720      	adds	r7, #32
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	080060b5 	.word	0x080060b5

080060a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f7ff ffe5 	bl	80060a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060d6:	bf00      	nop
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e0f5      	b.n	80062de <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a7c      	ldr	r2, [pc, #496]	; (80062e8 <HAL_TIM_Base_Init+0x208>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d045      	beq.n	8006188 <HAL_TIM_Base_Init+0xa8>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006104:	d040      	beq.n	8006188 <HAL_TIM_Base_Init+0xa8>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a78      	ldr	r2, [pc, #480]	; (80062ec <HAL_TIM_Base_Init+0x20c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d03b      	beq.n	8006188 <HAL_TIM_Base_Init+0xa8>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a76      	ldr	r2, [pc, #472]	; (80062f0 <HAL_TIM_Base_Init+0x210>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d036      	beq.n	8006188 <HAL_TIM_Base_Init+0xa8>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a75      	ldr	r2, [pc, #468]	; (80062f4 <HAL_TIM_Base_Init+0x214>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d031      	beq.n	8006188 <HAL_TIM_Base_Init+0xa8>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a73      	ldr	r2, [pc, #460]	; (80062f8 <HAL_TIM_Base_Init+0x218>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d02c      	beq.n	8006188 <HAL_TIM_Base_Init+0xa8>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a72      	ldr	r2, [pc, #456]	; (80062fc <HAL_TIM_Base_Init+0x21c>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d027      	beq.n	8006188 <HAL_TIM_Base_Init+0xa8>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a70      	ldr	r2, [pc, #448]	; (8006300 <HAL_TIM_Base_Init+0x220>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d022      	beq.n	8006188 <HAL_TIM_Base_Init+0xa8>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a6f      	ldr	r2, [pc, #444]	; (8006304 <HAL_TIM_Base_Init+0x224>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d01d      	beq.n	8006188 <HAL_TIM_Base_Init+0xa8>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a6d      	ldr	r2, [pc, #436]	; (8006308 <HAL_TIM_Base_Init+0x228>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d018      	beq.n	8006188 <HAL_TIM_Base_Init+0xa8>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a6c      	ldr	r2, [pc, #432]	; (800630c <HAL_TIM_Base_Init+0x22c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d013      	beq.n	8006188 <HAL_TIM_Base_Init+0xa8>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a6a      	ldr	r2, [pc, #424]	; (8006310 <HAL_TIM_Base_Init+0x230>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d00e      	beq.n	8006188 <HAL_TIM_Base_Init+0xa8>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a69      	ldr	r2, [pc, #420]	; (8006314 <HAL_TIM_Base_Init+0x234>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d009      	beq.n	8006188 <HAL_TIM_Base_Init+0xa8>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a67      	ldr	r2, [pc, #412]	; (8006318 <HAL_TIM_Base_Init+0x238>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d004      	beq.n	8006188 <HAL_TIM_Base_Init+0xa8>
 800617e:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006182:	4866      	ldr	r0, [pc, #408]	; (800631c <HAL_TIM_Base_Init+0x23c>)
 8006184:	f7fb f8e0 	bl	8001348 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d014      	beq.n	80061ba <HAL_TIM_Base_Init+0xda>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	2b10      	cmp	r3, #16
 8006196:	d010      	beq.n	80061ba <HAL_TIM_Base_Init+0xda>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	2b20      	cmp	r3, #32
 800619e:	d00c      	beq.n	80061ba <HAL_TIM_Base_Init+0xda>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	2b40      	cmp	r3, #64	; 0x40
 80061a6:	d008      	beq.n	80061ba <HAL_TIM_Base_Init+0xda>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	2b60      	cmp	r3, #96	; 0x60
 80061ae:	d004      	beq.n	80061ba <HAL_TIM_Base_Init+0xda>
 80061b0:	f240 1117 	movw	r1, #279	; 0x117
 80061b4:	4859      	ldr	r0, [pc, #356]	; (800631c <HAL_TIM_Base_Init+0x23c>)
 80061b6:	f7fb f8c7 	bl	8001348 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00e      	beq.n	80061e0 <HAL_TIM_Base_Init+0x100>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ca:	d009      	beq.n	80061e0 <HAL_TIM_Base_Init+0x100>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061d4:	d004      	beq.n	80061e0 <HAL_TIM_Base_Init+0x100>
 80061d6:	f44f 718c 	mov.w	r1, #280	; 0x118
 80061da:	4850      	ldr	r0, [pc, #320]	; (800631c <HAL_TIM_Base_Init+0x23c>)
 80061dc:	f7fb f8b4 	bl	8001348 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e8:	d004      	beq.n	80061f4 <HAL_TIM_Base_Init+0x114>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a41      	ldr	r2, [pc, #260]	; (80062f4 <HAL_TIM_Base_Init+0x214>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d107      	bne.n	8006204 <HAL_TIM_Base_Init+0x124>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	bf14      	ite	ne
 80061fc:	2301      	movne	r3, #1
 80061fe:	2300      	moveq	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	e00e      	b.n	8006222 <HAL_TIM_Base_Init+0x142>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d006      	beq.n	800621a <HAL_TIM_Base_Init+0x13a>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006214:	d201      	bcs.n	800621a <HAL_TIM_Base_Init+0x13a>
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <HAL_TIM_Base_Init+0x13c>
 800621a:	2300      	movs	r3, #0
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d104      	bne.n	8006230 <HAL_TIM_Base_Init+0x150>
 8006226:	f240 1119 	movw	r1, #281	; 0x119
 800622a:	483c      	ldr	r0, [pc, #240]	; (800631c <HAL_TIM_Base_Init+0x23c>)
 800622c:	f7fb f88c 	bl	8001348 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d008      	beq.n	800624a <HAL_TIM_Base_Init+0x16a>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	2b80      	cmp	r3, #128	; 0x80
 800623e:	d004      	beq.n	800624a <HAL_TIM_Base_Init+0x16a>
 8006240:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8006244:	4835      	ldr	r0, [pc, #212]	; (800631c <HAL_TIM_Base_Init+0x23c>)
 8006246:	f7fb f87f 	bl	8001348 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d106      	bne.n	8006264 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f85e 	bl	8006320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	3304      	adds	r3, #4
 8006274:	4619      	mov	r1, r3
 8006276:	4610      	mov	r0, r2
 8006278:	f000 fa72 	bl	8006760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	40010000 	.word	0x40010000
 80062ec:	40000400 	.word	0x40000400
 80062f0:	40000800 	.word	0x40000800
 80062f4:	40000c00 	.word	0x40000c00
 80062f8:	40001000 	.word	0x40001000
 80062fc:	40001400 	.word	0x40001400
 8006300:	40010400 	.word	0x40010400
 8006304:	40014000 	.word	0x40014000
 8006308:	40014400 	.word	0x40014400
 800630c:	40014800 	.word	0x40014800
 8006310:	40001800 	.word	0x40001800
 8006314:	40001c00 	.word	0x40001c00
 8006318:	40002000 	.word	0x40002000
 800631c:	0800e110 	.word	0x0800e110

08006320 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a54      	ldr	r2, [pc, #336]	; (8006494 <HAL_TIM_Base_Start_IT+0x160>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d045      	beq.n	80063d2 <HAL_TIM_Base_Start_IT+0x9e>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800634e:	d040      	beq.n	80063d2 <HAL_TIM_Base_Start_IT+0x9e>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a50      	ldr	r2, [pc, #320]	; (8006498 <HAL_TIM_Base_Start_IT+0x164>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d03b      	beq.n	80063d2 <HAL_TIM_Base_Start_IT+0x9e>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a4f      	ldr	r2, [pc, #316]	; (800649c <HAL_TIM_Base_Start_IT+0x168>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d036      	beq.n	80063d2 <HAL_TIM_Base_Start_IT+0x9e>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a4d      	ldr	r2, [pc, #308]	; (80064a0 <HAL_TIM_Base_Start_IT+0x16c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d031      	beq.n	80063d2 <HAL_TIM_Base_Start_IT+0x9e>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a4c      	ldr	r2, [pc, #304]	; (80064a4 <HAL_TIM_Base_Start_IT+0x170>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d02c      	beq.n	80063d2 <HAL_TIM_Base_Start_IT+0x9e>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a4a      	ldr	r2, [pc, #296]	; (80064a8 <HAL_TIM_Base_Start_IT+0x174>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d027      	beq.n	80063d2 <HAL_TIM_Base_Start_IT+0x9e>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a49      	ldr	r2, [pc, #292]	; (80064ac <HAL_TIM_Base_Start_IT+0x178>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d022      	beq.n	80063d2 <HAL_TIM_Base_Start_IT+0x9e>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a47      	ldr	r2, [pc, #284]	; (80064b0 <HAL_TIM_Base_Start_IT+0x17c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d01d      	beq.n	80063d2 <HAL_TIM_Base_Start_IT+0x9e>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a46      	ldr	r2, [pc, #280]	; (80064b4 <HAL_TIM_Base_Start_IT+0x180>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d018      	beq.n	80063d2 <HAL_TIM_Base_Start_IT+0x9e>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a44      	ldr	r2, [pc, #272]	; (80064b8 <HAL_TIM_Base_Start_IT+0x184>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d013      	beq.n	80063d2 <HAL_TIM_Base_Start_IT+0x9e>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a43      	ldr	r2, [pc, #268]	; (80064bc <HAL_TIM_Base_Start_IT+0x188>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00e      	beq.n	80063d2 <HAL_TIM_Base_Start_IT+0x9e>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a41      	ldr	r2, [pc, #260]	; (80064c0 <HAL_TIM_Base_Start_IT+0x18c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d009      	beq.n	80063d2 <HAL_TIM_Base_Start_IT+0x9e>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a40      	ldr	r2, [pc, #256]	; (80064c4 <HAL_TIM_Base_Start_IT+0x190>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d004      	beq.n	80063d2 <HAL_TIM_Base_Start_IT+0x9e>
 80063c8:	f240 11d3 	movw	r1, #467	; 0x1d3
 80063cc:	483e      	ldr	r0, [pc, #248]	; (80064c8 <HAL_TIM_Base_Start_IT+0x194>)
 80063ce:	f7fa ffbb 	bl	8001348 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d001      	beq.n	80063e2 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e054      	b.n	800648c <HAL_TIM_Base_Start_IT+0x158>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2202      	movs	r2, #2
 80063e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68da      	ldr	r2, [r3, #12]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f042 0201 	orr.w	r2, r2, #1
 80063f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a25      	ldr	r2, [pc, #148]	; (8006494 <HAL_TIM_Base_Start_IT+0x160>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d022      	beq.n	800644a <HAL_TIM_Base_Start_IT+0x116>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640c:	d01d      	beq.n	800644a <HAL_TIM_Base_Start_IT+0x116>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a21      	ldr	r2, [pc, #132]	; (8006498 <HAL_TIM_Base_Start_IT+0x164>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d018      	beq.n	800644a <HAL_TIM_Base_Start_IT+0x116>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a1f      	ldr	r2, [pc, #124]	; (800649c <HAL_TIM_Base_Start_IT+0x168>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d013      	beq.n	800644a <HAL_TIM_Base_Start_IT+0x116>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a1e      	ldr	r2, [pc, #120]	; (80064a0 <HAL_TIM_Base_Start_IT+0x16c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d00e      	beq.n	800644a <HAL_TIM_Base_Start_IT+0x116>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a1e      	ldr	r2, [pc, #120]	; (80064ac <HAL_TIM_Base_Start_IT+0x178>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d009      	beq.n	800644a <HAL_TIM_Base_Start_IT+0x116>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a1d      	ldr	r2, [pc, #116]	; (80064b0 <HAL_TIM_Base_Start_IT+0x17c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d004      	beq.n	800644a <HAL_TIM_Base_Start_IT+0x116>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a1d      	ldr	r2, [pc, #116]	; (80064bc <HAL_TIM_Base_Start_IT+0x188>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d115      	bne.n	8006476 <HAL_TIM_Base_Start_IT+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	4b1e      	ldr	r3, [pc, #120]	; (80064cc <HAL_TIM_Base_Start_IT+0x198>)
 8006452:	4013      	ands	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2b06      	cmp	r3, #6
 800645a:	d015      	beq.n	8006488 <HAL_TIM_Base_Start_IT+0x154>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006462:	d011      	beq.n	8006488 <HAL_TIM_Base_Start_IT+0x154>
    {
      __HAL_TIM_ENABLE(htim);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0201 	orr.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006474:	e008      	b.n	8006488 <HAL_TIM_Base_Start_IT+0x154>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f042 0201 	orr.w	r2, r2, #1
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	e000      	b.n	800648a <HAL_TIM_Base_Start_IT+0x156>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006488:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	40010000 	.word	0x40010000
 8006498:	40000400 	.word	0x40000400
 800649c:	40000800 	.word	0x40000800
 80064a0:	40000c00 	.word	0x40000c00
 80064a4:	40001000 	.word	0x40001000
 80064a8:	40001400 	.word	0x40001400
 80064ac:	40010400 	.word	0x40010400
 80064b0:	40014000 	.word	0x40014000
 80064b4:	40014400 	.word	0x40014400
 80064b8:	40014800 	.word	0x40014800
 80064bc:	40001800 	.word	0x40001800
 80064c0:	40001c00 	.word	0x40001c00
 80064c4:	40002000 	.word	0x40002000
 80064c8:	0800e110 	.word	0x0800e110
 80064cc:	00010007 	.word	0x00010007

080064d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d122      	bne.n	800652c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d11b      	bne.n	800652c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f06f 0202 	mvn.w	r2, #2
 80064fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f905 	bl	8006722 <HAL_TIM_IC_CaptureCallback>
 8006518:	e005      	b.n	8006526 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f8f7 	bl	800670e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f908 	bl	8006736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f003 0304 	and.w	r3, r3, #4
 8006536:	2b04      	cmp	r3, #4
 8006538:	d122      	bne.n	8006580 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b04      	cmp	r3, #4
 8006546:	d11b      	bne.n	8006580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f06f 0204 	mvn.w	r2, #4
 8006550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2202      	movs	r2, #2
 8006556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f8db 	bl	8006722 <HAL_TIM_IC_CaptureCallback>
 800656c:	e005      	b.n	800657a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f8cd 	bl	800670e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f8de 	bl	8006736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b08      	cmp	r3, #8
 800658c:	d122      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b08      	cmp	r3, #8
 800659a:	d11b      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f06f 0208 	mvn.w	r2, #8
 80065a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2204      	movs	r2, #4
 80065aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	f003 0303 	and.w	r3, r3, #3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f8b1 	bl	8006722 <HAL_TIM_IC_CaptureCallback>
 80065c0:	e005      	b.n	80065ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f8a3 	bl	800670e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f8b4 	bl	8006736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f003 0310 	and.w	r3, r3, #16
 80065de:	2b10      	cmp	r3, #16
 80065e0:	d122      	bne.n	8006628 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f003 0310 	and.w	r3, r3, #16
 80065ec:	2b10      	cmp	r3, #16
 80065ee:	d11b      	bne.n	8006628 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f06f 0210 	mvn.w	r2, #16
 80065f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2208      	movs	r2, #8
 80065fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f887 	bl	8006722 <HAL_TIM_IC_CaptureCallback>
 8006614:	e005      	b.n	8006622 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f879 	bl	800670e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f88a 	bl	8006736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b01      	cmp	r3, #1
 8006634:	d10e      	bne.n	8006654 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b01      	cmp	r3, #1
 8006642:	d107      	bne.n	8006654 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f06f 0201 	mvn.w	r2, #1
 800664c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fa fe62 	bl	8001318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665e:	2b80      	cmp	r3, #128	; 0x80
 8006660:	d10e      	bne.n	8006680 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800666c:	2b80      	cmp	r3, #128	; 0x80
 800666e:	d107      	bne.n	8006680 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f91a 	bl	80068b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800668a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800668e:	d10e      	bne.n	80066ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	2b80      	cmp	r3, #128	; 0x80
 800669c:	d107      	bne.n	80066ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f90d 	bl	80068c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b8:	2b40      	cmp	r3, #64	; 0x40
 80066ba:	d10e      	bne.n	80066da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c6:	2b40      	cmp	r3, #64	; 0x40
 80066c8:	d107      	bne.n	80066da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f838 	bl	800674a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f003 0320 	and.w	r3, r3, #32
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d10e      	bne.n	8006706 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d107      	bne.n	8006706 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f06f 0220 	mvn.w	r2, #32
 80066fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f8cd 	bl	80068a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006706:	bf00      	nop
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800673e:	bf00      	nop
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
	...

08006760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a40      	ldr	r2, [pc, #256]	; (8006874 <TIM_Base_SetConfig+0x114>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d013      	beq.n	80067a0 <TIM_Base_SetConfig+0x40>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800677e:	d00f      	beq.n	80067a0 <TIM_Base_SetConfig+0x40>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a3d      	ldr	r2, [pc, #244]	; (8006878 <TIM_Base_SetConfig+0x118>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d00b      	beq.n	80067a0 <TIM_Base_SetConfig+0x40>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a3c      	ldr	r2, [pc, #240]	; (800687c <TIM_Base_SetConfig+0x11c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d007      	beq.n	80067a0 <TIM_Base_SetConfig+0x40>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a3b      	ldr	r2, [pc, #236]	; (8006880 <TIM_Base_SetConfig+0x120>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d003      	beq.n	80067a0 <TIM_Base_SetConfig+0x40>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a3a      	ldr	r2, [pc, #232]	; (8006884 <TIM_Base_SetConfig+0x124>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d108      	bne.n	80067b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a2f      	ldr	r2, [pc, #188]	; (8006874 <TIM_Base_SetConfig+0x114>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d02b      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c0:	d027      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a2c      	ldr	r2, [pc, #176]	; (8006878 <TIM_Base_SetConfig+0x118>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d023      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a2b      	ldr	r2, [pc, #172]	; (800687c <TIM_Base_SetConfig+0x11c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d01f      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a2a      	ldr	r2, [pc, #168]	; (8006880 <TIM_Base_SetConfig+0x120>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d01b      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a29      	ldr	r2, [pc, #164]	; (8006884 <TIM_Base_SetConfig+0x124>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d017      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a28      	ldr	r2, [pc, #160]	; (8006888 <TIM_Base_SetConfig+0x128>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d013      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a27      	ldr	r2, [pc, #156]	; (800688c <TIM_Base_SetConfig+0x12c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d00f      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a26      	ldr	r2, [pc, #152]	; (8006890 <TIM_Base_SetConfig+0x130>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d00b      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a25      	ldr	r2, [pc, #148]	; (8006894 <TIM_Base_SetConfig+0x134>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d007      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a24      	ldr	r2, [pc, #144]	; (8006898 <TIM_Base_SetConfig+0x138>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d003      	beq.n	8006812 <TIM_Base_SetConfig+0xb2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a23      	ldr	r2, [pc, #140]	; (800689c <TIM_Base_SetConfig+0x13c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d108      	bne.n	8006824 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	4313      	orrs	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a0a      	ldr	r2, [pc, #40]	; (8006874 <TIM_Base_SetConfig+0x114>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d003      	beq.n	8006858 <TIM_Base_SetConfig+0xf8>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a0c      	ldr	r2, [pc, #48]	; (8006884 <TIM_Base_SetConfig+0x124>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d103      	bne.n	8006860 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	691a      	ldr	r2, [r3, #16]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	615a      	str	r2, [r3, #20]
}
 8006866:	bf00      	nop
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	40010000 	.word	0x40010000
 8006878:	40000400 	.word	0x40000400
 800687c:	40000800 	.word	0x40000800
 8006880:	40000c00 	.word	0x40000c00
 8006884:	40010400 	.word	0x40010400
 8006888:	40014000 	.word	0x40014000
 800688c:	40014400 	.word	0x40014400
 8006890:	40014800 	.word	0x40014800
 8006894:	40001800 	.word	0x40001800
 8006898:	40001c00 	.word	0x40001c00
 800689c:	40002000 	.word	0x40002000

080068a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e09f      	b.n	8006a2e <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d02d      	beq.n	8006952 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a4f      	ldr	r2, [pc, #316]	; (8006a38 <HAL_UART_Init+0x15c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d055      	beq.n	80069ac <HAL_UART_Init+0xd0>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a4d      	ldr	r2, [pc, #308]	; (8006a3c <HAL_UART_Init+0x160>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d050      	beq.n	80069ac <HAL_UART_Init+0xd0>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a4c      	ldr	r2, [pc, #304]	; (8006a40 <HAL_UART_Init+0x164>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d04b      	beq.n	80069ac <HAL_UART_Init+0xd0>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a4a      	ldr	r2, [pc, #296]	; (8006a44 <HAL_UART_Init+0x168>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d046      	beq.n	80069ac <HAL_UART_Init+0xd0>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a49      	ldr	r2, [pc, #292]	; (8006a48 <HAL_UART_Init+0x16c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d041      	beq.n	80069ac <HAL_UART_Init+0xd0>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a47      	ldr	r2, [pc, #284]	; (8006a4c <HAL_UART_Init+0x170>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d03c      	beq.n	80069ac <HAL_UART_Init+0xd0>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a46      	ldr	r2, [pc, #280]	; (8006a50 <HAL_UART_Init+0x174>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d037      	beq.n	80069ac <HAL_UART_Init+0xd0>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a44      	ldr	r2, [pc, #272]	; (8006a54 <HAL_UART_Init+0x178>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d032      	beq.n	80069ac <HAL_UART_Init+0xd0>
 8006946:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800694a:	4843      	ldr	r0, [pc, #268]	; (8006a58 <HAL_UART_Init+0x17c>)
 800694c:	f7fa fcfc 	bl	8001348 <assert_failed>
 8006950:	e02c      	b.n	80069ac <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a38      	ldr	r2, [pc, #224]	; (8006a38 <HAL_UART_Init+0x15c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d027      	beq.n	80069ac <HAL_UART_Init+0xd0>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a36      	ldr	r2, [pc, #216]	; (8006a3c <HAL_UART_Init+0x160>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d022      	beq.n	80069ac <HAL_UART_Init+0xd0>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a35      	ldr	r2, [pc, #212]	; (8006a40 <HAL_UART_Init+0x164>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d01d      	beq.n	80069ac <HAL_UART_Init+0xd0>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a33      	ldr	r2, [pc, #204]	; (8006a44 <HAL_UART_Init+0x168>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d018      	beq.n	80069ac <HAL_UART_Init+0xd0>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a32      	ldr	r2, [pc, #200]	; (8006a48 <HAL_UART_Init+0x16c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d013      	beq.n	80069ac <HAL_UART_Init+0xd0>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a30      	ldr	r2, [pc, #192]	; (8006a4c <HAL_UART_Init+0x170>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00e      	beq.n	80069ac <HAL_UART_Init+0xd0>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a2f      	ldr	r2, [pc, #188]	; (8006a50 <HAL_UART_Init+0x174>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d009      	beq.n	80069ac <HAL_UART_Init+0xd0>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a2d      	ldr	r2, [pc, #180]	; (8006a54 <HAL_UART_Init+0x178>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d004      	beq.n	80069ac <HAL_UART_Init+0xd0>
 80069a2:	f240 1131 	movw	r1, #305	; 0x131
 80069a6:	482c      	ldr	r0, [pc, #176]	; (8006a58 <HAL_UART_Init+0x17c>)
 80069a8:	f7fa fcce 	bl	8001348 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d106      	bne.n	80069c2 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7fa ff77 	bl	80018b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2224      	movs	r2, #36	; 0x24
 80069c6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0201 	bic.w	r2, r2, #1
 80069d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fbb5 	bl	8007148 <UART_SetConfig>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d101      	bne.n	80069e8 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e022      	b.n	8006a2e <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fe9f 	bl	8007734 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	689a      	ldr	r2, [r3, #8]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f042 0201 	orr.w	r2, r2, #1
 8006a24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 ffdc 	bl	80079e4 <UART_CheckIdleState>
 8006a2c:	4603      	mov	r3, r0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	40011000 	.word	0x40011000
 8006a3c:	40004400 	.word	0x40004400
 8006a40:	40004800 	.word	0x40004800
 8006a44:	40004c00 	.word	0x40004c00
 8006a48:	40005000 	.word	0x40005000
 8006a4c:	40011400 	.word	0x40011400
 8006a50:	40007800 	.word	0x40007800
 8006a54:	40007c00 	.word	0x40007c00
 8006a58:	0800e16c 	.word	0x0800e16c

08006a5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08a      	sub	sp, #40	; 0x28
 8006a60:	af02      	add	r7, sp, #8
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	603b      	str	r3, [r7, #0]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a70:	2b20      	cmp	r3, #32
 8006a72:	d171      	bne.n	8006b58 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <HAL_UART_Transmit+0x24>
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e06a      	b.n	8006b5a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2221      	movs	r2, #33	; 0x21
 8006a90:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a92:	f7fb f871 	bl	8001b78 <HAL_GetTick>
 8006a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	88fa      	ldrh	r2, [r7, #6]
 8006a9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	88fa      	ldrh	r2, [r7, #6]
 8006aa4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab0:	d108      	bne.n	8006ac4 <HAL_UART_Transmit+0x68>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d104      	bne.n	8006ac4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	61bb      	str	r3, [r7, #24]
 8006ac2:	e003      	b.n	8006acc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006acc:	e02c      	b.n	8006b28 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2180      	movs	r1, #128	; 0x80
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 ffba 	bl	8007a52 <UART_WaitOnFlagUntilTimeout>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e038      	b.n	8006b5a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10b      	bne.n	8006b06 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006afc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	3302      	adds	r3, #2
 8006b02:	61bb      	str	r3, [r7, #24]
 8006b04:	e007      	b.n	8006b16 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	781a      	ldrb	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	3301      	adds	r3, #1
 8006b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1cc      	bne.n	8006ace <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2140      	movs	r1, #64	; 0x40
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 ff87 	bl	8007a52 <UART_WaitOnFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e005      	b.n	8006b5a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2220      	movs	r2, #32
 8006b52:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	e000      	b.n	8006b5a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006b58:	2302      	movs	r3, #2
  }
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3720      	adds	r7, #32
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b0ba      	sub	sp, #232	; 0xe8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b8e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b92:	4013      	ands	r3, r2
 8006b94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d115      	bne.n	8006bcc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba4:	f003 0320 	and.w	r3, r3, #32
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00f      	beq.n	8006bcc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d009      	beq.n	8006bcc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 8297 	beq.w	80070f0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	4798      	blx	r3
      }
      return;
 8006bca:	e291      	b.n	80070f0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006bcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 8117 	beq.w	8006e04 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d106      	bne.n	8006bf0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006be2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006be6:	4b85      	ldr	r3, [pc, #532]	; (8006dfc <HAL_UART_IRQHandler+0x298>)
 8006be8:	4013      	ands	r3, r2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 810a 	beq.w	8006e04 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d011      	beq.n	8006c20 <HAL_UART_IRQHandler+0xbc>
 8006bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00b      	beq.n	8006c20 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c16:	f043 0201 	orr.w	r2, r3, #1
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d011      	beq.n	8006c50 <HAL_UART_IRQHandler+0xec>
 8006c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00b      	beq.n	8006c50 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c46:	f043 0204 	orr.w	r2, r3, #4
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d011      	beq.n	8006c80 <HAL_UART_IRQHandler+0x11c>
 8006c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00b      	beq.n	8006c80 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2204      	movs	r2, #4
 8006c6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c76:	f043 0202 	orr.w	r2, r3, #2
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c84:	f003 0308 	and.w	r3, r3, #8
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d017      	beq.n	8006cbc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c90:	f003 0320 	and.w	r3, r3, #32
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d105      	bne.n	8006ca4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c9c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00b      	beq.n	8006cbc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2208      	movs	r2, #8
 8006caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cb2:	f043 0208 	orr.w	r2, r3, #8
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d012      	beq.n	8006cee <HAL_UART_IRQHandler+0x18a>
 8006cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ccc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00c      	beq.n	8006cee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ce4:	f043 0220 	orr.w	r2, r3, #32
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 81fd 	beq.w	80070f4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cfe:	f003 0320 	and.w	r3, r3, #32
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00d      	beq.n	8006d22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d007      	beq.n	8006d22 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d36:	2b40      	cmp	r3, #64	; 0x40
 8006d38:	d005      	beq.n	8006d46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d04f      	beq.n	8006de6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 ff49 	bl	8007bde <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d56:	2b40      	cmp	r3, #64	; 0x40
 8006d58:	d141      	bne.n	8006dde <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d68:	e853 3f00 	ldrex	r3, [r3]
 8006d6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3308      	adds	r3, #8
 8006d82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d96:	e841 2300 	strex	r3, r2, [r1]
 8006d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1d9      	bne.n	8006d5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d013      	beq.n	8006dd6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db2:	4a13      	ldr	r2, [pc, #76]	; (8006e00 <HAL_UART_IRQHandler+0x29c>)
 8006db4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fb f86a 	bl	8001e94 <HAL_DMA_Abort_IT>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d017      	beq.n	8006df6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd4:	e00f      	b.n	8006df6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f9a0 	bl	800711c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ddc:	e00b      	b.n	8006df6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f99c 	bl	800711c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de4:	e007      	b.n	8006df6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f998 	bl	800711c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006df4:	e17e      	b.n	80070f4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df6:	bf00      	nop
    return;
 8006df8:	e17c      	b.n	80070f4 <HAL_UART_IRQHandler+0x590>
 8006dfa:	bf00      	nop
 8006dfc:	04000120 	.word	0x04000120
 8006e00:	08007ca7 	.word	0x08007ca7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	f040 814c 	bne.w	80070a6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e12:	f003 0310 	and.w	r3, r3, #16
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 8145 	beq.w	80070a6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e20:	f003 0310 	and.w	r3, r3, #16
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 813e 	beq.w	80070a6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2210      	movs	r2, #16
 8006e30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3c:	2b40      	cmp	r3, #64	; 0x40
 8006e3e:	f040 80b6 	bne.w	8006fae <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e4e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 8150 	beq.w	80070f8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e62:	429a      	cmp	r2, r3
 8006e64:	f080 8148 	bcs.w	80070f8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e7c:	f000 8086 	beq.w	8006f8c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006eaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006eae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006eb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1da      	bne.n	8006e80 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3308      	adds	r3, #8
 8006ed0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006edc:	f023 0301 	bic.w	r3, r3, #1
 8006ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3308      	adds	r3, #8
 8006eea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006eee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ef2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ef6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e1      	bne.n	8006eca <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3308      	adds	r3, #8
 8006f26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e3      	bne.n	8006f06 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f5c:	f023 0310 	bic.w	r3, r3, #16
 8006f60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f70:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e4      	bne.n	8006f4c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fa ff14 	bl	8001db4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f8c2 	bl	8007130 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fac:	e0a4      	b.n	80070f8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 8096 	beq.w	80070fc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 8091 	beq.w	80070fc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	e853 3f00 	ldrex	r3, [r3]
 8006fe6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8006ffe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007000:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007004:	e841 2300 	strex	r3, r2, [r1]
 8007008:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800700a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1e4      	bne.n	8006fda <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3308      	adds	r3, #8
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	e853 3f00 	ldrex	r3, [r3]
 800701e:	623b      	str	r3, [r7, #32]
   return(result);
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	f023 0301 	bic.w	r3, r3, #1
 8007026:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3308      	adds	r3, #8
 8007030:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007034:	633a      	str	r2, [r7, #48]	; 0x30
 8007036:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007038:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800703a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800703c:	e841 2300 	strex	r3, r2, [r1]
 8007040:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1e3      	bne.n	8007010 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2220      	movs	r2, #32
 800704c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	60fb      	str	r3, [r7, #12]
   return(result);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f023 0310 	bic.w	r3, r3, #16
 8007070:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800707e:	61fb      	str	r3, [r7, #28]
 8007080:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	69b9      	ldr	r1, [r7, #24]
 8007084:	69fa      	ldr	r2, [r7, #28]
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	617b      	str	r3, [r7, #20]
   return(result);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e4      	bne.n	800705c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2202      	movs	r2, #2
 8007096:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007098:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f846 	bl	8007130 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070a4:	e02a      	b.n	80070fc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80070a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00e      	beq.n	80070d0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80070b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d008      	beq.n	80070d0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d01c      	beq.n	8007100 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	4798      	blx	r3
    }
    return;
 80070ce:	e017      	b.n	8007100 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d012      	beq.n	8007102 <HAL_UART_IRQHandler+0x59e>
 80070dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00c      	beq.n	8007102 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fdf2 	bl	8007cd2 <UART_EndTransmit_IT>
    return;
 80070ee:	e008      	b.n	8007102 <HAL_UART_IRQHandler+0x59e>
      return;
 80070f0:	bf00      	nop
 80070f2:	e006      	b.n	8007102 <HAL_UART_IRQHandler+0x59e>
    return;
 80070f4:	bf00      	nop
 80070f6:	e004      	b.n	8007102 <HAL_UART_IRQHandler+0x59e>
      return;
 80070f8:	bf00      	nop
 80070fa:	e002      	b.n	8007102 <HAL_UART_IRQHandler+0x59e>
      return;
 80070fc:	bf00      	nop
 80070fe:	e000      	b.n	8007102 <HAL_UART_IRQHandler+0x59e>
    return;
 8007100:	bf00      	nop
  }

}
 8007102:	37e8      	adds	r7, #232	; 0xe8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	4aa0      	ldr	r2, [pc, #640]	; (80073dc <UART_SetConfig+0x294>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d904      	bls.n	8007168 <UART_SetConfig+0x20>
 800715e:	f640 315d 	movw	r1, #2909	; 0xb5d
 8007162:	489f      	ldr	r0, [pc, #636]	; (80073e0 <UART_SetConfig+0x298>)
 8007164:	f7fa f8f0 	bl	8001348 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007170:	d00d      	beq.n	800718e <UART_SetConfig+0x46>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d009      	beq.n	800718e <UART_SetConfig+0x46>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007182:	d004      	beq.n	800718e <UART_SetConfig+0x46>
 8007184:	f640 315e 	movw	r1, #2910	; 0xb5e
 8007188:	4895      	ldr	r0, [pc, #596]	; (80073e0 <UART_SetConfig+0x298>)
 800718a:	f7fa f8dd 	bl	8001348 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007196:	d012      	beq.n	80071be <UART_SetConfig+0x76>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00e      	beq.n	80071be <UART_SetConfig+0x76>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071a8:	d009      	beq.n	80071be <UART_SetConfig+0x76>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071b2:	d004      	beq.n	80071be <UART_SetConfig+0x76>
 80071b4:	f640 315f 	movw	r1, #2911	; 0xb5f
 80071b8:	4889      	ldr	r0, [pc, #548]	; (80073e0 <UART_SetConfig+0x298>)
 80071ba:	f7fa f8c5 	bl	8001348 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d009      	beq.n	80071da <UART_SetConfig+0x92>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071ce:	d004      	beq.n	80071da <UART_SetConfig+0x92>
 80071d0:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 80071d4:	4882      	ldr	r0, [pc, #520]	; (80073e0 <UART_SetConfig+0x298>)
 80071d6:	f7fa f8b7 	bl	8001348 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00e      	beq.n	8007200 <UART_SetConfig+0xb8>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ea:	d009      	beq.n	8007200 <UART_SetConfig+0xb8>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80071f4:	d004      	beq.n	8007200 <UART_SetConfig+0xb8>
 80071f6:	f640 3162 	movw	r1, #2914	; 0xb62
 80071fa:	4879      	ldr	r0, [pc, #484]	; (80073e0 <UART_SetConfig+0x298>)
 80071fc:	f7fa f8a4 	bl	8001348 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	f023 030c 	bic.w	r3, r3, #12
 8007208:	2b00      	cmp	r3, #0
 800720a:	d103      	bne.n	8007214 <UART_SetConfig+0xcc>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d104      	bne.n	800721e <UART_SetConfig+0xd6>
 8007214:	f640 3163 	movw	r1, #2915	; 0xb63
 8007218:	4871      	ldr	r0, [pc, #452]	; (80073e0 <UART_SetConfig+0x298>)
 800721a:	f7fa f895 	bl	8001348 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d013      	beq.n	800724e <UART_SetConfig+0x106>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800722e:	d00e      	beq.n	800724e <UART_SetConfig+0x106>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007238:	d009      	beq.n	800724e <UART_SetConfig+0x106>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007242:	d004      	beq.n	800724e <UART_SetConfig+0x106>
 8007244:	f640 3164 	movw	r1, #2916	; 0xb64
 8007248:	4865      	ldr	r0, [pc, #404]	; (80073e0 <UART_SetConfig+0x298>)
 800724a:	f7fa f87d 	bl	8001348 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d009      	beq.n	800726a <UART_SetConfig+0x122>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800725e:	d004      	beq.n	800726a <UART_SetConfig+0x122>
 8007260:	f640 3165 	movw	r1, #2917	; 0xb65
 8007264:	485e      	ldr	r0, [pc, #376]	; (80073e0 <UART_SetConfig+0x298>)
 8007266:	f7fa f86f 	bl	8001348 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	689a      	ldr	r2, [r3, #8]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	431a      	orrs	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	431a      	orrs	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	4313      	orrs	r3, r2
 8007280:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	4b56      	ldr	r3, [pc, #344]	; (80073e4 <UART_SetConfig+0x29c>)
 800728a:	4013      	ands	r3, r2
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	6812      	ldr	r2, [r2, #0]
 8007290:	6979      	ldr	r1, [r7, #20]
 8007292:	430b      	orrs	r3, r1
 8007294:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68da      	ldr	r2, [r3, #12]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a44      	ldr	r2, [pc, #272]	; (80073e8 <UART_SetConfig+0x2a0>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d121      	bne.n	800731e <UART_SetConfig+0x1d6>
 80072da:	4b44      	ldr	r3, [pc, #272]	; (80073ec <UART_SetConfig+0x2a4>)
 80072dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e0:	f003 0303 	and.w	r3, r3, #3
 80072e4:	2b03      	cmp	r3, #3
 80072e6:	d817      	bhi.n	8007318 <UART_SetConfig+0x1d0>
 80072e8:	a201      	add	r2, pc, #4	; (adr r2, 80072f0 <UART_SetConfig+0x1a8>)
 80072ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ee:	bf00      	nop
 80072f0:	08007301 	.word	0x08007301
 80072f4:	0800730d 	.word	0x0800730d
 80072f8:	08007307 	.word	0x08007307
 80072fc:	08007313 	.word	0x08007313
 8007300:	2301      	movs	r3, #1
 8007302:	77fb      	strb	r3, [r7, #31]
 8007304:	e14c      	b.n	80075a0 <UART_SetConfig+0x458>
 8007306:	2302      	movs	r3, #2
 8007308:	77fb      	strb	r3, [r7, #31]
 800730a:	e149      	b.n	80075a0 <UART_SetConfig+0x458>
 800730c:	2304      	movs	r3, #4
 800730e:	77fb      	strb	r3, [r7, #31]
 8007310:	e146      	b.n	80075a0 <UART_SetConfig+0x458>
 8007312:	2308      	movs	r3, #8
 8007314:	77fb      	strb	r3, [r7, #31]
 8007316:	e143      	b.n	80075a0 <UART_SetConfig+0x458>
 8007318:	2310      	movs	r3, #16
 800731a:	77fb      	strb	r3, [r7, #31]
 800731c:	e140      	b.n	80075a0 <UART_SetConfig+0x458>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a33      	ldr	r2, [pc, #204]	; (80073f0 <UART_SetConfig+0x2a8>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d132      	bne.n	800738e <UART_SetConfig+0x246>
 8007328:	4b30      	ldr	r3, [pc, #192]	; (80073ec <UART_SetConfig+0x2a4>)
 800732a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800732e:	f003 030c 	and.w	r3, r3, #12
 8007332:	2b0c      	cmp	r3, #12
 8007334:	d828      	bhi.n	8007388 <UART_SetConfig+0x240>
 8007336:	a201      	add	r2, pc, #4	; (adr r2, 800733c <UART_SetConfig+0x1f4>)
 8007338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733c:	08007371 	.word	0x08007371
 8007340:	08007389 	.word	0x08007389
 8007344:	08007389 	.word	0x08007389
 8007348:	08007389 	.word	0x08007389
 800734c:	0800737d 	.word	0x0800737d
 8007350:	08007389 	.word	0x08007389
 8007354:	08007389 	.word	0x08007389
 8007358:	08007389 	.word	0x08007389
 800735c:	08007377 	.word	0x08007377
 8007360:	08007389 	.word	0x08007389
 8007364:	08007389 	.word	0x08007389
 8007368:	08007389 	.word	0x08007389
 800736c:	08007383 	.word	0x08007383
 8007370:	2300      	movs	r3, #0
 8007372:	77fb      	strb	r3, [r7, #31]
 8007374:	e114      	b.n	80075a0 <UART_SetConfig+0x458>
 8007376:	2302      	movs	r3, #2
 8007378:	77fb      	strb	r3, [r7, #31]
 800737a:	e111      	b.n	80075a0 <UART_SetConfig+0x458>
 800737c:	2304      	movs	r3, #4
 800737e:	77fb      	strb	r3, [r7, #31]
 8007380:	e10e      	b.n	80075a0 <UART_SetConfig+0x458>
 8007382:	2308      	movs	r3, #8
 8007384:	77fb      	strb	r3, [r7, #31]
 8007386:	e10b      	b.n	80075a0 <UART_SetConfig+0x458>
 8007388:	2310      	movs	r3, #16
 800738a:	77fb      	strb	r3, [r7, #31]
 800738c:	e108      	b.n	80075a0 <UART_SetConfig+0x458>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a18      	ldr	r2, [pc, #96]	; (80073f4 <UART_SetConfig+0x2ac>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d12f      	bne.n	80073f8 <UART_SetConfig+0x2b0>
 8007398:	4b14      	ldr	r3, [pc, #80]	; (80073ec <UART_SetConfig+0x2a4>)
 800739a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80073a2:	2b30      	cmp	r3, #48	; 0x30
 80073a4:	d013      	beq.n	80073ce <UART_SetConfig+0x286>
 80073a6:	2b30      	cmp	r3, #48	; 0x30
 80073a8:	d814      	bhi.n	80073d4 <UART_SetConfig+0x28c>
 80073aa:	2b20      	cmp	r3, #32
 80073ac:	d009      	beq.n	80073c2 <UART_SetConfig+0x27a>
 80073ae:	2b20      	cmp	r3, #32
 80073b0:	d810      	bhi.n	80073d4 <UART_SetConfig+0x28c>
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d002      	beq.n	80073bc <UART_SetConfig+0x274>
 80073b6:	2b10      	cmp	r3, #16
 80073b8:	d006      	beq.n	80073c8 <UART_SetConfig+0x280>
 80073ba:	e00b      	b.n	80073d4 <UART_SetConfig+0x28c>
 80073bc:	2300      	movs	r3, #0
 80073be:	77fb      	strb	r3, [r7, #31]
 80073c0:	e0ee      	b.n	80075a0 <UART_SetConfig+0x458>
 80073c2:	2302      	movs	r3, #2
 80073c4:	77fb      	strb	r3, [r7, #31]
 80073c6:	e0eb      	b.n	80075a0 <UART_SetConfig+0x458>
 80073c8:	2304      	movs	r3, #4
 80073ca:	77fb      	strb	r3, [r7, #31]
 80073cc:	e0e8      	b.n	80075a0 <UART_SetConfig+0x458>
 80073ce:	2308      	movs	r3, #8
 80073d0:	77fb      	strb	r3, [r7, #31]
 80073d2:	e0e5      	b.n	80075a0 <UART_SetConfig+0x458>
 80073d4:	2310      	movs	r3, #16
 80073d6:	77fb      	strb	r3, [r7, #31]
 80073d8:	e0e2      	b.n	80075a0 <UART_SetConfig+0x458>
 80073da:	bf00      	nop
 80073dc:	019bfcc0 	.word	0x019bfcc0
 80073e0:	0800e16c 	.word	0x0800e16c
 80073e4:	efff69f3 	.word	0xefff69f3
 80073e8:	40011000 	.word	0x40011000
 80073ec:	40023800 	.word	0x40023800
 80073f0:	40004400 	.word	0x40004400
 80073f4:	40004800 	.word	0x40004800
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4aa5      	ldr	r2, [pc, #660]	; (8007694 <UART_SetConfig+0x54c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d120      	bne.n	8007444 <UART_SetConfig+0x2fc>
 8007402:	4ba5      	ldr	r3, [pc, #660]	; (8007698 <UART_SetConfig+0x550>)
 8007404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007408:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800740c:	2bc0      	cmp	r3, #192	; 0xc0
 800740e:	d013      	beq.n	8007438 <UART_SetConfig+0x2f0>
 8007410:	2bc0      	cmp	r3, #192	; 0xc0
 8007412:	d814      	bhi.n	800743e <UART_SetConfig+0x2f6>
 8007414:	2b80      	cmp	r3, #128	; 0x80
 8007416:	d009      	beq.n	800742c <UART_SetConfig+0x2e4>
 8007418:	2b80      	cmp	r3, #128	; 0x80
 800741a:	d810      	bhi.n	800743e <UART_SetConfig+0x2f6>
 800741c:	2b00      	cmp	r3, #0
 800741e:	d002      	beq.n	8007426 <UART_SetConfig+0x2de>
 8007420:	2b40      	cmp	r3, #64	; 0x40
 8007422:	d006      	beq.n	8007432 <UART_SetConfig+0x2ea>
 8007424:	e00b      	b.n	800743e <UART_SetConfig+0x2f6>
 8007426:	2300      	movs	r3, #0
 8007428:	77fb      	strb	r3, [r7, #31]
 800742a:	e0b9      	b.n	80075a0 <UART_SetConfig+0x458>
 800742c:	2302      	movs	r3, #2
 800742e:	77fb      	strb	r3, [r7, #31]
 8007430:	e0b6      	b.n	80075a0 <UART_SetConfig+0x458>
 8007432:	2304      	movs	r3, #4
 8007434:	77fb      	strb	r3, [r7, #31]
 8007436:	e0b3      	b.n	80075a0 <UART_SetConfig+0x458>
 8007438:	2308      	movs	r3, #8
 800743a:	77fb      	strb	r3, [r7, #31]
 800743c:	e0b0      	b.n	80075a0 <UART_SetConfig+0x458>
 800743e:	2310      	movs	r3, #16
 8007440:	77fb      	strb	r3, [r7, #31]
 8007442:	e0ad      	b.n	80075a0 <UART_SetConfig+0x458>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a94      	ldr	r2, [pc, #592]	; (800769c <UART_SetConfig+0x554>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d125      	bne.n	800749a <UART_SetConfig+0x352>
 800744e:	4b92      	ldr	r3, [pc, #584]	; (8007698 <UART_SetConfig+0x550>)
 8007450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007458:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800745c:	d017      	beq.n	800748e <UART_SetConfig+0x346>
 800745e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007462:	d817      	bhi.n	8007494 <UART_SetConfig+0x34c>
 8007464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007468:	d00b      	beq.n	8007482 <UART_SetConfig+0x33a>
 800746a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800746e:	d811      	bhi.n	8007494 <UART_SetConfig+0x34c>
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <UART_SetConfig+0x334>
 8007474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007478:	d006      	beq.n	8007488 <UART_SetConfig+0x340>
 800747a:	e00b      	b.n	8007494 <UART_SetConfig+0x34c>
 800747c:	2300      	movs	r3, #0
 800747e:	77fb      	strb	r3, [r7, #31]
 8007480:	e08e      	b.n	80075a0 <UART_SetConfig+0x458>
 8007482:	2302      	movs	r3, #2
 8007484:	77fb      	strb	r3, [r7, #31]
 8007486:	e08b      	b.n	80075a0 <UART_SetConfig+0x458>
 8007488:	2304      	movs	r3, #4
 800748a:	77fb      	strb	r3, [r7, #31]
 800748c:	e088      	b.n	80075a0 <UART_SetConfig+0x458>
 800748e:	2308      	movs	r3, #8
 8007490:	77fb      	strb	r3, [r7, #31]
 8007492:	e085      	b.n	80075a0 <UART_SetConfig+0x458>
 8007494:	2310      	movs	r3, #16
 8007496:	77fb      	strb	r3, [r7, #31]
 8007498:	e082      	b.n	80075a0 <UART_SetConfig+0x458>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a80      	ldr	r2, [pc, #512]	; (80076a0 <UART_SetConfig+0x558>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d125      	bne.n	80074f0 <UART_SetConfig+0x3a8>
 80074a4:	4b7c      	ldr	r3, [pc, #496]	; (8007698 <UART_SetConfig+0x550>)
 80074a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80074ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074b2:	d017      	beq.n	80074e4 <UART_SetConfig+0x39c>
 80074b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074b8:	d817      	bhi.n	80074ea <UART_SetConfig+0x3a2>
 80074ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074be:	d00b      	beq.n	80074d8 <UART_SetConfig+0x390>
 80074c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074c4:	d811      	bhi.n	80074ea <UART_SetConfig+0x3a2>
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <UART_SetConfig+0x38a>
 80074ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ce:	d006      	beq.n	80074de <UART_SetConfig+0x396>
 80074d0:	e00b      	b.n	80074ea <UART_SetConfig+0x3a2>
 80074d2:	2301      	movs	r3, #1
 80074d4:	77fb      	strb	r3, [r7, #31]
 80074d6:	e063      	b.n	80075a0 <UART_SetConfig+0x458>
 80074d8:	2302      	movs	r3, #2
 80074da:	77fb      	strb	r3, [r7, #31]
 80074dc:	e060      	b.n	80075a0 <UART_SetConfig+0x458>
 80074de:	2304      	movs	r3, #4
 80074e0:	77fb      	strb	r3, [r7, #31]
 80074e2:	e05d      	b.n	80075a0 <UART_SetConfig+0x458>
 80074e4:	2308      	movs	r3, #8
 80074e6:	77fb      	strb	r3, [r7, #31]
 80074e8:	e05a      	b.n	80075a0 <UART_SetConfig+0x458>
 80074ea:	2310      	movs	r3, #16
 80074ec:	77fb      	strb	r3, [r7, #31]
 80074ee:	e057      	b.n	80075a0 <UART_SetConfig+0x458>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a6b      	ldr	r2, [pc, #428]	; (80076a4 <UART_SetConfig+0x55c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d125      	bne.n	8007546 <UART_SetConfig+0x3fe>
 80074fa:	4b67      	ldr	r3, [pc, #412]	; (8007698 <UART_SetConfig+0x550>)
 80074fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007500:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007504:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007508:	d017      	beq.n	800753a <UART_SetConfig+0x3f2>
 800750a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800750e:	d817      	bhi.n	8007540 <UART_SetConfig+0x3f8>
 8007510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007514:	d00b      	beq.n	800752e <UART_SetConfig+0x3e6>
 8007516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800751a:	d811      	bhi.n	8007540 <UART_SetConfig+0x3f8>
 800751c:	2b00      	cmp	r3, #0
 800751e:	d003      	beq.n	8007528 <UART_SetConfig+0x3e0>
 8007520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007524:	d006      	beq.n	8007534 <UART_SetConfig+0x3ec>
 8007526:	e00b      	b.n	8007540 <UART_SetConfig+0x3f8>
 8007528:	2300      	movs	r3, #0
 800752a:	77fb      	strb	r3, [r7, #31]
 800752c:	e038      	b.n	80075a0 <UART_SetConfig+0x458>
 800752e:	2302      	movs	r3, #2
 8007530:	77fb      	strb	r3, [r7, #31]
 8007532:	e035      	b.n	80075a0 <UART_SetConfig+0x458>
 8007534:	2304      	movs	r3, #4
 8007536:	77fb      	strb	r3, [r7, #31]
 8007538:	e032      	b.n	80075a0 <UART_SetConfig+0x458>
 800753a:	2308      	movs	r3, #8
 800753c:	77fb      	strb	r3, [r7, #31]
 800753e:	e02f      	b.n	80075a0 <UART_SetConfig+0x458>
 8007540:	2310      	movs	r3, #16
 8007542:	77fb      	strb	r3, [r7, #31]
 8007544:	e02c      	b.n	80075a0 <UART_SetConfig+0x458>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a57      	ldr	r2, [pc, #348]	; (80076a8 <UART_SetConfig+0x560>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d125      	bne.n	800759c <UART_SetConfig+0x454>
 8007550:	4b51      	ldr	r3, [pc, #324]	; (8007698 <UART_SetConfig+0x550>)
 8007552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007556:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800755a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800755e:	d017      	beq.n	8007590 <UART_SetConfig+0x448>
 8007560:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007564:	d817      	bhi.n	8007596 <UART_SetConfig+0x44e>
 8007566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800756a:	d00b      	beq.n	8007584 <UART_SetConfig+0x43c>
 800756c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007570:	d811      	bhi.n	8007596 <UART_SetConfig+0x44e>
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <UART_SetConfig+0x436>
 8007576:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800757a:	d006      	beq.n	800758a <UART_SetConfig+0x442>
 800757c:	e00b      	b.n	8007596 <UART_SetConfig+0x44e>
 800757e:	2300      	movs	r3, #0
 8007580:	77fb      	strb	r3, [r7, #31]
 8007582:	e00d      	b.n	80075a0 <UART_SetConfig+0x458>
 8007584:	2302      	movs	r3, #2
 8007586:	77fb      	strb	r3, [r7, #31]
 8007588:	e00a      	b.n	80075a0 <UART_SetConfig+0x458>
 800758a:	2304      	movs	r3, #4
 800758c:	77fb      	strb	r3, [r7, #31]
 800758e:	e007      	b.n	80075a0 <UART_SetConfig+0x458>
 8007590:	2308      	movs	r3, #8
 8007592:	77fb      	strb	r3, [r7, #31]
 8007594:	e004      	b.n	80075a0 <UART_SetConfig+0x458>
 8007596:	2310      	movs	r3, #16
 8007598:	77fb      	strb	r3, [r7, #31]
 800759a:	e001      	b.n	80075a0 <UART_SetConfig+0x458>
 800759c:	2310      	movs	r3, #16
 800759e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075a8:	d15c      	bne.n	8007664 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 80075aa:	7ffb      	ldrb	r3, [r7, #31]
 80075ac:	2b08      	cmp	r3, #8
 80075ae:	d828      	bhi.n	8007602 <UART_SetConfig+0x4ba>
 80075b0:	a201      	add	r2, pc, #4	; (adr r2, 80075b8 <UART_SetConfig+0x470>)
 80075b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b6:	bf00      	nop
 80075b8:	080075dd 	.word	0x080075dd
 80075bc:	080075e5 	.word	0x080075e5
 80075c0:	080075ed 	.word	0x080075ed
 80075c4:	08007603 	.word	0x08007603
 80075c8:	080075f3 	.word	0x080075f3
 80075cc:	08007603 	.word	0x08007603
 80075d0:	08007603 	.word	0x08007603
 80075d4:	08007603 	.word	0x08007603
 80075d8:	080075fb 	.word	0x080075fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075dc:	f7fd fa16 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 80075e0:	61b8      	str	r0, [r7, #24]
        break;
 80075e2:	e013      	b.n	800760c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075e4:	f7fd fa26 	bl	8004a34 <HAL_RCC_GetPCLK2Freq>
 80075e8:	61b8      	str	r0, [r7, #24]
        break;
 80075ea:	e00f      	b.n	800760c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075ec:	4b2f      	ldr	r3, [pc, #188]	; (80076ac <UART_SetConfig+0x564>)
 80075ee:	61bb      	str	r3, [r7, #24]
        break;
 80075f0:	e00c      	b.n	800760c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075f2:	f7fd f8f9 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 80075f6:	61b8      	str	r0, [r7, #24]
        break;
 80075f8:	e008      	b.n	800760c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075fe:	61bb      	str	r3, [r7, #24]
        break;
 8007600:	e004      	b.n	800760c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	77bb      	strb	r3, [r7, #30]
        break;
 800760a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 8082 	beq.w	8007718 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	005a      	lsls	r2, r3, #1
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	085b      	lsrs	r3, r3, #1
 800761e:	441a      	add	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	fbb2 f3f3 	udiv	r3, r2, r3
 8007628:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b0f      	cmp	r3, #15
 800762e:	d916      	bls.n	800765e <UART_SetConfig+0x516>
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007636:	d212      	bcs.n	800765e <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	b29b      	uxth	r3, r3
 800763c:	f023 030f 	bic.w	r3, r3, #15
 8007640:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	085b      	lsrs	r3, r3, #1
 8007646:	b29b      	uxth	r3, r3
 8007648:	f003 0307 	and.w	r3, r3, #7
 800764c:	b29a      	uxth	r2, r3
 800764e:	89fb      	ldrh	r3, [r7, #14]
 8007650:	4313      	orrs	r3, r2
 8007652:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	89fa      	ldrh	r2, [r7, #14]
 800765a:	60da      	str	r2, [r3, #12]
 800765c:	e05c      	b.n	8007718 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	77bb      	strb	r3, [r7, #30]
 8007662:	e059      	b.n	8007718 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007664:	7ffb      	ldrb	r3, [r7, #31]
 8007666:	2b08      	cmp	r3, #8
 8007668:	d835      	bhi.n	80076d6 <UART_SetConfig+0x58e>
 800766a:	a201      	add	r2, pc, #4	; (adr r2, 8007670 <UART_SetConfig+0x528>)
 800766c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007670:	080076b1 	.word	0x080076b1
 8007674:	080076b9 	.word	0x080076b9
 8007678:	080076c1 	.word	0x080076c1
 800767c:	080076d7 	.word	0x080076d7
 8007680:	080076c7 	.word	0x080076c7
 8007684:	080076d7 	.word	0x080076d7
 8007688:	080076d7 	.word	0x080076d7
 800768c:	080076d7 	.word	0x080076d7
 8007690:	080076cf 	.word	0x080076cf
 8007694:	40004c00 	.word	0x40004c00
 8007698:	40023800 	.word	0x40023800
 800769c:	40005000 	.word	0x40005000
 80076a0:	40011400 	.word	0x40011400
 80076a4:	40007800 	.word	0x40007800
 80076a8:	40007c00 	.word	0x40007c00
 80076ac:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076b0:	f7fd f9ac 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 80076b4:	61b8      	str	r0, [r7, #24]
        break;
 80076b6:	e013      	b.n	80076e0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076b8:	f7fd f9bc 	bl	8004a34 <HAL_RCC_GetPCLK2Freq>
 80076bc:	61b8      	str	r0, [r7, #24]
        break;
 80076be:	e00f      	b.n	80076e0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076c0:	4b1b      	ldr	r3, [pc, #108]	; (8007730 <UART_SetConfig+0x5e8>)
 80076c2:	61bb      	str	r3, [r7, #24]
        break;
 80076c4:	e00c      	b.n	80076e0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076c6:	f7fd f88f 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 80076ca:	61b8      	str	r0, [r7, #24]
        break;
 80076cc:	e008      	b.n	80076e0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076d2:	61bb      	str	r3, [r7, #24]
        break;
 80076d4:	e004      	b.n	80076e0 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	77bb      	strb	r3, [r7, #30]
        break;
 80076de:	bf00      	nop
    }

    if (pclk != 0U)
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d018      	beq.n	8007718 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	085a      	lsrs	r2, r3, #1
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	441a      	add	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	2b0f      	cmp	r3, #15
 80076fe:	d909      	bls.n	8007714 <UART_SetConfig+0x5cc>
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007706:	d205      	bcs.n	8007714 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	b29a      	uxth	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	60da      	str	r2, [r3, #12]
 8007712:	e001      	b.n	8007718 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007724:	7fbb      	ldrb	r3, [r7, #30]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3720      	adds	r7, #32
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	00f42400 	.word	0x00f42400

08007734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	2bff      	cmp	r3, #255	; 0xff
 8007742:	d904      	bls.n	800774e <UART_AdvFeatureConfig+0x1a>
 8007744:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8007748:	488e      	ldr	r0, [pc, #568]	; (8007984 <UART_AdvFeatureConfig+0x250>)
 800774a:	f7f9 fdfd 	bl	8001348 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b00      	cmp	r3, #0
 8007758:	d018      	beq.n	800778c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775e:	2b00      	cmp	r3, #0
 8007760:	d009      	beq.n	8007776 <UART_AdvFeatureConfig+0x42>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007766:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800776a:	d004      	beq.n	8007776 <UART_AdvFeatureConfig+0x42>
 800776c:	f640 31eb 	movw	r1, #3051	; 0xbeb
 8007770:	4884      	ldr	r0, [pc, #528]	; (8007984 <UART_AdvFeatureConfig+0x250>)
 8007772:	f7f9 fde9 	bl	8001348 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	f003 0302 	and.w	r3, r3, #2
 8007794:	2b00      	cmp	r3, #0
 8007796:	d018      	beq.n	80077ca <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779c:	2b00      	cmp	r3, #0
 800779e:	d009      	beq.n	80077b4 <UART_AdvFeatureConfig+0x80>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077a8:	d004      	beq.n	80077b4 <UART_AdvFeatureConfig+0x80>
 80077aa:	f640 31f2 	movw	r1, #3058	; 0xbf2
 80077ae:	4875      	ldr	r0, [pc, #468]	; (8007984 <UART_AdvFeatureConfig+0x250>)
 80077b0:	f7f9 fdca 	bl	8001348 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	f003 0304 	and.w	r3, r3, #4
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d018      	beq.n	8007808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d009      	beq.n	80077f2 <UART_AdvFeatureConfig+0xbe>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077e6:	d004      	beq.n	80077f2 <UART_AdvFeatureConfig+0xbe>
 80077e8:	f640 31f9 	movw	r1, #3065	; 0xbf9
 80077ec:	4865      	ldr	r0, [pc, #404]	; (8007984 <UART_AdvFeatureConfig+0x250>)
 80077ee:	f7f9 fdab 	bl	8001348 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	430a      	orrs	r2, r1
 8007806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780c:	f003 0308 	and.w	r3, r3, #8
 8007810:	2b00      	cmp	r3, #0
 8007812:	d018      	beq.n	8007846 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007818:	2b00      	cmp	r3, #0
 800781a:	d009      	beq.n	8007830 <UART_AdvFeatureConfig+0xfc>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007824:	d004      	beq.n	8007830 <UART_AdvFeatureConfig+0xfc>
 8007826:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800782a:	4856      	ldr	r0, [pc, #344]	; (8007984 <UART_AdvFeatureConfig+0x250>)
 800782c:	f7f9 fd8c 	bl	8001348 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	430a      	orrs	r2, r1
 8007844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784a:	f003 0310 	and.w	r3, r3, #16
 800784e:	2b00      	cmp	r3, #0
 8007850:	d018      	beq.n	8007884 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007856:	2b00      	cmp	r3, #0
 8007858:	d009      	beq.n	800786e <UART_AdvFeatureConfig+0x13a>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007862:	d004      	beq.n	800786e <UART_AdvFeatureConfig+0x13a>
 8007864:	f640 4107 	movw	r1, #3079	; 0xc07
 8007868:	4846      	ldr	r0, [pc, #280]	; (8007984 <UART_AdvFeatureConfig+0x250>)
 800786a:	f7f9 fd6d 	bl	8001348 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	430a      	orrs	r2, r1
 8007882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007888:	f003 0320 	and.w	r3, r3, #32
 800788c:	2b00      	cmp	r3, #0
 800788e:	d018      	beq.n	80078c2 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007894:	2b00      	cmp	r3, #0
 8007896:	d009      	beq.n	80078ac <UART_AdvFeatureConfig+0x178>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078a0:	d004      	beq.n	80078ac <UART_AdvFeatureConfig+0x178>
 80078a2:	f640 410e 	movw	r1, #3086	; 0xc0e
 80078a6:	4837      	ldr	r0, [pc, #220]	; (8007984 <UART_AdvFeatureConfig+0x250>)
 80078a8:	f7f9 fd4e 	bl	8001348 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	430a      	orrs	r2, r1
 80078c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d064      	beq.n	8007998 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a2d      	ldr	r2, [pc, #180]	; (8007988 <UART_AdvFeatureConfig+0x254>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d013      	beq.n	8007900 <UART_AdvFeatureConfig+0x1cc>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a2b      	ldr	r2, [pc, #172]	; (800798c <UART_AdvFeatureConfig+0x258>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00e      	beq.n	8007900 <UART_AdvFeatureConfig+0x1cc>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a2a      	ldr	r2, [pc, #168]	; (8007990 <UART_AdvFeatureConfig+0x25c>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d009      	beq.n	8007900 <UART_AdvFeatureConfig+0x1cc>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a28      	ldr	r2, [pc, #160]	; (8007994 <UART_AdvFeatureConfig+0x260>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d004      	beq.n	8007900 <UART_AdvFeatureConfig+0x1cc>
 80078f6:	f640 4115 	movw	r1, #3093	; 0xc15
 80078fa:	4822      	ldr	r0, [pc, #136]	; (8007984 <UART_AdvFeatureConfig+0x250>)
 80078fc:	f7f9 fd24 	bl	8001348 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007904:	2b00      	cmp	r3, #0
 8007906:	d009      	beq.n	800791c <UART_AdvFeatureConfig+0x1e8>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007910:	d004      	beq.n	800791c <UART_AdvFeatureConfig+0x1e8>
 8007912:	f640 4116 	movw	r1, #3094	; 0xc16
 8007916:	481b      	ldr	r0, [pc, #108]	; (8007984 <UART_AdvFeatureConfig+0x250>)
 8007918:	f7f9 fd16 	bl	8001348 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800793a:	d12d      	bne.n	8007998 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007940:	2b00      	cmp	r3, #0
 8007942:	d013      	beq.n	800796c <UART_AdvFeatureConfig+0x238>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007948:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800794c:	d00e      	beq.n	800796c <UART_AdvFeatureConfig+0x238>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007956:	d009      	beq.n	800796c <UART_AdvFeatureConfig+0x238>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800795c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007960:	d004      	beq.n	800796c <UART_AdvFeatureConfig+0x238>
 8007962:	f640 411b 	movw	r1, #3099	; 0xc1b
 8007966:	4807      	ldr	r0, [pc, #28]	; (8007984 <UART_AdvFeatureConfig+0x250>)
 8007968:	f7f9 fcee 	bl	8001348 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	605a      	str	r2, [r3, #4]
 8007982:	e009      	b.n	8007998 <UART_AdvFeatureConfig+0x264>
 8007984:	0800e16c 	.word	0x0800e16c
 8007988:	40011000 	.word	0x40011000
 800798c:	40004400 	.word	0x40004400
 8007990:	40004800 	.word	0x40004800
 8007994:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d018      	beq.n	80079d6 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d009      	beq.n	80079c0 <UART_AdvFeatureConfig+0x28c>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80079b4:	d004      	beq.n	80079c0 <UART_AdvFeatureConfig+0x28c>
 80079b6:	f640 4123 	movw	r1, #3107	; 0xc23
 80079ba:	4809      	ldr	r0, [pc, #36]	; (80079e0 <UART_AdvFeatureConfig+0x2ac>)
 80079bc:	f7f9 fcc4 	bl	8001348 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	430a      	orrs	r2, r1
 80079d4:	605a      	str	r2, [r3, #4]
  }
}
 80079d6:	bf00      	nop
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	0800e16c 	.word	0x0800e16c

080079e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af02      	add	r7, sp, #8
 80079ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079f4:	f7fa f8c0 	bl	8001b78 <HAL_GetTick>
 80079f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0308 	and.w	r3, r3, #8
 8007a04:	2b08      	cmp	r3, #8
 8007a06:	d10e      	bne.n	8007a26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f81b 	bl	8007a52 <UART_WaitOnFlagUntilTimeout>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e011      	b.n	8007a4a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2220      	movs	r2, #32
 8007a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b09c      	sub	sp, #112	; 0x70
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	60f8      	str	r0, [r7, #12]
 8007a5a:	60b9      	str	r1, [r7, #8]
 8007a5c:	603b      	str	r3, [r7, #0]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a62:	e0a7      	b.n	8007bb4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6a:	f000 80a3 	beq.w	8007bb4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a6e:	f7fa f883 	bl	8001b78 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d302      	bcc.n	8007a84 <UART_WaitOnFlagUntilTimeout+0x32>
 8007a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d13f      	bne.n	8007b04 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a8c:	e853 3f00 	ldrex	r3, [r3]
 8007a90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a98:	667b      	str	r3, [r7, #100]	; 0x64
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007aa4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007aa8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007aaa:	e841 2300 	strex	r3, r2, [r1]
 8007aae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1e6      	bne.n	8007a84 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3308      	adds	r3, #8
 8007abc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac8:	f023 0301 	bic.w	r3, r3, #1
 8007acc:	663b      	str	r3, [r7, #96]	; 0x60
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ad6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ad8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ada:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ade:	e841 2300 	strex	r3, r2, [r1]
 8007ae2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1e5      	bne.n	8007ab6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2220      	movs	r2, #32
 8007aee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2220      	movs	r2, #32
 8007af4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e068      	b.n	8007bd6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0304 	and.w	r3, r3, #4
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d050      	beq.n	8007bb4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b20:	d148      	bne.n	8007bb4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b2a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b34:	e853 3f00 	ldrex	r3, [r3]
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b4c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b52:	e841 2300 	strex	r3, r2, [r1]
 8007b56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1e6      	bne.n	8007b2c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3308      	adds	r3, #8
 8007b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	e853 3f00 	ldrex	r3, [r3]
 8007b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	f023 0301 	bic.w	r3, r3, #1
 8007b74:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b7e:	623a      	str	r2, [r7, #32]
 8007b80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b82:	69f9      	ldr	r1, [r7, #28]
 8007b84:	6a3a      	ldr	r2, [r7, #32]
 8007b86:	e841 2300 	strex	r3, r2, [r1]
 8007b8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1e5      	bne.n	8007b5e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2220      	movs	r2, #32
 8007b96:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e010      	b.n	8007bd6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	69da      	ldr	r2, [r3, #28]
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	bf0c      	ite	eq
 8007bc4:	2301      	moveq	r3, #1
 8007bc6:	2300      	movne	r3, #0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	461a      	mov	r2, r3
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	f43f af48 	beq.w	8007a64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3770      	adds	r7, #112	; 0x70
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b095      	sub	sp, #84	; 0x54
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bee:	e853 3f00 	ldrex	r3, [r3]
 8007bf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	461a      	mov	r2, r3
 8007c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c04:	643b      	str	r3, [r7, #64]	; 0x40
 8007c06:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c0c:	e841 2300 	strex	r3, r2, [r1]
 8007c10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e6      	bne.n	8007be6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3308      	adds	r3, #8
 8007c1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	e853 3f00 	ldrex	r3, [r3]
 8007c26:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	f023 0301 	bic.w	r3, r3, #1
 8007c2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3308      	adds	r3, #8
 8007c36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c40:	e841 2300 	strex	r3, r2, [r1]
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1e5      	bne.n	8007c18 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d118      	bne.n	8007c86 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	e853 3f00 	ldrex	r3, [r3]
 8007c60:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	f023 0310 	bic.w	r3, r3, #16
 8007c68:	647b      	str	r3, [r7, #68]	; 0x44
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c72:	61bb      	str	r3, [r7, #24]
 8007c74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c76:	6979      	ldr	r1, [r7, #20]
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	e841 2300 	strex	r3, r2, [r1]
 8007c7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1e6      	bne.n	8007c54 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2220      	movs	r2, #32
 8007c8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007c9a:	bf00      	nop
 8007c9c:	3754      	adds	r7, #84	; 0x54
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b084      	sub	sp, #16
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f7ff fa29 	bl	800711c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cca:	bf00      	nop
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b088      	sub	sp, #32
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	e853 3f00 	ldrex	r3, [r3]
 8007ce6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cee:	61fb      	str	r3, [r7, #28]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	61bb      	str	r3, [r7, #24]
 8007cfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfc:	6979      	ldr	r1, [r7, #20]
 8007cfe:	69ba      	ldr	r2, [r7, #24]
 8007d00:	e841 2300 	strex	r3, r2, [r1]
 8007d04:	613b      	str	r3, [r7, #16]
   return(result);
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1e6      	bne.n	8007cda <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7ff f9f5 	bl	8007108 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d1e:	bf00      	nop
 8007d20:	3720      	adds	r7, #32
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b083      	sub	sp, #12
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f043 0201 	orr.w	r2, r3, #1
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f023 0201 	bic.w	r2, r3, #1
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
	...

08007d6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4a13      	ldr	r2, [pc, #76]	; (8007dd0 <USB_FlushTxFifo+0x64>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d901      	bls.n	8007d8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e01b      	b.n	8007dc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	daf2      	bge.n	8007d7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d94:	2300      	movs	r3, #0
 8007d96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	019b      	lsls	r3, r3, #6
 8007d9c:	f043 0220 	orr.w	r2, r3, #32
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3301      	adds	r3, #1
 8007da8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	4a08      	ldr	r2, [pc, #32]	; (8007dd0 <USB_FlushTxFifo+0x64>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d901      	bls.n	8007db6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e006      	b.n	8007dc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b20      	cmp	r3, #32
 8007dc0:	d0f0      	beq.n	8007da4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	00030d40 	.word	0x00030d40

08007dd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	3301      	adds	r3, #1
 8007de4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	4a11      	ldr	r2, [pc, #68]	; (8007e30 <USB_FlushRxFifo+0x5c>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d901      	bls.n	8007df2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e018      	b.n	8007e24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	daf2      	bge.n	8007de0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2210      	movs	r2, #16
 8007e02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3301      	adds	r3, #1
 8007e08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	4a08      	ldr	r2, [pc, #32]	; (8007e30 <USB_FlushRxFifo+0x5c>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d901      	bls.n	8007e16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e006      	b.n	8007e24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	f003 0310 	and.w	r3, r3, #16
 8007e1e:	2b10      	cmp	r3, #16
 8007e20:	d0f0      	beq.n	8007e04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	00030d40 	.word	0x00030d40

08007e34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b08b      	sub	sp, #44	; 0x2c
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007e4a:	88fb      	ldrh	r3, [r7, #6]
 8007e4c:	089b      	lsrs	r3, r3, #2
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007e52:	88fb      	ldrh	r3, [r7, #6]
 8007e54:	f003 0303 	and.w	r3, r3, #3
 8007e58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	623b      	str	r3, [r7, #32]
 8007e5e:	e014      	b.n	8007e8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	3301      	adds	r3, #1
 8007e70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	3301      	adds	r3, #1
 8007e76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	3301      	adds	r3, #1
 8007e82:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	3301      	adds	r3, #1
 8007e88:	623b      	str	r3, [r7, #32]
 8007e8a:	6a3a      	ldr	r2, [r7, #32]
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d3e6      	bcc.n	8007e60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007e92:	8bfb      	ldrh	r3, [r7, #30]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d01e      	beq.n	8007ed6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f107 0310 	add.w	r3, r7, #16
 8007ea8:	6812      	ldr	r2, [r2, #0]
 8007eaa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb8:	b2da      	uxtb	r2, r3
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	701a      	strb	r2, [r3, #0]
      i++;
 8007ebe:	6a3b      	ldr	r3, [r7, #32]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	623b      	str	r3, [r7, #32]
      pDest++;
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007eca:	8bfb      	ldrh	r3, [r7, #30]
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007ed0:	8bfb      	ldrh	r3, [r7, #30]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1ea      	bne.n	8007eac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	372c      	adds	r7, #44	; 0x2c
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	4013      	ands	r3, r2
 8007efa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007efc:	68fb      	ldr	r3, [r7, #12]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b085      	sub	sp, #20
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	460b      	mov	r3, r1
 8007f14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007f1a:	78fb      	ldrb	r3, [r7, #3]
 8007f1c:	015a      	lsls	r2, r3, #5
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	4413      	add	r3, r2
 8007f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007f2a:	78fb      	ldrb	r3, [r7, #3]
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	f003 0301 	and.w	r3, r3, #1
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f86:	f023 0303 	bic.w	r3, r3, #3
 8007f8a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	78fb      	ldrb	r3, [r7, #3]
 8007f96:	f003 0303 	and.w	r3, r3, #3
 8007f9a:	68f9      	ldr	r1, [r7, #12]
 8007f9c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007fa4:	78fb      	ldrb	r3, [r7, #3]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d107      	bne.n	8007fba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007fb6:	6053      	str	r3, [r2, #4]
 8007fb8:	e009      	b.n	8007fce <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007fba:	78fb      	ldrb	r3, [r7, #3]
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d106      	bne.n	8007fce <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f241 7370 	movw	r3, #6000	; 0x1770
 8007fcc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fee:	695b      	ldr	r3, [r3, #20]
 8007ff0:	b29b      	uxth	r3, r3
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b089      	sub	sp, #36	; 0x24
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	460b      	mov	r3, r1
 8008008:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800800e:	78fb      	ldrb	r3, [r7, #3]
 8008010:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	4413      	add	r3, r2
 800801e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	0c9b      	lsrs	r3, r3, #18
 8008026:	f003 0303 	and.w	r3, r3, #3
 800802a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	015a      	lsls	r2, r3, #5
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	4413      	add	r3, r2
 8008034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	0fdb      	lsrs	r3, r3, #31
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f003 0320 	and.w	r3, r3, #32
 800804a:	2b20      	cmp	r3, #32
 800804c:	d104      	bne.n	8008058 <USB_HC_Halt+0x5a>
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d101      	bne.n	8008058 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	e0c8      	b.n	80081ea <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <USB_HC_Halt+0x66>
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2b02      	cmp	r3, #2
 8008062:	d163      	bne.n	800812c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	4413      	add	r3, r2
 800806c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	0151      	lsls	r1, r2, #5
 8008076:	69fa      	ldr	r2, [r7, #28]
 8008078:	440a      	add	r2, r1
 800807a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800807e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008082:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f003 0320 	and.w	r3, r3, #32
 800808c:	2b00      	cmp	r3, #0
 800808e:	f040 80ab 	bne.w	80081e8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008096:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d133      	bne.n	8008106 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	0151      	lsls	r1, r2, #5
 80080b0:	69fa      	ldr	r2, [r7, #28]
 80080b2:	440a      	add	r2, r1
 80080b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080bc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	015a      	lsls	r2, r3, #5
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	4413      	add	r3, r2
 80080c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	69ba      	ldr	r2, [r7, #24]
 80080ce:	0151      	lsls	r1, r2, #5
 80080d0:	69fa      	ldr	r2, [r7, #28]
 80080d2:	440a      	add	r2, r1
 80080d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080dc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	3301      	adds	r3, #1
 80080e2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080ea:	d81d      	bhi.n	8008128 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	015a      	lsls	r2, r3, #5
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	4413      	add	r3, r2
 80080f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008102:	d0ec      	beq.n	80080de <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008104:	e070      	b.n	80081e8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	4413      	add	r3, r2
 800810e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	69ba      	ldr	r2, [r7, #24]
 8008116:	0151      	lsls	r1, r2, #5
 8008118:	69fa      	ldr	r2, [r7, #28]
 800811a:	440a      	add	r2, r1
 800811c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008120:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008124:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008126:	e05f      	b.n	80081e8 <USB_HC_Halt+0x1ea>
            break;
 8008128:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800812a:	e05d      	b.n	80081e8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	4413      	add	r3, r2
 8008134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	0151      	lsls	r1, r2, #5
 800813e:	69fa      	ldr	r2, [r7, #28]
 8008140:	440a      	add	r2, r1
 8008142:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008146:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800814a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d133      	bne.n	80081c4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	4413      	add	r3, r2
 8008164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	69ba      	ldr	r2, [r7, #24]
 800816c:	0151      	lsls	r1, r2, #5
 800816e:	69fa      	ldr	r2, [r7, #28]
 8008170:	440a      	add	r2, r1
 8008172:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008176:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800817a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	4413      	add	r3, r2
 8008184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	0151      	lsls	r1, r2, #5
 800818e:	69fa      	ldr	r2, [r7, #28]
 8008190:	440a      	add	r2, r1
 8008192:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008196:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800819a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	3301      	adds	r3, #1
 80081a0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081a8:	d81d      	bhi.n	80081e6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	015a      	lsls	r2, r3, #5
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081c0:	d0ec      	beq.n	800819c <USB_HC_Halt+0x19e>
 80081c2:	e011      	b.n	80081e8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	015a      	lsls	r2, r3, #5
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	69ba      	ldr	r2, [r7, #24]
 80081d4:	0151      	lsls	r1, r2, #5
 80081d6:	69fa      	ldr	r2, [r7, #28]
 80081d8:	440a      	add	r2, r1
 80081da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	e000      	b.n	80081e8 <USB_HC_Halt+0x1ea>
          break;
 80081e6:	bf00      	nop
    }
  }

  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3724      	adds	r7, #36	; 0x24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b088      	sub	sp, #32
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008206:	2300      	movs	r3, #0
 8008208:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7ff fd9c 	bl	8007d48 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008210:	2110      	movs	r1, #16
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7ff fdaa 	bl	8007d6c <USB_FlushTxFifo>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7ff fdd6 	bl	8007dd4 <USB_FlushRxFifo>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008232:	2300      	movs	r3, #0
 8008234:	61bb      	str	r3, [r7, #24]
 8008236:	e01f      	b.n	8008278 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	4413      	add	r3, r2
 8008240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800824e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008256:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800825e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	4413      	add	r3, r2
 8008268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800826c:	461a      	mov	r2, r3
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	3301      	adds	r3, #1
 8008276:	61bb      	str	r3, [r7, #24]
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	2b0f      	cmp	r3, #15
 800827c:	d9dc      	bls.n	8008238 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800827e:	2300      	movs	r3, #0
 8008280:	61bb      	str	r3, [r7, #24]
 8008282:	e034      	b.n	80082ee <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	015a      	lsls	r2, r3, #5
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	4413      	add	r3, r2
 800828c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800829a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082a2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80082aa:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	015a      	lsls	r2, r3, #5
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	4413      	add	r3, r2
 80082b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b8:	461a      	mov	r2, r3
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	3301      	adds	r3, #1
 80082c2:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082ca:	d80c      	bhi.n	80082e6 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082e2:	d0ec      	beq.n	80082be <USB_StopHost+0xc8>
 80082e4:	e000      	b.n	80082e8 <USB_StopHost+0xf2>
        break;
 80082e6:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	3301      	adds	r3, #1
 80082ec:	61bb      	str	r3, [r7, #24]
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	2b0f      	cmp	r3, #15
 80082f2:	d9c7      	bls.n	8008284 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082fa:	461a      	mov	r2, r3
 80082fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008300:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f04f 32ff 	mov.w	r2, #4294967295
 8008308:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7ff fd0b 	bl	8007d26 <USB_EnableGlobalInt>

  return ret;
 8008310:	7ffb      	ldrb	r3, [r7, #31]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3720      	adds	r7, #32
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
	...

0800831c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8008324:	1d39      	adds	r1, r7, #4
 8008326:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800832a:	2201      	movs	r2, #1
 800832c:	4803      	ldr	r0, [pc, #12]	; (800833c <__io_putchar+0x20>)
 800832e:	f7fe fb95 	bl	8006a5c <HAL_UART_Transmit>

  return ch;
 8008332:	687b      	ldr	r3, [r7, #4]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	20000364 	.word	0x20000364

08008340 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008340:	b480      	push	{r7}
 8008342:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008344:	bf00      	nop
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
	...

08008350 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008356:	f3ef 8305 	mrs	r3, IPSR
 800835a:	60bb      	str	r3, [r7, #8]
  return(result);
 800835c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10f      	bne.n	8008382 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008362:	f3ef 8310 	mrs	r3, PRIMASK
 8008366:	607b      	str	r3, [r7, #4]
  return(result);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d105      	bne.n	800837a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800836e:	f3ef 8311 	mrs	r3, BASEPRI
 8008372:	603b      	str	r3, [r7, #0]
  return(result);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d007      	beq.n	800838a <osKernelInitialize+0x3a>
 800837a:	4b0e      	ldr	r3, [pc, #56]	; (80083b4 <osKernelInitialize+0x64>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b02      	cmp	r3, #2
 8008380:	d103      	bne.n	800838a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008382:	f06f 0305 	mvn.w	r3, #5
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	e00c      	b.n	80083a4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800838a:	4b0a      	ldr	r3, [pc, #40]	; (80083b4 <osKernelInitialize+0x64>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d105      	bne.n	800839e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008392:	4b08      	ldr	r3, [pc, #32]	; (80083b4 <osKernelInitialize+0x64>)
 8008394:	2201      	movs	r2, #1
 8008396:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008398:	2300      	movs	r3, #0
 800839a:	60fb      	str	r3, [r7, #12]
 800839c:	e002      	b.n	80083a4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800839e:	f04f 33ff 	mov.w	r3, #4294967295
 80083a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80083a4:	68fb      	ldr	r3, [r7, #12]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	200006f4 	.word	0x200006f4

080083b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083be:	f3ef 8305 	mrs	r3, IPSR
 80083c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80083c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10f      	bne.n	80083ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083ca:	f3ef 8310 	mrs	r3, PRIMASK
 80083ce:	607b      	str	r3, [r7, #4]
  return(result);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d105      	bne.n	80083e2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083d6:	f3ef 8311 	mrs	r3, BASEPRI
 80083da:	603b      	str	r3, [r7, #0]
  return(result);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d007      	beq.n	80083f2 <osKernelStart+0x3a>
 80083e2:	4b0f      	ldr	r3, [pc, #60]	; (8008420 <osKernelStart+0x68>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d103      	bne.n	80083f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80083ea:	f06f 0305 	mvn.w	r3, #5
 80083ee:	60fb      	str	r3, [r7, #12]
 80083f0:	e010      	b.n	8008414 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80083f2:	4b0b      	ldr	r3, [pc, #44]	; (8008420 <osKernelStart+0x68>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d109      	bne.n	800840e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80083fa:	f7ff ffa1 	bl	8008340 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80083fe:	4b08      	ldr	r3, [pc, #32]	; (8008420 <osKernelStart+0x68>)
 8008400:	2202      	movs	r2, #2
 8008402:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008404:	f001 fd5e 	bl	8009ec4 <vTaskStartScheduler>
      stat = osOK;
 8008408:	2300      	movs	r3, #0
 800840a:	60fb      	str	r3, [r7, #12]
 800840c:	e002      	b.n	8008414 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800840e:	f04f 33ff 	mov.w	r3, #4294967295
 8008412:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008414:	68fb      	ldr	r3, [r7, #12]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	200006f4 	.word	0x200006f4

08008424 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008424:	b580      	push	{r7, lr}
 8008426:	b090      	sub	sp, #64	; 0x40
 8008428:	af04      	add	r7, sp, #16
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008430:	2300      	movs	r3, #0
 8008432:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008434:	f3ef 8305 	mrs	r3, IPSR
 8008438:	61fb      	str	r3, [r7, #28]
  return(result);
 800843a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800843c:	2b00      	cmp	r3, #0
 800843e:	f040 808f 	bne.w	8008560 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008442:	f3ef 8310 	mrs	r3, PRIMASK
 8008446:	61bb      	str	r3, [r7, #24]
  return(result);
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d105      	bne.n	800845a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800844e:	f3ef 8311 	mrs	r3, BASEPRI
 8008452:	617b      	str	r3, [r7, #20]
  return(result);
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <osThreadNew+0x3e>
 800845a:	4b44      	ldr	r3, [pc, #272]	; (800856c <osThreadNew+0x148>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b02      	cmp	r3, #2
 8008460:	d07e      	beq.n	8008560 <osThreadNew+0x13c>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d07b      	beq.n	8008560 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008468:	2380      	movs	r3, #128	; 0x80
 800846a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800846c:	2318      	movs	r3, #24
 800846e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008470:	2300      	movs	r3, #0
 8008472:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008474:	f04f 33ff 	mov.w	r3, #4294967295
 8008478:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d045      	beq.n	800850c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <osThreadNew+0x6a>
        name = attr->name;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d008      	beq.n	80084b4 <osThreadNew+0x90>
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	2b38      	cmp	r3, #56	; 0x38
 80084a6:	d805      	bhi.n	80084b4 <osThreadNew+0x90>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	f003 0301 	and.w	r3, r3, #1
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <osThreadNew+0x94>
        return (NULL);
 80084b4:	2300      	movs	r3, #0
 80084b6:	e054      	b.n	8008562 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d003      	beq.n	80084c8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	695b      	ldr	r3, [r3, #20]
 80084c4:	089b      	lsrs	r3, r3, #2
 80084c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00e      	beq.n	80084ee <osThreadNew+0xca>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	2bbb      	cmp	r3, #187	; 0xbb
 80084d6:	d90a      	bls.n	80084ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d006      	beq.n	80084ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <osThreadNew+0xca>
        mem = 1;
 80084e8:	2301      	movs	r3, #1
 80084ea:	623b      	str	r3, [r7, #32]
 80084ec:	e010      	b.n	8008510 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10c      	bne.n	8008510 <osThreadNew+0xec>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d108      	bne.n	8008510 <osThreadNew+0xec>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d104      	bne.n	8008510 <osThreadNew+0xec>
          mem = 0;
 8008506:	2300      	movs	r3, #0
 8008508:	623b      	str	r3, [r7, #32]
 800850a:	e001      	b.n	8008510 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800850c:	2300      	movs	r3, #0
 800850e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008510:	6a3b      	ldr	r3, [r7, #32]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d110      	bne.n	8008538 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800851e:	9202      	str	r2, [sp, #8]
 8008520:	9301      	str	r3, [sp, #4]
 8008522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800852a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f001 fad3 	bl	8009ad8 <xTaskCreateStatic>
 8008532:	4603      	mov	r3, r0
 8008534:	613b      	str	r3, [r7, #16]
 8008536:	e013      	b.n	8008560 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008538:	6a3b      	ldr	r3, [r7, #32]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d110      	bne.n	8008560 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800853e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008540:	b29a      	uxth	r2, r3
 8008542:	f107 0310 	add.w	r3, r7, #16
 8008546:	9301      	str	r3, [sp, #4]
 8008548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f001 fb24 	bl	8009b9e <xTaskCreate>
 8008556:	4603      	mov	r3, r0
 8008558:	2b01      	cmp	r3, #1
 800855a:	d001      	beq.n	8008560 <osThreadNew+0x13c>
          hTask = NULL;
 800855c:	2300      	movs	r3, #0
 800855e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008560:	693b      	ldr	r3, [r7, #16]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3730      	adds	r7, #48	; 0x30
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	200006f4 	.word	0x200006f4

08008570 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008578:	f3ef 8305 	mrs	r3, IPSR
 800857c:	613b      	str	r3, [r7, #16]
  return(result);
 800857e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10f      	bne.n	80085a4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008584:	f3ef 8310 	mrs	r3, PRIMASK
 8008588:	60fb      	str	r3, [r7, #12]
  return(result);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d105      	bne.n	800859c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008590:	f3ef 8311 	mrs	r3, BASEPRI
 8008594:	60bb      	str	r3, [r7, #8]
  return(result);
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d007      	beq.n	80085ac <osDelay+0x3c>
 800859c:	4b0a      	ldr	r3, [pc, #40]	; (80085c8 <osDelay+0x58>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d103      	bne.n	80085ac <osDelay+0x3c>
    stat = osErrorISR;
 80085a4:	f06f 0305 	mvn.w	r3, #5
 80085a8:	617b      	str	r3, [r7, #20]
 80085aa:	e007      	b.n	80085bc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d002      	beq.n	80085bc <osDelay+0x4c>
      vTaskDelay(ticks);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f001 fc4e 	bl	8009e58 <vTaskDelay>
    }
  }

  return (stat);
 80085bc:	697b      	ldr	r3, [r7, #20]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	200006f4 	.word	0x200006f4

080085cc <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08a      	sub	sp, #40	; 0x28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	603b      	str	r3, [r7, #0]
 80085d8:	4613      	mov	r3, r2
 80085da:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085e4:	f3ef 8305 	mrs	r3, IPSR
 80085e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80085ea:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10f      	bne.n	8008610 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085f0:	f3ef 8310 	mrs	r3, PRIMASK
 80085f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d105      	bne.n	8008608 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085fc:	f3ef 8311 	mrs	r3, BASEPRI
 8008600:	617b      	str	r3, [r7, #20]
  return(result);
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d02c      	beq.n	8008662 <osMessageQueuePut+0x96>
 8008608:	4b28      	ldr	r3, [pc, #160]	; (80086ac <osMessageQueuePut+0xe0>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2b02      	cmp	r3, #2
 800860e:	d128      	bne.n	8008662 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d005      	beq.n	8008622 <osMessageQueuePut+0x56>
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d002      	beq.n	8008622 <osMessageQueuePut+0x56>
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8008622:	f06f 0303 	mvn.w	r3, #3
 8008626:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008628:	e039      	b.n	800869e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800862a:	2300      	movs	r3, #0
 800862c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800862e:	f107 0210 	add.w	r2, r7, #16
 8008632:	2300      	movs	r3, #0
 8008634:	68b9      	ldr	r1, [r7, #8]
 8008636:	6a38      	ldr	r0, [r7, #32]
 8008638:	f000 ff5a 	bl	80094f0 <xQueueGenericSendFromISR>
 800863c:	4603      	mov	r3, r0
 800863e:	2b01      	cmp	r3, #1
 8008640:	d003      	beq.n	800864a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8008642:	f06f 0302 	mvn.w	r3, #2
 8008646:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008648:	e029      	b.n	800869e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d026      	beq.n	800869e <osMessageQueuePut+0xd2>
 8008650:	4b17      	ldr	r3, [pc, #92]	; (80086b0 <osMessageQueuePut+0xe4>)
 8008652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008656:	601a      	str	r2, [r3, #0]
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008660:	e01d      	b.n	800869e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d002      	beq.n	800866e <osMessageQueuePut+0xa2>
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d103      	bne.n	8008676 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800866e:	f06f 0303 	mvn.w	r3, #3
 8008672:	627b      	str	r3, [r7, #36]	; 0x24
 8008674:	e014      	b.n	80086a0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008676:	2300      	movs	r3, #0
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	68b9      	ldr	r1, [r7, #8]
 800867c:	6a38      	ldr	r0, [r7, #32]
 800867e:	f000 fe31 	bl	80092e4 <xQueueGenericSend>
 8008682:	4603      	mov	r3, r0
 8008684:	2b01      	cmp	r3, #1
 8008686:	d00b      	beq.n	80086a0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800868e:	f06f 0301 	mvn.w	r3, #1
 8008692:	627b      	str	r3, [r7, #36]	; 0x24
 8008694:	e004      	b.n	80086a0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8008696:	f06f 0302 	mvn.w	r3, #2
 800869a:	627b      	str	r3, [r7, #36]	; 0x24
 800869c:	e000      	b.n	80086a0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800869e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3728      	adds	r7, #40	; 0x28
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	200006f4 	.word	0x200006f4
 80086b0:	e000ed04 	.word	0xe000ed04

080086b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	4a07      	ldr	r2, [pc, #28]	; (80086e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80086c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	4a06      	ldr	r2, [pc, #24]	; (80086e4 <vApplicationGetIdleTaskMemory+0x30>)
 80086ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2280      	movs	r2, #128	; 0x80
 80086d0:	601a      	str	r2, [r3, #0]
}
 80086d2:	bf00      	nop
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	200006f8 	.word	0x200006f8
 80086e4:	200007b4 	.word	0x200007b4

080086e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	4a07      	ldr	r2, [pc, #28]	; (8008714 <vApplicationGetTimerTaskMemory+0x2c>)
 80086f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	4a06      	ldr	r2, [pc, #24]	; (8008718 <vApplicationGetTimerTaskMemory+0x30>)
 80086fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008706:	601a      	str	r2, [r3, #0]
}
 8008708:	bf00      	nop
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	200009b4 	.word	0x200009b4
 8008718:	20000a70 	.word	0x20000a70

0800871c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b08a      	sub	sp, #40	; 0x28
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008724:	2300      	movs	r3, #0
 8008726:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008728:	f001 fc40 	bl	8009fac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800872c:	4b5b      	ldr	r3, [pc, #364]	; (800889c <pvPortMalloc+0x180>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d101      	bne.n	8008738 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008734:	f000 f91a 	bl	800896c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008738:	4b59      	ldr	r3, [pc, #356]	; (80088a0 <pvPortMalloc+0x184>)
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4013      	ands	r3, r2
 8008740:	2b00      	cmp	r3, #0
 8008742:	f040 8092 	bne.w	800886a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d01f      	beq.n	800878c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800874c:	2208      	movs	r2, #8
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4413      	add	r3, r2
 8008752:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f003 0307 	and.w	r3, r3, #7
 800875a:	2b00      	cmp	r3, #0
 800875c:	d016      	beq.n	800878c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f023 0307 	bic.w	r3, r3, #7
 8008764:	3308      	adds	r3, #8
 8008766:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f003 0307 	and.w	r3, r3, #7
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00c      	beq.n	800878c <pvPortMalloc+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	b672      	cpsid	i
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	b662      	cpsie	i
 8008786:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008788:	bf00      	nop
 800878a:	e7fe      	b.n	800878a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d06b      	beq.n	800886a <pvPortMalloc+0x14e>
 8008792:	4b44      	ldr	r3, [pc, #272]	; (80088a4 <pvPortMalloc+0x188>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	429a      	cmp	r2, r3
 800879a:	d866      	bhi.n	800886a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800879c:	4b42      	ldr	r3, [pc, #264]	; (80088a8 <pvPortMalloc+0x18c>)
 800879e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80087a0:	4b41      	ldr	r3, [pc, #260]	; (80088a8 <pvPortMalloc+0x18c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087a6:	e004      	b.n	80087b2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d903      	bls.n	80087c4 <pvPortMalloc+0xa8>
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1f1      	bne.n	80087a8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80087c4:	4b35      	ldr	r3, [pc, #212]	; (800889c <pvPortMalloc+0x180>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d04d      	beq.n	800886a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087ce:	6a3b      	ldr	r3, [r7, #32]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2208      	movs	r2, #8
 80087d4:	4413      	add	r3, r2
 80087d6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	685a      	ldr	r2, [r3, #4]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	1ad2      	subs	r2, r2, r3
 80087e8:	2308      	movs	r3, #8
 80087ea:	005b      	lsls	r3, r3, #1
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d921      	bls.n	8008834 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4413      	add	r3, r2
 80087f6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	f003 0307 	and.w	r3, r3, #7
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00c      	beq.n	800881c <pvPortMalloc+0x100>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008806:	b672      	cpsid	i
 8008808:	f383 8811 	msr	BASEPRI, r3
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	b662      	cpsie	i
 8008816:	613b      	str	r3, [r7, #16]
}
 8008818:	bf00      	nop
 800881a:	e7fe      	b.n	800881a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	685a      	ldr	r2, [r3, #4]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	1ad2      	subs	r2, r2, r3
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800882e:	69b8      	ldr	r0, [r7, #24]
 8008830:	f000 f8fe 	bl	8008a30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008834:	4b1b      	ldr	r3, [pc, #108]	; (80088a4 <pvPortMalloc+0x188>)
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	4a19      	ldr	r2, [pc, #100]	; (80088a4 <pvPortMalloc+0x188>)
 8008840:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008842:	4b18      	ldr	r3, [pc, #96]	; (80088a4 <pvPortMalloc+0x188>)
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	4b19      	ldr	r3, [pc, #100]	; (80088ac <pvPortMalloc+0x190>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	429a      	cmp	r2, r3
 800884c:	d203      	bcs.n	8008856 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800884e:	4b15      	ldr	r3, [pc, #84]	; (80088a4 <pvPortMalloc+0x188>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a16      	ldr	r2, [pc, #88]	; (80088ac <pvPortMalloc+0x190>)
 8008854:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	685a      	ldr	r2, [r3, #4]
 800885a:	4b11      	ldr	r3, [pc, #68]	; (80088a0 <pvPortMalloc+0x184>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	431a      	orrs	r2, r3
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	2200      	movs	r2, #0
 8008868:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800886a:	f001 fbad 	bl	8009fc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	f003 0307 	and.w	r3, r3, #7
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00c      	beq.n	8008892 <pvPortMalloc+0x176>
	__asm volatile
 8008878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887c:	b672      	cpsid	i
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	b662      	cpsie	i
 800888c:	60fb      	str	r3, [r7, #12]
}
 800888e:	bf00      	nop
 8008890:	e7fe      	b.n	8008890 <pvPortMalloc+0x174>
	return pvReturn;
 8008892:	69fb      	ldr	r3, [r7, #28]
}
 8008894:	4618      	mov	r0, r3
 8008896:	3728      	adds	r7, #40	; 0x28
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	20004a78 	.word	0x20004a78
 80088a0:	20004a84 	.word	0x20004a84
 80088a4:	20004a7c 	.word	0x20004a7c
 80088a8:	20004a70 	.word	0x20004a70
 80088ac:	20004a80 	.word	0x20004a80

080088b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d04c      	beq.n	800895c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088c2:	2308      	movs	r3, #8
 80088c4:	425b      	negs	r3, r3
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	4413      	add	r3, r2
 80088ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	4b23      	ldr	r3, [pc, #140]	; (8008964 <vPortFree+0xb4>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4013      	ands	r3, r2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d10c      	bne.n	80088f8 <vPortFree+0x48>
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	b672      	cpsid	i
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	b662      	cpsie	i
 80088f2:	60fb      	str	r3, [r7, #12]
}
 80088f4:	bf00      	nop
 80088f6:	e7fe      	b.n	80088f6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00c      	beq.n	800891a <vPortFree+0x6a>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	b672      	cpsid	i
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	b662      	cpsie	i
 8008914:	60bb      	str	r3, [r7, #8]
}
 8008916:	bf00      	nop
 8008918:	e7fe      	b.n	8008918 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	4b11      	ldr	r3, [pc, #68]	; (8008964 <vPortFree+0xb4>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4013      	ands	r3, r2
 8008924:	2b00      	cmp	r3, #0
 8008926:	d019      	beq.n	800895c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d115      	bne.n	800895c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	4b0b      	ldr	r3, [pc, #44]	; (8008964 <vPortFree+0xb4>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	43db      	mvns	r3, r3
 800893a:	401a      	ands	r2, r3
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008940:	f001 fb34 	bl	8009fac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	685a      	ldr	r2, [r3, #4]
 8008948:	4b07      	ldr	r3, [pc, #28]	; (8008968 <vPortFree+0xb8>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4413      	add	r3, r2
 800894e:	4a06      	ldr	r2, [pc, #24]	; (8008968 <vPortFree+0xb8>)
 8008950:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008952:	6938      	ldr	r0, [r7, #16]
 8008954:	f000 f86c 	bl	8008a30 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008958:	f001 fb36 	bl	8009fc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800895c:	bf00      	nop
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	20004a84 	.word	0x20004a84
 8008968:	20004a7c 	.word	0x20004a7c

0800896c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008972:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008976:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008978:	4b27      	ldr	r3, [pc, #156]	; (8008a18 <prvHeapInit+0xac>)
 800897a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f003 0307 	and.w	r3, r3, #7
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00c      	beq.n	80089a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3307      	adds	r3, #7
 800898a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f023 0307 	bic.w	r3, r3, #7
 8008992:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	4a1f      	ldr	r2, [pc, #124]	; (8008a18 <prvHeapInit+0xac>)
 800899c:	4413      	add	r3, r2
 800899e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089a4:	4a1d      	ldr	r2, [pc, #116]	; (8008a1c <prvHeapInit+0xb0>)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089aa:	4b1c      	ldr	r3, [pc, #112]	; (8008a1c <prvHeapInit+0xb0>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	4413      	add	r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80089b8:	2208      	movs	r2, #8
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	1a9b      	subs	r3, r3, r2
 80089be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f023 0307 	bic.w	r3, r3, #7
 80089c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	4a15      	ldr	r2, [pc, #84]	; (8008a20 <prvHeapInit+0xb4>)
 80089cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089ce:	4b14      	ldr	r3, [pc, #80]	; (8008a20 <prvHeapInit+0xb4>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2200      	movs	r2, #0
 80089d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089d6:	4b12      	ldr	r3, [pc, #72]	; (8008a20 <prvHeapInit+0xb4>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2200      	movs	r2, #0
 80089dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	1ad2      	subs	r2, r2, r3
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089ec:	4b0c      	ldr	r3, [pc, #48]	; (8008a20 <prvHeapInit+0xb4>)
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	4a0a      	ldr	r2, [pc, #40]	; (8008a24 <prvHeapInit+0xb8>)
 80089fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	4a09      	ldr	r2, [pc, #36]	; (8008a28 <prvHeapInit+0xbc>)
 8008a02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a04:	4b09      	ldr	r3, [pc, #36]	; (8008a2c <prvHeapInit+0xc0>)
 8008a06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a0a:	601a      	str	r2, [r3, #0]
}
 8008a0c:	bf00      	nop
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	20000e70 	.word	0x20000e70
 8008a1c:	20004a70 	.word	0x20004a70
 8008a20:	20004a78 	.word	0x20004a78
 8008a24:	20004a80 	.word	0x20004a80
 8008a28:	20004a7c 	.word	0x20004a7c
 8008a2c:	20004a84 	.word	0x20004a84

08008a30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a38:	4b28      	ldr	r3, [pc, #160]	; (8008adc <prvInsertBlockIntoFreeList+0xac>)
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	e002      	b.n	8008a44 <prvInsertBlockIntoFreeList+0x14>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d8f7      	bhi.n	8008a3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	4413      	add	r3, r2
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d108      	bne.n	8008a72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	685a      	ldr	r2, [r3, #4]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	441a      	add	r2, r3
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	441a      	add	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d118      	bne.n	8008ab8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	4b15      	ldr	r3, [pc, #84]	; (8008ae0 <prvInsertBlockIntoFreeList+0xb0>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d00d      	beq.n	8008aae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	441a      	add	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	e008      	b.n	8008ac0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008aae:	4b0c      	ldr	r3, [pc, #48]	; (8008ae0 <prvInsertBlockIntoFreeList+0xb0>)
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	601a      	str	r2, [r3, #0]
 8008ab6:	e003      	b.n	8008ac0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d002      	beq.n	8008ace <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ace:	bf00      	nop
 8008ad0:	3714      	adds	r7, #20
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	20004a70 	.word	0x20004a70
 8008ae0:	20004a78 	.word	0x20004a78

08008ae4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f103 0208 	add.w	r2, r3, #8
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f04f 32ff 	mov.w	r2, #4294967295
 8008afc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f103 0208 	add.w	r2, r3, #8
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f103 0208 	add.w	r2, r3, #8
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b18:	bf00      	nop
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b32:	bf00      	nop
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b085      	sub	sp, #20
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	689a      	ldr	r2, [r3, #8]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	683a      	ldr	r2, [r7, #0]
 8008b68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	601a      	str	r2, [r3, #0]
}
 8008b7a:	bf00      	nop
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b86:	b480      	push	{r7}
 8008b88:	b085      	sub	sp, #20
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9c:	d103      	bne.n	8008ba6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	e00c      	b.n	8008bc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	3308      	adds	r3, #8
 8008baa:	60fb      	str	r3, [r7, #12]
 8008bac:	e002      	b.n	8008bb4 <vListInsert+0x2e>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	60fb      	str	r3, [r7, #12]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d2f6      	bcs.n	8008bae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	683a      	ldr	r2, [r7, #0]
 8008bce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	683a      	ldr	r2, [r7, #0]
 8008bda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	1c5a      	adds	r2, r3, #1
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	601a      	str	r2, [r3, #0]
}
 8008bec:	bf00      	nop
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	6892      	ldr	r2, [r2, #8]
 8008c0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	6852      	ldr	r2, [r2, #4]
 8008c18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d103      	bne.n	8008c2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	689a      	ldr	r2, [r3, #8]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	1e5a      	subs	r2, r3, #1
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	3b04      	subs	r3, #4
 8008c5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	3b04      	subs	r3, #4
 8008c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	f023 0201 	bic.w	r2, r3, #1
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	3b04      	subs	r3, #4
 8008c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c7c:	4a0c      	ldr	r2, [pc, #48]	; (8008cb0 <pxPortInitialiseStack+0x64>)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	3b14      	subs	r3, #20
 8008c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	3b04      	subs	r3, #4
 8008c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f06f 0202 	mvn.w	r2, #2
 8008c9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	3b20      	subs	r3, #32
 8008ca0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	08008cb5 	.word	0x08008cb5

08008cb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008cbe:	4b14      	ldr	r3, [pc, #80]	; (8008d10 <prvTaskExitError+0x5c>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc6:	d00c      	beq.n	8008ce2 <prvTaskExitError+0x2e>
	__asm volatile
 8008cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ccc:	b672      	cpsid	i
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	b662      	cpsie	i
 8008cdc:	60fb      	str	r3, [r7, #12]
}
 8008cde:	bf00      	nop
 8008ce0:	e7fe      	b.n	8008ce0 <prvTaskExitError+0x2c>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	b672      	cpsid	i
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	b662      	cpsie	i
 8008cf6:	60bb      	str	r3, [r7, #8]
}
 8008cf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008cfa:	bf00      	nop
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d0fc      	beq.n	8008cfc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d02:	bf00      	nop
 8008d04:	bf00      	nop
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr
 8008d10:	2000000c 	.word	0x2000000c
	...

08008d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d20:	4b07      	ldr	r3, [pc, #28]	; (8008d40 <pxCurrentTCBConst2>)
 8008d22:	6819      	ldr	r1, [r3, #0]
 8008d24:	6808      	ldr	r0, [r1, #0]
 8008d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2a:	f380 8809 	msr	PSP, r0
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f04f 0000 	mov.w	r0, #0
 8008d36:	f380 8811 	msr	BASEPRI, r0
 8008d3a:	4770      	bx	lr
 8008d3c:	f3af 8000 	nop.w

08008d40 <pxCurrentTCBConst2>:
 8008d40:	20004ad0 	.word	0x20004ad0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop

08008d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008d48:	4808      	ldr	r0, [pc, #32]	; (8008d6c <prvPortStartFirstTask+0x24>)
 8008d4a:	6800      	ldr	r0, [r0, #0]
 8008d4c:	6800      	ldr	r0, [r0, #0]
 8008d4e:	f380 8808 	msr	MSP, r0
 8008d52:	f04f 0000 	mov.w	r0, #0
 8008d56:	f380 8814 	msr	CONTROL, r0
 8008d5a:	b662      	cpsie	i
 8008d5c:	b661      	cpsie	f
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	df00      	svc	0
 8008d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d6a:	bf00      	nop
 8008d6c:	e000ed08 	.word	0xe000ed08

08008d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d76:	4b37      	ldr	r3, [pc, #220]	; (8008e54 <xPortStartScheduler+0xe4>)
 8008d78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	22ff      	movs	r2, #255	; 0xff
 8008d86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d90:	78fb      	ldrb	r3, [r7, #3]
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	4b2f      	ldr	r3, [pc, #188]	; (8008e58 <xPortStartScheduler+0xe8>)
 8008d9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d9e:	4b2f      	ldr	r3, [pc, #188]	; (8008e5c <xPortStartScheduler+0xec>)
 8008da0:	2207      	movs	r2, #7
 8008da2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008da4:	e009      	b.n	8008dba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008da6:	4b2d      	ldr	r3, [pc, #180]	; (8008e5c <xPortStartScheduler+0xec>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	4a2b      	ldr	r2, [pc, #172]	; (8008e5c <xPortStartScheduler+0xec>)
 8008dae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008db0:	78fb      	ldrb	r3, [r7, #3]
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	005b      	lsls	r3, r3, #1
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008dba:	78fb      	ldrb	r3, [r7, #3]
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dc2:	2b80      	cmp	r3, #128	; 0x80
 8008dc4:	d0ef      	beq.n	8008da6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008dc6:	4b25      	ldr	r3, [pc, #148]	; (8008e5c <xPortStartScheduler+0xec>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f1c3 0307 	rsb	r3, r3, #7
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	d00c      	beq.n	8008dec <xPortStartScheduler+0x7c>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd6:	b672      	cpsid	i
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	b662      	cpsie	i
 8008de6:	60bb      	str	r3, [r7, #8]
}
 8008de8:	bf00      	nop
 8008dea:	e7fe      	b.n	8008dea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008dec:	4b1b      	ldr	r3, [pc, #108]	; (8008e5c <xPortStartScheduler+0xec>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	021b      	lsls	r3, r3, #8
 8008df2:	4a1a      	ldr	r2, [pc, #104]	; (8008e5c <xPortStartScheduler+0xec>)
 8008df4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008df6:	4b19      	ldr	r3, [pc, #100]	; (8008e5c <xPortStartScheduler+0xec>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008dfe:	4a17      	ldr	r2, [pc, #92]	; (8008e5c <xPortStartScheduler+0xec>)
 8008e00:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e0a:	4b15      	ldr	r3, [pc, #84]	; (8008e60 <xPortStartScheduler+0xf0>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a14      	ldr	r2, [pc, #80]	; (8008e60 <xPortStartScheduler+0xf0>)
 8008e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e16:	4b12      	ldr	r3, [pc, #72]	; (8008e60 <xPortStartScheduler+0xf0>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a11      	ldr	r2, [pc, #68]	; (8008e60 <xPortStartScheduler+0xf0>)
 8008e1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008e20:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e22:	f000 f8dd 	bl	8008fe0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e26:	4b0f      	ldr	r3, [pc, #60]	; (8008e64 <xPortStartScheduler+0xf4>)
 8008e28:	2200      	movs	r2, #0
 8008e2a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e2c:	f000 f8fc 	bl	8009028 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e30:	4b0d      	ldr	r3, [pc, #52]	; (8008e68 <xPortStartScheduler+0xf8>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a0c      	ldr	r2, [pc, #48]	; (8008e68 <xPortStartScheduler+0xf8>)
 8008e36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008e3a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e3c:	f7ff ff84 	bl	8008d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e40:	f001 fa2e 	bl	800a2a0 <vTaskSwitchContext>
	prvTaskExitError();
 8008e44:	f7ff ff36 	bl	8008cb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	e000e400 	.word	0xe000e400
 8008e58:	20004a88 	.word	0x20004a88
 8008e5c:	20004a8c 	.word	0x20004a8c
 8008e60:	e000ed20 	.word	0xe000ed20
 8008e64:	2000000c 	.word	0x2000000c
 8008e68:	e000ef34 	.word	0xe000ef34

08008e6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e76:	b672      	cpsid	i
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	b662      	cpsie	i
 8008e86:	607b      	str	r3, [r7, #4]
}
 8008e88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e8a:	4b10      	ldr	r3, [pc, #64]	; (8008ecc <vPortEnterCritical+0x60>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	4a0e      	ldr	r2, [pc, #56]	; (8008ecc <vPortEnterCritical+0x60>)
 8008e92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e94:	4b0d      	ldr	r3, [pc, #52]	; (8008ecc <vPortEnterCritical+0x60>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d111      	bne.n	8008ec0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e9c:	4b0c      	ldr	r3, [pc, #48]	; (8008ed0 <vPortEnterCritical+0x64>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00c      	beq.n	8008ec0 <vPortEnterCritical+0x54>
	__asm volatile
 8008ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eaa:	b672      	cpsid	i
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	b662      	cpsie	i
 8008eba:	603b      	str	r3, [r7, #0]
}
 8008ebc:	bf00      	nop
 8008ebe:	e7fe      	b.n	8008ebe <vPortEnterCritical+0x52>
	}
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr
 8008ecc:	2000000c 	.word	0x2000000c
 8008ed0:	e000ed04 	.word	0xe000ed04

08008ed4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008eda:	4b13      	ldr	r3, [pc, #76]	; (8008f28 <vPortExitCritical+0x54>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10c      	bne.n	8008efc <vPortExitCritical+0x28>
	__asm volatile
 8008ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee6:	b672      	cpsid	i
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	b662      	cpsie	i
 8008ef6:	607b      	str	r3, [r7, #4]
}
 8008ef8:	bf00      	nop
 8008efa:	e7fe      	b.n	8008efa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008efc:	4b0a      	ldr	r3, [pc, #40]	; (8008f28 <vPortExitCritical+0x54>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3b01      	subs	r3, #1
 8008f02:	4a09      	ldr	r2, [pc, #36]	; (8008f28 <vPortExitCritical+0x54>)
 8008f04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f06:	4b08      	ldr	r3, [pc, #32]	; (8008f28 <vPortExitCritical+0x54>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d105      	bne.n	8008f1a <vPortExitCritical+0x46>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008f18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f1a:	bf00      	nop
 8008f1c:	370c      	adds	r7, #12
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	2000000c 	.word	0x2000000c
 8008f2c:	00000000 	.word	0x00000000

08008f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f30:	f3ef 8009 	mrs	r0, PSP
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	4b15      	ldr	r3, [pc, #84]	; (8008f90 <pxCurrentTCBConst>)
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	f01e 0f10 	tst.w	lr, #16
 8008f40:	bf08      	it	eq
 8008f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4a:	6010      	str	r0, [r2, #0]
 8008f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f54:	b672      	cpsid	i
 8008f56:	f380 8811 	msr	BASEPRI, r0
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	b662      	cpsie	i
 8008f64:	f001 f99c 	bl	800a2a0 <vTaskSwitchContext>
 8008f68:	f04f 0000 	mov.w	r0, #0
 8008f6c:	f380 8811 	msr	BASEPRI, r0
 8008f70:	bc09      	pop	{r0, r3}
 8008f72:	6819      	ldr	r1, [r3, #0]
 8008f74:	6808      	ldr	r0, [r1, #0]
 8008f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7a:	f01e 0f10 	tst.w	lr, #16
 8008f7e:	bf08      	it	eq
 8008f80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f84:	f380 8809 	msr	PSP, r0
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop

08008f90 <pxCurrentTCBConst>:
 8008f90:	20004ad0 	.word	0x20004ad0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f94:	bf00      	nop
 8008f96:	bf00      	nop

08008f98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa2:	b672      	cpsid	i
 8008fa4:	f383 8811 	msr	BASEPRI, r3
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	b662      	cpsie	i
 8008fb2:	607b      	str	r3, [r7, #4]
}
 8008fb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008fb6:	f001 f8b7 	bl	800a128 <xTaskIncrementTick>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d003      	beq.n	8008fc8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008fc0:	4b06      	ldr	r3, [pc, #24]	; (8008fdc <SysTick_Handler+0x44>)
 8008fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	2300      	movs	r3, #0
 8008fca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	f383 8811 	msr	BASEPRI, r3
}
 8008fd2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008fd4:	bf00      	nop
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	e000ed04 	.word	0xe000ed04

08008fe0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008fe4:	4b0b      	ldr	r3, [pc, #44]	; (8009014 <vPortSetupTimerInterrupt+0x34>)
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008fea:	4b0b      	ldr	r3, [pc, #44]	; (8009018 <vPortSetupTimerInterrupt+0x38>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	; (800901c <vPortSetupTimerInterrupt+0x3c>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a0a      	ldr	r2, [pc, #40]	; (8009020 <vPortSetupTimerInterrupt+0x40>)
 8008ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8008ffa:	099b      	lsrs	r3, r3, #6
 8008ffc:	4a09      	ldr	r2, [pc, #36]	; (8009024 <vPortSetupTimerInterrupt+0x44>)
 8008ffe:	3b01      	subs	r3, #1
 8009000:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009002:	4b04      	ldr	r3, [pc, #16]	; (8009014 <vPortSetupTimerInterrupt+0x34>)
 8009004:	2207      	movs	r2, #7
 8009006:	601a      	str	r2, [r3, #0]
}
 8009008:	bf00      	nop
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	e000e010 	.word	0xe000e010
 8009018:	e000e018 	.word	0xe000e018
 800901c:	20000000 	.word	0x20000000
 8009020:	10624dd3 	.word	0x10624dd3
 8009024:	e000e014 	.word	0xe000e014

08009028 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009028:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009038 <vPortEnableVFP+0x10>
 800902c:	6801      	ldr	r1, [r0, #0]
 800902e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009032:	6001      	str	r1, [r0, #0]
 8009034:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009036:	bf00      	nop
 8009038:	e000ed88 	.word	0xe000ed88

0800903c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009042:	f3ef 8305 	mrs	r3, IPSR
 8009046:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2b0f      	cmp	r3, #15
 800904c:	d916      	bls.n	800907c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800904e:	4a19      	ldr	r2, [pc, #100]	; (80090b4 <vPortValidateInterruptPriority+0x78>)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	4413      	add	r3, r2
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009058:	4b17      	ldr	r3, [pc, #92]	; (80090b8 <vPortValidateInterruptPriority+0x7c>)
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	7afa      	ldrb	r2, [r7, #11]
 800905e:	429a      	cmp	r2, r3
 8009060:	d20c      	bcs.n	800907c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009066:	b672      	cpsid	i
 8009068:	f383 8811 	msr	BASEPRI, r3
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	b662      	cpsie	i
 8009076:	607b      	str	r3, [r7, #4]
}
 8009078:	bf00      	nop
 800907a:	e7fe      	b.n	800907a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800907c:	4b0f      	ldr	r3, [pc, #60]	; (80090bc <vPortValidateInterruptPriority+0x80>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009084:	4b0e      	ldr	r3, [pc, #56]	; (80090c0 <vPortValidateInterruptPriority+0x84>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	429a      	cmp	r2, r3
 800908a:	d90c      	bls.n	80090a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009090:	b672      	cpsid	i
 8009092:	f383 8811 	msr	BASEPRI, r3
 8009096:	f3bf 8f6f 	isb	sy
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	b662      	cpsie	i
 80090a0:	603b      	str	r3, [r7, #0]
}
 80090a2:	bf00      	nop
 80090a4:	e7fe      	b.n	80090a4 <vPortValidateInterruptPriority+0x68>
	}
 80090a6:	bf00      	nop
 80090a8:	3714      	adds	r7, #20
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	e000e3f0 	.word	0xe000e3f0
 80090b8:	20004a88 	.word	0x20004a88
 80090bc:	e000ed0c 	.word	0xe000ed0c
 80090c0:	20004a8c 	.word	0x20004a8c

080090c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10c      	bne.n	80090f2 <xQueueGenericReset+0x2e>
	__asm volatile
 80090d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090dc:	b672      	cpsid	i
 80090de:	f383 8811 	msr	BASEPRI, r3
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	b662      	cpsie	i
 80090ec:	60bb      	str	r3, [r7, #8]
}
 80090ee:	bf00      	nop
 80090f0:	e7fe      	b.n	80090f0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80090f2:	f7ff febb 	bl	8008e6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090fe:	68f9      	ldr	r1, [r7, #12]
 8009100:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009102:	fb01 f303 	mul.w	r3, r1, r3
 8009106:	441a      	add	r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009122:	3b01      	subs	r3, #1
 8009124:	68f9      	ldr	r1, [r7, #12]
 8009126:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009128:	fb01 f303 	mul.w	r3, r1, r3
 800912c:	441a      	add	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	22ff      	movs	r2, #255	; 0xff
 8009136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	22ff      	movs	r2, #255	; 0xff
 800913e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d114      	bne.n	8009172 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d01a      	beq.n	8009186 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	3310      	adds	r3, #16
 8009154:	4618      	mov	r0, r3
 8009156:	f001 f95d 	bl	800a414 <xTaskRemoveFromEventList>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d012      	beq.n	8009186 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009160:	4b0c      	ldr	r3, [pc, #48]	; (8009194 <xQueueGenericReset+0xd0>)
 8009162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009166:	601a      	str	r2, [r3, #0]
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	e009      	b.n	8009186 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	3310      	adds	r3, #16
 8009176:	4618      	mov	r0, r3
 8009178:	f7ff fcb4 	bl	8008ae4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	3324      	adds	r3, #36	; 0x24
 8009180:	4618      	mov	r0, r3
 8009182:	f7ff fcaf 	bl	8008ae4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009186:	f7ff fea5 	bl	8008ed4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800918a:	2301      	movs	r3, #1
}
 800918c:	4618      	mov	r0, r3
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	e000ed04 	.word	0xe000ed04

08009198 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009198:	b580      	push	{r7, lr}
 800919a:	b08e      	sub	sp, #56	; 0x38
 800919c:	af02      	add	r7, sp, #8
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
 80091a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10c      	bne.n	80091c6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b0:	b672      	cpsid	i
 80091b2:	f383 8811 	msr	BASEPRI, r3
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	b662      	cpsie	i
 80091c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80091c2:	bf00      	nop
 80091c4:	e7fe      	b.n	80091c4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10c      	bne.n	80091e6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80091cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d0:	b672      	cpsid	i
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	b662      	cpsie	i
 80091e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80091e2:	bf00      	nop
 80091e4:	e7fe      	b.n	80091e4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d002      	beq.n	80091f2 <xQueueGenericCreateStatic+0x5a>
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <xQueueGenericCreateStatic+0x5e>
 80091f2:	2301      	movs	r3, #1
 80091f4:	e000      	b.n	80091f8 <xQueueGenericCreateStatic+0x60>
 80091f6:	2300      	movs	r3, #0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10c      	bne.n	8009216 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	b672      	cpsid	i
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	b662      	cpsie	i
 8009210:	623b      	str	r3, [r7, #32]
}
 8009212:	bf00      	nop
 8009214:	e7fe      	b.n	8009214 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d102      	bne.n	8009222 <xQueueGenericCreateStatic+0x8a>
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <xQueueGenericCreateStatic+0x8e>
 8009222:	2301      	movs	r3, #1
 8009224:	e000      	b.n	8009228 <xQueueGenericCreateStatic+0x90>
 8009226:	2300      	movs	r3, #0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10c      	bne.n	8009246 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800922c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009230:	b672      	cpsid	i
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	b662      	cpsie	i
 8009240:	61fb      	str	r3, [r7, #28]
}
 8009242:	bf00      	nop
 8009244:	e7fe      	b.n	8009244 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009246:	2350      	movs	r3, #80	; 0x50
 8009248:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	2b50      	cmp	r3, #80	; 0x50
 800924e:	d00c      	beq.n	800926a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009254:	b672      	cpsid	i
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	b662      	cpsie	i
 8009264:	61bb      	str	r3, [r7, #24]
}
 8009266:	bf00      	nop
 8009268:	e7fe      	b.n	8009268 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800926a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00d      	beq.n	8009292 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009278:	2201      	movs	r2, #1
 800927a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800927e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	4613      	mov	r3, r2
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	68b9      	ldr	r1, [r7, #8]
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f000 f805 	bl	800929c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009294:	4618      	mov	r0, r3
 8009296:	3730      	adds	r7, #48	; 0x30
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d103      	bne.n	80092b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	69ba      	ldr	r2, [r7, #24]
 80092b4:	601a      	str	r2, [r3, #0]
 80092b6:	e002      	b.n	80092be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80092ca:	2101      	movs	r1, #1
 80092cc:	69b8      	ldr	r0, [r7, #24]
 80092ce:	f7ff fef9 	bl	80090c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	78fa      	ldrb	r2, [r7, #3]
 80092d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80092da:	bf00      	nop
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
	...

080092e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b08e      	sub	sp, #56	; 0x38
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]
 80092f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80092f2:	2300      	movs	r3, #0
 80092f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80092fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10c      	bne.n	800931a <xQueueGenericSend+0x36>
	__asm volatile
 8009300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009304:	b672      	cpsid	i
 8009306:	f383 8811 	msr	BASEPRI, r3
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	b662      	cpsie	i
 8009314:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009316:	bf00      	nop
 8009318:	e7fe      	b.n	8009318 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d103      	bne.n	8009328 <xQueueGenericSend+0x44>
 8009320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <xQueueGenericSend+0x48>
 8009328:	2301      	movs	r3, #1
 800932a:	e000      	b.n	800932e <xQueueGenericSend+0x4a>
 800932c:	2300      	movs	r3, #0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10c      	bne.n	800934c <xQueueGenericSend+0x68>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009336:	b672      	cpsid	i
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	b662      	cpsie	i
 8009346:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009348:	bf00      	nop
 800934a:	e7fe      	b.n	800934a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	2b02      	cmp	r3, #2
 8009350:	d103      	bne.n	800935a <xQueueGenericSend+0x76>
 8009352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009356:	2b01      	cmp	r3, #1
 8009358:	d101      	bne.n	800935e <xQueueGenericSend+0x7a>
 800935a:	2301      	movs	r3, #1
 800935c:	e000      	b.n	8009360 <xQueueGenericSend+0x7c>
 800935e:	2300      	movs	r3, #0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10c      	bne.n	800937e <xQueueGenericSend+0x9a>
	__asm volatile
 8009364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009368:	b672      	cpsid	i
 800936a:	f383 8811 	msr	BASEPRI, r3
 800936e:	f3bf 8f6f 	isb	sy
 8009372:	f3bf 8f4f 	dsb	sy
 8009376:	b662      	cpsie	i
 8009378:	623b      	str	r3, [r7, #32]
}
 800937a:	bf00      	nop
 800937c:	e7fe      	b.n	800937c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800937e:	f001 fa13 	bl	800a7a8 <xTaskGetSchedulerState>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d102      	bne.n	800938e <xQueueGenericSend+0xaa>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d101      	bne.n	8009392 <xQueueGenericSend+0xae>
 800938e:	2301      	movs	r3, #1
 8009390:	e000      	b.n	8009394 <xQueueGenericSend+0xb0>
 8009392:	2300      	movs	r3, #0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d10c      	bne.n	80093b2 <xQueueGenericSend+0xce>
	__asm volatile
 8009398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939c:	b672      	cpsid	i
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	b662      	cpsie	i
 80093ac:	61fb      	str	r3, [r7, #28]
}
 80093ae:	bf00      	nop
 80093b0:	e7fe      	b.n	80093b0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093b2:	f7ff fd5b 	bl	8008e6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80093b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093be:	429a      	cmp	r2, r3
 80093c0:	d302      	bcc.n	80093c8 <xQueueGenericSend+0xe4>
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d129      	bne.n	800941c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	68b9      	ldr	r1, [r7, #8]
 80093cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093ce:	f000 fa15 	bl	80097fc <prvCopyDataToQueue>
 80093d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d010      	beq.n	80093fe <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093de:	3324      	adds	r3, #36	; 0x24
 80093e0:	4618      	mov	r0, r3
 80093e2:	f001 f817 	bl	800a414 <xTaskRemoveFromEventList>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d013      	beq.n	8009414 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80093ec:	4b3f      	ldr	r3, [pc, #252]	; (80094ec <xQueueGenericSend+0x208>)
 80093ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093f2:	601a      	str	r2, [r3, #0]
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	e00a      	b.n	8009414 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80093fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009400:	2b00      	cmp	r3, #0
 8009402:	d007      	beq.n	8009414 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009404:	4b39      	ldr	r3, [pc, #228]	; (80094ec <xQueueGenericSend+0x208>)
 8009406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800940a:	601a      	str	r2, [r3, #0]
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009414:	f7ff fd5e 	bl	8008ed4 <vPortExitCritical>
				return pdPASS;
 8009418:	2301      	movs	r3, #1
 800941a:	e063      	b.n	80094e4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d103      	bne.n	800942a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009422:	f7ff fd57 	bl	8008ed4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009426:	2300      	movs	r3, #0
 8009428:	e05c      	b.n	80094e4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800942a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800942c:	2b00      	cmp	r3, #0
 800942e:	d106      	bne.n	800943e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009430:	f107 0314 	add.w	r3, r7, #20
 8009434:	4618      	mov	r0, r3
 8009436:	f001 f853 	bl	800a4e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800943a:	2301      	movs	r3, #1
 800943c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800943e:	f7ff fd49 	bl	8008ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009442:	f000 fdb3 	bl	8009fac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009446:	f7ff fd11 	bl	8008e6c <vPortEnterCritical>
 800944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009450:	b25b      	sxtb	r3, r3
 8009452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009456:	d103      	bne.n	8009460 <xQueueGenericSend+0x17c>
 8009458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945a:	2200      	movs	r2, #0
 800945c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009462:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009466:	b25b      	sxtb	r3, r3
 8009468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946c:	d103      	bne.n	8009476 <xQueueGenericSend+0x192>
 800946e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009470:	2200      	movs	r2, #0
 8009472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009476:	f7ff fd2d 	bl	8008ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800947a:	1d3a      	adds	r2, r7, #4
 800947c:	f107 0314 	add.w	r3, r7, #20
 8009480:	4611      	mov	r1, r2
 8009482:	4618      	mov	r0, r3
 8009484:	f001 f842 	bl	800a50c <xTaskCheckForTimeOut>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d124      	bne.n	80094d8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800948e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009490:	f000 faac 	bl	80099ec <prvIsQueueFull>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d018      	beq.n	80094cc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800949a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949c:	3310      	adds	r3, #16
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	4611      	mov	r1, r2
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 ff62 	bl	800a36c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80094a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094aa:	f000 fa37 	bl	800991c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80094ae:	f000 fd8b 	bl	8009fc8 <xTaskResumeAll>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f47f af7c 	bne.w	80093b2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80094ba:	4b0c      	ldr	r3, [pc, #48]	; (80094ec <xQueueGenericSend+0x208>)
 80094bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c0:	601a      	str	r2, [r3, #0]
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	e772      	b.n	80093b2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80094cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094ce:	f000 fa25 	bl	800991c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094d2:	f000 fd79 	bl	8009fc8 <xTaskResumeAll>
 80094d6:	e76c      	b.n	80093b2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80094d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094da:	f000 fa1f 	bl	800991c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094de:	f000 fd73 	bl	8009fc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80094e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3738      	adds	r7, #56	; 0x38
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	e000ed04 	.word	0xe000ed04

080094f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b08e      	sub	sp, #56	; 0x38
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	607a      	str	r2, [r7, #4]
 80094fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10c      	bne.n	8009522 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8009508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950c:	b672      	cpsid	i
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	b662      	cpsie	i
 800951c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800951e:	bf00      	nop
 8009520:	e7fe      	b.n	8009520 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d103      	bne.n	8009530 <xQueueGenericSendFromISR+0x40>
 8009528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <xQueueGenericSendFromISR+0x44>
 8009530:	2301      	movs	r3, #1
 8009532:	e000      	b.n	8009536 <xQueueGenericSendFromISR+0x46>
 8009534:	2300      	movs	r3, #0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10c      	bne.n	8009554 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800953a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953e:	b672      	cpsid	i
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	b662      	cpsie	i
 800954e:	623b      	str	r3, [r7, #32]
}
 8009550:	bf00      	nop
 8009552:	e7fe      	b.n	8009552 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	2b02      	cmp	r3, #2
 8009558:	d103      	bne.n	8009562 <xQueueGenericSendFromISR+0x72>
 800955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800955e:	2b01      	cmp	r3, #1
 8009560:	d101      	bne.n	8009566 <xQueueGenericSendFromISR+0x76>
 8009562:	2301      	movs	r3, #1
 8009564:	e000      	b.n	8009568 <xQueueGenericSendFromISR+0x78>
 8009566:	2300      	movs	r3, #0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10c      	bne.n	8009586 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800956c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009570:	b672      	cpsid	i
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	b662      	cpsie	i
 8009580:	61fb      	str	r3, [r7, #28]
}
 8009582:	bf00      	nop
 8009584:	e7fe      	b.n	8009584 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009586:	f7ff fd59 	bl	800903c <vPortValidateInterruptPriority>
	__asm volatile
 800958a:	f3ef 8211 	mrs	r2, BASEPRI
 800958e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009592:	b672      	cpsid	i
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	b662      	cpsie	i
 80095a2:	61ba      	str	r2, [r7, #24]
 80095a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80095a6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d302      	bcc.n	80095bc <xQueueGenericSendFromISR+0xcc>
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d12c      	bne.n	8009616 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80095bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	68b9      	ldr	r1, [r7, #8]
 80095ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095cc:	f000 f916 	bl	80097fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80095d0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80095d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d8:	d112      	bne.n	8009600 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d016      	beq.n	8009610 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e4:	3324      	adds	r3, #36	; 0x24
 80095e6:	4618      	mov	r0, r3
 80095e8:	f000 ff14 	bl	800a414 <xTaskRemoveFromEventList>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00e      	beq.n	8009610 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00b      	beq.n	8009610 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	601a      	str	r2, [r3, #0]
 80095fe:	e007      	b.n	8009610 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009600:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009604:	3301      	adds	r3, #1
 8009606:	b2db      	uxtb	r3, r3
 8009608:	b25a      	sxtb	r2, r3
 800960a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009610:	2301      	movs	r3, #1
 8009612:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009614:	e001      	b.n	800961a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009616:	2300      	movs	r3, #0
 8009618:	637b      	str	r3, [r7, #52]	; 0x34
 800961a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	f383 8811 	msr	BASEPRI, r3
}
 8009624:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009628:	4618      	mov	r0, r3
 800962a:	3738      	adds	r7, #56	; 0x38
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b08c      	sub	sp, #48	; 0x30
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800963c:	2300      	movs	r3, #0
 800963e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10c      	bne.n	8009664 <xQueueReceive+0x34>
	__asm volatile
 800964a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964e:	b672      	cpsid	i
 8009650:	f383 8811 	msr	BASEPRI, r3
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	b662      	cpsie	i
 800965e:	623b      	str	r3, [r7, #32]
}
 8009660:	bf00      	nop
 8009662:	e7fe      	b.n	8009662 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d103      	bne.n	8009672 <xQueueReceive+0x42>
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966e:	2b00      	cmp	r3, #0
 8009670:	d101      	bne.n	8009676 <xQueueReceive+0x46>
 8009672:	2301      	movs	r3, #1
 8009674:	e000      	b.n	8009678 <xQueueReceive+0x48>
 8009676:	2300      	movs	r3, #0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10c      	bne.n	8009696 <xQueueReceive+0x66>
	__asm volatile
 800967c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009680:	b672      	cpsid	i
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	b662      	cpsie	i
 8009690:	61fb      	str	r3, [r7, #28]
}
 8009692:	bf00      	nop
 8009694:	e7fe      	b.n	8009694 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009696:	f001 f887 	bl	800a7a8 <xTaskGetSchedulerState>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d102      	bne.n	80096a6 <xQueueReceive+0x76>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d101      	bne.n	80096aa <xQueueReceive+0x7a>
 80096a6:	2301      	movs	r3, #1
 80096a8:	e000      	b.n	80096ac <xQueueReceive+0x7c>
 80096aa:	2300      	movs	r3, #0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d10c      	bne.n	80096ca <xQueueReceive+0x9a>
	__asm volatile
 80096b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b4:	b672      	cpsid	i
 80096b6:	f383 8811 	msr	BASEPRI, r3
 80096ba:	f3bf 8f6f 	isb	sy
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	b662      	cpsie	i
 80096c4:	61bb      	str	r3, [r7, #24]
}
 80096c6:	bf00      	nop
 80096c8:	e7fe      	b.n	80096c8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80096ca:	f7ff fbcf 	bl	8008e6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d01f      	beq.n	800971a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80096da:	68b9      	ldr	r1, [r7, #8]
 80096dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096de:	f000 f8f7 	bl	80098d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80096e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e4:	1e5a      	subs	r2, r3, #1
 80096e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00f      	beq.n	8009712 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f4:	3310      	adds	r3, #16
 80096f6:	4618      	mov	r0, r3
 80096f8:	f000 fe8c 	bl	800a414 <xTaskRemoveFromEventList>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d007      	beq.n	8009712 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009702:	4b3d      	ldr	r3, [pc, #244]	; (80097f8 <xQueueReceive+0x1c8>)
 8009704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009708:	601a      	str	r2, [r3, #0]
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009712:	f7ff fbdf 	bl	8008ed4 <vPortExitCritical>
				return pdPASS;
 8009716:	2301      	movs	r3, #1
 8009718:	e069      	b.n	80097ee <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d103      	bne.n	8009728 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009720:	f7ff fbd8 	bl	8008ed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009724:	2300      	movs	r3, #0
 8009726:	e062      	b.n	80097ee <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972a:	2b00      	cmp	r3, #0
 800972c:	d106      	bne.n	800973c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800972e:	f107 0310 	add.w	r3, r7, #16
 8009732:	4618      	mov	r0, r3
 8009734:	f000 fed4 	bl	800a4e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009738:	2301      	movs	r3, #1
 800973a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800973c:	f7ff fbca 	bl	8008ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009740:	f000 fc34 	bl	8009fac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009744:	f7ff fb92 	bl	8008e6c <vPortEnterCritical>
 8009748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800974e:	b25b      	sxtb	r3, r3
 8009750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009754:	d103      	bne.n	800975e <xQueueReceive+0x12e>
 8009756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009758:	2200      	movs	r2, #0
 800975a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800975e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009764:	b25b      	sxtb	r3, r3
 8009766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976a:	d103      	bne.n	8009774 <xQueueReceive+0x144>
 800976c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976e:	2200      	movs	r2, #0
 8009770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009774:	f7ff fbae 	bl	8008ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009778:	1d3a      	adds	r2, r7, #4
 800977a:	f107 0310 	add.w	r3, r7, #16
 800977e:	4611      	mov	r1, r2
 8009780:	4618      	mov	r0, r3
 8009782:	f000 fec3 	bl	800a50c <xTaskCheckForTimeOut>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d123      	bne.n	80097d4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800978c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800978e:	f000 f917 	bl	80099c0 <prvIsQueueEmpty>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d017      	beq.n	80097c8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979a:	3324      	adds	r3, #36	; 0x24
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	4611      	mov	r1, r2
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 fde3 	bl	800a36c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097a8:	f000 f8b8 	bl	800991c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80097ac:	f000 fc0c 	bl	8009fc8 <xTaskResumeAll>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d189      	bne.n	80096ca <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80097b6:	4b10      	ldr	r3, [pc, #64]	; (80097f8 <xQueueReceive+0x1c8>)
 80097b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097bc:	601a      	str	r2, [r3, #0]
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	e780      	b.n	80096ca <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80097c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097ca:	f000 f8a7 	bl	800991c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097ce:	f000 fbfb 	bl	8009fc8 <xTaskResumeAll>
 80097d2:	e77a      	b.n	80096ca <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80097d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097d6:	f000 f8a1 	bl	800991c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097da:	f000 fbf5 	bl	8009fc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097e0:	f000 f8ee 	bl	80099c0 <prvIsQueueEmpty>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f43f af6f 	beq.w	80096ca <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80097ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3730      	adds	r7, #48	; 0x30
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	e000ed04 	.word	0xe000ed04

080097fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009808:	2300      	movs	r3, #0
 800980a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009810:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10d      	bne.n	8009836 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d14d      	bne.n	80098be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	4618      	mov	r0, r3
 8009828:	f000 ffdc 	bl	800a7e4 <xTaskPriorityDisinherit>
 800982c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	609a      	str	r2, [r3, #8]
 8009834:	e043      	b.n	80098be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d119      	bne.n	8009870 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6858      	ldr	r0, [r3, #4]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009844:	461a      	mov	r2, r3
 8009846:	68b9      	ldr	r1, [r7, #8]
 8009848:	f001 fdf8 	bl	800b43c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009854:	441a      	add	r2, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	429a      	cmp	r2, r3
 8009864:	d32b      	bcc.n	80098be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	605a      	str	r2, [r3, #4]
 800986e:	e026      	b.n	80098be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	68d8      	ldr	r0, [r3, #12]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009878:	461a      	mov	r2, r3
 800987a:	68b9      	ldr	r1, [r7, #8]
 800987c:	f001 fdde 	bl	800b43c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	68da      	ldr	r2, [r3, #12]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009888:	425b      	negs	r3, r3
 800988a:	441a      	add	r2, r3
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	68da      	ldr	r2, [r3, #12]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	429a      	cmp	r2, r3
 800989a:	d207      	bcs.n	80098ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	689a      	ldr	r2, [r3, #8]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a4:	425b      	negs	r3, r3
 80098a6:	441a      	add	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d105      	bne.n	80098be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d002      	beq.n	80098be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	3b01      	subs	r3, #1
 80098bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	1c5a      	adds	r2, r3, #1
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80098c6:	697b      	ldr	r3, [r7, #20]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3718      	adds	r7, #24
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d018      	beq.n	8009914 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	68da      	ldr	r2, [r3, #12]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ea:	441a      	add	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	68da      	ldr	r2, [r3, #12]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d303      	bcc.n	8009904 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	68d9      	ldr	r1, [r3, #12]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990c:	461a      	mov	r2, r3
 800990e:	6838      	ldr	r0, [r7, #0]
 8009910:	f001 fd94 	bl	800b43c <memcpy>
	}
}
 8009914:	bf00      	nop
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009924:	f7ff faa2 	bl	8008e6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800992e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009930:	e011      	b.n	8009956 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009936:	2b00      	cmp	r3, #0
 8009938:	d012      	beq.n	8009960 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	3324      	adds	r3, #36	; 0x24
 800993e:	4618      	mov	r0, r3
 8009940:	f000 fd68 	bl	800a414 <xTaskRemoveFromEventList>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d001      	beq.n	800994e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800994a:	f000 fe45 	bl	800a5d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800994e:	7bfb      	ldrb	r3, [r7, #15]
 8009950:	3b01      	subs	r3, #1
 8009952:	b2db      	uxtb	r3, r3
 8009954:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800995a:	2b00      	cmp	r3, #0
 800995c:	dce9      	bgt.n	8009932 <prvUnlockQueue+0x16>
 800995e:	e000      	b.n	8009962 <prvUnlockQueue+0x46>
					break;
 8009960:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	22ff      	movs	r2, #255	; 0xff
 8009966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800996a:	f7ff fab3 	bl	8008ed4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800996e:	f7ff fa7d 	bl	8008e6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009978:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800997a:	e011      	b.n	80099a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d012      	beq.n	80099aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	3310      	adds	r3, #16
 8009988:	4618      	mov	r0, r3
 800998a:	f000 fd43 	bl	800a414 <xTaskRemoveFromEventList>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009994:	f000 fe20 	bl	800a5d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009998:	7bbb      	ldrb	r3, [r7, #14]
 800999a:	3b01      	subs	r3, #1
 800999c:	b2db      	uxtb	r3, r3
 800999e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	dce9      	bgt.n	800997c <prvUnlockQueue+0x60>
 80099a8:	e000      	b.n	80099ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80099aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	22ff      	movs	r2, #255	; 0xff
 80099b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80099b4:	f7ff fa8e 	bl	8008ed4 <vPortExitCritical>
}
 80099b8:	bf00      	nop
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80099c8:	f7ff fa50 	bl	8008e6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d102      	bne.n	80099da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80099d4:	2301      	movs	r3, #1
 80099d6:	60fb      	str	r3, [r7, #12]
 80099d8:	e001      	b.n	80099de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80099da:	2300      	movs	r3, #0
 80099dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80099de:	f7ff fa79 	bl	8008ed4 <vPortExitCritical>

	return xReturn;
 80099e2:	68fb      	ldr	r3, [r7, #12]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3710      	adds	r7, #16
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80099f4:	f7ff fa3a 	bl	8008e6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d102      	bne.n	8009a0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a04:	2301      	movs	r3, #1
 8009a06:	60fb      	str	r3, [r7, #12]
 8009a08:	e001      	b.n	8009a0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a0e:	f7ff fa61 	bl	8008ed4 <vPortExitCritical>

	return xReturn;
 8009a12:	68fb      	ldr	r3, [r7, #12]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a26:	2300      	movs	r3, #0
 8009a28:	60fb      	str	r3, [r7, #12]
 8009a2a:	e014      	b.n	8009a56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009a2c:	4a0f      	ldr	r2, [pc, #60]	; (8009a6c <vQueueAddToRegistry+0x50>)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d10b      	bne.n	8009a50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009a38:	490c      	ldr	r1, [pc, #48]	; (8009a6c <vQueueAddToRegistry+0x50>)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009a42:	4a0a      	ldr	r2, [pc, #40]	; (8009a6c <vQueueAddToRegistry+0x50>)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	00db      	lsls	r3, r3, #3
 8009a48:	4413      	add	r3, r2
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009a4e:	e006      	b.n	8009a5e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	3301      	adds	r3, #1
 8009a54:	60fb      	str	r3, [r7, #12]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2b07      	cmp	r3, #7
 8009a5a:	d9e7      	bls.n	8009a2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009a5c:	bf00      	nop
 8009a5e:	bf00      	nop
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	20004a90 	.word	0x20004a90

08009a70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009a80:	f7ff f9f4 	bl	8008e6c <vPortEnterCritical>
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a8a:	b25b      	sxtb	r3, r3
 8009a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a90:	d103      	bne.n	8009a9a <vQueueWaitForMessageRestricted+0x2a>
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009aa0:	b25b      	sxtb	r3, r3
 8009aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa6:	d103      	bne.n	8009ab0 <vQueueWaitForMessageRestricted+0x40>
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ab0:	f7ff fa10 	bl	8008ed4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d106      	bne.n	8009aca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	3324      	adds	r3, #36	; 0x24
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	68b9      	ldr	r1, [r7, #8]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 fc77 	bl	800a3b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009aca:	6978      	ldr	r0, [r7, #20]
 8009acc:	f7ff ff26 	bl	800991c <prvUnlockQueue>
	}
 8009ad0:	bf00      	nop
 8009ad2:	3718      	adds	r7, #24
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b08e      	sub	sp, #56	; 0x38
 8009adc:	af04      	add	r7, sp, #16
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
 8009ae4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10c      	bne.n	8009b06 <xTaskCreateStatic+0x2e>
	__asm volatile
 8009aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af0:	b672      	cpsid	i
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	b662      	cpsie	i
 8009b00:	623b      	str	r3, [r7, #32]
}
 8009b02:	bf00      	nop
 8009b04:	e7fe      	b.n	8009b04 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d10c      	bne.n	8009b26 <xTaskCreateStatic+0x4e>
	__asm volatile
 8009b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b10:	b672      	cpsid	i
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	b662      	cpsie	i
 8009b20:	61fb      	str	r3, [r7, #28]
}
 8009b22:	bf00      	nop
 8009b24:	e7fe      	b.n	8009b24 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009b26:	23bc      	movs	r3, #188	; 0xbc
 8009b28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	2bbc      	cmp	r3, #188	; 0xbc
 8009b2e:	d00c      	beq.n	8009b4a <xTaskCreateStatic+0x72>
	__asm volatile
 8009b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b34:	b672      	cpsid	i
 8009b36:	f383 8811 	msr	BASEPRI, r3
 8009b3a:	f3bf 8f6f 	isb	sy
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	b662      	cpsie	i
 8009b44:	61bb      	str	r3, [r7, #24]
}
 8009b46:	bf00      	nop
 8009b48:	e7fe      	b.n	8009b48 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009b4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d01e      	beq.n	8009b90 <xTaskCreateStatic+0xb8>
 8009b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d01b      	beq.n	8009b90 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b64:	2202      	movs	r2, #2
 8009b66:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	9303      	str	r3, [sp, #12]
 8009b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b70:	9302      	str	r3, [sp, #8]
 8009b72:	f107 0314 	add.w	r3, r7, #20
 8009b76:	9301      	str	r3, [sp, #4]
 8009b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7a:	9300      	str	r3, [sp, #0]
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	68b9      	ldr	r1, [r7, #8]
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f000 f850 	bl	8009c28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b8a:	f000 f8f5 	bl	8009d78 <prvAddNewTaskToReadyList>
 8009b8e:	e001      	b.n	8009b94 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009b90:	2300      	movs	r3, #0
 8009b92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009b94:	697b      	ldr	r3, [r7, #20]
	}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3728      	adds	r7, #40	; 0x28
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b08c      	sub	sp, #48	; 0x30
 8009ba2:	af04      	add	r7, sp, #16
 8009ba4:	60f8      	str	r0, [r7, #12]
 8009ba6:	60b9      	str	r1, [r7, #8]
 8009ba8:	603b      	str	r3, [r7, #0]
 8009baa:	4613      	mov	r3, r2
 8009bac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009bae:	88fb      	ldrh	r3, [r7, #6]
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fe fdb2 	bl	800871c <pvPortMalloc>
 8009bb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00e      	beq.n	8009bde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009bc0:	20bc      	movs	r0, #188	; 0xbc
 8009bc2:	f7fe fdab 	bl	800871c <pvPortMalloc>
 8009bc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d003      	beq.n	8009bd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	697a      	ldr	r2, [r7, #20]
 8009bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8009bd4:	e005      	b.n	8009be2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009bd6:	6978      	ldr	r0, [r7, #20]
 8009bd8:	f7fe fe6a 	bl	80088b0 <vPortFree>
 8009bdc:	e001      	b.n	8009be2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009bde:	2300      	movs	r3, #0
 8009be0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d017      	beq.n	8009c18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009bf0:	88fa      	ldrh	r2, [r7, #6]
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	9303      	str	r3, [sp, #12]
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	9302      	str	r3, [sp, #8]
 8009bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfc:	9301      	str	r3, [sp, #4]
 8009bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	68b9      	ldr	r1, [r7, #8]
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	f000 f80e 	bl	8009c28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c0c:	69f8      	ldr	r0, [r7, #28]
 8009c0e:	f000 f8b3 	bl	8009d78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009c12:	2301      	movs	r3, #1
 8009c14:	61bb      	str	r3, [r7, #24]
 8009c16:	e002      	b.n	8009c1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009c18:	f04f 33ff 	mov.w	r3, #4294967295
 8009c1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009c1e:	69bb      	ldr	r3, [r7, #24]
	}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3720      	adds	r7, #32
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b088      	sub	sp, #32
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
 8009c34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	461a      	mov	r2, r3
 8009c40:	21a5      	movs	r1, #165	; 0xa5
 8009c42:	f001 fc09 	bl	800b458 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c4a:	6879      	ldr	r1, [r7, #4]
 8009c4c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009c50:	440b      	add	r3, r1
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	f023 0307 	bic.w	r3, r3, #7
 8009c5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	f003 0307 	and.w	r3, r3, #7
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00c      	beq.n	8009c84 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8009c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6e:	b672      	cpsid	i
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	b662      	cpsie	i
 8009c7e:	617b      	str	r3, [r7, #20]
}
 8009c80:	bf00      	nop
 8009c82:	e7fe      	b.n	8009c82 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d01f      	beq.n	8009cca <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	61fb      	str	r3, [r7, #28]
 8009c8e:	e012      	b.n	8009cb6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	4413      	add	r3, r2
 8009c96:	7819      	ldrb	r1, [r3, #0]
 8009c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	3334      	adds	r3, #52	; 0x34
 8009ca0:	460a      	mov	r2, r1
 8009ca2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009ca4:	68ba      	ldr	r2, [r7, #8]
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	4413      	add	r3, r2
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d006      	beq.n	8009cbe <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	61fb      	str	r3, [r7, #28]
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	2b0f      	cmp	r3, #15
 8009cba:	d9e9      	bls.n	8009c90 <prvInitialiseNewTask+0x68>
 8009cbc:	e000      	b.n	8009cc0 <prvInitialiseNewTask+0x98>
			{
				break;
 8009cbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009cc8:	e003      	b.n	8009cd2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd4:	2b37      	cmp	r3, #55	; 0x37
 8009cd6:	d901      	bls.n	8009cdc <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009cd8:	2337      	movs	r3, #55	; 0x37
 8009cda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ce0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ce6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cea:	2200      	movs	r2, #0
 8009cec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fe ff16 	bl	8008b24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfa:	3318      	adds	r3, #24
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7fe ff11 	bl	8008b24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d22:	2200      	movs	r2, #0
 8009d24:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2a:	3354      	adds	r3, #84	; 0x54
 8009d2c:	2260      	movs	r2, #96	; 0x60
 8009d2e:	2100      	movs	r1, #0
 8009d30:	4618      	mov	r0, r3
 8009d32:	f001 fb91 	bl	800b458 <memset>
 8009d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d38:	4a0c      	ldr	r2, [pc, #48]	; (8009d6c <prvInitialiseNewTask+0x144>)
 8009d3a:	659a      	str	r2, [r3, #88]	; 0x58
 8009d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3e:	4a0c      	ldr	r2, [pc, #48]	; (8009d70 <prvInitialiseNewTask+0x148>)
 8009d40:	65da      	str	r2, [r3, #92]	; 0x5c
 8009d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d44:	4a0b      	ldr	r2, [pc, #44]	; (8009d74 <prvInitialiseNewTask+0x14c>)
 8009d46:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009d48:	683a      	ldr	r2, [r7, #0]
 8009d4a:	68f9      	ldr	r1, [r7, #12]
 8009d4c:	69b8      	ldr	r0, [r7, #24]
 8009d4e:	f7fe ff7d 	bl	8008c4c <pxPortInitialiseStack>
 8009d52:	4602      	mov	r2, r0
 8009d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d56:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d002      	beq.n	8009d64 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d64:	bf00      	nop
 8009d66:	3720      	adds	r7, #32
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	0800e23c 	.word	0x0800e23c
 8009d70:	0800e25c 	.word	0x0800e25c
 8009d74:	0800e21c 	.word	0x0800e21c

08009d78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009d80:	f7ff f874 	bl	8008e6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009d84:	4b2d      	ldr	r3, [pc, #180]	; (8009e3c <prvAddNewTaskToReadyList+0xc4>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	4a2c      	ldr	r2, [pc, #176]	; (8009e3c <prvAddNewTaskToReadyList+0xc4>)
 8009d8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009d8e:	4b2c      	ldr	r3, [pc, #176]	; (8009e40 <prvAddNewTaskToReadyList+0xc8>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d109      	bne.n	8009daa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009d96:	4a2a      	ldr	r2, [pc, #168]	; (8009e40 <prvAddNewTaskToReadyList+0xc8>)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009d9c:	4b27      	ldr	r3, [pc, #156]	; (8009e3c <prvAddNewTaskToReadyList+0xc4>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d110      	bne.n	8009dc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009da4:	f000 fc3c 	bl	800a620 <prvInitialiseTaskLists>
 8009da8:	e00d      	b.n	8009dc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009daa:	4b26      	ldr	r3, [pc, #152]	; (8009e44 <prvAddNewTaskToReadyList+0xcc>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d109      	bne.n	8009dc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009db2:	4b23      	ldr	r3, [pc, #140]	; (8009e40 <prvAddNewTaskToReadyList+0xc8>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d802      	bhi.n	8009dc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009dc0:	4a1f      	ldr	r2, [pc, #124]	; (8009e40 <prvAddNewTaskToReadyList+0xc8>)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009dc6:	4b20      	ldr	r3, [pc, #128]	; (8009e48 <prvAddNewTaskToReadyList+0xd0>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	4a1e      	ldr	r2, [pc, #120]	; (8009e48 <prvAddNewTaskToReadyList+0xd0>)
 8009dce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009dd0:	4b1d      	ldr	r3, [pc, #116]	; (8009e48 <prvAddNewTaskToReadyList+0xd0>)
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ddc:	4b1b      	ldr	r3, [pc, #108]	; (8009e4c <prvAddNewTaskToReadyList+0xd4>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d903      	bls.n	8009dec <prvAddNewTaskToReadyList+0x74>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de8:	4a18      	ldr	r2, [pc, #96]	; (8009e4c <prvAddNewTaskToReadyList+0xd4>)
 8009dea:	6013      	str	r3, [r2, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df0:	4613      	mov	r3, r2
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	4413      	add	r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	4a15      	ldr	r2, [pc, #84]	; (8009e50 <prvAddNewTaskToReadyList+0xd8>)
 8009dfa:	441a      	add	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	3304      	adds	r3, #4
 8009e00:	4619      	mov	r1, r3
 8009e02:	4610      	mov	r0, r2
 8009e04:	f7fe fe9b 	bl	8008b3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009e08:	f7ff f864 	bl	8008ed4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009e0c:	4b0d      	ldr	r3, [pc, #52]	; (8009e44 <prvAddNewTaskToReadyList+0xcc>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d00e      	beq.n	8009e32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e14:	4b0a      	ldr	r3, [pc, #40]	; (8009e40 <prvAddNewTaskToReadyList+0xc8>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d207      	bcs.n	8009e32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009e22:	4b0c      	ldr	r3, [pc, #48]	; (8009e54 <prvAddNewTaskToReadyList+0xdc>)
 8009e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e28:	601a      	str	r2, [r3, #0]
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e32:	bf00      	nop
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	20004fa4 	.word	0x20004fa4
 8009e40:	20004ad0 	.word	0x20004ad0
 8009e44:	20004fb0 	.word	0x20004fb0
 8009e48:	20004fc0 	.word	0x20004fc0
 8009e4c:	20004fac 	.word	0x20004fac
 8009e50:	20004ad4 	.word	0x20004ad4
 8009e54:	e000ed04 	.word	0xe000ed04

08009e58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009e60:	2300      	movs	r3, #0
 8009e62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d019      	beq.n	8009e9e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009e6a:	4b14      	ldr	r3, [pc, #80]	; (8009ebc <vTaskDelay+0x64>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00c      	beq.n	8009e8c <vTaskDelay+0x34>
	__asm volatile
 8009e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e76:	b672      	cpsid	i
 8009e78:	f383 8811 	msr	BASEPRI, r3
 8009e7c:	f3bf 8f6f 	isb	sy
 8009e80:	f3bf 8f4f 	dsb	sy
 8009e84:	b662      	cpsie	i
 8009e86:	60bb      	str	r3, [r7, #8]
}
 8009e88:	bf00      	nop
 8009e8a:	e7fe      	b.n	8009e8a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009e8c:	f000 f88e 	bl	8009fac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009e90:	2100      	movs	r1, #0
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fd18 	bl	800a8c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009e98:	f000 f896 	bl	8009fc8 <xTaskResumeAll>
 8009e9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d107      	bne.n	8009eb4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8009ea4:	4b06      	ldr	r3, [pc, #24]	; (8009ec0 <vTaskDelay+0x68>)
 8009ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eaa:	601a      	str	r2, [r3, #0]
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009eb4:	bf00      	nop
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	20004fcc 	.word	0x20004fcc
 8009ec0:	e000ed04 	.word	0xe000ed04

08009ec4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b08a      	sub	sp, #40	; 0x28
 8009ec8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009ed2:	463a      	mov	r2, r7
 8009ed4:	1d39      	adds	r1, r7, #4
 8009ed6:	f107 0308 	add.w	r3, r7, #8
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fe fbea 	bl	80086b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68ba      	ldr	r2, [r7, #8]
 8009ee6:	9202      	str	r2, [sp, #8]
 8009ee8:	9301      	str	r3, [sp, #4]
 8009eea:	2300      	movs	r3, #0
 8009eec:	9300      	str	r3, [sp, #0]
 8009eee:	2300      	movs	r3, #0
 8009ef0:	460a      	mov	r2, r1
 8009ef2:	4926      	ldr	r1, [pc, #152]	; (8009f8c <vTaskStartScheduler+0xc8>)
 8009ef4:	4826      	ldr	r0, [pc, #152]	; (8009f90 <vTaskStartScheduler+0xcc>)
 8009ef6:	f7ff fdef 	bl	8009ad8 <xTaskCreateStatic>
 8009efa:	4603      	mov	r3, r0
 8009efc:	4a25      	ldr	r2, [pc, #148]	; (8009f94 <vTaskStartScheduler+0xd0>)
 8009efe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009f00:	4b24      	ldr	r3, [pc, #144]	; (8009f94 <vTaskStartScheduler+0xd0>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d002      	beq.n	8009f0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	617b      	str	r3, [r7, #20]
 8009f0c:	e001      	b.n	8009f12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d102      	bne.n	8009f1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009f18:	f000 fd2a 	bl	800a970 <xTimerCreateTimerTask>
 8009f1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d11d      	bne.n	8009f60 <vTaskStartScheduler+0x9c>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f28:	b672      	cpsid	i
 8009f2a:	f383 8811 	msr	BASEPRI, r3
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	f3bf 8f4f 	dsb	sy
 8009f36:	b662      	cpsie	i
 8009f38:	613b      	str	r3, [r7, #16]
}
 8009f3a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009f3c:	4b16      	ldr	r3, [pc, #88]	; (8009f98 <vTaskStartScheduler+0xd4>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	3354      	adds	r3, #84	; 0x54
 8009f42:	4a16      	ldr	r2, [pc, #88]	; (8009f9c <vTaskStartScheduler+0xd8>)
 8009f44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009f46:	4b16      	ldr	r3, [pc, #88]	; (8009fa0 <vTaskStartScheduler+0xdc>)
 8009f48:	f04f 32ff 	mov.w	r2, #4294967295
 8009f4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009f4e:	4b15      	ldr	r3, [pc, #84]	; (8009fa4 <vTaskStartScheduler+0xe0>)
 8009f50:	2201      	movs	r2, #1
 8009f52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009f54:	4b14      	ldr	r3, [pc, #80]	; (8009fa8 <vTaskStartScheduler+0xe4>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009f5a:	f7fe ff09 	bl	8008d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009f5e:	e010      	b.n	8009f82 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f66:	d10c      	bne.n	8009f82 <vTaskStartScheduler+0xbe>
	__asm volatile
 8009f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6c:	b672      	cpsid	i
 8009f6e:	f383 8811 	msr	BASEPRI, r3
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	b662      	cpsie	i
 8009f7c:	60fb      	str	r3, [r7, #12]
}
 8009f7e:	bf00      	nop
 8009f80:	e7fe      	b.n	8009f80 <vTaskStartScheduler+0xbc>
}
 8009f82:	bf00      	nop
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	0800e1c8 	.word	0x0800e1c8
 8009f90:	0800a5f1 	.word	0x0800a5f1
 8009f94:	20004fc8 	.word	0x20004fc8
 8009f98:	20004ad0 	.word	0x20004ad0
 8009f9c:	20000010 	.word	0x20000010
 8009fa0:	20004fc4 	.word	0x20004fc4
 8009fa4:	20004fb0 	.word	0x20004fb0
 8009fa8:	20004fa8 	.word	0x20004fa8

08009fac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009fac:	b480      	push	{r7}
 8009fae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009fb0:	4b04      	ldr	r3, [pc, #16]	; (8009fc4 <vTaskSuspendAll+0x18>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	4a03      	ldr	r2, [pc, #12]	; (8009fc4 <vTaskSuspendAll+0x18>)
 8009fb8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009fba:	bf00      	nop
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr
 8009fc4:	20004fcc 	.word	0x20004fcc

08009fc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009fd6:	4b43      	ldr	r3, [pc, #268]	; (800a0e4 <xTaskResumeAll+0x11c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10c      	bne.n	8009ff8 <xTaskResumeAll+0x30>
	__asm volatile
 8009fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe2:	b672      	cpsid	i
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	b662      	cpsie	i
 8009ff2:	603b      	str	r3, [r7, #0]
}
 8009ff4:	bf00      	nop
 8009ff6:	e7fe      	b.n	8009ff6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ff8:	f7fe ff38 	bl	8008e6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ffc:	4b39      	ldr	r3, [pc, #228]	; (800a0e4 <xTaskResumeAll+0x11c>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	3b01      	subs	r3, #1
 800a002:	4a38      	ldr	r2, [pc, #224]	; (800a0e4 <xTaskResumeAll+0x11c>)
 800a004:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a006:	4b37      	ldr	r3, [pc, #220]	; (800a0e4 <xTaskResumeAll+0x11c>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d162      	bne.n	800a0d4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a00e:	4b36      	ldr	r3, [pc, #216]	; (800a0e8 <xTaskResumeAll+0x120>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d05e      	beq.n	800a0d4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a016:	e02f      	b.n	800a078 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a018:	4b34      	ldr	r3, [pc, #208]	; (800a0ec <xTaskResumeAll+0x124>)
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	3318      	adds	r3, #24
 800a024:	4618      	mov	r0, r3
 800a026:	f7fe fde7 	bl	8008bf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	3304      	adds	r3, #4
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fe fde2 	bl	8008bf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a038:	4b2d      	ldr	r3, [pc, #180]	; (800a0f0 <xTaskResumeAll+0x128>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d903      	bls.n	800a048 <xTaskResumeAll+0x80>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a044:	4a2a      	ldr	r2, [pc, #168]	; (800a0f0 <xTaskResumeAll+0x128>)
 800a046:	6013      	str	r3, [r2, #0]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a04c:	4613      	mov	r3, r2
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	4413      	add	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4a27      	ldr	r2, [pc, #156]	; (800a0f4 <xTaskResumeAll+0x12c>)
 800a056:	441a      	add	r2, r3
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	3304      	adds	r3, #4
 800a05c:	4619      	mov	r1, r3
 800a05e:	4610      	mov	r0, r2
 800a060:	f7fe fd6d 	bl	8008b3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a068:	4b23      	ldr	r3, [pc, #140]	; (800a0f8 <xTaskResumeAll+0x130>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06e:	429a      	cmp	r2, r3
 800a070:	d302      	bcc.n	800a078 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800a072:	4b22      	ldr	r3, [pc, #136]	; (800a0fc <xTaskResumeAll+0x134>)
 800a074:	2201      	movs	r2, #1
 800a076:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a078:	4b1c      	ldr	r3, [pc, #112]	; (800a0ec <xTaskResumeAll+0x124>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1cb      	bne.n	800a018 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d001      	beq.n	800a08a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a086:	f000 fb6f 	bl	800a768 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a08a:	4b1d      	ldr	r3, [pc, #116]	; (800a100 <xTaskResumeAll+0x138>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d010      	beq.n	800a0b8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a096:	f000 f847 	bl	800a128 <xTaskIncrementTick>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d002      	beq.n	800a0a6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800a0a0:	4b16      	ldr	r3, [pc, #88]	; (800a0fc <xTaskResumeAll+0x134>)
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1f1      	bne.n	800a096 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800a0b2:	4b13      	ldr	r3, [pc, #76]	; (800a100 <xTaskResumeAll+0x138>)
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a0b8:	4b10      	ldr	r3, [pc, #64]	; (800a0fc <xTaskResumeAll+0x134>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d009      	beq.n	800a0d4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a0c4:	4b0f      	ldr	r3, [pc, #60]	; (800a104 <xTaskResumeAll+0x13c>)
 800a0c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ca:	601a      	str	r2, [r3, #0]
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0d4:	f7fe fefe 	bl	8008ed4 <vPortExitCritical>

	return xAlreadyYielded;
 800a0d8:	68bb      	ldr	r3, [r7, #8]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	20004fcc 	.word	0x20004fcc
 800a0e8:	20004fa4 	.word	0x20004fa4
 800a0ec:	20004f64 	.word	0x20004f64
 800a0f0:	20004fac 	.word	0x20004fac
 800a0f4:	20004ad4 	.word	0x20004ad4
 800a0f8:	20004ad0 	.word	0x20004ad0
 800a0fc:	20004fb8 	.word	0x20004fb8
 800a100:	20004fb4 	.word	0x20004fb4
 800a104:	e000ed04 	.word	0xe000ed04

0800a108 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a10e:	4b05      	ldr	r3, [pc, #20]	; (800a124 <xTaskGetTickCount+0x1c>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a114:	687b      	ldr	r3, [r7, #4]
}
 800a116:	4618      	mov	r0, r3
 800a118:	370c      	adds	r7, #12
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	20004fa8 	.word	0x20004fa8

0800a128 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b086      	sub	sp, #24
 800a12c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a12e:	2300      	movs	r3, #0
 800a130:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a132:	4b50      	ldr	r3, [pc, #320]	; (800a274 <xTaskIncrementTick+0x14c>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	f040 808b 	bne.w	800a252 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a13c:	4b4e      	ldr	r3, [pc, #312]	; (800a278 <xTaskIncrementTick+0x150>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	3301      	adds	r3, #1
 800a142:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a144:	4a4c      	ldr	r2, [pc, #304]	; (800a278 <xTaskIncrementTick+0x150>)
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d122      	bne.n	800a196 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800a150:	4b4a      	ldr	r3, [pc, #296]	; (800a27c <xTaskIncrementTick+0x154>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00c      	beq.n	800a174 <xTaskIncrementTick+0x4c>
	__asm volatile
 800a15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15e:	b672      	cpsid	i
 800a160:	f383 8811 	msr	BASEPRI, r3
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	b662      	cpsie	i
 800a16e:	603b      	str	r3, [r7, #0]
}
 800a170:	bf00      	nop
 800a172:	e7fe      	b.n	800a172 <xTaskIncrementTick+0x4a>
 800a174:	4b41      	ldr	r3, [pc, #260]	; (800a27c <xTaskIncrementTick+0x154>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	60fb      	str	r3, [r7, #12]
 800a17a:	4b41      	ldr	r3, [pc, #260]	; (800a280 <xTaskIncrementTick+0x158>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a3f      	ldr	r2, [pc, #252]	; (800a27c <xTaskIncrementTick+0x154>)
 800a180:	6013      	str	r3, [r2, #0]
 800a182:	4a3f      	ldr	r2, [pc, #252]	; (800a280 <xTaskIncrementTick+0x158>)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6013      	str	r3, [r2, #0]
 800a188:	4b3e      	ldr	r3, [pc, #248]	; (800a284 <xTaskIncrementTick+0x15c>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	3301      	adds	r3, #1
 800a18e:	4a3d      	ldr	r2, [pc, #244]	; (800a284 <xTaskIncrementTick+0x15c>)
 800a190:	6013      	str	r3, [r2, #0]
 800a192:	f000 fae9 	bl	800a768 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a196:	4b3c      	ldr	r3, [pc, #240]	; (800a288 <xTaskIncrementTick+0x160>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d349      	bcc.n	800a234 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1a0:	4b36      	ldr	r3, [pc, #216]	; (800a27c <xTaskIncrementTick+0x154>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d104      	bne.n	800a1b4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1aa:	4b37      	ldr	r3, [pc, #220]	; (800a288 <xTaskIncrementTick+0x160>)
 800a1ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b0:	601a      	str	r2, [r3, #0]
					break;
 800a1b2:	e03f      	b.n	800a234 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1b4:	4b31      	ldr	r3, [pc, #196]	; (800a27c <xTaskIncrementTick+0x154>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d203      	bcs.n	800a1d4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a1cc:	4a2e      	ldr	r2, [pc, #184]	; (800a288 <xTaskIncrementTick+0x160>)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a1d2:	e02f      	b.n	800a234 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	3304      	adds	r3, #4
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7fe fd0d 	bl	8008bf8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d004      	beq.n	800a1f0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	3318      	adds	r3, #24
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fe fd04 	bl	8008bf8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f4:	4b25      	ldr	r3, [pc, #148]	; (800a28c <xTaskIncrementTick+0x164>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d903      	bls.n	800a204 <xTaskIncrementTick+0xdc>
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a200:	4a22      	ldr	r2, [pc, #136]	; (800a28c <xTaskIncrementTick+0x164>)
 800a202:	6013      	str	r3, [r2, #0]
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a208:	4613      	mov	r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4413      	add	r3, r2
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	4a1f      	ldr	r2, [pc, #124]	; (800a290 <xTaskIncrementTick+0x168>)
 800a212:	441a      	add	r2, r3
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	3304      	adds	r3, #4
 800a218:	4619      	mov	r1, r3
 800a21a:	4610      	mov	r0, r2
 800a21c:	f7fe fc8f 	bl	8008b3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a224:	4b1b      	ldr	r3, [pc, #108]	; (800a294 <xTaskIncrementTick+0x16c>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d3b8      	bcc.n	800a1a0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800a22e:	2301      	movs	r3, #1
 800a230:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a232:	e7b5      	b.n	800a1a0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a234:	4b17      	ldr	r3, [pc, #92]	; (800a294 <xTaskIncrementTick+0x16c>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a23a:	4915      	ldr	r1, [pc, #84]	; (800a290 <xTaskIncrementTick+0x168>)
 800a23c:	4613      	mov	r3, r2
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	4413      	add	r3, r2
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	440b      	add	r3, r1
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d907      	bls.n	800a25c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800a24c:	2301      	movs	r3, #1
 800a24e:	617b      	str	r3, [r7, #20]
 800a250:	e004      	b.n	800a25c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a252:	4b11      	ldr	r3, [pc, #68]	; (800a298 <xTaskIncrementTick+0x170>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	3301      	adds	r3, #1
 800a258:	4a0f      	ldr	r2, [pc, #60]	; (800a298 <xTaskIncrementTick+0x170>)
 800a25a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a25c:	4b0f      	ldr	r3, [pc, #60]	; (800a29c <xTaskIncrementTick+0x174>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d001      	beq.n	800a268 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800a264:	2301      	movs	r3, #1
 800a266:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a268:	697b      	ldr	r3, [r7, #20]
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3718      	adds	r7, #24
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	20004fcc 	.word	0x20004fcc
 800a278:	20004fa8 	.word	0x20004fa8
 800a27c:	20004f5c 	.word	0x20004f5c
 800a280:	20004f60 	.word	0x20004f60
 800a284:	20004fbc 	.word	0x20004fbc
 800a288:	20004fc4 	.word	0x20004fc4
 800a28c:	20004fac 	.word	0x20004fac
 800a290:	20004ad4 	.word	0x20004ad4
 800a294:	20004ad0 	.word	0x20004ad0
 800a298:	20004fb4 	.word	0x20004fb4
 800a29c:	20004fb8 	.word	0x20004fb8

0800a2a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a2a6:	4b2b      	ldr	r3, [pc, #172]	; (800a354 <vTaskSwitchContext+0xb4>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d003      	beq.n	800a2b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a2ae:	4b2a      	ldr	r3, [pc, #168]	; (800a358 <vTaskSwitchContext+0xb8>)
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a2b4:	e048      	b.n	800a348 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800a2b6:	4b28      	ldr	r3, [pc, #160]	; (800a358 <vTaskSwitchContext+0xb8>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2bc:	4b27      	ldr	r3, [pc, #156]	; (800a35c <vTaskSwitchContext+0xbc>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	60fb      	str	r3, [r7, #12]
 800a2c2:	e012      	b.n	800a2ea <vTaskSwitchContext+0x4a>
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10c      	bne.n	800a2e4 <vTaskSwitchContext+0x44>
	__asm volatile
 800a2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ce:	b672      	cpsid	i
 800a2d0:	f383 8811 	msr	BASEPRI, r3
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	f3bf 8f4f 	dsb	sy
 800a2dc:	b662      	cpsie	i
 800a2de:	607b      	str	r3, [r7, #4]
}
 800a2e0:	bf00      	nop
 800a2e2:	e7fe      	b.n	800a2e2 <vTaskSwitchContext+0x42>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	60fb      	str	r3, [r7, #12]
 800a2ea:	491d      	ldr	r1, [pc, #116]	; (800a360 <vTaskSwitchContext+0xc0>)
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	4413      	add	r3, r2
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	440b      	add	r3, r1
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d0e2      	beq.n	800a2c4 <vTaskSwitchContext+0x24>
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	4613      	mov	r3, r2
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	4413      	add	r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4a15      	ldr	r2, [pc, #84]	; (800a360 <vTaskSwitchContext+0xc0>)
 800a30a:	4413      	add	r3, r2
 800a30c:	60bb      	str	r3, [r7, #8]
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	685a      	ldr	r2, [r3, #4]
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	605a      	str	r2, [r3, #4]
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	685a      	ldr	r2, [r3, #4]
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	3308      	adds	r3, #8
 800a320:	429a      	cmp	r2, r3
 800a322:	d104      	bne.n	800a32e <vTaskSwitchContext+0x8e>
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	685a      	ldr	r2, [r3, #4]
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	605a      	str	r2, [r3, #4]
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	4a0b      	ldr	r2, [pc, #44]	; (800a364 <vTaskSwitchContext+0xc4>)
 800a336:	6013      	str	r3, [r2, #0]
 800a338:	4a08      	ldr	r2, [pc, #32]	; (800a35c <vTaskSwitchContext+0xbc>)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a33e:	4b09      	ldr	r3, [pc, #36]	; (800a364 <vTaskSwitchContext+0xc4>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	3354      	adds	r3, #84	; 0x54
 800a344:	4a08      	ldr	r2, [pc, #32]	; (800a368 <vTaskSwitchContext+0xc8>)
 800a346:	6013      	str	r3, [r2, #0]
}
 800a348:	bf00      	nop
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr
 800a354:	20004fcc 	.word	0x20004fcc
 800a358:	20004fb8 	.word	0x20004fb8
 800a35c:	20004fac 	.word	0x20004fac
 800a360:	20004ad4 	.word	0x20004ad4
 800a364:	20004ad0 	.word	0x20004ad0
 800a368:	20000010 	.word	0x20000010

0800a36c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d10c      	bne.n	800a396 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800a37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a380:	b672      	cpsid	i
 800a382:	f383 8811 	msr	BASEPRI, r3
 800a386:	f3bf 8f6f 	isb	sy
 800a38a:	f3bf 8f4f 	dsb	sy
 800a38e:	b662      	cpsie	i
 800a390:	60fb      	str	r3, [r7, #12]
}
 800a392:	bf00      	nop
 800a394:	e7fe      	b.n	800a394 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a396:	4b07      	ldr	r3, [pc, #28]	; (800a3b4 <vTaskPlaceOnEventList+0x48>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	3318      	adds	r3, #24
 800a39c:	4619      	mov	r1, r3
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f7fe fbf1 	bl	8008b86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a3a4:	2101      	movs	r1, #1
 800a3a6:	6838      	ldr	r0, [r7, #0]
 800a3a8:	f000 fa8e 	bl	800a8c8 <prvAddCurrentTaskToDelayedList>
}
 800a3ac:	bf00      	nop
 800a3ae:	3710      	adds	r7, #16
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	20004ad0 	.word	0x20004ad0

0800a3b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d10c      	bne.n	800a3e4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800a3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ce:	b672      	cpsid	i
 800a3d0:	f383 8811 	msr	BASEPRI, r3
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	b662      	cpsie	i
 800a3de:	617b      	str	r3, [r7, #20]
}
 800a3e0:	bf00      	nop
 800a3e2:	e7fe      	b.n	800a3e2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a3e4:	4b0a      	ldr	r3, [pc, #40]	; (800a410 <vTaskPlaceOnEventListRestricted+0x58>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	3318      	adds	r3, #24
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f7fe fba6 	bl	8008b3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d002      	beq.n	800a3fe <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800a3f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a3fe:	6879      	ldr	r1, [r7, #4]
 800a400:	68b8      	ldr	r0, [r7, #8]
 800a402:	f000 fa61 	bl	800a8c8 <prvAddCurrentTaskToDelayedList>
	}
 800a406:	bf00      	nop
 800a408:	3718      	adds	r7, #24
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	20004ad0 	.word	0x20004ad0

0800a414 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b086      	sub	sp, #24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d10c      	bne.n	800a444 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800a42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42e:	b672      	cpsid	i
 800a430:	f383 8811 	msr	BASEPRI, r3
 800a434:	f3bf 8f6f 	isb	sy
 800a438:	f3bf 8f4f 	dsb	sy
 800a43c:	b662      	cpsie	i
 800a43e:	60fb      	str	r3, [r7, #12]
}
 800a440:	bf00      	nop
 800a442:	e7fe      	b.n	800a442 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	3318      	adds	r3, #24
 800a448:	4618      	mov	r0, r3
 800a44a:	f7fe fbd5 	bl	8008bf8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a44e:	4b1e      	ldr	r3, [pc, #120]	; (800a4c8 <xTaskRemoveFromEventList+0xb4>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d11d      	bne.n	800a492 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	3304      	adds	r3, #4
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7fe fbcc 	bl	8008bf8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a464:	4b19      	ldr	r3, [pc, #100]	; (800a4cc <xTaskRemoveFromEventList+0xb8>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d903      	bls.n	800a474 <xTaskRemoveFromEventList+0x60>
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a470:	4a16      	ldr	r2, [pc, #88]	; (800a4cc <xTaskRemoveFromEventList+0xb8>)
 800a472:	6013      	str	r3, [r2, #0]
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a478:	4613      	mov	r3, r2
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	4413      	add	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4a13      	ldr	r2, [pc, #76]	; (800a4d0 <xTaskRemoveFromEventList+0xbc>)
 800a482:	441a      	add	r2, r3
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	3304      	adds	r3, #4
 800a488:	4619      	mov	r1, r3
 800a48a:	4610      	mov	r0, r2
 800a48c:	f7fe fb57 	bl	8008b3e <vListInsertEnd>
 800a490:	e005      	b.n	800a49e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	3318      	adds	r3, #24
 800a496:	4619      	mov	r1, r3
 800a498:	480e      	ldr	r0, [pc, #56]	; (800a4d4 <xTaskRemoveFromEventList+0xc0>)
 800a49a:	f7fe fb50 	bl	8008b3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4a2:	4b0d      	ldr	r3, [pc, #52]	; (800a4d8 <xTaskRemoveFromEventList+0xc4>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d905      	bls.n	800a4b8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a4b0:	4b0a      	ldr	r3, [pc, #40]	; (800a4dc <xTaskRemoveFromEventList+0xc8>)
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	601a      	str	r2, [r3, #0]
 800a4b6:	e001      	b.n	800a4bc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a4bc:	697b      	ldr	r3, [r7, #20]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3718      	adds	r7, #24
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	20004fcc 	.word	0x20004fcc
 800a4cc:	20004fac 	.word	0x20004fac
 800a4d0:	20004ad4 	.word	0x20004ad4
 800a4d4:	20004f64 	.word	0x20004f64
 800a4d8:	20004ad0 	.word	0x20004ad0
 800a4dc:	20004fb8 	.word	0x20004fb8

0800a4e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a4e8:	4b06      	ldr	r3, [pc, #24]	; (800a504 <vTaskInternalSetTimeOutState+0x24>)
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a4f0:	4b05      	ldr	r3, [pc, #20]	; (800a508 <vTaskInternalSetTimeOutState+0x28>)
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	605a      	str	r2, [r3, #4]
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr
 800a504:	20004fbc 	.word	0x20004fbc
 800a508:	20004fa8 	.word	0x20004fa8

0800a50c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10c      	bne.n	800a536 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800a51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a520:	b672      	cpsid	i
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	b662      	cpsie	i
 800a530:	613b      	str	r3, [r7, #16]
}
 800a532:	bf00      	nop
 800a534:	e7fe      	b.n	800a534 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10c      	bne.n	800a556 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800a53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a540:	b672      	cpsid	i
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	b662      	cpsie	i
 800a550:	60fb      	str	r3, [r7, #12]
}
 800a552:	bf00      	nop
 800a554:	e7fe      	b.n	800a554 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800a556:	f7fe fc89 	bl	8008e6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a55a:	4b1d      	ldr	r3, [pc, #116]	; (800a5d0 <xTaskCheckForTimeOut+0xc4>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	69ba      	ldr	r2, [r7, #24]
 800a566:	1ad3      	subs	r3, r2, r3
 800a568:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a572:	d102      	bne.n	800a57a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a574:	2300      	movs	r3, #0
 800a576:	61fb      	str	r3, [r7, #28]
 800a578:	e023      	b.n	800a5c2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	4b15      	ldr	r3, [pc, #84]	; (800a5d4 <xTaskCheckForTimeOut+0xc8>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	429a      	cmp	r2, r3
 800a584:	d007      	beq.n	800a596 <xTaskCheckForTimeOut+0x8a>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	69ba      	ldr	r2, [r7, #24]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d302      	bcc.n	800a596 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a590:	2301      	movs	r3, #1
 800a592:	61fb      	str	r3, [r7, #28]
 800a594:	e015      	b.n	800a5c2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	697a      	ldr	r2, [r7, #20]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d20b      	bcs.n	800a5b8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	1ad2      	subs	r2, r2, r3
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f7ff ff97 	bl	800a4e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	61fb      	str	r3, [r7, #28]
 800a5b6:	e004      	b.n	800a5c2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a5c2:	f7fe fc87 	bl	8008ed4 <vPortExitCritical>

	return xReturn;
 800a5c6:	69fb      	ldr	r3, [r7, #28]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3720      	adds	r7, #32
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	20004fa8 	.word	0x20004fa8
 800a5d4:	20004fbc 	.word	0x20004fbc

0800a5d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a5d8:	b480      	push	{r7}
 800a5da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a5dc:	4b03      	ldr	r3, [pc, #12]	; (800a5ec <vTaskMissedYield+0x14>)
 800a5de:	2201      	movs	r2, #1
 800a5e0:	601a      	str	r2, [r3, #0]
}
 800a5e2:	bf00      	nop
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	20004fb8 	.word	0x20004fb8

0800a5f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a5f8:	f000 f852 	bl	800a6a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a5fc:	4b06      	ldr	r3, [pc, #24]	; (800a618 <prvIdleTask+0x28>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2b01      	cmp	r3, #1
 800a602:	d9f9      	bls.n	800a5f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a604:	4b05      	ldr	r3, [pc, #20]	; (800a61c <prvIdleTask+0x2c>)
 800a606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a60a:	601a      	str	r2, [r3, #0]
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a614:	e7f0      	b.n	800a5f8 <prvIdleTask+0x8>
 800a616:	bf00      	nop
 800a618:	20004ad4 	.word	0x20004ad4
 800a61c:	e000ed04 	.word	0xe000ed04

0800a620 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a626:	2300      	movs	r3, #0
 800a628:	607b      	str	r3, [r7, #4]
 800a62a:	e00c      	b.n	800a646 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	4613      	mov	r3, r2
 800a630:	009b      	lsls	r3, r3, #2
 800a632:	4413      	add	r3, r2
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	4a12      	ldr	r2, [pc, #72]	; (800a680 <prvInitialiseTaskLists+0x60>)
 800a638:	4413      	add	r3, r2
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7fe fa52 	bl	8008ae4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	3301      	adds	r3, #1
 800a644:	607b      	str	r3, [r7, #4]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2b37      	cmp	r3, #55	; 0x37
 800a64a:	d9ef      	bls.n	800a62c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a64c:	480d      	ldr	r0, [pc, #52]	; (800a684 <prvInitialiseTaskLists+0x64>)
 800a64e:	f7fe fa49 	bl	8008ae4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a652:	480d      	ldr	r0, [pc, #52]	; (800a688 <prvInitialiseTaskLists+0x68>)
 800a654:	f7fe fa46 	bl	8008ae4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a658:	480c      	ldr	r0, [pc, #48]	; (800a68c <prvInitialiseTaskLists+0x6c>)
 800a65a:	f7fe fa43 	bl	8008ae4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a65e:	480c      	ldr	r0, [pc, #48]	; (800a690 <prvInitialiseTaskLists+0x70>)
 800a660:	f7fe fa40 	bl	8008ae4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a664:	480b      	ldr	r0, [pc, #44]	; (800a694 <prvInitialiseTaskLists+0x74>)
 800a666:	f7fe fa3d 	bl	8008ae4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a66a:	4b0b      	ldr	r3, [pc, #44]	; (800a698 <prvInitialiseTaskLists+0x78>)
 800a66c:	4a05      	ldr	r2, [pc, #20]	; (800a684 <prvInitialiseTaskLists+0x64>)
 800a66e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a670:	4b0a      	ldr	r3, [pc, #40]	; (800a69c <prvInitialiseTaskLists+0x7c>)
 800a672:	4a05      	ldr	r2, [pc, #20]	; (800a688 <prvInitialiseTaskLists+0x68>)
 800a674:	601a      	str	r2, [r3, #0]
}
 800a676:	bf00      	nop
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	20004ad4 	.word	0x20004ad4
 800a684:	20004f34 	.word	0x20004f34
 800a688:	20004f48 	.word	0x20004f48
 800a68c:	20004f64 	.word	0x20004f64
 800a690:	20004f78 	.word	0x20004f78
 800a694:	20004f90 	.word	0x20004f90
 800a698:	20004f5c 	.word	0x20004f5c
 800a69c:	20004f60 	.word	0x20004f60

0800a6a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6a6:	e019      	b.n	800a6dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a6a8:	f7fe fbe0 	bl	8008e6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6ac:	4b10      	ldr	r3, [pc, #64]	; (800a6f0 <prvCheckTasksWaitingTermination+0x50>)
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	3304      	adds	r3, #4
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7fe fa9d 	bl	8008bf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a6be:	4b0d      	ldr	r3, [pc, #52]	; (800a6f4 <prvCheckTasksWaitingTermination+0x54>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	3b01      	subs	r3, #1
 800a6c4:	4a0b      	ldr	r2, [pc, #44]	; (800a6f4 <prvCheckTasksWaitingTermination+0x54>)
 800a6c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a6c8:	4b0b      	ldr	r3, [pc, #44]	; (800a6f8 <prvCheckTasksWaitingTermination+0x58>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	4a0a      	ldr	r2, [pc, #40]	; (800a6f8 <prvCheckTasksWaitingTermination+0x58>)
 800a6d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a6d2:	f7fe fbff 	bl	8008ed4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f810 	bl	800a6fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6dc:	4b06      	ldr	r3, [pc, #24]	; (800a6f8 <prvCheckTasksWaitingTermination+0x58>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1e1      	bne.n	800a6a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a6e4:	bf00      	nop
 800a6e6:	bf00      	nop
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	20004f78 	.word	0x20004f78
 800a6f4:	20004fa4 	.word	0x20004fa4
 800a6f8:	20004f8c 	.word	0x20004f8c

0800a6fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	3354      	adds	r3, #84	; 0x54
 800a708:	4618      	mov	r0, r3
 800a70a:	f001 fc93 	bl	800c034 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a714:	2b00      	cmp	r3, #0
 800a716:	d108      	bne.n	800a72a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7fe f8c7 	bl	80088b0 <vPortFree>
				vPortFree( pxTCB );
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7fe f8c4 	bl	80088b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a728:	e01a      	b.n	800a760 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a730:	2b01      	cmp	r3, #1
 800a732:	d103      	bne.n	800a73c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f7fe f8bb 	bl	80088b0 <vPortFree>
	}
 800a73a:	e011      	b.n	800a760 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a742:	2b02      	cmp	r3, #2
 800a744:	d00c      	beq.n	800a760 <prvDeleteTCB+0x64>
	__asm volatile
 800a746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74a:	b672      	cpsid	i
 800a74c:	f383 8811 	msr	BASEPRI, r3
 800a750:	f3bf 8f6f 	isb	sy
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	b662      	cpsie	i
 800a75a:	60fb      	str	r3, [r7, #12]
}
 800a75c:	bf00      	nop
 800a75e:	e7fe      	b.n	800a75e <prvDeleteTCB+0x62>
	}
 800a760:	bf00      	nop
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a76e:	4b0c      	ldr	r3, [pc, #48]	; (800a7a0 <prvResetNextTaskUnblockTime+0x38>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d104      	bne.n	800a782 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a778:	4b0a      	ldr	r3, [pc, #40]	; (800a7a4 <prvResetNextTaskUnblockTime+0x3c>)
 800a77a:	f04f 32ff 	mov.w	r2, #4294967295
 800a77e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a780:	e008      	b.n	800a794 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a782:	4b07      	ldr	r3, [pc, #28]	; (800a7a0 <prvResetNextTaskUnblockTime+0x38>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	4a04      	ldr	r2, [pc, #16]	; (800a7a4 <prvResetNextTaskUnblockTime+0x3c>)
 800a792:	6013      	str	r3, [r2, #0]
}
 800a794:	bf00      	nop
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr
 800a7a0:	20004f5c 	.word	0x20004f5c
 800a7a4:	20004fc4 	.word	0x20004fc4

0800a7a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a7ae:	4b0b      	ldr	r3, [pc, #44]	; (800a7dc <xTaskGetSchedulerState+0x34>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d102      	bne.n	800a7bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	607b      	str	r3, [r7, #4]
 800a7ba:	e008      	b.n	800a7ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7bc:	4b08      	ldr	r3, [pc, #32]	; (800a7e0 <xTaskGetSchedulerState+0x38>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d102      	bne.n	800a7ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a7c4:	2302      	movs	r3, #2
 800a7c6:	607b      	str	r3, [r7, #4]
 800a7c8:	e001      	b.n	800a7ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a7ce:	687b      	ldr	r3, [r7, #4]
	}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	20004fb0 	.word	0x20004fb0
 800a7e0:	20004fcc 	.word	0x20004fcc

0800a7e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b086      	sub	sp, #24
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d05a      	beq.n	800a8b0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a7fa:	4b30      	ldr	r3, [pc, #192]	; (800a8bc <xTaskPriorityDisinherit+0xd8>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	693a      	ldr	r2, [r7, #16]
 800a800:	429a      	cmp	r2, r3
 800a802:	d00c      	beq.n	800a81e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a808:	b672      	cpsid	i
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	b662      	cpsie	i
 800a818:	60fb      	str	r3, [r7, #12]
}
 800a81a:	bf00      	nop
 800a81c:	e7fe      	b.n	800a81c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10c      	bne.n	800a840 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82a:	b672      	cpsid	i
 800a82c:	f383 8811 	msr	BASEPRI, r3
 800a830:	f3bf 8f6f 	isb	sy
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	b662      	cpsie	i
 800a83a:	60bb      	str	r3, [r7, #8]
}
 800a83c:	bf00      	nop
 800a83e:	e7fe      	b.n	800a83e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a844:	1e5a      	subs	r2, r3, #1
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a852:	429a      	cmp	r2, r3
 800a854:	d02c      	beq.n	800a8b0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d128      	bne.n	800a8b0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	3304      	adds	r3, #4
 800a862:	4618      	mov	r0, r3
 800a864:	f7fe f9c8 	bl	8008bf8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a874:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a880:	4b0f      	ldr	r3, [pc, #60]	; (800a8c0 <xTaskPriorityDisinherit+0xdc>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	429a      	cmp	r2, r3
 800a886:	d903      	bls.n	800a890 <xTaskPriorityDisinherit+0xac>
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88c:	4a0c      	ldr	r2, [pc, #48]	; (800a8c0 <xTaskPriorityDisinherit+0xdc>)
 800a88e:	6013      	str	r3, [r2, #0]
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a894:	4613      	mov	r3, r2
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	4413      	add	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	4a09      	ldr	r2, [pc, #36]	; (800a8c4 <xTaskPriorityDisinherit+0xe0>)
 800a89e:	441a      	add	r2, r3
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	3304      	adds	r3, #4
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	4610      	mov	r0, r2
 800a8a8:	f7fe f949 	bl	8008b3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a8b0:	697b      	ldr	r3, [r7, #20]
	}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3718      	adds	r7, #24
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	20004ad0 	.word	0x20004ad0
 800a8c0:	20004fac 	.word	0x20004fac
 800a8c4:	20004ad4 	.word	0x20004ad4

0800a8c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a8d2:	4b21      	ldr	r3, [pc, #132]	; (800a958 <prvAddCurrentTaskToDelayedList+0x90>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8d8:	4b20      	ldr	r3, [pc, #128]	; (800a95c <prvAddCurrentTaskToDelayedList+0x94>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	3304      	adds	r3, #4
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7fe f98a 	bl	8008bf8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ea:	d10a      	bne.n	800a902 <prvAddCurrentTaskToDelayedList+0x3a>
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d007      	beq.n	800a902 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8f2:	4b1a      	ldr	r3, [pc, #104]	; (800a95c <prvAddCurrentTaskToDelayedList+0x94>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	3304      	adds	r3, #4
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	4819      	ldr	r0, [pc, #100]	; (800a960 <prvAddCurrentTaskToDelayedList+0x98>)
 800a8fc:	f7fe f91f 	bl	8008b3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a900:	e026      	b.n	800a950 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4413      	add	r3, r2
 800a908:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a90a:	4b14      	ldr	r3, [pc, #80]	; (800a95c <prvAddCurrentTaskToDelayedList+0x94>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a912:	68ba      	ldr	r2, [r7, #8]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	429a      	cmp	r2, r3
 800a918:	d209      	bcs.n	800a92e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a91a:	4b12      	ldr	r3, [pc, #72]	; (800a964 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	4b0f      	ldr	r3, [pc, #60]	; (800a95c <prvAddCurrentTaskToDelayedList+0x94>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3304      	adds	r3, #4
 800a924:	4619      	mov	r1, r3
 800a926:	4610      	mov	r0, r2
 800a928:	f7fe f92d 	bl	8008b86 <vListInsert>
}
 800a92c:	e010      	b.n	800a950 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a92e:	4b0e      	ldr	r3, [pc, #56]	; (800a968 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	4b0a      	ldr	r3, [pc, #40]	; (800a95c <prvAddCurrentTaskToDelayedList+0x94>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	3304      	adds	r3, #4
 800a938:	4619      	mov	r1, r3
 800a93a:	4610      	mov	r0, r2
 800a93c:	f7fe f923 	bl	8008b86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a940:	4b0a      	ldr	r3, [pc, #40]	; (800a96c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	429a      	cmp	r2, r3
 800a948:	d202      	bcs.n	800a950 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a94a:	4a08      	ldr	r2, [pc, #32]	; (800a96c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	6013      	str	r3, [r2, #0]
}
 800a950:	bf00      	nop
 800a952:	3710      	adds	r7, #16
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	20004fa8 	.word	0x20004fa8
 800a95c:	20004ad0 	.word	0x20004ad0
 800a960:	20004f90 	.word	0x20004f90
 800a964:	20004f60 	.word	0x20004f60
 800a968:	20004f5c 	.word	0x20004f5c
 800a96c:	20004fc4 	.word	0x20004fc4

0800a970 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b08a      	sub	sp, #40	; 0x28
 800a974:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a976:	2300      	movs	r3, #0
 800a978:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a97a:	f000 fb15 	bl	800afa8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a97e:	4b1d      	ldr	r3, [pc, #116]	; (800a9f4 <xTimerCreateTimerTask+0x84>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d021      	beq.n	800a9ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a986:	2300      	movs	r3, #0
 800a988:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a98a:	2300      	movs	r3, #0
 800a98c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a98e:	1d3a      	adds	r2, r7, #4
 800a990:	f107 0108 	add.w	r1, r7, #8
 800a994:	f107 030c 	add.w	r3, r7, #12
 800a998:	4618      	mov	r0, r3
 800a99a:	f7fd fea5 	bl	80086e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a99e:	6879      	ldr	r1, [r7, #4]
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	68fa      	ldr	r2, [r7, #12]
 800a9a4:	9202      	str	r2, [sp, #8]
 800a9a6:	9301      	str	r3, [sp, #4]
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	460a      	mov	r2, r1
 800a9b0:	4911      	ldr	r1, [pc, #68]	; (800a9f8 <xTimerCreateTimerTask+0x88>)
 800a9b2:	4812      	ldr	r0, [pc, #72]	; (800a9fc <xTimerCreateTimerTask+0x8c>)
 800a9b4:	f7ff f890 	bl	8009ad8 <xTaskCreateStatic>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	4a11      	ldr	r2, [pc, #68]	; (800aa00 <xTimerCreateTimerTask+0x90>)
 800a9bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a9be:	4b10      	ldr	r3, [pc, #64]	; (800aa00 <xTimerCreateTimerTask+0x90>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d001      	beq.n	800a9ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10c      	bne.n	800a9ea <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800a9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d4:	b672      	cpsid	i
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	b662      	cpsie	i
 800a9e4:	613b      	str	r3, [r7, #16]
}
 800a9e6:	bf00      	nop
 800a9e8:	e7fe      	b.n	800a9e8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a9ea:	697b      	ldr	r3, [r7, #20]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3718      	adds	r7, #24
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	20005000 	.word	0x20005000
 800a9f8:	0800e1d0 	.word	0x0800e1d0
 800a9fc:	0800ab41 	.word	0x0800ab41
 800aa00:	20005004 	.word	0x20005004

0800aa04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b08a      	sub	sp, #40	; 0x28
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]
 800aa10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aa12:	2300      	movs	r3, #0
 800aa14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d10c      	bne.n	800aa36 <xTimerGenericCommand+0x32>
	__asm volatile
 800aa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa20:	b672      	cpsid	i
 800aa22:	f383 8811 	msr	BASEPRI, r3
 800aa26:	f3bf 8f6f 	isb	sy
 800aa2a:	f3bf 8f4f 	dsb	sy
 800aa2e:	b662      	cpsie	i
 800aa30:	623b      	str	r3, [r7, #32]
}
 800aa32:	bf00      	nop
 800aa34:	e7fe      	b.n	800aa34 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aa36:	4b1a      	ldr	r3, [pc, #104]	; (800aaa0 <xTimerGenericCommand+0x9c>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d02a      	beq.n	800aa94 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	2b05      	cmp	r3, #5
 800aa4e:	dc18      	bgt.n	800aa82 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aa50:	f7ff feaa 	bl	800a7a8 <xTaskGetSchedulerState>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d109      	bne.n	800aa6e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aa5a:	4b11      	ldr	r3, [pc, #68]	; (800aaa0 <xTimerGenericCommand+0x9c>)
 800aa5c:	6818      	ldr	r0, [r3, #0]
 800aa5e:	f107 0110 	add.w	r1, r7, #16
 800aa62:	2300      	movs	r3, #0
 800aa64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa66:	f7fe fc3d 	bl	80092e4 <xQueueGenericSend>
 800aa6a:	6278      	str	r0, [r7, #36]	; 0x24
 800aa6c:	e012      	b.n	800aa94 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aa6e:	4b0c      	ldr	r3, [pc, #48]	; (800aaa0 <xTimerGenericCommand+0x9c>)
 800aa70:	6818      	ldr	r0, [r3, #0]
 800aa72:	f107 0110 	add.w	r1, r7, #16
 800aa76:	2300      	movs	r3, #0
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f7fe fc33 	bl	80092e4 <xQueueGenericSend>
 800aa7e:	6278      	str	r0, [r7, #36]	; 0x24
 800aa80:	e008      	b.n	800aa94 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aa82:	4b07      	ldr	r3, [pc, #28]	; (800aaa0 <xTimerGenericCommand+0x9c>)
 800aa84:	6818      	ldr	r0, [r3, #0]
 800aa86:	f107 0110 	add.w	r1, r7, #16
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	683a      	ldr	r2, [r7, #0]
 800aa8e:	f7fe fd2f 	bl	80094f0 <xQueueGenericSendFromISR>
 800aa92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3728      	adds	r7, #40	; 0x28
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	20005000 	.word	0x20005000

0800aaa4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b088      	sub	sp, #32
 800aaa8:	af02      	add	r7, sp, #8
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaae:	4b23      	ldr	r3, [pc, #140]	; (800ab3c <prvProcessExpiredTimer+0x98>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	3304      	adds	r3, #4
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7fe f89b 	bl	8008bf8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aac8:	f003 0304 	and.w	r3, r3, #4
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d024      	beq.n	800ab1a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	699a      	ldr	r2, [r3, #24]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	18d1      	adds	r1, r2, r3
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	683a      	ldr	r2, [r7, #0]
 800aadc:	6978      	ldr	r0, [r7, #20]
 800aade:	f000 f8d3 	bl	800ac88 <prvInsertTimerInActiveList>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d021      	beq.n	800ab2c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aae8:	2300      	movs	r3, #0
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	2300      	movs	r3, #0
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	6978      	ldr	r0, [r7, #20]
 800aaf4:	f7ff ff86 	bl	800aa04 <xTimerGenericCommand>
 800aaf8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d115      	bne.n	800ab2c <prvProcessExpiredTimer+0x88>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	b672      	cpsid	i
 800ab06:	f383 8811 	msr	BASEPRI, r3
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	b662      	cpsie	i
 800ab14:	60fb      	str	r3, [r7, #12]
}
 800ab16:	bf00      	nop
 800ab18:	e7fe      	b.n	800ab18 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab20:	f023 0301 	bic.w	r3, r3, #1
 800ab24:	b2da      	uxtb	r2, r3
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	6a1b      	ldr	r3, [r3, #32]
 800ab30:	6978      	ldr	r0, [r7, #20]
 800ab32:	4798      	blx	r3
}
 800ab34:	bf00      	nop
 800ab36:	3718      	adds	r7, #24
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	20004ff8 	.word	0x20004ff8

0800ab40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab48:	f107 0308 	add.w	r3, r7, #8
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f000 f857 	bl	800ac00 <prvGetNextExpireTime>
 800ab52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	4619      	mov	r1, r3
 800ab58:	68f8      	ldr	r0, [r7, #12]
 800ab5a:	f000 f803 	bl	800ab64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ab5e:	f000 f8d5 	bl	800ad0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab62:	e7f1      	b.n	800ab48 <prvTimerTask+0x8>

0800ab64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ab6e:	f7ff fa1d 	bl	8009fac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab72:	f107 0308 	add.w	r3, r7, #8
 800ab76:	4618      	mov	r0, r3
 800ab78:	f000 f866 	bl	800ac48 <prvSampleTimeNow>
 800ab7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d130      	bne.n	800abe6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d10a      	bne.n	800aba0 <prvProcessTimerOrBlockTask+0x3c>
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d806      	bhi.n	800aba0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ab92:	f7ff fa19 	bl	8009fc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ab96:	68f9      	ldr	r1, [r7, #12]
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f7ff ff83 	bl	800aaa4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ab9e:	e024      	b.n	800abea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d008      	beq.n	800abb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aba6:	4b13      	ldr	r3, [pc, #76]	; (800abf4 <prvProcessTimerOrBlockTask+0x90>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d101      	bne.n	800abb4 <prvProcessTimerOrBlockTask+0x50>
 800abb0:	2301      	movs	r3, #1
 800abb2:	e000      	b.n	800abb6 <prvProcessTimerOrBlockTask+0x52>
 800abb4:	2300      	movs	r3, #0
 800abb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800abb8:	4b0f      	ldr	r3, [pc, #60]	; (800abf8 <prvProcessTimerOrBlockTask+0x94>)
 800abba:	6818      	ldr	r0, [r3, #0]
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	683a      	ldr	r2, [r7, #0]
 800abc4:	4619      	mov	r1, r3
 800abc6:	f7fe ff53 	bl	8009a70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800abca:	f7ff f9fd 	bl	8009fc8 <xTaskResumeAll>
 800abce:	4603      	mov	r3, r0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d10a      	bne.n	800abea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800abd4:	4b09      	ldr	r3, [pc, #36]	; (800abfc <prvProcessTimerOrBlockTask+0x98>)
 800abd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abda:	601a      	str	r2, [r3, #0]
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	f3bf 8f6f 	isb	sy
}
 800abe4:	e001      	b.n	800abea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800abe6:	f7ff f9ef 	bl	8009fc8 <xTaskResumeAll>
}
 800abea:	bf00      	nop
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	20004ffc 	.word	0x20004ffc
 800abf8:	20005000 	.word	0x20005000
 800abfc:	e000ed04 	.word	0xe000ed04

0800ac00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ac08:	4b0e      	ldr	r3, [pc, #56]	; (800ac44 <prvGetNextExpireTime+0x44>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d101      	bne.n	800ac16 <prvGetNextExpireTime+0x16>
 800ac12:	2201      	movs	r2, #1
 800ac14:	e000      	b.n	800ac18 <prvGetNextExpireTime+0x18>
 800ac16:	2200      	movs	r2, #0
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d105      	bne.n	800ac30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac24:	4b07      	ldr	r3, [pc, #28]	; (800ac44 <prvGetNextExpireTime+0x44>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	60fb      	str	r3, [r7, #12]
 800ac2e:	e001      	b.n	800ac34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ac30:	2300      	movs	r3, #0
 800ac32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ac34:	68fb      	ldr	r3, [r7, #12]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3714      	adds	r7, #20
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	20004ff8 	.word	0x20004ff8

0800ac48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ac50:	f7ff fa5a 	bl	800a108 <xTaskGetTickCount>
 800ac54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ac56:	4b0b      	ldr	r3, [pc, #44]	; (800ac84 <prvSampleTimeNow+0x3c>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	68fa      	ldr	r2, [r7, #12]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d205      	bcs.n	800ac6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ac60:	f000 f93c 	bl	800aedc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	601a      	str	r2, [r3, #0]
 800ac6a:	e002      	b.n	800ac72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ac72:	4a04      	ldr	r2, [pc, #16]	; (800ac84 <prvSampleTimeNow+0x3c>)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ac78:	68fb      	ldr	r3, [r7, #12]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3710      	adds	r7, #16
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	20005008 	.word	0x20005008

0800ac88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b086      	sub	sp, #24
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
 800ac94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ac96:	2300      	movs	r3, #0
 800ac98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d812      	bhi.n	800acd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	1ad2      	subs	r2, r2, r3
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	699b      	ldr	r3, [r3, #24]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d302      	bcc.n	800acc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800acbc:	2301      	movs	r3, #1
 800acbe:	617b      	str	r3, [r7, #20]
 800acc0:	e01b      	b.n	800acfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800acc2:	4b10      	ldr	r3, [pc, #64]	; (800ad04 <prvInsertTimerInActiveList+0x7c>)
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	3304      	adds	r3, #4
 800acca:	4619      	mov	r1, r3
 800accc:	4610      	mov	r0, r2
 800acce:	f7fd ff5a 	bl	8008b86 <vListInsert>
 800acd2:	e012      	b.n	800acfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d206      	bcs.n	800acea <prvInsertTimerInActiveList+0x62>
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d302      	bcc.n	800acea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ace4:	2301      	movs	r3, #1
 800ace6:	617b      	str	r3, [r7, #20]
 800ace8:	e007      	b.n	800acfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800acea:	4b07      	ldr	r3, [pc, #28]	; (800ad08 <prvInsertTimerInActiveList+0x80>)
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	3304      	adds	r3, #4
 800acf2:	4619      	mov	r1, r3
 800acf4:	4610      	mov	r0, r2
 800acf6:	f7fd ff46 	bl	8008b86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800acfa:	697b      	ldr	r3, [r7, #20]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3718      	adds	r7, #24
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	20004ffc 	.word	0x20004ffc
 800ad08:	20004ff8 	.word	0x20004ff8

0800ad0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b08e      	sub	sp, #56	; 0x38
 800ad10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad12:	e0d0      	b.n	800aeb6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	da1a      	bge.n	800ad50 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ad1a:	1d3b      	adds	r3, r7, #4
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ad20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d10c      	bne.n	800ad40 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800ad26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2a:	b672      	cpsid	i
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	b662      	cpsie	i
 800ad3a:	61fb      	str	r3, [r7, #28]
}
 800ad3c:	bf00      	nop
 800ad3e:	e7fe      	b.n	800ad3e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ad40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad46:	6850      	ldr	r0, [r2, #4]
 800ad48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad4a:	6892      	ldr	r2, [r2, #8]
 800ad4c:	4611      	mov	r1, r2
 800ad4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f2c0 80ae 	blt.w	800aeb4 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ad5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5e:	695b      	ldr	r3, [r3, #20]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d004      	beq.n	800ad6e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad66:	3304      	adds	r3, #4
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7fd ff45 	bl	8008bf8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad6e:	463b      	mov	r3, r7
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7ff ff69 	bl	800ac48 <prvSampleTimeNow>
 800ad76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b09      	cmp	r3, #9
 800ad7c:	f200 809b 	bhi.w	800aeb6 <prvProcessReceivedCommands+0x1aa>
 800ad80:	a201      	add	r2, pc, #4	; (adr r2, 800ad88 <prvProcessReceivedCommands+0x7c>)
 800ad82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad86:	bf00      	nop
 800ad88:	0800adb1 	.word	0x0800adb1
 800ad8c:	0800adb1 	.word	0x0800adb1
 800ad90:	0800adb1 	.word	0x0800adb1
 800ad94:	0800ae29 	.word	0x0800ae29
 800ad98:	0800ae3d 	.word	0x0800ae3d
 800ad9c:	0800ae8b 	.word	0x0800ae8b
 800ada0:	0800adb1 	.word	0x0800adb1
 800ada4:	0800adb1 	.word	0x0800adb1
 800ada8:	0800ae29 	.word	0x0800ae29
 800adac:	0800ae3d 	.word	0x0800ae3d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800adb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adb6:	f043 0301 	orr.w	r3, r3, #1
 800adba:	b2da      	uxtb	r2, r3
 800adbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800adc2:	68ba      	ldr	r2, [r7, #8]
 800adc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc6:	699b      	ldr	r3, [r3, #24]
 800adc8:	18d1      	adds	r1, r2, r3
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800add0:	f7ff ff5a 	bl	800ac88 <prvInsertTimerInActiveList>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d06d      	beq.n	800aeb6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800adda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800addc:	6a1b      	ldr	r3, [r3, #32]
 800adde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ade0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ade2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ade8:	f003 0304 	and.w	r3, r3, #4
 800adec:	2b00      	cmp	r3, #0
 800adee:	d062      	beq.n	800aeb6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800adf0:	68ba      	ldr	r2, [r7, #8]
 800adf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf4:	699b      	ldr	r3, [r3, #24]
 800adf6:	441a      	add	r2, r3
 800adf8:	2300      	movs	r3, #0
 800adfa:	9300      	str	r3, [sp, #0]
 800adfc:	2300      	movs	r3, #0
 800adfe:	2100      	movs	r1, #0
 800ae00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae02:	f7ff fdff 	bl	800aa04 <xTimerGenericCommand>
 800ae06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ae08:	6a3b      	ldr	r3, [r7, #32]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d153      	bne.n	800aeb6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800ae0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae12:	b672      	cpsid	i
 800ae14:	f383 8811 	msr	BASEPRI, r3
 800ae18:	f3bf 8f6f 	isb	sy
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	b662      	cpsie	i
 800ae22:	61bb      	str	r3, [r7, #24]
}
 800ae24:	bf00      	nop
 800ae26:	e7fe      	b.n	800ae26 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae2e:	f023 0301 	bic.w	r3, r3, #1
 800ae32:	b2da      	uxtb	r2, r3
 800ae34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ae3a:	e03c      	b.n	800aeb6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae42:	f043 0301 	orr.w	r3, r3, #1
 800ae46:	b2da      	uxtb	r2, r3
 800ae48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae52:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ae54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d10c      	bne.n	800ae76 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800ae5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae60:	b672      	cpsid	i
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	b662      	cpsie	i
 800ae70:	617b      	str	r3, [r7, #20]
}
 800ae72:	bf00      	nop
 800ae74:	e7fe      	b.n	800ae74 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ae76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae78:	699a      	ldr	r2, [r3, #24]
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7c:	18d1      	adds	r1, r2, r3
 800ae7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae84:	f7ff ff00 	bl	800ac88 <prvInsertTimerInActiveList>
					break;
 800ae88:	e015      	b.n	800aeb6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ae8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae90:	f003 0302 	and.w	r3, r3, #2
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d103      	bne.n	800aea0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800ae98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae9a:	f7fd fd09 	bl	80088b0 <vPortFree>
 800ae9e:	e00a      	b.n	800aeb6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aea6:	f023 0301 	bic.w	r3, r3, #1
 800aeaa:	b2da      	uxtb	r2, r3
 800aeac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aeb2:	e000      	b.n	800aeb6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aeb4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aeb6:	4b08      	ldr	r3, [pc, #32]	; (800aed8 <prvProcessReceivedCommands+0x1cc>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	1d39      	adds	r1, r7, #4
 800aebc:	2200      	movs	r2, #0
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fe fbb6 	bl	8009630 <xQueueReceive>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f47f af24 	bne.w	800ad14 <prvProcessReceivedCommands+0x8>
	}
}
 800aecc:	bf00      	nop
 800aece:	bf00      	nop
 800aed0:	3730      	adds	r7, #48	; 0x30
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	20005000 	.word	0x20005000

0800aedc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b088      	sub	sp, #32
 800aee0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aee2:	e04a      	b.n	800af7a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aee4:	4b2e      	ldr	r3, [pc, #184]	; (800afa0 <prvSwitchTimerLists+0xc4>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeee:	4b2c      	ldr	r3, [pc, #176]	; (800afa0 <prvSwitchTimerLists+0xc4>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	3304      	adds	r3, #4
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fd fe7b 	bl	8008bf8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	68f8      	ldr	r0, [r7, #12]
 800af08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af10:	f003 0304 	and.w	r3, r3, #4
 800af14:	2b00      	cmp	r3, #0
 800af16:	d030      	beq.n	800af7a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	699b      	ldr	r3, [r3, #24]
 800af1c:	693a      	ldr	r2, [r7, #16]
 800af1e:	4413      	add	r3, r2
 800af20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800af22:	68ba      	ldr	r2, [r7, #8]
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	429a      	cmp	r2, r3
 800af28:	d90e      	bls.n	800af48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af36:	4b1a      	ldr	r3, [pc, #104]	; (800afa0 <prvSwitchTimerLists+0xc4>)
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	3304      	adds	r3, #4
 800af3e:	4619      	mov	r1, r3
 800af40:	4610      	mov	r0, r2
 800af42:	f7fd fe20 	bl	8008b86 <vListInsert>
 800af46:	e018      	b.n	800af7a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af48:	2300      	movs	r3, #0
 800af4a:	9300      	str	r3, [sp, #0]
 800af4c:	2300      	movs	r3, #0
 800af4e:	693a      	ldr	r2, [r7, #16]
 800af50:	2100      	movs	r1, #0
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	f7ff fd56 	bl	800aa04 <xTimerGenericCommand>
 800af58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d10c      	bne.n	800af7a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800af60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af64:	b672      	cpsid	i
 800af66:	f383 8811 	msr	BASEPRI, r3
 800af6a:	f3bf 8f6f 	isb	sy
 800af6e:	f3bf 8f4f 	dsb	sy
 800af72:	b662      	cpsie	i
 800af74:	603b      	str	r3, [r7, #0]
}
 800af76:	bf00      	nop
 800af78:	e7fe      	b.n	800af78 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af7a:	4b09      	ldr	r3, [pc, #36]	; (800afa0 <prvSwitchTimerLists+0xc4>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1af      	bne.n	800aee4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800af84:	4b06      	ldr	r3, [pc, #24]	; (800afa0 <prvSwitchTimerLists+0xc4>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800af8a:	4b06      	ldr	r3, [pc, #24]	; (800afa4 <prvSwitchTimerLists+0xc8>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a04      	ldr	r2, [pc, #16]	; (800afa0 <prvSwitchTimerLists+0xc4>)
 800af90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800af92:	4a04      	ldr	r2, [pc, #16]	; (800afa4 <prvSwitchTimerLists+0xc8>)
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	6013      	str	r3, [r2, #0]
}
 800af98:	bf00      	nop
 800af9a:	3718      	adds	r7, #24
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	20004ff8 	.word	0x20004ff8
 800afa4:	20004ffc 	.word	0x20004ffc

0800afa8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800afae:	f7fd ff5d 	bl	8008e6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800afb2:	4b15      	ldr	r3, [pc, #84]	; (800b008 <prvCheckForValidListAndQueue+0x60>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d120      	bne.n	800affc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800afba:	4814      	ldr	r0, [pc, #80]	; (800b00c <prvCheckForValidListAndQueue+0x64>)
 800afbc:	f7fd fd92 	bl	8008ae4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800afc0:	4813      	ldr	r0, [pc, #76]	; (800b010 <prvCheckForValidListAndQueue+0x68>)
 800afc2:	f7fd fd8f 	bl	8008ae4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800afc6:	4b13      	ldr	r3, [pc, #76]	; (800b014 <prvCheckForValidListAndQueue+0x6c>)
 800afc8:	4a10      	ldr	r2, [pc, #64]	; (800b00c <prvCheckForValidListAndQueue+0x64>)
 800afca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800afcc:	4b12      	ldr	r3, [pc, #72]	; (800b018 <prvCheckForValidListAndQueue+0x70>)
 800afce:	4a10      	ldr	r2, [pc, #64]	; (800b010 <prvCheckForValidListAndQueue+0x68>)
 800afd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800afd2:	2300      	movs	r3, #0
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	4b11      	ldr	r3, [pc, #68]	; (800b01c <prvCheckForValidListAndQueue+0x74>)
 800afd8:	4a11      	ldr	r2, [pc, #68]	; (800b020 <prvCheckForValidListAndQueue+0x78>)
 800afda:	2110      	movs	r1, #16
 800afdc:	200a      	movs	r0, #10
 800afde:	f7fe f8db 	bl	8009198 <xQueueGenericCreateStatic>
 800afe2:	4603      	mov	r3, r0
 800afe4:	4a08      	ldr	r2, [pc, #32]	; (800b008 <prvCheckForValidListAndQueue+0x60>)
 800afe6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800afe8:	4b07      	ldr	r3, [pc, #28]	; (800b008 <prvCheckForValidListAndQueue+0x60>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d005      	beq.n	800affc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aff0:	4b05      	ldr	r3, [pc, #20]	; (800b008 <prvCheckForValidListAndQueue+0x60>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	490b      	ldr	r1, [pc, #44]	; (800b024 <prvCheckForValidListAndQueue+0x7c>)
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fe fd10 	bl	8009a1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800affc:	f7fd ff6a 	bl	8008ed4 <vPortExitCritical>
}
 800b000:	bf00      	nop
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	20005000 	.word	0x20005000
 800b00c:	20004fd0 	.word	0x20004fd0
 800b010:	20004fe4 	.word	0x20004fe4
 800b014:	20004ff8 	.word	0x20004ff8
 800b018:	20004ffc 	.word	0x20004ffc
 800b01c:	200050ac 	.word	0x200050ac
 800b020:	2000500c 	.word	0x2000500c
 800b024:	0800e1d8 	.word	0x0800e1d8

0800b028 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 800b036:	1c5a      	adds	r2, r3, #1
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8c3 2594 	str.w	r2, [r3, #1428]	; 0x594
  USBH_HandleSof(phost);
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 f804 	bl	800b04c <USBH_HandleSof>
}
 800b044:	bf00      	nop
 800b046:	3708      	adds	r7, #8
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	2b0b      	cmp	r3, #11
 800b05c:	d10a      	bne.n	800b074 <USBH_HandleSof+0x28>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800b064:	2b00      	cmp	r3, #0
 800b066:	d005      	beq.n	800b074 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800b06e:	699b      	ldr	r3, [r3, #24]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	4798      	blx	r3
  }
}
 800b074:	bf00      	nop
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 05a8 	ldr.w	r0, [r3, #1448]	; 0x5a8
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f503 61b6 	add.w	r1, r3, #1456	; 0x5b0
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f7fd fa92 	bl	80085cc <osMessageQueuePut>
#endif
#endif

  return;
 800b0a8:	bf00      	nop
}
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b0c0:	bf00      	nop
}
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 05a8 	ldr.w	r0, [r3, #1448]	; 0x5a8
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f503 61b6 	add.w	r1, r3, #1456	; 0x5b0
 800b100:	2300      	movs	r3, #0
 800b102:	2200      	movs	r2, #0
 800b104:	f7fd fa62 	bl	80085cc <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3708      	adds	r7, #8
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b082      	sub	sp, #8
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2201      	movs	r2, #1
 800b11e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f7f6 fca5 	bl	8001a82 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	791b      	ldrb	r3, [r3, #4]
 800b13c:	4619      	mov	r1, r3
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 f830 	bl	800b1a4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	795b      	ldrb	r3, [r3, #5]
 800b148:	4619      	mov	r1, r3
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 f82a 	bl	800b1a4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 05a8 	ldr.w	r0, [r3, #1448]	; 0x5a8
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f503 61b6 	add.w	r1, r3, #1456	; 0x5b0
 800b164:	2300      	movs	r3, #0
 800b166:	2200      	movs	r2, #0
 800b168:	f7fd fa30 	bl	80085cc <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800b16c:	2300      	movs	r3, #0
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3708      	adds	r7, #8
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b082      	sub	sp, #8
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2201      	movs	r2, #1
 800b182:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 05a8 	ldr.w	r0, [r3, #1448]	; 0x5a8
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f503 61b6 	add.w	r1, r3, #1456	; 0x5b0
 800b192:	2300      	movs	r3, #0
 800b194:	2200      	movs	r2, #0
 800b196:	f7fd fa19 	bl	80085cc <osMessageQueuePut>
#endif

  return USBH_OK;
 800b19a:	2300      	movs	r3, #0
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3708      	adds	r7, #8
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b1b0:	78fb      	ldrb	r3, [r7, #3]
 800b1b2:	2b0f      	cmp	r3, #15
 800b1b4:	d80f      	bhi.n	800b1d6 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b1b6:	78fb      	ldrb	r3, [r7, #3]
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4413      	add	r3, r2
 800b1c2:	685a      	ldr	r2, [r3, #4]
 800b1c4:	78fb      	ldrb	r3, [r7, #3]
 800b1c6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b1ca:	6879      	ldr	r1, [r7, #4]
 800b1cc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	440b      	add	r3, r1
 800b1d4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <__errno>:
 800b1e4:	4b01      	ldr	r3, [pc, #4]	; (800b1ec <__errno+0x8>)
 800b1e6:	6818      	ldr	r0, [r3, #0]
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	20000010 	.word	0x20000010

0800b1f0 <std>:
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	b510      	push	{r4, lr}
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	e9c0 3300 	strd	r3, r3, [r0]
 800b1fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1fe:	6083      	str	r3, [r0, #8]
 800b200:	8181      	strh	r1, [r0, #12]
 800b202:	6643      	str	r3, [r0, #100]	; 0x64
 800b204:	81c2      	strh	r2, [r0, #14]
 800b206:	6183      	str	r3, [r0, #24]
 800b208:	4619      	mov	r1, r3
 800b20a:	2208      	movs	r2, #8
 800b20c:	305c      	adds	r0, #92	; 0x5c
 800b20e:	f000 f923 	bl	800b458 <memset>
 800b212:	4b05      	ldr	r3, [pc, #20]	; (800b228 <std+0x38>)
 800b214:	6263      	str	r3, [r4, #36]	; 0x24
 800b216:	4b05      	ldr	r3, [pc, #20]	; (800b22c <std+0x3c>)
 800b218:	62a3      	str	r3, [r4, #40]	; 0x28
 800b21a:	4b05      	ldr	r3, [pc, #20]	; (800b230 <std+0x40>)
 800b21c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b21e:	4b05      	ldr	r3, [pc, #20]	; (800b234 <std+0x44>)
 800b220:	6224      	str	r4, [r4, #32]
 800b222:	6323      	str	r3, [r4, #48]	; 0x30
 800b224:	bd10      	pop	{r4, pc}
 800b226:	bf00      	nop
 800b228:	0800c10d 	.word	0x0800c10d
 800b22c:	0800c12f 	.word	0x0800c12f
 800b230:	0800c167 	.word	0x0800c167
 800b234:	0800c18b 	.word	0x0800c18b

0800b238 <_cleanup_r>:
 800b238:	4901      	ldr	r1, [pc, #4]	; (800b240 <_cleanup_r+0x8>)
 800b23a:	f000 b8af 	b.w	800b39c <_fwalk_reent>
 800b23e:	bf00      	nop
 800b240:	0800d159 	.word	0x0800d159

0800b244 <__sfmoreglue>:
 800b244:	b570      	push	{r4, r5, r6, lr}
 800b246:	2268      	movs	r2, #104	; 0x68
 800b248:	1e4d      	subs	r5, r1, #1
 800b24a:	4355      	muls	r5, r2
 800b24c:	460e      	mov	r6, r1
 800b24e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b252:	f000 f975 	bl	800b540 <_malloc_r>
 800b256:	4604      	mov	r4, r0
 800b258:	b140      	cbz	r0, 800b26c <__sfmoreglue+0x28>
 800b25a:	2100      	movs	r1, #0
 800b25c:	e9c0 1600 	strd	r1, r6, [r0]
 800b260:	300c      	adds	r0, #12
 800b262:	60a0      	str	r0, [r4, #8]
 800b264:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b268:	f000 f8f6 	bl	800b458 <memset>
 800b26c:	4620      	mov	r0, r4
 800b26e:	bd70      	pop	{r4, r5, r6, pc}

0800b270 <__sfp_lock_acquire>:
 800b270:	4801      	ldr	r0, [pc, #4]	; (800b278 <__sfp_lock_acquire+0x8>)
 800b272:	f000 b8d8 	b.w	800b426 <__retarget_lock_acquire_recursive>
 800b276:	bf00      	nop
 800b278:	200050fd 	.word	0x200050fd

0800b27c <__sfp_lock_release>:
 800b27c:	4801      	ldr	r0, [pc, #4]	; (800b284 <__sfp_lock_release+0x8>)
 800b27e:	f000 b8d3 	b.w	800b428 <__retarget_lock_release_recursive>
 800b282:	bf00      	nop
 800b284:	200050fd 	.word	0x200050fd

0800b288 <__sinit_lock_acquire>:
 800b288:	4801      	ldr	r0, [pc, #4]	; (800b290 <__sinit_lock_acquire+0x8>)
 800b28a:	f000 b8cc 	b.w	800b426 <__retarget_lock_acquire_recursive>
 800b28e:	bf00      	nop
 800b290:	200050fe 	.word	0x200050fe

0800b294 <__sinit_lock_release>:
 800b294:	4801      	ldr	r0, [pc, #4]	; (800b29c <__sinit_lock_release+0x8>)
 800b296:	f000 b8c7 	b.w	800b428 <__retarget_lock_release_recursive>
 800b29a:	bf00      	nop
 800b29c:	200050fe 	.word	0x200050fe

0800b2a0 <__sinit>:
 800b2a0:	b510      	push	{r4, lr}
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	f7ff fff0 	bl	800b288 <__sinit_lock_acquire>
 800b2a8:	69a3      	ldr	r3, [r4, #24]
 800b2aa:	b11b      	cbz	r3, 800b2b4 <__sinit+0x14>
 800b2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2b0:	f7ff bff0 	b.w	800b294 <__sinit_lock_release>
 800b2b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b2b8:	6523      	str	r3, [r4, #80]	; 0x50
 800b2ba:	4b13      	ldr	r3, [pc, #76]	; (800b308 <__sinit+0x68>)
 800b2bc:	4a13      	ldr	r2, [pc, #76]	; (800b30c <__sinit+0x6c>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b2c2:	42a3      	cmp	r3, r4
 800b2c4:	bf04      	itt	eq
 800b2c6:	2301      	moveq	r3, #1
 800b2c8:	61a3      	streq	r3, [r4, #24]
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f000 f820 	bl	800b310 <__sfp>
 800b2d0:	6060      	str	r0, [r4, #4]
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f000 f81c 	bl	800b310 <__sfp>
 800b2d8:	60a0      	str	r0, [r4, #8]
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f000 f818 	bl	800b310 <__sfp>
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	60e0      	str	r0, [r4, #12]
 800b2e4:	2104      	movs	r1, #4
 800b2e6:	6860      	ldr	r0, [r4, #4]
 800b2e8:	f7ff ff82 	bl	800b1f0 <std>
 800b2ec:	68a0      	ldr	r0, [r4, #8]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	2109      	movs	r1, #9
 800b2f2:	f7ff ff7d 	bl	800b1f0 <std>
 800b2f6:	68e0      	ldr	r0, [r4, #12]
 800b2f8:	2202      	movs	r2, #2
 800b2fa:	2112      	movs	r1, #18
 800b2fc:	f7ff ff78 	bl	800b1f0 <std>
 800b300:	2301      	movs	r3, #1
 800b302:	61a3      	str	r3, [r4, #24]
 800b304:	e7d2      	b.n	800b2ac <__sinit+0xc>
 800b306:	bf00      	nop
 800b308:	0800e27c 	.word	0x0800e27c
 800b30c:	0800b239 	.word	0x0800b239

0800b310 <__sfp>:
 800b310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b312:	4607      	mov	r7, r0
 800b314:	f7ff ffac 	bl	800b270 <__sfp_lock_acquire>
 800b318:	4b1e      	ldr	r3, [pc, #120]	; (800b394 <__sfp+0x84>)
 800b31a:	681e      	ldr	r6, [r3, #0]
 800b31c:	69b3      	ldr	r3, [r6, #24]
 800b31e:	b913      	cbnz	r3, 800b326 <__sfp+0x16>
 800b320:	4630      	mov	r0, r6
 800b322:	f7ff ffbd 	bl	800b2a0 <__sinit>
 800b326:	3648      	adds	r6, #72	; 0x48
 800b328:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b32c:	3b01      	subs	r3, #1
 800b32e:	d503      	bpl.n	800b338 <__sfp+0x28>
 800b330:	6833      	ldr	r3, [r6, #0]
 800b332:	b30b      	cbz	r3, 800b378 <__sfp+0x68>
 800b334:	6836      	ldr	r6, [r6, #0]
 800b336:	e7f7      	b.n	800b328 <__sfp+0x18>
 800b338:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b33c:	b9d5      	cbnz	r5, 800b374 <__sfp+0x64>
 800b33e:	4b16      	ldr	r3, [pc, #88]	; (800b398 <__sfp+0x88>)
 800b340:	60e3      	str	r3, [r4, #12]
 800b342:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b346:	6665      	str	r5, [r4, #100]	; 0x64
 800b348:	f000 f86c 	bl	800b424 <__retarget_lock_init_recursive>
 800b34c:	f7ff ff96 	bl	800b27c <__sfp_lock_release>
 800b350:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b354:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b358:	6025      	str	r5, [r4, #0]
 800b35a:	61a5      	str	r5, [r4, #24]
 800b35c:	2208      	movs	r2, #8
 800b35e:	4629      	mov	r1, r5
 800b360:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b364:	f000 f878 	bl	800b458 <memset>
 800b368:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b36c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b370:	4620      	mov	r0, r4
 800b372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b374:	3468      	adds	r4, #104	; 0x68
 800b376:	e7d9      	b.n	800b32c <__sfp+0x1c>
 800b378:	2104      	movs	r1, #4
 800b37a:	4638      	mov	r0, r7
 800b37c:	f7ff ff62 	bl	800b244 <__sfmoreglue>
 800b380:	4604      	mov	r4, r0
 800b382:	6030      	str	r0, [r6, #0]
 800b384:	2800      	cmp	r0, #0
 800b386:	d1d5      	bne.n	800b334 <__sfp+0x24>
 800b388:	f7ff ff78 	bl	800b27c <__sfp_lock_release>
 800b38c:	230c      	movs	r3, #12
 800b38e:	603b      	str	r3, [r7, #0]
 800b390:	e7ee      	b.n	800b370 <__sfp+0x60>
 800b392:	bf00      	nop
 800b394:	0800e27c 	.word	0x0800e27c
 800b398:	ffff0001 	.word	0xffff0001

0800b39c <_fwalk_reent>:
 800b39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3a0:	4606      	mov	r6, r0
 800b3a2:	4688      	mov	r8, r1
 800b3a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b3a8:	2700      	movs	r7, #0
 800b3aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b3ae:	f1b9 0901 	subs.w	r9, r9, #1
 800b3b2:	d505      	bpl.n	800b3c0 <_fwalk_reent+0x24>
 800b3b4:	6824      	ldr	r4, [r4, #0]
 800b3b6:	2c00      	cmp	r4, #0
 800b3b8:	d1f7      	bne.n	800b3aa <_fwalk_reent+0xe>
 800b3ba:	4638      	mov	r0, r7
 800b3bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3c0:	89ab      	ldrh	r3, [r5, #12]
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d907      	bls.n	800b3d6 <_fwalk_reent+0x3a>
 800b3c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	d003      	beq.n	800b3d6 <_fwalk_reent+0x3a>
 800b3ce:	4629      	mov	r1, r5
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	47c0      	blx	r8
 800b3d4:	4307      	orrs	r7, r0
 800b3d6:	3568      	adds	r5, #104	; 0x68
 800b3d8:	e7e9      	b.n	800b3ae <_fwalk_reent+0x12>
	...

0800b3dc <__libc_init_array>:
 800b3dc:	b570      	push	{r4, r5, r6, lr}
 800b3de:	4d0d      	ldr	r5, [pc, #52]	; (800b414 <__libc_init_array+0x38>)
 800b3e0:	4c0d      	ldr	r4, [pc, #52]	; (800b418 <__libc_init_array+0x3c>)
 800b3e2:	1b64      	subs	r4, r4, r5
 800b3e4:	10a4      	asrs	r4, r4, #2
 800b3e6:	2600      	movs	r6, #0
 800b3e8:	42a6      	cmp	r6, r4
 800b3ea:	d109      	bne.n	800b400 <__libc_init_array+0x24>
 800b3ec:	4d0b      	ldr	r5, [pc, #44]	; (800b41c <__libc_init_array+0x40>)
 800b3ee:	4c0c      	ldr	r4, [pc, #48]	; (800b420 <__libc_init_array+0x44>)
 800b3f0:	f002 fd38 	bl	800de64 <_init>
 800b3f4:	1b64      	subs	r4, r4, r5
 800b3f6:	10a4      	asrs	r4, r4, #2
 800b3f8:	2600      	movs	r6, #0
 800b3fa:	42a6      	cmp	r6, r4
 800b3fc:	d105      	bne.n	800b40a <__libc_init_array+0x2e>
 800b3fe:	bd70      	pop	{r4, r5, r6, pc}
 800b400:	f855 3b04 	ldr.w	r3, [r5], #4
 800b404:	4798      	blx	r3
 800b406:	3601      	adds	r6, #1
 800b408:	e7ee      	b.n	800b3e8 <__libc_init_array+0xc>
 800b40a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b40e:	4798      	blx	r3
 800b410:	3601      	adds	r6, #1
 800b412:	e7f2      	b.n	800b3fa <__libc_init_array+0x1e>
 800b414:	0800e5fc 	.word	0x0800e5fc
 800b418:	0800e5fc 	.word	0x0800e5fc
 800b41c:	0800e5fc 	.word	0x0800e5fc
 800b420:	0800e600 	.word	0x0800e600

0800b424 <__retarget_lock_init_recursive>:
 800b424:	4770      	bx	lr

0800b426 <__retarget_lock_acquire_recursive>:
 800b426:	4770      	bx	lr

0800b428 <__retarget_lock_release_recursive>:
 800b428:	4770      	bx	lr
	...

0800b42c <malloc>:
 800b42c:	4b02      	ldr	r3, [pc, #8]	; (800b438 <malloc+0xc>)
 800b42e:	4601      	mov	r1, r0
 800b430:	6818      	ldr	r0, [r3, #0]
 800b432:	f000 b885 	b.w	800b540 <_malloc_r>
 800b436:	bf00      	nop
 800b438:	20000010 	.word	0x20000010

0800b43c <memcpy>:
 800b43c:	440a      	add	r2, r1
 800b43e:	4291      	cmp	r1, r2
 800b440:	f100 33ff 	add.w	r3, r0, #4294967295
 800b444:	d100      	bne.n	800b448 <memcpy+0xc>
 800b446:	4770      	bx	lr
 800b448:	b510      	push	{r4, lr}
 800b44a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b44e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b452:	4291      	cmp	r1, r2
 800b454:	d1f9      	bne.n	800b44a <memcpy+0xe>
 800b456:	bd10      	pop	{r4, pc}

0800b458 <memset>:
 800b458:	4402      	add	r2, r0
 800b45a:	4603      	mov	r3, r0
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d100      	bne.n	800b462 <memset+0xa>
 800b460:	4770      	bx	lr
 800b462:	f803 1b01 	strb.w	r1, [r3], #1
 800b466:	e7f9      	b.n	800b45c <memset+0x4>

0800b468 <_free_r>:
 800b468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b46a:	2900      	cmp	r1, #0
 800b46c:	d044      	beq.n	800b4f8 <_free_r+0x90>
 800b46e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b472:	9001      	str	r0, [sp, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	f1a1 0404 	sub.w	r4, r1, #4
 800b47a:	bfb8      	it	lt
 800b47c:	18e4      	addlt	r4, r4, r3
 800b47e:	f001 ff23 	bl	800d2c8 <__malloc_lock>
 800b482:	4a1e      	ldr	r2, [pc, #120]	; (800b4fc <_free_r+0x94>)
 800b484:	9801      	ldr	r0, [sp, #4]
 800b486:	6813      	ldr	r3, [r2, #0]
 800b488:	b933      	cbnz	r3, 800b498 <_free_r+0x30>
 800b48a:	6063      	str	r3, [r4, #4]
 800b48c:	6014      	str	r4, [r2, #0]
 800b48e:	b003      	add	sp, #12
 800b490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b494:	f001 bf1e 	b.w	800d2d4 <__malloc_unlock>
 800b498:	42a3      	cmp	r3, r4
 800b49a:	d908      	bls.n	800b4ae <_free_r+0x46>
 800b49c:	6825      	ldr	r5, [r4, #0]
 800b49e:	1961      	adds	r1, r4, r5
 800b4a0:	428b      	cmp	r3, r1
 800b4a2:	bf01      	itttt	eq
 800b4a4:	6819      	ldreq	r1, [r3, #0]
 800b4a6:	685b      	ldreq	r3, [r3, #4]
 800b4a8:	1949      	addeq	r1, r1, r5
 800b4aa:	6021      	streq	r1, [r4, #0]
 800b4ac:	e7ed      	b.n	800b48a <_free_r+0x22>
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	b10b      	cbz	r3, 800b4b8 <_free_r+0x50>
 800b4b4:	42a3      	cmp	r3, r4
 800b4b6:	d9fa      	bls.n	800b4ae <_free_r+0x46>
 800b4b8:	6811      	ldr	r1, [r2, #0]
 800b4ba:	1855      	adds	r5, r2, r1
 800b4bc:	42a5      	cmp	r5, r4
 800b4be:	d10b      	bne.n	800b4d8 <_free_r+0x70>
 800b4c0:	6824      	ldr	r4, [r4, #0]
 800b4c2:	4421      	add	r1, r4
 800b4c4:	1854      	adds	r4, r2, r1
 800b4c6:	42a3      	cmp	r3, r4
 800b4c8:	6011      	str	r1, [r2, #0]
 800b4ca:	d1e0      	bne.n	800b48e <_free_r+0x26>
 800b4cc:	681c      	ldr	r4, [r3, #0]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	6053      	str	r3, [r2, #4]
 800b4d2:	4421      	add	r1, r4
 800b4d4:	6011      	str	r1, [r2, #0]
 800b4d6:	e7da      	b.n	800b48e <_free_r+0x26>
 800b4d8:	d902      	bls.n	800b4e0 <_free_r+0x78>
 800b4da:	230c      	movs	r3, #12
 800b4dc:	6003      	str	r3, [r0, #0]
 800b4de:	e7d6      	b.n	800b48e <_free_r+0x26>
 800b4e0:	6825      	ldr	r5, [r4, #0]
 800b4e2:	1961      	adds	r1, r4, r5
 800b4e4:	428b      	cmp	r3, r1
 800b4e6:	bf04      	itt	eq
 800b4e8:	6819      	ldreq	r1, [r3, #0]
 800b4ea:	685b      	ldreq	r3, [r3, #4]
 800b4ec:	6063      	str	r3, [r4, #4]
 800b4ee:	bf04      	itt	eq
 800b4f0:	1949      	addeq	r1, r1, r5
 800b4f2:	6021      	streq	r1, [r4, #0]
 800b4f4:	6054      	str	r4, [r2, #4]
 800b4f6:	e7ca      	b.n	800b48e <_free_r+0x26>
 800b4f8:	b003      	add	sp, #12
 800b4fa:	bd30      	pop	{r4, r5, pc}
 800b4fc:	20005100 	.word	0x20005100

0800b500 <sbrk_aligned>:
 800b500:	b570      	push	{r4, r5, r6, lr}
 800b502:	4e0e      	ldr	r6, [pc, #56]	; (800b53c <sbrk_aligned+0x3c>)
 800b504:	460c      	mov	r4, r1
 800b506:	6831      	ldr	r1, [r6, #0]
 800b508:	4605      	mov	r5, r0
 800b50a:	b911      	cbnz	r1, 800b512 <sbrk_aligned+0x12>
 800b50c:	f000 fdee 	bl	800c0ec <_sbrk_r>
 800b510:	6030      	str	r0, [r6, #0]
 800b512:	4621      	mov	r1, r4
 800b514:	4628      	mov	r0, r5
 800b516:	f000 fde9 	bl	800c0ec <_sbrk_r>
 800b51a:	1c43      	adds	r3, r0, #1
 800b51c:	d00a      	beq.n	800b534 <sbrk_aligned+0x34>
 800b51e:	1cc4      	adds	r4, r0, #3
 800b520:	f024 0403 	bic.w	r4, r4, #3
 800b524:	42a0      	cmp	r0, r4
 800b526:	d007      	beq.n	800b538 <sbrk_aligned+0x38>
 800b528:	1a21      	subs	r1, r4, r0
 800b52a:	4628      	mov	r0, r5
 800b52c:	f000 fdde 	bl	800c0ec <_sbrk_r>
 800b530:	3001      	adds	r0, #1
 800b532:	d101      	bne.n	800b538 <sbrk_aligned+0x38>
 800b534:	f04f 34ff 	mov.w	r4, #4294967295
 800b538:	4620      	mov	r0, r4
 800b53a:	bd70      	pop	{r4, r5, r6, pc}
 800b53c:	20005104 	.word	0x20005104

0800b540 <_malloc_r>:
 800b540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b544:	1ccd      	adds	r5, r1, #3
 800b546:	f025 0503 	bic.w	r5, r5, #3
 800b54a:	3508      	adds	r5, #8
 800b54c:	2d0c      	cmp	r5, #12
 800b54e:	bf38      	it	cc
 800b550:	250c      	movcc	r5, #12
 800b552:	2d00      	cmp	r5, #0
 800b554:	4607      	mov	r7, r0
 800b556:	db01      	blt.n	800b55c <_malloc_r+0x1c>
 800b558:	42a9      	cmp	r1, r5
 800b55a:	d905      	bls.n	800b568 <_malloc_r+0x28>
 800b55c:	230c      	movs	r3, #12
 800b55e:	603b      	str	r3, [r7, #0]
 800b560:	2600      	movs	r6, #0
 800b562:	4630      	mov	r0, r6
 800b564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b568:	4e2e      	ldr	r6, [pc, #184]	; (800b624 <_malloc_r+0xe4>)
 800b56a:	f001 fead 	bl	800d2c8 <__malloc_lock>
 800b56e:	6833      	ldr	r3, [r6, #0]
 800b570:	461c      	mov	r4, r3
 800b572:	bb34      	cbnz	r4, 800b5c2 <_malloc_r+0x82>
 800b574:	4629      	mov	r1, r5
 800b576:	4638      	mov	r0, r7
 800b578:	f7ff ffc2 	bl	800b500 <sbrk_aligned>
 800b57c:	1c43      	adds	r3, r0, #1
 800b57e:	4604      	mov	r4, r0
 800b580:	d14d      	bne.n	800b61e <_malloc_r+0xde>
 800b582:	6834      	ldr	r4, [r6, #0]
 800b584:	4626      	mov	r6, r4
 800b586:	2e00      	cmp	r6, #0
 800b588:	d140      	bne.n	800b60c <_malloc_r+0xcc>
 800b58a:	6823      	ldr	r3, [r4, #0]
 800b58c:	4631      	mov	r1, r6
 800b58e:	4638      	mov	r0, r7
 800b590:	eb04 0803 	add.w	r8, r4, r3
 800b594:	f000 fdaa 	bl	800c0ec <_sbrk_r>
 800b598:	4580      	cmp	r8, r0
 800b59a:	d13a      	bne.n	800b612 <_malloc_r+0xd2>
 800b59c:	6821      	ldr	r1, [r4, #0]
 800b59e:	3503      	adds	r5, #3
 800b5a0:	1a6d      	subs	r5, r5, r1
 800b5a2:	f025 0503 	bic.w	r5, r5, #3
 800b5a6:	3508      	adds	r5, #8
 800b5a8:	2d0c      	cmp	r5, #12
 800b5aa:	bf38      	it	cc
 800b5ac:	250c      	movcc	r5, #12
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	4638      	mov	r0, r7
 800b5b2:	f7ff ffa5 	bl	800b500 <sbrk_aligned>
 800b5b6:	3001      	adds	r0, #1
 800b5b8:	d02b      	beq.n	800b612 <_malloc_r+0xd2>
 800b5ba:	6823      	ldr	r3, [r4, #0]
 800b5bc:	442b      	add	r3, r5
 800b5be:	6023      	str	r3, [r4, #0]
 800b5c0:	e00e      	b.n	800b5e0 <_malloc_r+0xa0>
 800b5c2:	6822      	ldr	r2, [r4, #0]
 800b5c4:	1b52      	subs	r2, r2, r5
 800b5c6:	d41e      	bmi.n	800b606 <_malloc_r+0xc6>
 800b5c8:	2a0b      	cmp	r2, #11
 800b5ca:	d916      	bls.n	800b5fa <_malloc_r+0xba>
 800b5cc:	1961      	adds	r1, r4, r5
 800b5ce:	42a3      	cmp	r3, r4
 800b5d0:	6025      	str	r5, [r4, #0]
 800b5d2:	bf18      	it	ne
 800b5d4:	6059      	strne	r1, [r3, #4]
 800b5d6:	6863      	ldr	r3, [r4, #4]
 800b5d8:	bf08      	it	eq
 800b5da:	6031      	streq	r1, [r6, #0]
 800b5dc:	5162      	str	r2, [r4, r5]
 800b5de:	604b      	str	r3, [r1, #4]
 800b5e0:	4638      	mov	r0, r7
 800b5e2:	f104 060b 	add.w	r6, r4, #11
 800b5e6:	f001 fe75 	bl	800d2d4 <__malloc_unlock>
 800b5ea:	f026 0607 	bic.w	r6, r6, #7
 800b5ee:	1d23      	adds	r3, r4, #4
 800b5f0:	1af2      	subs	r2, r6, r3
 800b5f2:	d0b6      	beq.n	800b562 <_malloc_r+0x22>
 800b5f4:	1b9b      	subs	r3, r3, r6
 800b5f6:	50a3      	str	r3, [r4, r2]
 800b5f8:	e7b3      	b.n	800b562 <_malloc_r+0x22>
 800b5fa:	6862      	ldr	r2, [r4, #4]
 800b5fc:	42a3      	cmp	r3, r4
 800b5fe:	bf0c      	ite	eq
 800b600:	6032      	streq	r2, [r6, #0]
 800b602:	605a      	strne	r2, [r3, #4]
 800b604:	e7ec      	b.n	800b5e0 <_malloc_r+0xa0>
 800b606:	4623      	mov	r3, r4
 800b608:	6864      	ldr	r4, [r4, #4]
 800b60a:	e7b2      	b.n	800b572 <_malloc_r+0x32>
 800b60c:	4634      	mov	r4, r6
 800b60e:	6876      	ldr	r6, [r6, #4]
 800b610:	e7b9      	b.n	800b586 <_malloc_r+0x46>
 800b612:	230c      	movs	r3, #12
 800b614:	603b      	str	r3, [r7, #0]
 800b616:	4638      	mov	r0, r7
 800b618:	f001 fe5c 	bl	800d2d4 <__malloc_unlock>
 800b61c:	e7a1      	b.n	800b562 <_malloc_r+0x22>
 800b61e:	6025      	str	r5, [r4, #0]
 800b620:	e7de      	b.n	800b5e0 <_malloc_r+0xa0>
 800b622:	bf00      	nop
 800b624:	20005100 	.word	0x20005100

0800b628 <__cvt>:
 800b628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b62c:	ec55 4b10 	vmov	r4, r5, d0
 800b630:	2d00      	cmp	r5, #0
 800b632:	460e      	mov	r6, r1
 800b634:	4619      	mov	r1, r3
 800b636:	462b      	mov	r3, r5
 800b638:	bfbb      	ittet	lt
 800b63a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b63e:	461d      	movlt	r5, r3
 800b640:	2300      	movge	r3, #0
 800b642:	232d      	movlt	r3, #45	; 0x2d
 800b644:	700b      	strb	r3, [r1, #0]
 800b646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b648:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b64c:	4691      	mov	r9, r2
 800b64e:	f023 0820 	bic.w	r8, r3, #32
 800b652:	bfbc      	itt	lt
 800b654:	4622      	movlt	r2, r4
 800b656:	4614      	movlt	r4, r2
 800b658:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b65c:	d005      	beq.n	800b66a <__cvt+0x42>
 800b65e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b662:	d100      	bne.n	800b666 <__cvt+0x3e>
 800b664:	3601      	adds	r6, #1
 800b666:	2102      	movs	r1, #2
 800b668:	e000      	b.n	800b66c <__cvt+0x44>
 800b66a:	2103      	movs	r1, #3
 800b66c:	ab03      	add	r3, sp, #12
 800b66e:	9301      	str	r3, [sp, #4]
 800b670:	ab02      	add	r3, sp, #8
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	ec45 4b10 	vmov	d0, r4, r5
 800b678:	4653      	mov	r3, sl
 800b67a:	4632      	mov	r2, r6
 800b67c:	f000 fef8 	bl	800c470 <_dtoa_r>
 800b680:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b684:	4607      	mov	r7, r0
 800b686:	d102      	bne.n	800b68e <__cvt+0x66>
 800b688:	f019 0f01 	tst.w	r9, #1
 800b68c:	d022      	beq.n	800b6d4 <__cvt+0xac>
 800b68e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b692:	eb07 0906 	add.w	r9, r7, r6
 800b696:	d110      	bne.n	800b6ba <__cvt+0x92>
 800b698:	783b      	ldrb	r3, [r7, #0]
 800b69a:	2b30      	cmp	r3, #48	; 0x30
 800b69c:	d10a      	bne.n	800b6b4 <__cvt+0x8c>
 800b69e:	2200      	movs	r2, #0
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	4629      	mov	r1, r5
 800b6a6:	f7f5 fa2f 	bl	8000b08 <__aeabi_dcmpeq>
 800b6aa:	b918      	cbnz	r0, 800b6b4 <__cvt+0x8c>
 800b6ac:	f1c6 0601 	rsb	r6, r6, #1
 800b6b0:	f8ca 6000 	str.w	r6, [sl]
 800b6b4:	f8da 3000 	ldr.w	r3, [sl]
 800b6b8:	4499      	add	r9, r3
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	2300      	movs	r3, #0
 800b6be:	4620      	mov	r0, r4
 800b6c0:	4629      	mov	r1, r5
 800b6c2:	f7f5 fa21 	bl	8000b08 <__aeabi_dcmpeq>
 800b6c6:	b108      	cbz	r0, 800b6cc <__cvt+0xa4>
 800b6c8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b6cc:	2230      	movs	r2, #48	; 0x30
 800b6ce:	9b03      	ldr	r3, [sp, #12]
 800b6d0:	454b      	cmp	r3, r9
 800b6d2:	d307      	bcc.n	800b6e4 <__cvt+0xbc>
 800b6d4:	9b03      	ldr	r3, [sp, #12]
 800b6d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6d8:	1bdb      	subs	r3, r3, r7
 800b6da:	4638      	mov	r0, r7
 800b6dc:	6013      	str	r3, [r2, #0]
 800b6de:	b004      	add	sp, #16
 800b6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6e4:	1c59      	adds	r1, r3, #1
 800b6e6:	9103      	str	r1, [sp, #12]
 800b6e8:	701a      	strb	r2, [r3, #0]
 800b6ea:	e7f0      	b.n	800b6ce <__cvt+0xa6>

0800b6ec <__exponent>:
 800b6ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2900      	cmp	r1, #0
 800b6f2:	bfb8      	it	lt
 800b6f4:	4249      	neglt	r1, r1
 800b6f6:	f803 2b02 	strb.w	r2, [r3], #2
 800b6fa:	bfb4      	ite	lt
 800b6fc:	222d      	movlt	r2, #45	; 0x2d
 800b6fe:	222b      	movge	r2, #43	; 0x2b
 800b700:	2909      	cmp	r1, #9
 800b702:	7042      	strb	r2, [r0, #1]
 800b704:	dd2a      	ble.n	800b75c <__exponent+0x70>
 800b706:	f10d 0407 	add.w	r4, sp, #7
 800b70a:	46a4      	mov	ip, r4
 800b70c:	270a      	movs	r7, #10
 800b70e:	46a6      	mov	lr, r4
 800b710:	460a      	mov	r2, r1
 800b712:	fb91 f6f7 	sdiv	r6, r1, r7
 800b716:	fb07 1516 	mls	r5, r7, r6, r1
 800b71a:	3530      	adds	r5, #48	; 0x30
 800b71c:	2a63      	cmp	r2, #99	; 0x63
 800b71e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b722:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b726:	4631      	mov	r1, r6
 800b728:	dcf1      	bgt.n	800b70e <__exponent+0x22>
 800b72a:	3130      	adds	r1, #48	; 0x30
 800b72c:	f1ae 0502 	sub.w	r5, lr, #2
 800b730:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b734:	1c44      	adds	r4, r0, #1
 800b736:	4629      	mov	r1, r5
 800b738:	4561      	cmp	r1, ip
 800b73a:	d30a      	bcc.n	800b752 <__exponent+0x66>
 800b73c:	f10d 0209 	add.w	r2, sp, #9
 800b740:	eba2 020e 	sub.w	r2, r2, lr
 800b744:	4565      	cmp	r5, ip
 800b746:	bf88      	it	hi
 800b748:	2200      	movhi	r2, #0
 800b74a:	4413      	add	r3, r2
 800b74c:	1a18      	subs	r0, r3, r0
 800b74e:	b003      	add	sp, #12
 800b750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b752:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b756:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b75a:	e7ed      	b.n	800b738 <__exponent+0x4c>
 800b75c:	2330      	movs	r3, #48	; 0x30
 800b75e:	3130      	adds	r1, #48	; 0x30
 800b760:	7083      	strb	r3, [r0, #2]
 800b762:	70c1      	strb	r1, [r0, #3]
 800b764:	1d03      	adds	r3, r0, #4
 800b766:	e7f1      	b.n	800b74c <__exponent+0x60>

0800b768 <_printf_float>:
 800b768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76c:	ed2d 8b02 	vpush	{d8}
 800b770:	b08d      	sub	sp, #52	; 0x34
 800b772:	460c      	mov	r4, r1
 800b774:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b778:	4616      	mov	r6, r2
 800b77a:	461f      	mov	r7, r3
 800b77c:	4605      	mov	r5, r0
 800b77e:	f001 fd27 	bl	800d1d0 <_localeconv_r>
 800b782:	f8d0 a000 	ldr.w	sl, [r0]
 800b786:	4650      	mov	r0, sl
 800b788:	f7f4 fd42 	bl	8000210 <strlen>
 800b78c:	2300      	movs	r3, #0
 800b78e:	930a      	str	r3, [sp, #40]	; 0x28
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	9305      	str	r3, [sp, #20]
 800b794:	f8d8 3000 	ldr.w	r3, [r8]
 800b798:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b79c:	3307      	adds	r3, #7
 800b79e:	f023 0307 	bic.w	r3, r3, #7
 800b7a2:	f103 0208 	add.w	r2, r3, #8
 800b7a6:	f8c8 2000 	str.w	r2, [r8]
 800b7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b7b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b7b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b7ba:	9307      	str	r3, [sp, #28]
 800b7bc:	f8cd 8018 	str.w	r8, [sp, #24]
 800b7c0:	ee08 0a10 	vmov	s16, r0
 800b7c4:	4b9f      	ldr	r3, [pc, #636]	; (800ba44 <_printf_float+0x2dc>)
 800b7c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ce:	f7f5 f9cd 	bl	8000b6c <__aeabi_dcmpun>
 800b7d2:	bb88      	cbnz	r0, 800b838 <_printf_float+0xd0>
 800b7d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7d8:	4b9a      	ldr	r3, [pc, #616]	; (800ba44 <_printf_float+0x2dc>)
 800b7da:	f04f 32ff 	mov.w	r2, #4294967295
 800b7de:	f7f5 f9a7 	bl	8000b30 <__aeabi_dcmple>
 800b7e2:	bb48      	cbnz	r0, 800b838 <_printf_float+0xd0>
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	4649      	mov	r1, r9
 800b7ec:	f7f5 f996 	bl	8000b1c <__aeabi_dcmplt>
 800b7f0:	b110      	cbz	r0, 800b7f8 <_printf_float+0x90>
 800b7f2:	232d      	movs	r3, #45	; 0x2d
 800b7f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7f8:	4b93      	ldr	r3, [pc, #588]	; (800ba48 <_printf_float+0x2e0>)
 800b7fa:	4894      	ldr	r0, [pc, #592]	; (800ba4c <_printf_float+0x2e4>)
 800b7fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b800:	bf94      	ite	ls
 800b802:	4698      	movls	r8, r3
 800b804:	4680      	movhi	r8, r0
 800b806:	2303      	movs	r3, #3
 800b808:	6123      	str	r3, [r4, #16]
 800b80a:	9b05      	ldr	r3, [sp, #20]
 800b80c:	f023 0204 	bic.w	r2, r3, #4
 800b810:	6022      	str	r2, [r4, #0]
 800b812:	f04f 0900 	mov.w	r9, #0
 800b816:	9700      	str	r7, [sp, #0]
 800b818:	4633      	mov	r3, r6
 800b81a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b81c:	4621      	mov	r1, r4
 800b81e:	4628      	mov	r0, r5
 800b820:	f000 f9d8 	bl	800bbd4 <_printf_common>
 800b824:	3001      	adds	r0, #1
 800b826:	f040 8090 	bne.w	800b94a <_printf_float+0x1e2>
 800b82a:	f04f 30ff 	mov.w	r0, #4294967295
 800b82e:	b00d      	add	sp, #52	; 0x34
 800b830:	ecbd 8b02 	vpop	{d8}
 800b834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b838:	4642      	mov	r2, r8
 800b83a:	464b      	mov	r3, r9
 800b83c:	4640      	mov	r0, r8
 800b83e:	4649      	mov	r1, r9
 800b840:	f7f5 f994 	bl	8000b6c <__aeabi_dcmpun>
 800b844:	b140      	cbz	r0, 800b858 <_printf_float+0xf0>
 800b846:	464b      	mov	r3, r9
 800b848:	2b00      	cmp	r3, #0
 800b84a:	bfbc      	itt	lt
 800b84c:	232d      	movlt	r3, #45	; 0x2d
 800b84e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b852:	487f      	ldr	r0, [pc, #508]	; (800ba50 <_printf_float+0x2e8>)
 800b854:	4b7f      	ldr	r3, [pc, #508]	; (800ba54 <_printf_float+0x2ec>)
 800b856:	e7d1      	b.n	800b7fc <_printf_float+0x94>
 800b858:	6863      	ldr	r3, [r4, #4]
 800b85a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b85e:	9206      	str	r2, [sp, #24]
 800b860:	1c5a      	adds	r2, r3, #1
 800b862:	d13f      	bne.n	800b8e4 <_printf_float+0x17c>
 800b864:	2306      	movs	r3, #6
 800b866:	6063      	str	r3, [r4, #4]
 800b868:	9b05      	ldr	r3, [sp, #20]
 800b86a:	6861      	ldr	r1, [r4, #4]
 800b86c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b870:	2300      	movs	r3, #0
 800b872:	9303      	str	r3, [sp, #12]
 800b874:	ab0a      	add	r3, sp, #40	; 0x28
 800b876:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b87a:	ab09      	add	r3, sp, #36	; 0x24
 800b87c:	ec49 8b10 	vmov	d0, r8, r9
 800b880:	9300      	str	r3, [sp, #0]
 800b882:	6022      	str	r2, [r4, #0]
 800b884:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b888:	4628      	mov	r0, r5
 800b88a:	f7ff fecd 	bl	800b628 <__cvt>
 800b88e:	9b06      	ldr	r3, [sp, #24]
 800b890:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b892:	2b47      	cmp	r3, #71	; 0x47
 800b894:	4680      	mov	r8, r0
 800b896:	d108      	bne.n	800b8aa <_printf_float+0x142>
 800b898:	1cc8      	adds	r0, r1, #3
 800b89a:	db02      	blt.n	800b8a2 <_printf_float+0x13a>
 800b89c:	6863      	ldr	r3, [r4, #4]
 800b89e:	4299      	cmp	r1, r3
 800b8a0:	dd41      	ble.n	800b926 <_printf_float+0x1be>
 800b8a2:	f1ab 0b02 	sub.w	fp, fp, #2
 800b8a6:	fa5f fb8b 	uxtb.w	fp, fp
 800b8aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b8ae:	d820      	bhi.n	800b8f2 <_printf_float+0x18a>
 800b8b0:	3901      	subs	r1, #1
 800b8b2:	465a      	mov	r2, fp
 800b8b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b8b8:	9109      	str	r1, [sp, #36]	; 0x24
 800b8ba:	f7ff ff17 	bl	800b6ec <__exponent>
 800b8be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8c0:	1813      	adds	r3, r2, r0
 800b8c2:	2a01      	cmp	r2, #1
 800b8c4:	4681      	mov	r9, r0
 800b8c6:	6123      	str	r3, [r4, #16]
 800b8c8:	dc02      	bgt.n	800b8d0 <_printf_float+0x168>
 800b8ca:	6822      	ldr	r2, [r4, #0]
 800b8cc:	07d2      	lsls	r2, r2, #31
 800b8ce:	d501      	bpl.n	800b8d4 <_printf_float+0x16c>
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	6123      	str	r3, [r4, #16]
 800b8d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d09c      	beq.n	800b816 <_printf_float+0xae>
 800b8dc:	232d      	movs	r3, #45	; 0x2d
 800b8de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8e2:	e798      	b.n	800b816 <_printf_float+0xae>
 800b8e4:	9a06      	ldr	r2, [sp, #24]
 800b8e6:	2a47      	cmp	r2, #71	; 0x47
 800b8e8:	d1be      	bne.n	800b868 <_printf_float+0x100>
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d1bc      	bne.n	800b868 <_printf_float+0x100>
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e7b9      	b.n	800b866 <_printf_float+0xfe>
 800b8f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b8f6:	d118      	bne.n	800b92a <_printf_float+0x1c2>
 800b8f8:	2900      	cmp	r1, #0
 800b8fa:	6863      	ldr	r3, [r4, #4]
 800b8fc:	dd0b      	ble.n	800b916 <_printf_float+0x1ae>
 800b8fe:	6121      	str	r1, [r4, #16]
 800b900:	b913      	cbnz	r3, 800b908 <_printf_float+0x1a0>
 800b902:	6822      	ldr	r2, [r4, #0]
 800b904:	07d0      	lsls	r0, r2, #31
 800b906:	d502      	bpl.n	800b90e <_printf_float+0x1a6>
 800b908:	3301      	adds	r3, #1
 800b90a:	440b      	add	r3, r1
 800b90c:	6123      	str	r3, [r4, #16]
 800b90e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b910:	f04f 0900 	mov.w	r9, #0
 800b914:	e7de      	b.n	800b8d4 <_printf_float+0x16c>
 800b916:	b913      	cbnz	r3, 800b91e <_printf_float+0x1b6>
 800b918:	6822      	ldr	r2, [r4, #0]
 800b91a:	07d2      	lsls	r2, r2, #31
 800b91c:	d501      	bpl.n	800b922 <_printf_float+0x1ba>
 800b91e:	3302      	adds	r3, #2
 800b920:	e7f4      	b.n	800b90c <_printf_float+0x1a4>
 800b922:	2301      	movs	r3, #1
 800b924:	e7f2      	b.n	800b90c <_printf_float+0x1a4>
 800b926:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b92a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b92c:	4299      	cmp	r1, r3
 800b92e:	db05      	blt.n	800b93c <_printf_float+0x1d4>
 800b930:	6823      	ldr	r3, [r4, #0]
 800b932:	6121      	str	r1, [r4, #16]
 800b934:	07d8      	lsls	r0, r3, #31
 800b936:	d5ea      	bpl.n	800b90e <_printf_float+0x1a6>
 800b938:	1c4b      	adds	r3, r1, #1
 800b93a:	e7e7      	b.n	800b90c <_printf_float+0x1a4>
 800b93c:	2900      	cmp	r1, #0
 800b93e:	bfd4      	ite	le
 800b940:	f1c1 0202 	rsble	r2, r1, #2
 800b944:	2201      	movgt	r2, #1
 800b946:	4413      	add	r3, r2
 800b948:	e7e0      	b.n	800b90c <_printf_float+0x1a4>
 800b94a:	6823      	ldr	r3, [r4, #0]
 800b94c:	055a      	lsls	r2, r3, #21
 800b94e:	d407      	bmi.n	800b960 <_printf_float+0x1f8>
 800b950:	6923      	ldr	r3, [r4, #16]
 800b952:	4642      	mov	r2, r8
 800b954:	4631      	mov	r1, r6
 800b956:	4628      	mov	r0, r5
 800b958:	47b8      	blx	r7
 800b95a:	3001      	adds	r0, #1
 800b95c:	d12c      	bne.n	800b9b8 <_printf_float+0x250>
 800b95e:	e764      	b.n	800b82a <_printf_float+0xc2>
 800b960:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b964:	f240 80e0 	bls.w	800bb28 <_printf_float+0x3c0>
 800b968:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b96c:	2200      	movs	r2, #0
 800b96e:	2300      	movs	r3, #0
 800b970:	f7f5 f8ca 	bl	8000b08 <__aeabi_dcmpeq>
 800b974:	2800      	cmp	r0, #0
 800b976:	d034      	beq.n	800b9e2 <_printf_float+0x27a>
 800b978:	4a37      	ldr	r2, [pc, #220]	; (800ba58 <_printf_float+0x2f0>)
 800b97a:	2301      	movs	r3, #1
 800b97c:	4631      	mov	r1, r6
 800b97e:	4628      	mov	r0, r5
 800b980:	47b8      	blx	r7
 800b982:	3001      	adds	r0, #1
 800b984:	f43f af51 	beq.w	800b82a <_printf_float+0xc2>
 800b988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b98c:	429a      	cmp	r2, r3
 800b98e:	db02      	blt.n	800b996 <_printf_float+0x22e>
 800b990:	6823      	ldr	r3, [r4, #0]
 800b992:	07d8      	lsls	r0, r3, #31
 800b994:	d510      	bpl.n	800b9b8 <_printf_float+0x250>
 800b996:	ee18 3a10 	vmov	r3, s16
 800b99a:	4652      	mov	r2, sl
 800b99c:	4631      	mov	r1, r6
 800b99e:	4628      	mov	r0, r5
 800b9a0:	47b8      	blx	r7
 800b9a2:	3001      	adds	r0, #1
 800b9a4:	f43f af41 	beq.w	800b82a <_printf_float+0xc2>
 800b9a8:	f04f 0800 	mov.w	r8, #0
 800b9ac:	f104 091a 	add.w	r9, r4, #26
 800b9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9b2:	3b01      	subs	r3, #1
 800b9b4:	4543      	cmp	r3, r8
 800b9b6:	dc09      	bgt.n	800b9cc <_printf_float+0x264>
 800b9b8:	6823      	ldr	r3, [r4, #0]
 800b9ba:	079b      	lsls	r3, r3, #30
 800b9bc:	f100 8105 	bmi.w	800bbca <_printf_float+0x462>
 800b9c0:	68e0      	ldr	r0, [r4, #12]
 800b9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9c4:	4298      	cmp	r0, r3
 800b9c6:	bfb8      	it	lt
 800b9c8:	4618      	movlt	r0, r3
 800b9ca:	e730      	b.n	800b82e <_printf_float+0xc6>
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	464a      	mov	r2, r9
 800b9d0:	4631      	mov	r1, r6
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	47b8      	blx	r7
 800b9d6:	3001      	adds	r0, #1
 800b9d8:	f43f af27 	beq.w	800b82a <_printf_float+0xc2>
 800b9dc:	f108 0801 	add.w	r8, r8, #1
 800b9e0:	e7e6      	b.n	800b9b0 <_printf_float+0x248>
 800b9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	dc39      	bgt.n	800ba5c <_printf_float+0x2f4>
 800b9e8:	4a1b      	ldr	r2, [pc, #108]	; (800ba58 <_printf_float+0x2f0>)
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	4631      	mov	r1, r6
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	47b8      	blx	r7
 800b9f2:	3001      	adds	r0, #1
 800b9f4:	f43f af19 	beq.w	800b82a <_printf_float+0xc2>
 800b9f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	d102      	bne.n	800ba06 <_printf_float+0x29e>
 800ba00:	6823      	ldr	r3, [r4, #0]
 800ba02:	07d9      	lsls	r1, r3, #31
 800ba04:	d5d8      	bpl.n	800b9b8 <_printf_float+0x250>
 800ba06:	ee18 3a10 	vmov	r3, s16
 800ba0a:	4652      	mov	r2, sl
 800ba0c:	4631      	mov	r1, r6
 800ba0e:	4628      	mov	r0, r5
 800ba10:	47b8      	blx	r7
 800ba12:	3001      	adds	r0, #1
 800ba14:	f43f af09 	beq.w	800b82a <_printf_float+0xc2>
 800ba18:	f04f 0900 	mov.w	r9, #0
 800ba1c:	f104 0a1a 	add.w	sl, r4, #26
 800ba20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba22:	425b      	negs	r3, r3
 800ba24:	454b      	cmp	r3, r9
 800ba26:	dc01      	bgt.n	800ba2c <_printf_float+0x2c4>
 800ba28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba2a:	e792      	b.n	800b952 <_printf_float+0x1ea>
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	4652      	mov	r2, sl
 800ba30:	4631      	mov	r1, r6
 800ba32:	4628      	mov	r0, r5
 800ba34:	47b8      	blx	r7
 800ba36:	3001      	adds	r0, #1
 800ba38:	f43f aef7 	beq.w	800b82a <_printf_float+0xc2>
 800ba3c:	f109 0901 	add.w	r9, r9, #1
 800ba40:	e7ee      	b.n	800ba20 <_printf_float+0x2b8>
 800ba42:	bf00      	nop
 800ba44:	7fefffff 	.word	0x7fefffff
 800ba48:	0800e280 	.word	0x0800e280
 800ba4c:	0800e284 	.word	0x0800e284
 800ba50:	0800e28c 	.word	0x0800e28c
 800ba54:	0800e288 	.word	0x0800e288
 800ba58:	0800e290 	.word	0x0800e290
 800ba5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba60:	429a      	cmp	r2, r3
 800ba62:	bfa8      	it	ge
 800ba64:	461a      	movge	r2, r3
 800ba66:	2a00      	cmp	r2, #0
 800ba68:	4691      	mov	r9, r2
 800ba6a:	dc37      	bgt.n	800badc <_printf_float+0x374>
 800ba6c:	f04f 0b00 	mov.w	fp, #0
 800ba70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba74:	f104 021a 	add.w	r2, r4, #26
 800ba78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba7a:	9305      	str	r3, [sp, #20]
 800ba7c:	eba3 0309 	sub.w	r3, r3, r9
 800ba80:	455b      	cmp	r3, fp
 800ba82:	dc33      	bgt.n	800baec <_printf_float+0x384>
 800ba84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	db3b      	blt.n	800bb04 <_printf_float+0x39c>
 800ba8c:	6823      	ldr	r3, [r4, #0]
 800ba8e:	07da      	lsls	r2, r3, #31
 800ba90:	d438      	bmi.n	800bb04 <_printf_float+0x39c>
 800ba92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba94:	9a05      	ldr	r2, [sp, #20]
 800ba96:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba98:	1a9a      	subs	r2, r3, r2
 800ba9a:	eba3 0901 	sub.w	r9, r3, r1
 800ba9e:	4591      	cmp	r9, r2
 800baa0:	bfa8      	it	ge
 800baa2:	4691      	movge	r9, r2
 800baa4:	f1b9 0f00 	cmp.w	r9, #0
 800baa8:	dc35      	bgt.n	800bb16 <_printf_float+0x3ae>
 800baaa:	f04f 0800 	mov.w	r8, #0
 800baae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bab2:	f104 0a1a 	add.w	sl, r4, #26
 800bab6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800baba:	1a9b      	subs	r3, r3, r2
 800babc:	eba3 0309 	sub.w	r3, r3, r9
 800bac0:	4543      	cmp	r3, r8
 800bac2:	f77f af79 	ble.w	800b9b8 <_printf_float+0x250>
 800bac6:	2301      	movs	r3, #1
 800bac8:	4652      	mov	r2, sl
 800baca:	4631      	mov	r1, r6
 800bacc:	4628      	mov	r0, r5
 800bace:	47b8      	blx	r7
 800bad0:	3001      	adds	r0, #1
 800bad2:	f43f aeaa 	beq.w	800b82a <_printf_float+0xc2>
 800bad6:	f108 0801 	add.w	r8, r8, #1
 800bada:	e7ec      	b.n	800bab6 <_printf_float+0x34e>
 800badc:	4613      	mov	r3, r2
 800bade:	4631      	mov	r1, r6
 800bae0:	4642      	mov	r2, r8
 800bae2:	4628      	mov	r0, r5
 800bae4:	47b8      	blx	r7
 800bae6:	3001      	adds	r0, #1
 800bae8:	d1c0      	bne.n	800ba6c <_printf_float+0x304>
 800baea:	e69e      	b.n	800b82a <_printf_float+0xc2>
 800baec:	2301      	movs	r3, #1
 800baee:	4631      	mov	r1, r6
 800baf0:	4628      	mov	r0, r5
 800baf2:	9205      	str	r2, [sp, #20]
 800baf4:	47b8      	blx	r7
 800baf6:	3001      	adds	r0, #1
 800baf8:	f43f ae97 	beq.w	800b82a <_printf_float+0xc2>
 800bafc:	9a05      	ldr	r2, [sp, #20]
 800bafe:	f10b 0b01 	add.w	fp, fp, #1
 800bb02:	e7b9      	b.n	800ba78 <_printf_float+0x310>
 800bb04:	ee18 3a10 	vmov	r3, s16
 800bb08:	4652      	mov	r2, sl
 800bb0a:	4631      	mov	r1, r6
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	47b8      	blx	r7
 800bb10:	3001      	adds	r0, #1
 800bb12:	d1be      	bne.n	800ba92 <_printf_float+0x32a>
 800bb14:	e689      	b.n	800b82a <_printf_float+0xc2>
 800bb16:	9a05      	ldr	r2, [sp, #20]
 800bb18:	464b      	mov	r3, r9
 800bb1a:	4442      	add	r2, r8
 800bb1c:	4631      	mov	r1, r6
 800bb1e:	4628      	mov	r0, r5
 800bb20:	47b8      	blx	r7
 800bb22:	3001      	adds	r0, #1
 800bb24:	d1c1      	bne.n	800baaa <_printf_float+0x342>
 800bb26:	e680      	b.n	800b82a <_printf_float+0xc2>
 800bb28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb2a:	2a01      	cmp	r2, #1
 800bb2c:	dc01      	bgt.n	800bb32 <_printf_float+0x3ca>
 800bb2e:	07db      	lsls	r3, r3, #31
 800bb30:	d538      	bpl.n	800bba4 <_printf_float+0x43c>
 800bb32:	2301      	movs	r3, #1
 800bb34:	4642      	mov	r2, r8
 800bb36:	4631      	mov	r1, r6
 800bb38:	4628      	mov	r0, r5
 800bb3a:	47b8      	blx	r7
 800bb3c:	3001      	adds	r0, #1
 800bb3e:	f43f ae74 	beq.w	800b82a <_printf_float+0xc2>
 800bb42:	ee18 3a10 	vmov	r3, s16
 800bb46:	4652      	mov	r2, sl
 800bb48:	4631      	mov	r1, r6
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	47b8      	blx	r7
 800bb4e:	3001      	adds	r0, #1
 800bb50:	f43f ae6b 	beq.w	800b82a <_printf_float+0xc2>
 800bb54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb58:	2200      	movs	r2, #0
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	f7f4 ffd4 	bl	8000b08 <__aeabi_dcmpeq>
 800bb60:	b9d8      	cbnz	r0, 800bb9a <_printf_float+0x432>
 800bb62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb64:	f108 0201 	add.w	r2, r8, #1
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	4631      	mov	r1, r6
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	47b8      	blx	r7
 800bb70:	3001      	adds	r0, #1
 800bb72:	d10e      	bne.n	800bb92 <_printf_float+0x42a>
 800bb74:	e659      	b.n	800b82a <_printf_float+0xc2>
 800bb76:	2301      	movs	r3, #1
 800bb78:	4652      	mov	r2, sl
 800bb7a:	4631      	mov	r1, r6
 800bb7c:	4628      	mov	r0, r5
 800bb7e:	47b8      	blx	r7
 800bb80:	3001      	adds	r0, #1
 800bb82:	f43f ae52 	beq.w	800b82a <_printf_float+0xc2>
 800bb86:	f108 0801 	add.w	r8, r8, #1
 800bb8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	4543      	cmp	r3, r8
 800bb90:	dcf1      	bgt.n	800bb76 <_printf_float+0x40e>
 800bb92:	464b      	mov	r3, r9
 800bb94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bb98:	e6dc      	b.n	800b954 <_printf_float+0x1ec>
 800bb9a:	f04f 0800 	mov.w	r8, #0
 800bb9e:	f104 0a1a 	add.w	sl, r4, #26
 800bba2:	e7f2      	b.n	800bb8a <_printf_float+0x422>
 800bba4:	2301      	movs	r3, #1
 800bba6:	4642      	mov	r2, r8
 800bba8:	e7df      	b.n	800bb6a <_printf_float+0x402>
 800bbaa:	2301      	movs	r3, #1
 800bbac:	464a      	mov	r2, r9
 800bbae:	4631      	mov	r1, r6
 800bbb0:	4628      	mov	r0, r5
 800bbb2:	47b8      	blx	r7
 800bbb4:	3001      	adds	r0, #1
 800bbb6:	f43f ae38 	beq.w	800b82a <_printf_float+0xc2>
 800bbba:	f108 0801 	add.w	r8, r8, #1
 800bbbe:	68e3      	ldr	r3, [r4, #12]
 800bbc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bbc2:	1a5b      	subs	r3, r3, r1
 800bbc4:	4543      	cmp	r3, r8
 800bbc6:	dcf0      	bgt.n	800bbaa <_printf_float+0x442>
 800bbc8:	e6fa      	b.n	800b9c0 <_printf_float+0x258>
 800bbca:	f04f 0800 	mov.w	r8, #0
 800bbce:	f104 0919 	add.w	r9, r4, #25
 800bbd2:	e7f4      	b.n	800bbbe <_printf_float+0x456>

0800bbd4 <_printf_common>:
 800bbd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbd8:	4616      	mov	r6, r2
 800bbda:	4699      	mov	r9, r3
 800bbdc:	688a      	ldr	r2, [r1, #8]
 800bbde:	690b      	ldr	r3, [r1, #16]
 800bbe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	bfb8      	it	lt
 800bbe8:	4613      	movlt	r3, r2
 800bbea:	6033      	str	r3, [r6, #0]
 800bbec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bbf0:	4607      	mov	r7, r0
 800bbf2:	460c      	mov	r4, r1
 800bbf4:	b10a      	cbz	r2, 800bbfa <_printf_common+0x26>
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	6033      	str	r3, [r6, #0]
 800bbfa:	6823      	ldr	r3, [r4, #0]
 800bbfc:	0699      	lsls	r1, r3, #26
 800bbfe:	bf42      	ittt	mi
 800bc00:	6833      	ldrmi	r3, [r6, #0]
 800bc02:	3302      	addmi	r3, #2
 800bc04:	6033      	strmi	r3, [r6, #0]
 800bc06:	6825      	ldr	r5, [r4, #0]
 800bc08:	f015 0506 	ands.w	r5, r5, #6
 800bc0c:	d106      	bne.n	800bc1c <_printf_common+0x48>
 800bc0e:	f104 0a19 	add.w	sl, r4, #25
 800bc12:	68e3      	ldr	r3, [r4, #12]
 800bc14:	6832      	ldr	r2, [r6, #0]
 800bc16:	1a9b      	subs	r3, r3, r2
 800bc18:	42ab      	cmp	r3, r5
 800bc1a:	dc26      	bgt.n	800bc6a <_printf_common+0x96>
 800bc1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc20:	1e13      	subs	r3, r2, #0
 800bc22:	6822      	ldr	r2, [r4, #0]
 800bc24:	bf18      	it	ne
 800bc26:	2301      	movne	r3, #1
 800bc28:	0692      	lsls	r2, r2, #26
 800bc2a:	d42b      	bmi.n	800bc84 <_printf_common+0xb0>
 800bc2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc30:	4649      	mov	r1, r9
 800bc32:	4638      	mov	r0, r7
 800bc34:	47c0      	blx	r8
 800bc36:	3001      	adds	r0, #1
 800bc38:	d01e      	beq.n	800bc78 <_printf_common+0xa4>
 800bc3a:	6823      	ldr	r3, [r4, #0]
 800bc3c:	68e5      	ldr	r5, [r4, #12]
 800bc3e:	6832      	ldr	r2, [r6, #0]
 800bc40:	f003 0306 	and.w	r3, r3, #6
 800bc44:	2b04      	cmp	r3, #4
 800bc46:	bf08      	it	eq
 800bc48:	1aad      	subeq	r5, r5, r2
 800bc4a:	68a3      	ldr	r3, [r4, #8]
 800bc4c:	6922      	ldr	r2, [r4, #16]
 800bc4e:	bf0c      	ite	eq
 800bc50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc54:	2500      	movne	r5, #0
 800bc56:	4293      	cmp	r3, r2
 800bc58:	bfc4      	itt	gt
 800bc5a:	1a9b      	subgt	r3, r3, r2
 800bc5c:	18ed      	addgt	r5, r5, r3
 800bc5e:	2600      	movs	r6, #0
 800bc60:	341a      	adds	r4, #26
 800bc62:	42b5      	cmp	r5, r6
 800bc64:	d11a      	bne.n	800bc9c <_printf_common+0xc8>
 800bc66:	2000      	movs	r0, #0
 800bc68:	e008      	b.n	800bc7c <_printf_common+0xa8>
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	4652      	mov	r2, sl
 800bc6e:	4649      	mov	r1, r9
 800bc70:	4638      	mov	r0, r7
 800bc72:	47c0      	blx	r8
 800bc74:	3001      	adds	r0, #1
 800bc76:	d103      	bne.n	800bc80 <_printf_common+0xac>
 800bc78:	f04f 30ff 	mov.w	r0, #4294967295
 800bc7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc80:	3501      	adds	r5, #1
 800bc82:	e7c6      	b.n	800bc12 <_printf_common+0x3e>
 800bc84:	18e1      	adds	r1, r4, r3
 800bc86:	1c5a      	adds	r2, r3, #1
 800bc88:	2030      	movs	r0, #48	; 0x30
 800bc8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc8e:	4422      	add	r2, r4
 800bc90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc98:	3302      	adds	r3, #2
 800bc9a:	e7c7      	b.n	800bc2c <_printf_common+0x58>
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	4622      	mov	r2, r4
 800bca0:	4649      	mov	r1, r9
 800bca2:	4638      	mov	r0, r7
 800bca4:	47c0      	blx	r8
 800bca6:	3001      	adds	r0, #1
 800bca8:	d0e6      	beq.n	800bc78 <_printf_common+0xa4>
 800bcaa:	3601      	adds	r6, #1
 800bcac:	e7d9      	b.n	800bc62 <_printf_common+0x8e>
	...

0800bcb0 <_printf_i>:
 800bcb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcb4:	7e0f      	ldrb	r7, [r1, #24]
 800bcb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bcb8:	2f78      	cmp	r7, #120	; 0x78
 800bcba:	4691      	mov	r9, r2
 800bcbc:	4680      	mov	r8, r0
 800bcbe:	460c      	mov	r4, r1
 800bcc0:	469a      	mov	sl, r3
 800bcc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bcc6:	d807      	bhi.n	800bcd8 <_printf_i+0x28>
 800bcc8:	2f62      	cmp	r7, #98	; 0x62
 800bcca:	d80a      	bhi.n	800bce2 <_printf_i+0x32>
 800bccc:	2f00      	cmp	r7, #0
 800bcce:	f000 80d8 	beq.w	800be82 <_printf_i+0x1d2>
 800bcd2:	2f58      	cmp	r7, #88	; 0x58
 800bcd4:	f000 80a3 	beq.w	800be1e <_printf_i+0x16e>
 800bcd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bcdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bce0:	e03a      	b.n	800bd58 <_printf_i+0xa8>
 800bce2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bce6:	2b15      	cmp	r3, #21
 800bce8:	d8f6      	bhi.n	800bcd8 <_printf_i+0x28>
 800bcea:	a101      	add	r1, pc, #4	; (adr r1, 800bcf0 <_printf_i+0x40>)
 800bcec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bcf0:	0800bd49 	.word	0x0800bd49
 800bcf4:	0800bd5d 	.word	0x0800bd5d
 800bcf8:	0800bcd9 	.word	0x0800bcd9
 800bcfc:	0800bcd9 	.word	0x0800bcd9
 800bd00:	0800bcd9 	.word	0x0800bcd9
 800bd04:	0800bcd9 	.word	0x0800bcd9
 800bd08:	0800bd5d 	.word	0x0800bd5d
 800bd0c:	0800bcd9 	.word	0x0800bcd9
 800bd10:	0800bcd9 	.word	0x0800bcd9
 800bd14:	0800bcd9 	.word	0x0800bcd9
 800bd18:	0800bcd9 	.word	0x0800bcd9
 800bd1c:	0800be69 	.word	0x0800be69
 800bd20:	0800bd8d 	.word	0x0800bd8d
 800bd24:	0800be4b 	.word	0x0800be4b
 800bd28:	0800bcd9 	.word	0x0800bcd9
 800bd2c:	0800bcd9 	.word	0x0800bcd9
 800bd30:	0800be8b 	.word	0x0800be8b
 800bd34:	0800bcd9 	.word	0x0800bcd9
 800bd38:	0800bd8d 	.word	0x0800bd8d
 800bd3c:	0800bcd9 	.word	0x0800bcd9
 800bd40:	0800bcd9 	.word	0x0800bcd9
 800bd44:	0800be53 	.word	0x0800be53
 800bd48:	682b      	ldr	r3, [r5, #0]
 800bd4a:	1d1a      	adds	r2, r3, #4
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	602a      	str	r2, [r5, #0]
 800bd50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e0a3      	b.n	800bea4 <_printf_i+0x1f4>
 800bd5c:	6820      	ldr	r0, [r4, #0]
 800bd5e:	6829      	ldr	r1, [r5, #0]
 800bd60:	0606      	lsls	r6, r0, #24
 800bd62:	f101 0304 	add.w	r3, r1, #4
 800bd66:	d50a      	bpl.n	800bd7e <_printf_i+0xce>
 800bd68:	680e      	ldr	r6, [r1, #0]
 800bd6a:	602b      	str	r3, [r5, #0]
 800bd6c:	2e00      	cmp	r6, #0
 800bd6e:	da03      	bge.n	800bd78 <_printf_i+0xc8>
 800bd70:	232d      	movs	r3, #45	; 0x2d
 800bd72:	4276      	negs	r6, r6
 800bd74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd78:	485e      	ldr	r0, [pc, #376]	; (800bef4 <_printf_i+0x244>)
 800bd7a:	230a      	movs	r3, #10
 800bd7c:	e019      	b.n	800bdb2 <_printf_i+0x102>
 800bd7e:	680e      	ldr	r6, [r1, #0]
 800bd80:	602b      	str	r3, [r5, #0]
 800bd82:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bd86:	bf18      	it	ne
 800bd88:	b236      	sxthne	r6, r6
 800bd8a:	e7ef      	b.n	800bd6c <_printf_i+0xbc>
 800bd8c:	682b      	ldr	r3, [r5, #0]
 800bd8e:	6820      	ldr	r0, [r4, #0]
 800bd90:	1d19      	adds	r1, r3, #4
 800bd92:	6029      	str	r1, [r5, #0]
 800bd94:	0601      	lsls	r1, r0, #24
 800bd96:	d501      	bpl.n	800bd9c <_printf_i+0xec>
 800bd98:	681e      	ldr	r6, [r3, #0]
 800bd9a:	e002      	b.n	800bda2 <_printf_i+0xf2>
 800bd9c:	0646      	lsls	r6, r0, #25
 800bd9e:	d5fb      	bpl.n	800bd98 <_printf_i+0xe8>
 800bda0:	881e      	ldrh	r6, [r3, #0]
 800bda2:	4854      	ldr	r0, [pc, #336]	; (800bef4 <_printf_i+0x244>)
 800bda4:	2f6f      	cmp	r7, #111	; 0x6f
 800bda6:	bf0c      	ite	eq
 800bda8:	2308      	moveq	r3, #8
 800bdaa:	230a      	movne	r3, #10
 800bdac:	2100      	movs	r1, #0
 800bdae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bdb2:	6865      	ldr	r5, [r4, #4]
 800bdb4:	60a5      	str	r5, [r4, #8]
 800bdb6:	2d00      	cmp	r5, #0
 800bdb8:	bfa2      	ittt	ge
 800bdba:	6821      	ldrge	r1, [r4, #0]
 800bdbc:	f021 0104 	bicge.w	r1, r1, #4
 800bdc0:	6021      	strge	r1, [r4, #0]
 800bdc2:	b90e      	cbnz	r6, 800bdc8 <_printf_i+0x118>
 800bdc4:	2d00      	cmp	r5, #0
 800bdc6:	d04d      	beq.n	800be64 <_printf_i+0x1b4>
 800bdc8:	4615      	mov	r5, r2
 800bdca:	fbb6 f1f3 	udiv	r1, r6, r3
 800bdce:	fb03 6711 	mls	r7, r3, r1, r6
 800bdd2:	5dc7      	ldrb	r7, [r0, r7]
 800bdd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bdd8:	4637      	mov	r7, r6
 800bdda:	42bb      	cmp	r3, r7
 800bddc:	460e      	mov	r6, r1
 800bdde:	d9f4      	bls.n	800bdca <_printf_i+0x11a>
 800bde0:	2b08      	cmp	r3, #8
 800bde2:	d10b      	bne.n	800bdfc <_printf_i+0x14c>
 800bde4:	6823      	ldr	r3, [r4, #0]
 800bde6:	07de      	lsls	r6, r3, #31
 800bde8:	d508      	bpl.n	800bdfc <_printf_i+0x14c>
 800bdea:	6923      	ldr	r3, [r4, #16]
 800bdec:	6861      	ldr	r1, [r4, #4]
 800bdee:	4299      	cmp	r1, r3
 800bdf0:	bfde      	ittt	le
 800bdf2:	2330      	movle	r3, #48	; 0x30
 800bdf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bdf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bdfc:	1b52      	subs	r2, r2, r5
 800bdfe:	6122      	str	r2, [r4, #16]
 800be00:	f8cd a000 	str.w	sl, [sp]
 800be04:	464b      	mov	r3, r9
 800be06:	aa03      	add	r2, sp, #12
 800be08:	4621      	mov	r1, r4
 800be0a:	4640      	mov	r0, r8
 800be0c:	f7ff fee2 	bl	800bbd4 <_printf_common>
 800be10:	3001      	adds	r0, #1
 800be12:	d14c      	bne.n	800beae <_printf_i+0x1fe>
 800be14:	f04f 30ff 	mov.w	r0, #4294967295
 800be18:	b004      	add	sp, #16
 800be1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be1e:	4835      	ldr	r0, [pc, #212]	; (800bef4 <_printf_i+0x244>)
 800be20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800be24:	6829      	ldr	r1, [r5, #0]
 800be26:	6823      	ldr	r3, [r4, #0]
 800be28:	f851 6b04 	ldr.w	r6, [r1], #4
 800be2c:	6029      	str	r1, [r5, #0]
 800be2e:	061d      	lsls	r5, r3, #24
 800be30:	d514      	bpl.n	800be5c <_printf_i+0x1ac>
 800be32:	07df      	lsls	r7, r3, #31
 800be34:	bf44      	itt	mi
 800be36:	f043 0320 	orrmi.w	r3, r3, #32
 800be3a:	6023      	strmi	r3, [r4, #0]
 800be3c:	b91e      	cbnz	r6, 800be46 <_printf_i+0x196>
 800be3e:	6823      	ldr	r3, [r4, #0]
 800be40:	f023 0320 	bic.w	r3, r3, #32
 800be44:	6023      	str	r3, [r4, #0]
 800be46:	2310      	movs	r3, #16
 800be48:	e7b0      	b.n	800bdac <_printf_i+0xfc>
 800be4a:	6823      	ldr	r3, [r4, #0]
 800be4c:	f043 0320 	orr.w	r3, r3, #32
 800be50:	6023      	str	r3, [r4, #0]
 800be52:	2378      	movs	r3, #120	; 0x78
 800be54:	4828      	ldr	r0, [pc, #160]	; (800bef8 <_printf_i+0x248>)
 800be56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be5a:	e7e3      	b.n	800be24 <_printf_i+0x174>
 800be5c:	0659      	lsls	r1, r3, #25
 800be5e:	bf48      	it	mi
 800be60:	b2b6      	uxthmi	r6, r6
 800be62:	e7e6      	b.n	800be32 <_printf_i+0x182>
 800be64:	4615      	mov	r5, r2
 800be66:	e7bb      	b.n	800bde0 <_printf_i+0x130>
 800be68:	682b      	ldr	r3, [r5, #0]
 800be6a:	6826      	ldr	r6, [r4, #0]
 800be6c:	6961      	ldr	r1, [r4, #20]
 800be6e:	1d18      	adds	r0, r3, #4
 800be70:	6028      	str	r0, [r5, #0]
 800be72:	0635      	lsls	r5, r6, #24
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	d501      	bpl.n	800be7c <_printf_i+0x1cc>
 800be78:	6019      	str	r1, [r3, #0]
 800be7a:	e002      	b.n	800be82 <_printf_i+0x1d2>
 800be7c:	0670      	lsls	r0, r6, #25
 800be7e:	d5fb      	bpl.n	800be78 <_printf_i+0x1c8>
 800be80:	8019      	strh	r1, [r3, #0]
 800be82:	2300      	movs	r3, #0
 800be84:	6123      	str	r3, [r4, #16]
 800be86:	4615      	mov	r5, r2
 800be88:	e7ba      	b.n	800be00 <_printf_i+0x150>
 800be8a:	682b      	ldr	r3, [r5, #0]
 800be8c:	1d1a      	adds	r2, r3, #4
 800be8e:	602a      	str	r2, [r5, #0]
 800be90:	681d      	ldr	r5, [r3, #0]
 800be92:	6862      	ldr	r2, [r4, #4]
 800be94:	2100      	movs	r1, #0
 800be96:	4628      	mov	r0, r5
 800be98:	f7f4 f9c2 	bl	8000220 <memchr>
 800be9c:	b108      	cbz	r0, 800bea2 <_printf_i+0x1f2>
 800be9e:	1b40      	subs	r0, r0, r5
 800bea0:	6060      	str	r0, [r4, #4]
 800bea2:	6863      	ldr	r3, [r4, #4]
 800bea4:	6123      	str	r3, [r4, #16]
 800bea6:	2300      	movs	r3, #0
 800bea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800beac:	e7a8      	b.n	800be00 <_printf_i+0x150>
 800beae:	6923      	ldr	r3, [r4, #16]
 800beb0:	462a      	mov	r2, r5
 800beb2:	4649      	mov	r1, r9
 800beb4:	4640      	mov	r0, r8
 800beb6:	47d0      	blx	sl
 800beb8:	3001      	adds	r0, #1
 800beba:	d0ab      	beq.n	800be14 <_printf_i+0x164>
 800bebc:	6823      	ldr	r3, [r4, #0]
 800bebe:	079b      	lsls	r3, r3, #30
 800bec0:	d413      	bmi.n	800beea <_printf_i+0x23a>
 800bec2:	68e0      	ldr	r0, [r4, #12]
 800bec4:	9b03      	ldr	r3, [sp, #12]
 800bec6:	4298      	cmp	r0, r3
 800bec8:	bfb8      	it	lt
 800beca:	4618      	movlt	r0, r3
 800becc:	e7a4      	b.n	800be18 <_printf_i+0x168>
 800bece:	2301      	movs	r3, #1
 800bed0:	4632      	mov	r2, r6
 800bed2:	4649      	mov	r1, r9
 800bed4:	4640      	mov	r0, r8
 800bed6:	47d0      	blx	sl
 800bed8:	3001      	adds	r0, #1
 800beda:	d09b      	beq.n	800be14 <_printf_i+0x164>
 800bedc:	3501      	adds	r5, #1
 800bede:	68e3      	ldr	r3, [r4, #12]
 800bee0:	9903      	ldr	r1, [sp, #12]
 800bee2:	1a5b      	subs	r3, r3, r1
 800bee4:	42ab      	cmp	r3, r5
 800bee6:	dcf2      	bgt.n	800bece <_printf_i+0x21e>
 800bee8:	e7eb      	b.n	800bec2 <_printf_i+0x212>
 800beea:	2500      	movs	r5, #0
 800beec:	f104 0619 	add.w	r6, r4, #25
 800bef0:	e7f5      	b.n	800bede <_printf_i+0x22e>
 800bef2:	bf00      	nop
 800bef4:	0800e292 	.word	0x0800e292
 800bef8:	0800e2a3 	.word	0x0800e2a3

0800befc <iprintf>:
 800befc:	b40f      	push	{r0, r1, r2, r3}
 800befe:	4b0a      	ldr	r3, [pc, #40]	; (800bf28 <iprintf+0x2c>)
 800bf00:	b513      	push	{r0, r1, r4, lr}
 800bf02:	681c      	ldr	r4, [r3, #0]
 800bf04:	b124      	cbz	r4, 800bf10 <iprintf+0x14>
 800bf06:	69a3      	ldr	r3, [r4, #24]
 800bf08:	b913      	cbnz	r3, 800bf10 <iprintf+0x14>
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	f7ff f9c8 	bl	800b2a0 <__sinit>
 800bf10:	ab05      	add	r3, sp, #20
 800bf12:	9a04      	ldr	r2, [sp, #16]
 800bf14:	68a1      	ldr	r1, [r4, #8]
 800bf16:	9301      	str	r3, [sp, #4]
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f001 fda5 	bl	800da68 <_vfiprintf_r>
 800bf1e:	b002      	add	sp, #8
 800bf20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf24:	b004      	add	sp, #16
 800bf26:	4770      	bx	lr
 800bf28:	20000010 	.word	0x20000010

0800bf2c <_puts_r>:
 800bf2c:	b570      	push	{r4, r5, r6, lr}
 800bf2e:	460e      	mov	r6, r1
 800bf30:	4605      	mov	r5, r0
 800bf32:	b118      	cbz	r0, 800bf3c <_puts_r+0x10>
 800bf34:	6983      	ldr	r3, [r0, #24]
 800bf36:	b90b      	cbnz	r3, 800bf3c <_puts_r+0x10>
 800bf38:	f7ff f9b2 	bl	800b2a0 <__sinit>
 800bf3c:	69ab      	ldr	r3, [r5, #24]
 800bf3e:	68ac      	ldr	r4, [r5, #8]
 800bf40:	b913      	cbnz	r3, 800bf48 <_puts_r+0x1c>
 800bf42:	4628      	mov	r0, r5
 800bf44:	f7ff f9ac 	bl	800b2a0 <__sinit>
 800bf48:	4b2c      	ldr	r3, [pc, #176]	; (800bffc <_puts_r+0xd0>)
 800bf4a:	429c      	cmp	r4, r3
 800bf4c:	d120      	bne.n	800bf90 <_puts_r+0x64>
 800bf4e:	686c      	ldr	r4, [r5, #4]
 800bf50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf52:	07db      	lsls	r3, r3, #31
 800bf54:	d405      	bmi.n	800bf62 <_puts_r+0x36>
 800bf56:	89a3      	ldrh	r3, [r4, #12]
 800bf58:	0598      	lsls	r0, r3, #22
 800bf5a:	d402      	bmi.n	800bf62 <_puts_r+0x36>
 800bf5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf5e:	f7ff fa62 	bl	800b426 <__retarget_lock_acquire_recursive>
 800bf62:	89a3      	ldrh	r3, [r4, #12]
 800bf64:	0719      	lsls	r1, r3, #28
 800bf66:	d51d      	bpl.n	800bfa4 <_puts_r+0x78>
 800bf68:	6923      	ldr	r3, [r4, #16]
 800bf6a:	b1db      	cbz	r3, 800bfa4 <_puts_r+0x78>
 800bf6c:	3e01      	subs	r6, #1
 800bf6e:	68a3      	ldr	r3, [r4, #8]
 800bf70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf74:	3b01      	subs	r3, #1
 800bf76:	60a3      	str	r3, [r4, #8]
 800bf78:	bb39      	cbnz	r1, 800bfca <_puts_r+0x9e>
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	da38      	bge.n	800bff0 <_puts_r+0xc4>
 800bf7e:	4622      	mov	r2, r4
 800bf80:	210a      	movs	r1, #10
 800bf82:	4628      	mov	r0, r5
 800bf84:	f000 f906 	bl	800c194 <__swbuf_r>
 800bf88:	3001      	adds	r0, #1
 800bf8a:	d011      	beq.n	800bfb0 <_puts_r+0x84>
 800bf8c:	250a      	movs	r5, #10
 800bf8e:	e011      	b.n	800bfb4 <_puts_r+0x88>
 800bf90:	4b1b      	ldr	r3, [pc, #108]	; (800c000 <_puts_r+0xd4>)
 800bf92:	429c      	cmp	r4, r3
 800bf94:	d101      	bne.n	800bf9a <_puts_r+0x6e>
 800bf96:	68ac      	ldr	r4, [r5, #8]
 800bf98:	e7da      	b.n	800bf50 <_puts_r+0x24>
 800bf9a:	4b1a      	ldr	r3, [pc, #104]	; (800c004 <_puts_r+0xd8>)
 800bf9c:	429c      	cmp	r4, r3
 800bf9e:	bf08      	it	eq
 800bfa0:	68ec      	ldreq	r4, [r5, #12]
 800bfa2:	e7d5      	b.n	800bf50 <_puts_r+0x24>
 800bfa4:	4621      	mov	r1, r4
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	f000 f958 	bl	800c25c <__swsetup_r>
 800bfac:	2800      	cmp	r0, #0
 800bfae:	d0dd      	beq.n	800bf6c <_puts_r+0x40>
 800bfb0:	f04f 35ff 	mov.w	r5, #4294967295
 800bfb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfb6:	07da      	lsls	r2, r3, #31
 800bfb8:	d405      	bmi.n	800bfc6 <_puts_r+0x9a>
 800bfba:	89a3      	ldrh	r3, [r4, #12]
 800bfbc:	059b      	lsls	r3, r3, #22
 800bfbe:	d402      	bmi.n	800bfc6 <_puts_r+0x9a>
 800bfc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfc2:	f7ff fa31 	bl	800b428 <__retarget_lock_release_recursive>
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	bd70      	pop	{r4, r5, r6, pc}
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	da04      	bge.n	800bfd8 <_puts_r+0xac>
 800bfce:	69a2      	ldr	r2, [r4, #24]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	dc06      	bgt.n	800bfe2 <_puts_r+0xb6>
 800bfd4:	290a      	cmp	r1, #10
 800bfd6:	d004      	beq.n	800bfe2 <_puts_r+0xb6>
 800bfd8:	6823      	ldr	r3, [r4, #0]
 800bfda:	1c5a      	adds	r2, r3, #1
 800bfdc:	6022      	str	r2, [r4, #0]
 800bfde:	7019      	strb	r1, [r3, #0]
 800bfe0:	e7c5      	b.n	800bf6e <_puts_r+0x42>
 800bfe2:	4622      	mov	r2, r4
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	f000 f8d5 	bl	800c194 <__swbuf_r>
 800bfea:	3001      	adds	r0, #1
 800bfec:	d1bf      	bne.n	800bf6e <_puts_r+0x42>
 800bfee:	e7df      	b.n	800bfb0 <_puts_r+0x84>
 800bff0:	6823      	ldr	r3, [r4, #0]
 800bff2:	250a      	movs	r5, #10
 800bff4:	1c5a      	adds	r2, r3, #1
 800bff6:	6022      	str	r2, [r4, #0]
 800bff8:	701d      	strb	r5, [r3, #0]
 800bffa:	e7db      	b.n	800bfb4 <_puts_r+0x88>
 800bffc:	0800e23c 	.word	0x0800e23c
 800c000:	0800e25c 	.word	0x0800e25c
 800c004:	0800e21c 	.word	0x0800e21c

0800c008 <puts>:
 800c008:	4b02      	ldr	r3, [pc, #8]	; (800c014 <puts+0xc>)
 800c00a:	4601      	mov	r1, r0
 800c00c:	6818      	ldr	r0, [r3, #0]
 800c00e:	f7ff bf8d 	b.w	800bf2c <_puts_r>
 800c012:	bf00      	nop
 800c014:	20000010 	.word	0x20000010

0800c018 <cleanup_glue>:
 800c018:	b538      	push	{r3, r4, r5, lr}
 800c01a:	460c      	mov	r4, r1
 800c01c:	6809      	ldr	r1, [r1, #0]
 800c01e:	4605      	mov	r5, r0
 800c020:	b109      	cbz	r1, 800c026 <cleanup_glue+0xe>
 800c022:	f7ff fff9 	bl	800c018 <cleanup_glue>
 800c026:	4621      	mov	r1, r4
 800c028:	4628      	mov	r0, r5
 800c02a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c02e:	f7ff ba1b 	b.w	800b468 <_free_r>
	...

0800c034 <_reclaim_reent>:
 800c034:	4b2c      	ldr	r3, [pc, #176]	; (800c0e8 <_reclaim_reent+0xb4>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4283      	cmp	r3, r0
 800c03a:	b570      	push	{r4, r5, r6, lr}
 800c03c:	4604      	mov	r4, r0
 800c03e:	d051      	beq.n	800c0e4 <_reclaim_reent+0xb0>
 800c040:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c042:	b143      	cbz	r3, 800c056 <_reclaim_reent+0x22>
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d14a      	bne.n	800c0e0 <_reclaim_reent+0xac>
 800c04a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c04c:	6819      	ldr	r1, [r3, #0]
 800c04e:	b111      	cbz	r1, 800c056 <_reclaim_reent+0x22>
 800c050:	4620      	mov	r0, r4
 800c052:	f7ff fa09 	bl	800b468 <_free_r>
 800c056:	6961      	ldr	r1, [r4, #20]
 800c058:	b111      	cbz	r1, 800c060 <_reclaim_reent+0x2c>
 800c05a:	4620      	mov	r0, r4
 800c05c:	f7ff fa04 	bl	800b468 <_free_r>
 800c060:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c062:	b111      	cbz	r1, 800c06a <_reclaim_reent+0x36>
 800c064:	4620      	mov	r0, r4
 800c066:	f7ff f9ff 	bl	800b468 <_free_r>
 800c06a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c06c:	b111      	cbz	r1, 800c074 <_reclaim_reent+0x40>
 800c06e:	4620      	mov	r0, r4
 800c070:	f7ff f9fa 	bl	800b468 <_free_r>
 800c074:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c076:	b111      	cbz	r1, 800c07e <_reclaim_reent+0x4a>
 800c078:	4620      	mov	r0, r4
 800c07a:	f7ff f9f5 	bl	800b468 <_free_r>
 800c07e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c080:	b111      	cbz	r1, 800c088 <_reclaim_reent+0x54>
 800c082:	4620      	mov	r0, r4
 800c084:	f7ff f9f0 	bl	800b468 <_free_r>
 800c088:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c08a:	b111      	cbz	r1, 800c092 <_reclaim_reent+0x5e>
 800c08c:	4620      	mov	r0, r4
 800c08e:	f7ff f9eb 	bl	800b468 <_free_r>
 800c092:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c094:	b111      	cbz	r1, 800c09c <_reclaim_reent+0x68>
 800c096:	4620      	mov	r0, r4
 800c098:	f7ff f9e6 	bl	800b468 <_free_r>
 800c09c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c09e:	b111      	cbz	r1, 800c0a6 <_reclaim_reent+0x72>
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	f7ff f9e1 	bl	800b468 <_free_r>
 800c0a6:	69a3      	ldr	r3, [r4, #24]
 800c0a8:	b1e3      	cbz	r3, 800c0e4 <_reclaim_reent+0xb0>
 800c0aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	4798      	blx	r3
 800c0b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c0b2:	b1b9      	cbz	r1, 800c0e4 <_reclaim_reent+0xb0>
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c0ba:	f7ff bfad 	b.w	800c018 <cleanup_glue>
 800c0be:	5949      	ldr	r1, [r1, r5]
 800c0c0:	b941      	cbnz	r1, 800c0d4 <_reclaim_reent+0xa0>
 800c0c2:	3504      	adds	r5, #4
 800c0c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0c6:	2d80      	cmp	r5, #128	; 0x80
 800c0c8:	68d9      	ldr	r1, [r3, #12]
 800c0ca:	d1f8      	bne.n	800c0be <_reclaim_reent+0x8a>
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f7ff f9cb 	bl	800b468 <_free_r>
 800c0d2:	e7ba      	b.n	800c04a <_reclaim_reent+0x16>
 800c0d4:	680e      	ldr	r6, [r1, #0]
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	f7ff f9c6 	bl	800b468 <_free_r>
 800c0dc:	4631      	mov	r1, r6
 800c0de:	e7ef      	b.n	800c0c0 <_reclaim_reent+0x8c>
 800c0e0:	2500      	movs	r5, #0
 800c0e2:	e7ef      	b.n	800c0c4 <_reclaim_reent+0x90>
 800c0e4:	bd70      	pop	{r4, r5, r6, pc}
 800c0e6:	bf00      	nop
 800c0e8:	20000010 	.word	0x20000010

0800c0ec <_sbrk_r>:
 800c0ec:	b538      	push	{r3, r4, r5, lr}
 800c0ee:	4d06      	ldr	r5, [pc, #24]	; (800c108 <_sbrk_r+0x1c>)
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	4608      	mov	r0, r1
 800c0f6:	602b      	str	r3, [r5, #0]
 800c0f8:	f7f5 fb74 	bl	80017e4 <_sbrk>
 800c0fc:	1c43      	adds	r3, r0, #1
 800c0fe:	d102      	bne.n	800c106 <_sbrk_r+0x1a>
 800c100:	682b      	ldr	r3, [r5, #0]
 800c102:	b103      	cbz	r3, 800c106 <_sbrk_r+0x1a>
 800c104:	6023      	str	r3, [r4, #0]
 800c106:	bd38      	pop	{r3, r4, r5, pc}
 800c108:	20005108 	.word	0x20005108

0800c10c <__sread>:
 800c10c:	b510      	push	{r4, lr}
 800c10e:	460c      	mov	r4, r1
 800c110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c114:	f001 fdd8 	bl	800dcc8 <_read_r>
 800c118:	2800      	cmp	r0, #0
 800c11a:	bfab      	itete	ge
 800c11c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c11e:	89a3      	ldrhlt	r3, [r4, #12]
 800c120:	181b      	addge	r3, r3, r0
 800c122:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c126:	bfac      	ite	ge
 800c128:	6563      	strge	r3, [r4, #84]	; 0x54
 800c12a:	81a3      	strhlt	r3, [r4, #12]
 800c12c:	bd10      	pop	{r4, pc}

0800c12e <__swrite>:
 800c12e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c132:	461f      	mov	r7, r3
 800c134:	898b      	ldrh	r3, [r1, #12]
 800c136:	05db      	lsls	r3, r3, #23
 800c138:	4605      	mov	r5, r0
 800c13a:	460c      	mov	r4, r1
 800c13c:	4616      	mov	r6, r2
 800c13e:	d505      	bpl.n	800c14c <__swrite+0x1e>
 800c140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c144:	2302      	movs	r3, #2
 800c146:	2200      	movs	r2, #0
 800c148:	f001 f846 	bl	800d1d8 <_lseek_r>
 800c14c:	89a3      	ldrh	r3, [r4, #12]
 800c14e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c156:	81a3      	strh	r3, [r4, #12]
 800c158:	4632      	mov	r2, r6
 800c15a:	463b      	mov	r3, r7
 800c15c:	4628      	mov	r0, r5
 800c15e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c162:	f000 b869 	b.w	800c238 <_write_r>

0800c166 <__sseek>:
 800c166:	b510      	push	{r4, lr}
 800c168:	460c      	mov	r4, r1
 800c16a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c16e:	f001 f833 	bl	800d1d8 <_lseek_r>
 800c172:	1c43      	adds	r3, r0, #1
 800c174:	89a3      	ldrh	r3, [r4, #12]
 800c176:	bf15      	itete	ne
 800c178:	6560      	strne	r0, [r4, #84]	; 0x54
 800c17a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c17e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c182:	81a3      	strheq	r3, [r4, #12]
 800c184:	bf18      	it	ne
 800c186:	81a3      	strhne	r3, [r4, #12]
 800c188:	bd10      	pop	{r4, pc}

0800c18a <__sclose>:
 800c18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c18e:	f000 b8d3 	b.w	800c338 <_close_r>
	...

0800c194 <__swbuf_r>:
 800c194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c196:	460e      	mov	r6, r1
 800c198:	4614      	mov	r4, r2
 800c19a:	4605      	mov	r5, r0
 800c19c:	b118      	cbz	r0, 800c1a6 <__swbuf_r+0x12>
 800c19e:	6983      	ldr	r3, [r0, #24]
 800c1a0:	b90b      	cbnz	r3, 800c1a6 <__swbuf_r+0x12>
 800c1a2:	f7ff f87d 	bl	800b2a0 <__sinit>
 800c1a6:	4b21      	ldr	r3, [pc, #132]	; (800c22c <__swbuf_r+0x98>)
 800c1a8:	429c      	cmp	r4, r3
 800c1aa:	d12b      	bne.n	800c204 <__swbuf_r+0x70>
 800c1ac:	686c      	ldr	r4, [r5, #4]
 800c1ae:	69a3      	ldr	r3, [r4, #24]
 800c1b0:	60a3      	str	r3, [r4, #8]
 800c1b2:	89a3      	ldrh	r3, [r4, #12]
 800c1b4:	071a      	lsls	r2, r3, #28
 800c1b6:	d52f      	bpl.n	800c218 <__swbuf_r+0x84>
 800c1b8:	6923      	ldr	r3, [r4, #16]
 800c1ba:	b36b      	cbz	r3, 800c218 <__swbuf_r+0x84>
 800c1bc:	6923      	ldr	r3, [r4, #16]
 800c1be:	6820      	ldr	r0, [r4, #0]
 800c1c0:	1ac0      	subs	r0, r0, r3
 800c1c2:	6963      	ldr	r3, [r4, #20]
 800c1c4:	b2f6      	uxtb	r6, r6
 800c1c6:	4283      	cmp	r3, r0
 800c1c8:	4637      	mov	r7, r6
 800c1ca:	dc04      	bgt.n	800c1d6 <__swbuf_r+0x42>
 800c1cc:	4621      	mov	r1, r4
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	f000 ffc2 	bl	800d158 <_fflush_r>
 800c1d4:	bb30      	cbnz	r0, 800c224 <__swbuf_r+0x90>
 800c1d6:	68a3      	ldr	r3, [r4, #8]
 800c1d8:	3b01      	subs	r3, #1
 800c1da:	60a3      	str	r3, [r4, #8]
 800c1dc:	6823      	ldr	r3, [r4, #0]
 800c1de:	1c5a      	adds	r2, r3, #1
 800c1e0:	6022      	str	r2, [r4, #0]
 800c1e2:	701e      	strb	r6, [r3, #0]
 800c1e4:	6963      	ldr	r3, [r4, #20]
 800c1e6:	3001      	adds	r0, #1
 800c1e8:	4283      	cmp	r3, r0
 800c1ea:	d004      	beq.n	800c1f6 <__swbuf_r+0x62>
 800c1ec:	89a3      	ldrh	r3, [r4, #12]
 800c1ee:	07db      	lsls	r3, r3, #31
 800c1f0:	d506      	bpl.n	800c200 <__swbuf_r+0x6c>
 800c1f2:	2e0a      	cmp	r6, #10
 800c1f4:	d104      	bne.n	800c200 <__swbuf_r+0x6c>
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	f000 ffad 	bl	800d158 <_fflush_r>
 800c1fe:	b988      	cbnz	r0, 800c224 <__swbuf_r+0x90>
 800c200:	4638      	mov	r0, r7
 800c202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c204:	4b0a      	ldr	r3, [pc, #40]	; (800c230 <__swbuf_r+0x9c>)
 800c206:	429c      	cmp	r4, r3
 800c208:	d101      	bne.n	800c20e <__swbuf_r+0x7a>
 800c20a:	68ac      	ldr	r4, [r5, #8]
 800c20c:	e7cf      	b.n	800c1ae <__swbuf_r+0x1a>
 800c20e:	4b09      	ldr	r3, [pc, #36]	; (800c234 <__swbuf_r+0xa0>)
 800c210:	429c      	cmp	r4, r3
 800c212:	bf08      	it	eq
 800c214:	68ec      	ldreq	r4, [r5, #12]
 800c216:	e7ca      	b.n	800c1ae <__swbuf_r+0x1a>
 800c218:	4621      	mov	r1, r4
 800c21a:	4628      	mov	r0, r5
 800c21c:	f000 f81e 	bl	800c25c <__swsetup_r>
 800c220:	2800      	cmp	r0, #0
 800c222:	d0cb      	beq.n	800c1bc <__swbuf_r+0x28>
 800c224:	f04f 37ff 	mov.w	r7, #4294967295
 800c228:	e7ea      	b.n	800c200 <__swbuf_r+0x6c>
 800c22a:	bf00      	nop
 800c22c:	0800e23c 	.word	0x0800e23c
 800c230:	0800e25c 	.word	0x0800e25c
 800c234:	0800e21c 	.word	0x0800e21c

0800c238 <_write_r>:
 800c238:	b538      	push	{r3, r4, r5, lr}
 800c23a:	4d07      	ldr	r5, [pc, #28]	; (800c258 <_write_r+0x20>)
 800c23c:	4604      	mov	r4, r0
 800c23e:	4608      	mov	r0, r1
 800c240:	4611      	mov	r1, r2
 800c242:	2200      	movs	r2, #0
 800c244:	602a      	str	r2, [r5, #0]
 800c246:	461a      	mov	r2, r3
 800c248:	f7f5 fa7b 	bl	8001742 <_write>
 800c24c:	1c43      	adds	r3, r0, #1
 800c24e:	d102      	bne.n	800c256 <_write_r+0x1e>
 800c250:	682b      	ldr	r3, [r5, #0]
 800c252:	b103      	cbz	r3, 800c256 <_write_r+0x1e>
 800c254:	6023      	str	r3, [r4, #0]
 800c256:	bd38      	pop	{r3, r4, r5, pc}
 800c258:	20005108 	.word	0x20005108

0800c25c <__swsetup_r>:
 800c25c:	4b32      	ldr	r3, [pc, #200]	; (800c328 <__swsetup_r+0xcc>)
 800c25e:	b570      	push	{r4, r5, r6, lr}
 800c260:	681d      	ldr	r5, [r3, #0]
 800c262:	4606      	mov	r6, r0
 800c264:	460c      	mov	r4, r1
 800c266:	b125      	cbz	r5, 800c272 <__swsetup_r+0x16>
 800c268:	69ab      	ldr	r3, [r5, #24]
 800c26a:	b913      	cbnz	r3, 800c272 <__swsetup_r+0x16>
 800c26c:	4628      	mov	r0, r5
 800c26e:	f7ff f817 	bl	800b2a0 <__sinit>
 800c272:	4b2e      	ldr	r3, [pc, #184]	; (800c32c <__swsetup_r+0xd0>)
 800c274:	429c      	cmp	r4, r3
 800c276:	d10f      	bne.n	800c298 <__swsetup_r+0x3c>
 800c278:	686c      	ldr	r4, [r5, #4]
 800c27a:	89a3      	ldrh	r3, [r4, #12]
 800c27c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c280:	0719      	lsls	r1, r3, #28
 800c282:	d42c      	bmi.n	800c2de <__swsetup_r+0x82>
 800c284:	06dd      	lsls	r5, r3, #27
 800c286:	d411      	bmi.n	800c2ac <__swsetup_r+0x50>
 800c288:	2309      	movs	r3, #9
 800c28a:	6033      	str	r3, [r6, #0]
 800c28c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c290:	81a3      	strh	r3, [r4, #12]
 800c292:	f04f 30ff 	mov.w	r0, #4294967295
 800c296:	e03e      	b.n	800c316 <__swsetup_r+0xba>
 800c298:	4b25      	ldr	r3, [pc, #148]	; (800c330 <__swsetup_r+0xd4>)
 800c29a:	429c      	cmp	r4, r3
 800c29c:	d101      	bne.n	800c2a2 <__swsetup_r+0x46>
 800c29e:	68ac      	ldr	r4, [r5, #8]
 800c2a0:	e7eb      	b.n	800c27a <__swsetup_r+0x1e>
 800c2a2:	4b24      	ldr	r3, [pc, #144]	; (800c334 <__swsetup_r+0xd8>)
 800c2a4:	429c      	cmp	r4, r3
 800c2a6:	bf08      	it	eq
 800c2a8:	68ec      	ldreq	r4, [r5, #12]
 800c2aa:	e7e6      	b.n	800c27a <__swsetup_r+0x1e>
 800c2ac:	0758      	lsls	r0, r3, #29
 800c2ae:	d512      	bpl.n	800c2d6 <__swsetup_r+0x7a>
 800c2b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2b2:	b141      	cbz	r1, 800c2c6 <__swsetup_r+0x6a>
 800c2b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2b8:	4299      	cmp	r1, r3
 800c2ba:	d002      	beq.n	800c2c2 <__swsetup_r+0x66>
 800c2bc:	4630      	mov	r0, r6
 800c2be:	f7ff f8d3 	bl	800b468 <_free_r>
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	6363      	str	r3, [r4, #52]	; 0x34
 800c2c6:	89a3      	ldrh	r3, [r4, #12]
 800c2c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c2cc:	81a3      	strh	r3, [r4, #12]
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	6063      	str	r3, [r4, #4]
 800c2d2:	6923      	ldr	r3, [r4, #16]
 800c2d4:	6023      	str	r3, [r4, #0]
 800c2d6:	89a3      	ldrh	r3, [r4, #12]
 800c2d8:	f043 0308 	orr.w	r3, r3, #8
 800c2dc:	81a3      	strh	r3, [r4, #12]
 800c2de:	6923      	ldr	r3, [r4, #16]
 800c2e0:	b94b      	cbnz	r3, 800c2f6 <__swsetup_r+0x9a>
 800c2e2:	89a3      	ldrh	r3, [r4, #12]
 800c2e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c2e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2ec:	d003      	beq.n	800c2f6 <__swsetup_r+0x9a>
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	f000 ffa9 	bl	800d248 <__smakebuf_r>
 800c2f6:	89a0      	ldrh	r0, [r4, #12]
 800c2f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2fc:	f010 0301 	ands.w	r3, r0, #1
 800c300:	d00a      	beq.n	800c318 <__swsetup_r+0xbc>
 800c302:	2300      	movs	r3, #0
 800c304:	60a3      	str	r3, [r4, #8]
 800c306:	6963      	ldr	r3, [r4, #20]
 800c308:	425b      	negs	r3, r3
 800c30a:	61a3      	str	r3, [r4, #24]
 800c30c:	6923      	ldr	r3, [r4, #16]
 800c30e:	b943      	cbnz	r3, 800c322 <__swsetup_r+0xc6>
 800c310:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c314:	d1ba      	bne.n	800c28c <__swsetup_r+0x30>
 800c316:	bd70      	pop	{r4, r5, r6, pc}
 800c318:	0781      	lsls	r1, r0, #30
 800c31a:	bf58      	it	pl
 800c31c:	6963      	ldrpl	r3, [r4, #20]
 800c31e:	60a3      	str	r3, [r4, #8]
 800c320:	e7f4      	b.n	800c30c <__swsetup_r+0xb0>
 800c322:	2000      	movs	r0, #0
 800c324:	e7f7      	b.n	800c316 <__swsetup_r+0xba>
 800c326:	bf00      	nop
 800c328:	20000010 	.word	0x20000010
 800c32c:	0800e23c 	.word	0x0800e23c
 800c330:	0800e25c 	.word	0x0800e25c
 800c334:	0800e21c 	.word	0x0800e21c

0800c338 <_close_r>:
 800c338:	b538      	push	{r3, r4, r5, lr}
 800c33a:	4d06      	ldr	r5, [pc, #24]	; (800c354 <_close_r+0x1c>)
 800c33c:	2300      	movs	r3, #0
 800c33e:	4604      	mov	r4, r0
 800c340:	4608      	mov	r0, r1
 800c342:	602b      	str	r3, [r5, #0]
 800c344:	f7f5 fa19 	bl	800177a <_close>
 800c348:	1c43      	adds	r3, r0, #1
 800c34a:	d102      	bne.n	800c352 <_close_r+0x1a>
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	b103      	cbz	r3, 800c352 <_close_r+0x1a>
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	bd38      	pop	{r3, r4, r5, pc}
 800c354:	20005108 	.word	0x20005108

0800c358 <quorem>:
 800c358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c35c:	6903      	ldr	r3, [r0, #16]
 800c35e:	690c      	ldr	r4, [r1, #16]
 800c360:	42a3      	cmp	r3, r4
 800c362:	4607      	mov	r7, r0
 800c364:	f2c0 8081 	blt.w	800c46a <quorem+0x112>
 800c368:	3c01      	subs	r4, #1
 800c36a:	f101 0814 	add.w	r8, r1, #20
 800c36e:	f100 0514 	add.w	r5, r0, #20
 800c372:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c376:	9301      	str	r3, [sp, #4]
 800c378:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c37c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c380:	3301      	adds	r3, #1
 800c382:	429a      	cmp	r2, r3
 800c384:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c388:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c38c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c390:	d331      	bcc.n	800c3f6 <quorem+0x9e>
 800c392:	f04f 0e00 	mov.w	lr, #0
 800c396:	4640      	mov	r0, r8
 800c398:	46ac      	mov	ip, r5
 800c39a:	46f2      	mov	sl, lr
 800c39c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c3a0:	b293      	uxth	r3, r2
 800c3a2:	fb06 e303 	mla	r3, r6, r3, lr
 800c3a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c3aa:	b29b      	uxth	r3, r3
 800c3ac:	ebaa 0303 	sub.w	r3, sl, r3
 800c3b0:	f8dc a000 	ldr.w	sl, [ip]
 800c3b4:	0c12      	lsrs	r2, r2, #16
 800c3b6:	fa13 f38a 	uxtah	r3, r3, sl
 800c3ba:	fb06 e202 	mla	r2, r6, r2, lr
 800c3be:	9300      	str	r3, [sp, #0]
 800c3c0:	9b00      	ldr	r3, [sp, #0]
 800c3c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c3c6:	b292      	uxth	r2, r2
 800c3c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c3cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c3d0:	f8bd 3000 	ldrh.w	r3, [sp]
 800c3d4:	4581      	cmp	r9, r0
 800c3d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3da:	f84c 3b04 	str.w	r3, [ip], #4
 800c3de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c3e2:	d2db      	bcs.n	800c39c <quorem+0x44>
 800c3e4:	f855 300b 	ldr.w	r3, [r5, fp]
 800c3e8:	b92b      	cbnz	r3, 800c3f6 <quorem+0x9e>
 800c3ea:	9b01      	ldr	r3, [sp, #4]
 800c3ec:	3b04      	subs	r3, #4
 800c3ee:	429d      	cmp	r5, r3
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	d32e      	bcc.n	800c452 <quorem+0xfa>
 800c3f4:	613c      	str	r4, [r7, #16]
 800c3f6:	4638      	mov	r0, r7
 800c3f8:	f001 f9f4 	bl	800d7e4 <__mcmp>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	db24      	blt.n	800c44a <quorem+0xf2>
 800c400:	3601      	adds	r6, #1
 800c402:	4628      	mov	r0, r5
 800c404:	f04f 0c00 	mov.w	ip, #0
 800c408:	f858 2b04 	ldr.w	r2, [r8], #4
 800c40c:	f8d0 e000 	ldr.w	lr, [r0]
 800c410:	b293      	uxth	r3, r2
 800c412:	ebac 0303 	sub.w	r3, ip, r3
 800c416:	0c12      	lsrs	r2, r2, #16
 800c418:	fa13 f38e 	uxtah	r3, r3, lr
 800c41c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c420:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c424:	b29b      	uxth	r3, r3
 800c426:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c42a:	45c1      	cmp	r9, r8
 800c42c:	f840 3b04 	str.w	r3, [r0], #4
 800c430:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c434:	d2e8      	bcs.n	800c408 <quorem+0xb0>
 800c436:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c43a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c43e:	b922      	cbnz	r2, 800c44a <quorem+0xf2>
 800c440:	3b04      	subs	r3, #4
 800c442:	429d      	cmp	r5, r3
 800c444:	461a      	mov	r2, r3
 800c446:	d30a      	bcc.n	800c45e <quorem+0x106>
 800c448:	613c      	str	r4, [r7, #16]
 800c44a:	4630      	mov	r0, r6
 800c44c:	b003      	add	sp, #12
 800c44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c452:	6812      	ldr	r2, [r2, #0]
 800c454:	3b04      	subs	r3, #4
 800c456:	2a00      	cmp	r2, #0
 800c458:	d1cc      	bne.n	800c3f4 <quorem+0x9c>
 800c45a:	3c01      	subs	r4, #1
 800c45c:	e7c7      	b.n	800c3ee <quorem+0x96>
 800c45e:	6812      	ldr	r2, [r2, #0]
 800c460:	3b04      	subs	r3, #4
 800c462:	2a00      	cmp	r2, #0
 800c464:	d1f0      	bne.n	800c448 <quorem+0xf0>
 800c466:	3c01      	subs	r4, #1
 800c468:	e7eb      	b.n	800c442 <quorem+0xea>
 800c46a:	2000      	movs	r0, #0
 800c46c:	e7ee      	b.n	800c44c <quorem+0xf4>
	...

0800c470 <_dtoa_r>:
 800c470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c474:	ed2d 8b04 	vpush	{d8-d9}
 800c478:	ec57 6b10 	vmov	r6, r7, d0
 800c47c:	b093      	sub	sp, #76	; 0x4c
 800c47e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c480:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c484:	9106      	str	r1, [sp, #24]
 800c486:	ee10 aa10 	vmov	sl, s0
 800c48a:	4604      	mov	r4, r0
 800c48c:	9209      	str	r2, [sp, #36]	; 0x24
 800c48e:	930c      	str	r3, [sp, #48]	; 0x30
 800c490:	46bb      	mov	fp, r7
 800c492:	b975      	cbnz	r5, 800c4b2 <_dtoa_r+0x42>
 800c494:	2010      	movs	r0, #16
 800c496:	f7fe ffc9 	bl	800b42c <malloc>
 800c49a:	4602      	mov	r2, r0
 800c49c:	6260      	str	r0, [r4, #36]	; 0x24
 800c49e:	b920      	cbnz	r0, 800c4aa <_dtoa_r+0x3a>
 800c4a0:	4ba7      	ldr	r3, [pc, #668]	; (800c740 <_dtoa_r+0x2d0>)
 800c4a2:	21ea      	movs	r1, #234	; 0xea
 800c4a4:	48a7      	ldr	r0, [pc, #668]	; (800c744 <_dtoa_r+0x2d4>)
 800c4a6:	f001 fc21 	bl	800dcec <__assert_func>
 800c4aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c4ae:	6005      	str	r5, [r0, #0]
 800c4b0:	60c5      	str	r5, [r0, #12]
 800c4b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4b4:	6819      	ldr	r1, [r3, #0]
 800c4b6:	b151      	cbz	r1, 800c4ce <_dtoa_r+0x5e>
 800c4b8:	685a      	ldr	r2, [r3, #4]
 800c4ba:	604a      	str	r2, [r1, #4]
 800c4bc:	2301      	movs	r3, #1
 800c4be:	4093      	lsls	r3, r2
 800c4c0:	608b      	str	r3, [r1, #8]
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f000 ff4c 	bl	800d360 <_Bfree>
 800c4c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	601a      	str	r2, [r3, #0]
 800c4ce:	1e3b      	subs	r3, r7, #0
 800c4d0:	bfaa      	itet	ge
 800c4d2:	2300      	movge	r3, #0
 800c4d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c4d8:	f8c8 3000 	strge.w	r3, [r8]
 800c4dc:	4b9a      	ldr	r3, [pc, #616]	; (800c748 <_dtoa_r+0x2d8>)
 800c4de:	bfbc      	itt	lt
 800c4e0:	2201      	movlt	r2, #1
 800c4e2:	f8c8 2000 	strlt.w	r2, [r8]
 800c4e6:	ea33 030b 	bics.w	r3, r3, fp
 800c4ea:	d11b      	bne.n	800c524 <_dtoa_r+0xb4>
 800c4ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4ee:	f242 730f 	movw	r3, #9999	; 0x270f
 800c4f2:	6013      	str	r3, [r2, #0]
 800c4f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4f8:	4333      	orrs	r3, r6
 800c4fa:	f000 8592 	beq.w	800d022 <_dtoa_r+0xbb2>
 800c4fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c500:	b963      	cbnz	r3, 800c51c <_dtoa_r+0xac>
 800c502:	4b92      	ldr	r3, [pc, #584]	; (800c74c <_dtoa_r+0x2dc>)
 800c504:	e022      	b.n	800c54c <_dtoa_r+0xdc>
 800c506:	4b92      	ldr	r3, [pc, #584]	; (800c750 <_dtoa_r+0x2e0>)
 800c508:	9301      	str	r3, [sp, #4]
 800c50a:	3308      	adds	r3, #8
 800c50c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c50e:	6013      	str	r3, [r2, #0]
 800c510:	9801      	ldr	r0, [sp, #4]
 800c512:	b013      	add	sp, #76	; 0x4c
 800c514:	ecbd 8b04 	vpop	{d8-d9}
 800c518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c51c:	4b8b      	ldr	r3, [pc, #556]	; (800c74c <_dtoa_r+0x2dc>)
 800c51e:	9301      	str	r3, [sp, #4]
 800c520:	3303      	adds	r3, #3
 800c522:	e7f3      	b.n	800c50c <_dtoa_r+0x9c>
 800c524:	2200      	movs	r2, #0
 800c526:	2300      	movs	r3, #0
 800c528:	4650      	mov	r0, sl
 800c52a:	4659      	mov	r1, fp
 800c52c:	f7f4 faec 	bl	8000b08 <__aeabi_dcmpeq>
 800c530:	ec4b ab19 	vmov	d9, sl, fp
 800c534:	4680      	mov	r8, r0
 800c536:	b158      	cbz	r0, 800c550 <_dtoa_r+0xe0>
 800c538:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c53a:	2301      	movs	r3, #1
 800c53c:	6013      	str	r3, [r2, #0]
 800c53e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c540:	2b00      	cmp	r3, #0
 800c542:	f000 856b 	beq.w	800d01c <_dtoa_r+0xbac>
 800c546:	4883      	ldr	r0, [pc, #524]	; (800c754 <_dtoa_r+0x2e4>)
 800c548:	6018      	str	r0, [r3, #0]
 800c54a:	1e43      	subs	r3, r0, #1
 800c54c:	9301      	str	r3, [sp, #4]
 800c54e:	e7df      	b.n	800c510 <_dtoa_r+0xa0>
 800c550:	ec4b ab10 	vmov	d0, sl, fp
 800c554:	aa10      	add	r2, sp, #64	; 0x40
 800c556:	a911      	add	r1, sp, #68	; 0x44
 800c558:	4620      	mov	r0, r4
 800c55a:	f001 f9e9 	bl	800d930 <__d2b>
 800c55e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c562:	ee08 0a10 	vmov	s16, r0
 800c566:	2d00      	cmp	r5, #0
 800c568:	f000 8084 	beq.w	800c674 <_dtoa_r+0x204>
 800c56c:	ee19 3a90 	vmov	r3, s19
 800c570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c574:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c578:	4656      	mov	r6, sl
 800c57a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c57e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c582:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c586:	4b74      	ldr	r3, [pc, #464]	; (800c758 <_dtoa_r+0x2e8>)
 800c588:	2200      	movs	r2, #0
 800c58a:	4630      	mov	r0, r6
 800c58c:	4639      	mov	r1, r7
 800c58e:	f7f3 fe9b 	bl	80002c8 <__aeabi_dsub>
 800c592:	a365      	add	r3, pc, #404	; (adr r3, 800c728 <_dtoa_r+0x2b8>)
 800c594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c598:	f7f4 f84e 	bl	8000638 <__aeabi_dmul>
 800c59c:	a364      	add	r3, pc, #400	; (adr r3, 800c730 <_dtoa_r+0x2c0>)
 800c59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a2:	f7f3 fe93 	bl	80002cc <__adddf3>
 800c5a6:	4606      	mov	r6, r0
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	460f      	mov	r7, r1
 800c5ac:	f7f3 ffda 	bl	8000564 <__aeabi_i2d>
 800c5b0:	a361      	add	r3, pc, #388	; (adr r3, 800c738 <_dtoa_r+0x2c8>)
 800c5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b6:	f7f4 f83f 	bl	8000638 <__aeabi_dmul>
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	460b      	mov	r3, r1
 800c5be:	4630      	mov	r0, r6
 800c5c0:	4639      	mov	r1, r7
 800c5c2:	f7f3 fe83 	bl	80002cc <__adddf3>
 800c5c6:	4606      	mov	r6, r0
 800c5c8:	460f      	mov	r7, r1
 800c5ca:	f7f4 fae5 	bl	8000b98 <__aeabi_d2iz>
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	9000      	str	r0, [sp, #0]
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	4630      	mov	r0, r6
 800c5d6:	4639      	mov	r1, r7
 800c5d8:	f7f4 faa0 	bl	8000b1c <__aeabi_dcmplt>
 800c5dc:	b150      	cbz	r0, 800c5f4 <_dtoa_r+0x184>
 800c5de:	9800      	ldr	r0, [sp, #0]
 800c5e0:	f7f3 ffc0 	bl	8000564 <__aeabi_i2d>
 800c5e4:	4632      	mov	r2, r6
 800c5e6:	463b      	mov	r3, r7
 800c5e8:	f7f4 fa8e 	bl	8000b08 <__aeabi_dcmpeq>
 800c5ec:	b910      	cbnz	r0, 800c5f4 <_dtoa_r+0x184>
 800c5ee:	9b00      	ldr	r3, [sp, #0]
 800c5f0:	3b01      	subs	r3, #1
 800c5f2:	9300      	str	r3, [sp, #0]
 800c5f4:	9b00      	ldr	r3, [sp, #0]
 800c5f6:	2b16      	cmp	r3, #22
 800c5f8:	d85a      	bhi.n	800c6b0 <_dtoa_r+0x240>
 800c5fa:	9a00      	ldr	r2, [sp, #0]
 800c5fc:	4b57      	ldr	r3, [pc, #348]	; (800c75c <_dtoa_r+0x2ec>)
 800c5fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c606:	ec51 0b19 	vmov	r0, r1, d9
 800c60a:	f7f4 fa87 	bl	8000b1c <__aeabi_dcmplt>
 800c60e:	2800      	cmp	r0, #0
 800c610:	d050      	beq.n	800c6b4 <_dtoa_r+0x244>
 800c612:	9b00      	ldr	r3, [sp, #0]
 800c614:	3b01      	subs	r3, #1
 800c616:	9300      	str	r3, [sp, #0]
 800c618:	2300      	movs	r3, #0
 800c61a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c61c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c61e:	1b5d      	subs	r5, r3, r5
 800c620:	1e6b      	subs	r3, r5, #1
 800c622:	9305      	str	r3, [sp, #20]
 800c624:	bf45      	ittet	mi
 800c626:	f1c5 0301 	rsbmi	r3, r5, #1
 800c62a:	9304      	strmi	r3, [sp, #16]
 800c62c:	2300      	movpl	r3, #0
 800c62e:	2300      	movmi	r3, #0
 800c630:	bf4c      	ite	mi
 800c632:	9305      	strmi	r3, [sp, #20]
 800c634:	9304      	strpl	r3, [sp, #16]
 800c636:	9b00      	ldr	r3, [sp, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	db3d      	blt.n	800c6b8 <_dtoa_r+0x248>
 800c63c:	9b05      	ldr	r3, [sp, #20]
 800c63e:	9a00      	ldr	r2, [sp, #0]
 800c640:	920a      	str	r2, [sp, #40]	; 0x28
 800c642:	4413      	add	r3, r2
 800c644:	9305      	str	r3, [sp, #20]
 800c646:	2300      	movs	r3, #0
 800c648:	9307      	str	r3, [sp, #28]
 800c64a:	9b06      	ldr	r3, [sp, #24]
 800c64c:	2b09      	cmp	r3, #9
 800c64e:	f200 8089 	bhi.w	800c764 <_dtoa_r+0x2f4>
 800c652:	2b05      	cmp	r3, #5
 800c654:	bfc4      	itt	gt
 800c656:	3b04      	subgt	r3, #4
 800c658:	9306      	strgt	r3, [sp, #24]
 800c65a:	9b06      	ldr	r3, [sp, #24]
 800c65c:	f1a3 0302 	sub.w	r3, r3, #2
 800c660:	bfcc      	ite	gt
 800c662:	2500      	movgt	r5, #0
 800c664:	2501      	movle	r5, #1
 800c666:	2b03      	cmp	r3, #3
 800c668:	f200 8087 	bhi.w	800c77a <_dtoa_r+0x30a>
 800c66c:	e8df f003 	tbb	[pc, r3]
 800c670:	59383a2d 	.word	0x59383a2d
 800c674:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c678:	441d      	add	r5, r3
 800c67a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c67e:	2b20      	cmp	r3, #32
 800c680:	bfc1      	itttt	gt
 800c682:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c686:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c68a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c68e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c692:	bfda      	itte	le
 800c694:	f1c3 0320 	rsble	r3, r3, #32
 800c698:	fa06 f003 	lslle.w	r0, r6, r3
 800c69c:	4318      	orrgt	r0, r3
 800c69e:	f7f3 ff51 	bl	8000544 <__aeabi_ui2d>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	4606      	mov	r6, r0
 800c6a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c6aa:	3d01      	subs	r5, #1
 800c6ac:	930e      	str	r3, [sp, #56]	; 0x38
 800c6ae:	e76a      	b.n	800c586 <_dtoa_r+0x116>
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	e7b2      	b.n	800c61a <_dtoa_r+0x1aa>
 800c6b4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c6b6:	e7b1      	b.n	800c61c <_dtoa_r+0x1ac>
 800c6b8:	9b04      	ldr	r3, [sp, #16]
 800c6ba:	9a00      	ldr	r2, [sp, #0]
 800c6bc:	1a9b      	subs	r3, r3, r2
 800c6be:	9304      	str	r3, [sp, #16]
 800c6c0:	4253      	negs	r3, r2
 800c6c2:	9307      	str	r3, [sp, #28]
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	930a      	str	r3, [sp, #40]	; 0x28
 800c6c8:	e7bf      	b.n	800c64a <_dtoa_r+0x1da>
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	9308      	str	r3, [sp, #32]
 800c6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	dc55      	bgt.n	800c780 <_dtoa_r+0x310>
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c6da:	461a      	mov	r2, r3
 800c6dc:	9209      	str	r2, [sp, #36]	; 0x24
 800c6de:	e00c      	b.n	800c6fa <_dtoa_r+0x28a>
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	e7f3      	b.n	800c6cc <_dtoa_r+0x25c>
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6e8:	9308      	str	r3, [sp, #32]
 800c6ea:	9b00      	ldr	r3, [sp, #0]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	9302      	str	r3, [sp, #8]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	9303      	str	r3, [sp, #12]
 800c6f6:	bfb8      	it	lt
 800c6f8:	2301      	movlt	r3, #1
 800c6fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	6042      	str	r2, [r0, #4]
 800c700:	2204      	movs	r2, #4
 800c702:	f102 0614 	add.w	r6, r2, #20
 800c706:	429e      	cmp	r6, r3
 800c708:	6841      	ldr	r1, [r0, #4]
 800c70a:	d93d      	bls.n	800c788 <_dtoa_r+0x318>
 800c70c:	4620      	mov	r0, r4
 800c70e:	f000 fde7 	bl	800d2e0 <_Balloc>
 800c712:	9001      	str	r0, [sp, #4]
 800c714:	2800      	cmp	r0, #0
 800c716:	d13b      	bne.n	800c790 <_dtoa_r+0x320>
 800c718:	4b11      	ldr	r3, [pc, #68]	; (800c760 <_dtoa_r+0x2f0>)
 800c71a:	4602      	mov	r2, r0
 800c71c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c720:	e6c0      	b.n	800c4a4 <_dtoa_r+0x34>
 800c722:	2301      	movs	r3, #1
 800c724:	e7df      	b.n	800c6e6 <_dtoa_r+0x276>
 800c726:	bf00      	nop
 800c728:	636f4361 	.word	0x636f4361
 800c72c:	3fd287a7 	.word	0x3fd287a7
 800c730:	8b60c8b3 	.word	0x8b60c8b3
 800c734:	3fc68a28 	.word	0x3fc68a28
 800c738:	509f79fb 	.word	0x509f79fb
 800c73c:	3fd34413 	.word	0x3fd34413
 800c740:	0800e2c1 	.word	0x0800e2c1
 800c744:	0800e2d8 	.word	0x0800e2d8
 800c748:	7ff00000 	.word	0x7ff00000
 800c74c:	0800e2bd 	.word	0x0800e2bd
 800c750:	0800e2b4 	.word	0x0800e2b4
 800c754:	0800e291 	.word	0x0800e291
 800c758:	3ff80000 	.word	0x3ff80000
 800c75c:	0800e3c8 	.word	0x0800e3c8
 800c760:	0800e333 	.word	0x0800e333
 800c764:	2501      	movs	r5, #1
 800c766:	2300      	movs	r3, #0
 800c768:	9306      	str	r3, [sp, #24]
 800c76a:	9508      	str	r5, [sp, #32]
 800c76c:	f04f 33ff 	mov.w	r3, #4294967295
 800c770:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c774:	2200      	movs	r2, #0
 800c776:	2312      	movs	r3, #18
 800c778:	e7b0      	b.n	800c6dc <_dtoa_r+0x26c>
 800c77a:	2301      	movs	r3, #1
 800c77c:	9308      	str	r3, [sp, #32]
 800c77e:	e7f5      	b.n	800c76c <_dtoa_r+0x2fc>
 800c780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c782:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c786:	e7b8      	b.n	800c6fa <_dtoa_r+0x28a>
 800c788:	3101      	adds	r1, #1
 800c78a:	6041      	str	r1, [r0, #4]
 800c78c:	0052      	lsls	r2, r2, #1
 800c78e:	e7b8      	b.n	800c702 <_dtoa_r+0x292>
 800c790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c792:	9a01      	ldr	r2, [sp, #4]
 800c794:	601a      	str	r2, [r3, #0]
 800c796:	9b03      	ldr	r3, [sp, #12]
 800c798:	2b0e      	cmp	r3, #14
 800c79a:	f200 809d 	bhi.w	800c8d8 <_dtoa_r+0x468>
 800c79e:	2d00      	cmp	r5, #0
 800c7a0:	f000 809a 	beq.w	800c8d8 <_dtoa_r+0x468>
 800c7a4:	9b00      	ldr	r3, [sp, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	dd32      	ble.n	800c810 <_dtoa_r+0x3a0>
 800c7aa:	4ab7      	ldr	r2, [pc, #732]	; (800ca88 <_dtoa_r+0x618>)
 800c7ac:	f003 030f 	and.w	r3, r3, #15
 800c7b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c7b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7b8:	9b00      	ldr	r3, [sp, #0]
 800c7ba:	05d8      	lsls	r0, r3, #23
 800c7bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c7c0:	d516      	bpl.n	800c7f0 <_dtoa_r+0x380>
 800c7c2:	4bb2      	ldr	r3, [pc, #712]	; (800ca8c <_dtoa_r+0x61c>)
 800c7c4:	ec51 0b19 	vmov	r0, r1, d9
 800c7c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c7cc:	f7f4 f85e 	bl	800088c <__aeabi_ddiv>
 800c7d0:	f007 070f 	and.w	r7, r7, #15
 800c7d4:	4682      	mov	sl, r0
 800c7d6:	468b      	mov	fp, r1
 800c7d8:	2503      	movs	r5, #3
 800c7da:	4eac      	ldr	r6, [pc, #688]	; (800ca8c <_dtoa_r+0x61c>)
 800c7dc:	b957      	cbnz	r7, 800c7f4 <_dtoa_r+0x384>
 800c7de:	4642      	mov	r2, r8
 800c7e0:	464b      	mov	r3, r9
 800c7e2:	4650      	mov	r0, sl
 800c7e4:	4659      	mov	r1, fp
 800c7e6:	f7f4 f851 	bl	800088c <__aeabi_ddiv>
 800c7ea:	4682      	mov	sl, r0
 800c7ec:	468b      	mov	fp, r1
 800c7ee:	e028      	b.n	800c842 <_dtoa_r+0x3d2>
 800c7f0:	2502      	movs	r5, #2
 800c7f2:	e7f2      	b.n	800c7da <_dtoa_r+0x36a>
 800c7f4:	07f9      	lsls	r1, r7, #31
 800c7f6:	d508      	bpl.n	800c80a <_dtoa_r+0x39a>
 800c7f8:	4640      	mov	r0, r8
 800c7fa:	4649      	mov	r1, r9
 800c7fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c800:	f7f3 ff1a 	bl	8000638 <__aeabi_dmul>
 800c804:	3501      	adds	r5, #1
 800c806:	4680      	mov	r8, r0
 800c808:	4689      	mov	r9, r1
 800c80a:	107f      	asrs	r7, r7, #1
 800c80c:	3608      	adds	r6, #8
 800c80e:	e7e5      	b.n	800c7dc <_dtoa_r+0x36c>
 800c810:	f000 809b 	beq.w	800c94a <_dtoa_r+0x4da>
 800c814:	9b00      	ldr	r3, [sp, #0]
 800c816:	4f9d      	ldr	r7, [pc, #628]	; (800ca8c <_dtoa_r+0x61c>)
 800c818:	425e      	negs	r6, r3
 800c81a:	4b9b      	ldr	r3, [pc, #620]	; (800ca88 <_dtoa_r+0x618>)
 800c81c:	f006 020f 	and.w	r2, r6, #15
 800c820:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c828:	ec51 0b19 	vmov	r0, r1, d9
 800c82c:	f7f3 ff04 	bl	8000638 <__aeabi_dmul>
 800c830:	1136      	asrs	r6, r6, #4
 800c832:	4682      	mov	sl, r0
 800c834:	468b      	mov	fp, r1
 800c836:	2300      	movs	r3, #0
 800c838:	2502      	movs	r5, #2
 800c83a:	2e00      	cmp	r6, #0
 800c83c:	d17a      	bne.n	800c934 <_dtoa_r+0x4c4>
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1d3      	bne.n	800c7ea <_dtoa_r+0x37a>
 800c842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c844:	2b00      	cmp	r3, #0
 800c846:	f000 8082 	beq.w	800c94e <_dtoa_r+0x4de>
 800c84a:	4b91      	ldr	r3, [pc, #580]	; (800ca90 <_dtoa_r+0x620>)
 800c84c:	2200      	movs	r2, #0
 800c84e:	4650      	mov	r0, sl
 800c850:	4659      	mov	r1, fp
 800c852:	f7f4 f963 	bl	8000b1c <__aeabi_dcmplt>
 800c856:	2800      	cmp	r0, #0
 800c858:	d079      	beq.n	800c94e <_dtoa_r+0x4de>
 800c85a:	9b03      	ldr	r3, [sp, #12]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d076      	beq.n	800c94e <_dtoa_r+0x4de>
 800c860:	9b02      	ldr	r3, [sp, #8]
 800c862:	2b00      	cmp	r3, #0
 800c864:	dd36      	ble.n	800c8d4 <_dtoa_r+0x464>
 800c866:	9b00      	ldr	r3, [sp, #0]
 800c868:	4650      	mov	r0, sl
 800c86a:	4659      	mov	r1, fp
 800c86c:	1e5f      	subs	r7, r3, #1
 800c86e:	2200      	movs	r2, #0
 800c870:	4b88      	ldr	r3, [pc, #544]	; (800ca94 <_dtoa_r+0x624>)
 800c872:	f7f3 fee1 	bl	8000638 <__aeabi_dmul>
 800c876:	9e02      	ldr	r6, [sp, #8]
 800c878:	4682      	mov	sl, r0
 800c87a:	468b      	mov	fp, r1
 800c87c:	3501      	adds	r5, #1
 800c87e:	4628      	mov	r0, r5
 800c880:	f7f3 fe70 	bl	8000564 <__aeabi_i2d>
 800c884:	4652      	mov	r2, sl
 800c886:	465b      	mov	r3, fp
 800c888:	f7f3 fed6 	bl	8000638 <__aeabi_dmul>
 800c88c:	4b82      	ldr	r3, [pc, #520]	; (800ca98 <_dtoa_r+0x628>)
 800c88e:	2200      	movs	r2, #0
 800c890:	f7f3 fd1c 	bl	80002cc <__adddf3>
 800c894:	46d0      	mov	r8, sl
 800c896:	46d9      	mov	r9, fp
 800c898:	4682      	mov	sl, r0
 800c89a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c89e:	2e00      	cmp	r6, #0
 800c8a0:	d158      	bne.n	800c954 <_dtoa_r+0x4e4>
 800c8a2:	4b7e      	ldr	r3, [pc, #504]	; (800ca9c <_dtoa_r+0x62c>)
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	4640      	mov	r0, r8
 800c8a8:	4649      	mov	r1, r9
 800c8aa:	f7f3 fd0d 	bl	80002c8 <__aeabi_dsub>
 800c8ae:	4652      	mov	r2, sl
 800c8b0:	465b      	mov	r3, fp
 800c8b2:	4680      	mov	r8, r0
 800c8b4:	4689      	mov	r9, r1
 800c8b6:	f7f4 f94f 	bl	8000b58 <__aeabi_dcmpgt>
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	f040 8295 	bne.w	800cdea <_dtoa_r+0x97a>
 800c8c0:	4652      	mov	r2, sl
 800c8c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c8c6:	4640      	mov	r0, r8
 800c8c8:	4649      	mov	r1, r9
 800c8ca:	f7f4 f927 	bl	8000b1c <__aeabi_dcmplt>
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	f040 8289 	bne.w	800cde6 <_dtoa_r+0x976>
 800c8d4:	ec5b ab19 	vmov	sl, fp, d9
 800c8d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	f2c0 8148 	blt.w	800cb70 <_dtoa_r+0x700>
 800c8e0:	9a00      	ldr	r2, [sp, #0]
 800c8e2:	2a0e      	cmp	r2, #14
 800c8e4:	f300 8144 	bgt.w	800cb70 <_dtoa_r+0x700>
 800c8e8:	4b67      	ldr	r3, [pc, #412]	; (800ca88 <_dtoa_r+0x618>)
 800c8ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	f280 80d5 	bge.w	800caa4 <_dtoa_r+0x634>
 800c8fa:	9b03      	ldr	r3, [sp, #12]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	f300 80d1 	bgt.w	800caa4 <_dtoa_r+0x634>
 800c902:	f040 826f 	bne.w	800cde4 <_dtoa_r+0x974>
 800c906:	4b65      	ldr	r3, [pc, #404]	; (800ca9c <_dtoa_r+0x62c>)
 800c908:	2200      	movs	r2, #0
 800c90a:	4640      	mov	r0, r8
 800c90c:	4649      	mov	r1, r9
 800c90e:	f7f3 fe93 	bl	8000638 <__aeabi_dmul>
 800c912:	4652      	mov	r2, sl
 800c914:	465b      	mov	r3, fp
 800c916:	f7f4 f915 	bl	8000b44 <__aeabi_dcmpge>
 800c91a:	9e03      	ldr	r6, [sp, #12]
 800c91c:	4637      	mov	r7, r6
 800c91e:	2800      	cmp	r0, #0
 800c920:	f040 8245 	bne.w	800cdae <_dtoa_r+0x93e>
 800c924:	9d01      	ldr	r5, [sp, #4]
 800c926:	2331      	movs	r3, #49	; 0x31
 800c928:	f805 3b01 	strb.w	r3, [r5], #1
 800c92c:	9b00      	ldr	r3, [sp, #0]
 800c92e:	3301      	adds	r3, #1
 800c930:	9300      	str	r3, [sp, #0]
 800c932:	e240      	b.n	800cdb6 <_dtoa_r+0x946>
 800c934:	07f2      	lsls	r2, r6, #31
 800c936:	d505      	bpl.n	800c944 <_dtoa_r+0x4d4>
 800c938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c93c:	f7f3 fe7c 	bl	8000638 <__aeabi_dmul>
 800c940:	3501      	adds	r5, #1
 800c942:	2301      	movs	r3, #1
 800c944:	1076      	asrs	r6, r6, #1
 800c946:	3708      	adds	r7, #8
 800c948:	e777      	b.n	800c83a <_dtoa_r+0x3ca>
 800c94a:	2502      	movs	r5, #2
 800c94c:	e779      	b.n	800c842 <_dtoa_r+0x3d2>
 800c94e:	9f00      	ldr	r7, [sp, #0]
 800c950:	9e03      	ldr	r6, [sp, #12]
 800c952:	e794      	b.n	800c87e <_dtoa_r+0x40e>
 800c954:	9901      	ldr	r1, [sp, #4]
 800c956:	4b4c      	ldr	r3, [pc, #304]	; (800ca88 <_dtoa_r+0x618>)
 800c958:	4431      	add	r1, r6
 800c95a:	910d      	str	r1, [sp, #52]	; 0x34
 800c95c:	9908      	ldr	r1, [sp, #32]
 800c95e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c962:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c966:	2900      	cmp	r1, #0
 800c968:	d043      	beq.n	800c9f2 <_dtoa_r+0x582>
 800c96a:	494d      	ldr	r1, [pc, #308]	; (800caa0 <_dtoa_r+0x630>)
 800c96c:	2000      	movs	r0, #0
 800c96e:	f7f3 ff8d 	bl	800088c <__aeabi_ddiv>
 800c972:	4652      	mov	r2, sl
 800c974:	465b      	mov	r3, fp
 800c976:	f7f3 fca7 	bl	80002c8 <__aeabi_dsub>
 800c97a:	9d01      	ldr	r5, [sp, #4]
 800c97c:	4682      	mov	sl, r0
 800c97e:	468b      	mov	fp, r1
 800c980:	4649      	mov	r1, r9
 800c982:	4640      	mov	r0, r8
 800c984:	f7f4 f908 	bl	8000b98 <__aeabi_d2iz>
 800c988:	4606      	mov	r6, r0
 800c98a:	f7f3 fdeb 	bl	8000564 <__aeabi_i2d>
 800c98e:	4602      	mov	r2, r0
 800c990:	460b      	mov	r3, r1
 800c992:	4640      	mov	r0, r8
 800c994:	4649      	mov	r1, r9
 800c996:	f7f3 fc97 	bl	80002c8 <__aeabi_dsub>
 800c99a:	3630      	adds	r6, #48	; 0x30
 800c99c:	f805 6b01 	strb.w	r6, [r5], #1
 800c9a0:	4652      	mov	r2, sl
 800c9a2:	465b      	mov	r3, fp
 800c9a4:	4680      	mov	r8, r0
 800c9a6:	4689      	mov	r9, r1
 800c9a8:	f7f4 f8b8 	bl	8000b1c <__aeabi_dcmplt>
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	d163      	bne.n	800ca78 <_dtoa_r+0x608>
 800c9b0:	4642      	mov	r2, r8
 800c9b2:	464b      	mov	r3, r9
 800c9b4:	4936      	ldr	r1, [pc, #216]	; (800ca90 <_dtoa_r+0x620>)
 800c9b6:	2000      	movs	r0, #0
 800c9b8:	f7f3 fc86 	bl	80002c8 <__aeabi_dsub>
 800c9bc:	4652      	mov	r2, sl
 800c9be:	465b      	mov	r3, fp
 800c9c0:	f7f4 f8ac 	bl	8000b1c <__aeabi_dcmplt>
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	f040 80b5 	bne.w	800cb34 <_dtoa_r+0x6c4>
 800c9ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9cc:	429d      	cmp	r5, r3
 800c9ce:	d081      	beq.n	800c8d4 <_dtoa_r+0x464>
 800c9d0:	4b30      	ldr	r3, [pc, #192]	; (800ca94 <_dtoa_r+0x624>)
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	4650      	mov	r0, sl
 800c9d6:	4659      	mov	r1, fp
 800c9d8:	f7f3 fe2e 	bl	8000638 <__aeabi_dmul>
 800c9dc:	4b2d      	ldr	r3, [pc, #180]	; (800ca94 <_dtoa_r+0x624>)
 800c9de:	4682      	mov	sl, r0
 800c9e0:	468b      	mov	fp, r1
 800c9e2:	4640      	mov	r0, r8
 800c9e4:	4649      	mov	r1, r9
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f7f3 fe26 	bl	8000638 <__aeabi_dmul>
 800c9ec:	4680      	mov	r8, r0
 800c9ee:	4689      	mov	r9, r1
 800c9f0:	e7c6      	b.n	800c980 <_dtoa_r+0x510>
 800c9f2:	4650      	mov	r0, sl
 800c9f4:	4659      	mov	r1, fp
 800c9f6:	f7f3 fe1f 	bl	8000638 <__aeabi_dmul>
 800c9fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9fc:	9d01      	ldr	r5, [sp, #4]
 800c9fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca00:	4682      	mov	sl, r0
 800ca02:	468b      	mov	fp, r1
 800ca04:	4649      	mov	r1, r9
 800ca06:	4640      	mov	r0, r8
 800ca08:	f7f4 f8c6 	bl	8000b98 <__aeabi_d2iz>
 800ca0c:	4606      	mov	r6, r0
 800ca0e:	f7f3 fda9 	bl	8000564 <__aeabi_i2d>
 800ca12:	3630      	adds	r6, #48	; 0x30
 800ca14:	4602      	mov	r2, r0
 800ca16:	460b      	mov	r3, r1
 800ca18:	4640      	mov	r0, r8
 800ca1a:	4649      	mov	r1, r9
 800ca1c:	f7f3 fc54 	bl	80002c8 <__aeabi_dsub>
 800ca20:	f805 6b01 	strb.w	r6, [r5], #1
 800ca24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca26:	429d      	cmp	r5, r3
 800ca28:	4680      	mov	r8, r0
 800ca2a:	4689      	mov	r9, r1
 800ca2c:	f04f 0200 	mov.w	r2, #0
 800ca30:	d124      	bne.n	800ca7c <_dtoa_r+0x60c>
 800ca32:	4b1b      	ldr	r3, [pc, #108]	; (800caa0 <_dtoa_r+0x630>)
 800ca34:	4650      	mov	r0, sl
 800ca36:	4659      	mov	r1, fp
 800ca38:	f7f3 fc48 	bl	80002cc <__adddf3>
 800ca3c:	4602      	mov	r2, r0
 800ca3e:	460b      	mov	r3, r1
 800ca40:	4640      	mov	r0, r8
 800ca42:	4649      	mov	r1, r9
 800ca44:	f7f4 f888 	bl	8000b58 <__aeabi_dcmpgt>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d173      	bne.n	800cb34 <_dtoa_r+0x6c4>
 800ca4c:	4652      	mov	r2, sl
 800ca4e:	465b      	mov	r3, fp
 800ca50:	4913      	ldr	r1, [pc, #76]	; (800caa0 <_dtoa_r+0x630>)
 800ca52:	2000      	movs	r0, #0
 800ca54:	f7f3 fc38 	bl	80002c8 <__aeabi_dsub>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	4640      	mov	r0, r8
 800ca5e:	4649      	mov	r1, r9
 800ca60:	f7f4 f85c 	bl	8000b1c <__aeabi_dcmplt>
 800ca64:	2800      	cmp	r0, #0
 800ca66:	f43f af35 	beq.w	800c8d4 <_dtoa_r+0x464>
 800ca6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ca6c:	1e6b      	subs	r3, r5, #1
 800ca6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ca74:	2b30      	cmp	r3, #48	; 0x30
 800ca76:	d0f8      	beq.n	800ca6a <_dtoa_r+0x5fa>
 800ca78:	9700      	str	r7, [sp, #0]
 800ca7a:	e049      	b.n	800cb10 <_dtoa_r+0x6a0>
 800ca7c:	4b05      	ldr	r3, [pc, #20]	; (800ca94 <_dtoa_r+0x624>)
 800ca7e:	f7f3 fddb 	bl	8000638 <__aeabi_dmul>
 800ca82:	4680      	mov	r8, r0
 800ca84:	4689      	mov	r9, r1
 800ca86:	e7bd      	b.n	800ca04 <_dtoa_r+0x594>
 800ca88:	0800e3c8 	.word	0x0800e3c8
 800ca8c:	0800e3a0 	.word	0x0800e3a0
 800ca90:	3ff00000 	.word	0x3ff00000
 800ca94:	40240000 	.word	0x40240000
 800ca98:	401c0000 	.word	0x401c0000
 800ca9c:	40140000 	.word	0x40140000
 800caa0:	3fe00000 	.word	0x3fe00000
 800caa4:	9d01      	ldr	r5, [sp, #4]
 800caa6:	4656      	mov	r6, sl
 800caa8:	465f      	mov	r7, fp
 800caaa:	4642      	mov	r2, r8
 800caac:	464b      	mov	r3, r9
 800caae:	4630      	mov	r0, r6
 800cab0:	4639      	mov	r1, r7
 800cab2:	f7f3 feeb 	bl	800088c <__aeabi_ddiv>
 800cab6:	f7f4 f86f 	bl	8000b98 <__aeabi_d2iz>
 800caba:	4682      	mov	sl, r0
 800cabc:	f7f3 fd52 	bl	8000564 <__aeabi_i2d>
 800cac0:	4642      	mov	r2, r8
 800cac2:	464b      	mov	r3, r9
 800cac4:	f7f3 fdb8 	bl	8000638 <__aeabi_dmul>
 800cac8:	4602      	mov	r2, r0
 800caca:	460b      	mov	r3, r1
 800cacc:	4630      	mov	r0, r6
 800cace:	4639      	mov	r1, r7
 800cad0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cad4:	f7f3 fbf8 	bl	80002c8 <__aeabi_dsub>
 800cad8:	f805 6b01 	strb.w	r6, [r5], #1
 800cadc:	9e01      	ldr	r6, [sp, #4]
 800cade:	9f03      	ldr	r7, [sp, #12]
 800cae0:	1bae      	subs	r6, r5, r6
 800cae2:	42b7      	cmp	r7, r6
 800cae4:	4602      	mov	r2, r0
 800cae6:	460b      	mov	r3, r1
 800cae8:	d135      	bne.n	800cb56 <_dtoa_r+0x6e6>
 800caea:	f7f3 fbef 	bl	80002cc <__adddf3>
 800caee:	4642      	mov	r2, r8
 800caf0:	464b      	mov	r3, r9
 800caf2:	4606      	mov	r6, r0
 800caf4:	460f      	mov	r7, r1
 800caf6:	f7f4 f82f 	bl	8000b58 <__aeabi_dcmpgt>
 800cafa:	b9d0      	cbnz	r0, 800cb32 <_dtoa_r+0x6c2>
 800cafc:	4642      	mov	r2, r8
 800cafe:	464b      	mov	r3, r9
 800cb00:	4630      	mov	r0, r6
 800cb02:	4639      	mov	r1, r7
 800cb04:	f7f4 f800 	bl	8000b08 <__aeabi_dcmpeq>
 800cb08:	b110      	cbz	r0, 800cb10 <_dtoa_r+0x6a0>
 800cb0a:	f01a 0f01 	tst.w	sl, #1
 800cb0e:	d110      	bne.n	800cb32 <_dtoa_r+0x6c2>
 800cb10:	4620      	mov	r0, r4
 800cb12:	ee18 1a10 	vmov	r1, s16
 800cb16:	f000 fc23 	bl	800d360 <_Bfree>
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	9800      	ldr	r0, [sp, #0]
 800cb1e:	702b      	strb	r3, [r5, #0]
 800cb20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb22:	3001      	adds	r0, #1
 800cb24:	6018      	str	r0, [r3, #0]
 800cb26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	f43f acf1 	beq.w	800c510 <_dtoa_r+0xa0>
 800cb2e:	601d      	str	r5, [r3, #0]
 800cb30:	e4ee      	b.n	800c510 <_dtoa_r+0xa0>
 800cb32:	9f00      	ldr	r7, [sp, #0]
 800cb34:	462b      	mov	r3, r5
 800cb36:	461d      	mov	r5, r3
 800cb38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb3c:	2a39      	cmp	r2, #57	; 0x39
 800cb3e:	d106      	bne.n	800cb4e <_dtoa_r+0x6de>
 800cb40:	9a01      	ldr	r2, [sp, #4]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d1f7      	bne.n	800cb36 <_dtoa_r+0x6c6>
 800cb46:	9901      	ldr	r1, [sp, #4]
 800cb48:	2230      	movs	r2, #48	; 0x30
 800cb4a:	3701      	adds	r7, #1
 800cb4c:	700a      	strb	r2, [r1, #0]
 800cb4e:	781a      	ldrb	r2, [r3, #0]
 800cb50:	3201      	adds	r2, #1
 800cb52:	701a      	strb	r2, [r3, #0]
 800cb54:	e790      	b.n	800ca78 <_dtoa_r+0x608>
 800cb56:	4ba6      	ldr	r3, [pc, #664]	; (800cdf0 <_dtoa_r+0x980>)
 800cb58:	2200      	movs	r2, #0
 800cb5a:	f7f3 fd6d 	bl	8000638 <__aeabi_dmul>
 800cb5e:	2200      	movs	r2, #0
 800cb60:	2300      	movs	r3, #0
 800cb62:	4606      	mov	r6, r0
 800cb64:	460f      	mov	r7, r1
 800cb66:	f7f3 ffcf 	bl	8000b08 <__aeabi_dcmpeq>
 800cb6a:	2800      	cmp	r0, #0
 800cb6c:	d09d      	beq.n	800caaa <_dtoa_r+0x63a>
 800cb6e:	e7cf      	b.n	800cb10 <_dtoa_r+0x6a0>
 800cb70:	9a08      	ldr	r2, [sp, #32]
 800cb72:	2a00      	cmp	r2, #0
 800cb74:	f000 80d7 	beq.w	800cd26 <_dtoa_r+0x8b6>
 800cb78:	9a06      	ldr	r2, [sp, #24]
 800cb7a:	2a01      	cmp	r2, #1
 800cb7c:	f300 80ba 	bgt.w	800ccf4 <_dtoa_r+0x884>
 800cb80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb82:	2a00      	cmp	r2, #0
 800cb84:	f000 80b2 	beq.w	800ccec <_dtoa_r+0x87c>
 800cb88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cb8c:	9e07      	ldr	r6, [sp, #28]
 800cb8e:	9d04      	ldr	r5, [sp, #16]
 800cb90:	9a04      	ldr	r2, [sp, #16]
 800cb92:	441a      	add	r2, r3
 800cb94:	9204      	str	r2, [sp, #16]
 800cb96:	9a05      	ldr	r2, [sp, #20]
 800cb98:	2101      	movs	r1, #1
 800cb9a:	441a      	add	r2, r3
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	9205      	str	r2, [sp, #20]
 800cba0:	f000 fc96 	bl	800d4d0 <__i2b>
 800cba4:	4607      	mov	r7, r0
 800cba6:	2d00      	cmp	r5, #0
 800cba8:	dd0c      	ble.n	800cbc4 <_dtoa_r+0x754>
 800cbaa:	9b05      	ldr	r3, [sp, #20]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	dd09      	ble.n	800cbc4 <_dtoa_r+0x754>
 800cbb0:	42ab      	cmp	r3, r5
 800cbb2:	9a04      	ldr	r2, [sp, #16]
 800cbb4:	bfa8      	it	ge
 800cbb6:	462b      	movge	r3, r5
 800cbb8:	1ad2      	subs	r2, r2, r3
 800cbba:	9204      	str	r2, [sp, #16]
 800cbbc:	9a05      	ldr	r2, [sp, #20]
 800cbbe:	1aed      	subs	r5, r5, r3
 800cbc0:	1ad3      	subs	r3, r2, r3
 800cbc2:	9305      	str	r3, [sp, #20]
 800cbc4:	9b07      	ldr	r3, [sp, #28]
 800cbc6:	b31b      	cbz	r3, 800cc10 <_dtoa_r+0x7a0>
 800cbc8:	9b08      	ldr	r3, [sp, #32]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	f000 80af 	beq.w	800cd2e <_dtoa_r+0x8be>
 800cbd0:	2e00      	cmp	r6, #0
 800cbd2:	dd13      	ble.n	800cbfc <_dtoa_r+0x78c>
 800cbd4:	4639      	mov	r1, r7
 800cbd6:	4632      	mov	r2, r6
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f000 fd39 	bl	800d650 <__pow5mult>
 800cbde:	ee18 2a10 	vmov	r2, s16
 800cbe2:	4601      	mov	r1, r0
 800cbe4:	4607      	mov	r7, r0
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	f000 fc88 	bl	800d4fc <__multiply>
 800cbec:	ee18 1a10 	vmov	r1, s16
 800cbf0:	4680      	mov	r8, r0
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	f000 fbb4 	bl	800d360 <_Bfree>
 800cbf8:	ee08 8a10 	vmov	s16, r8
 800cbfc:	9b07      	ldr	r3, [sp, #28]
 800cbfe:	1b9a      	subs	r2, r3, r6
 800cc00:	d006      	beq.n	800cc10 <_dtoa_r+0x7a0>
 800cc02:	ee18 1a10 	vmov	r1, s16
 800cc06:	4620      	mov	r0, r4
 800cc08:	f000 fd22 	bl	800d650 <__pow5mult>
 800cc0c:	ee08 0a10 	vmov	s16, r0
 800cc10:	2101      	movs	r1, #1
 800cc12:	4620      	mov	r0, r4
 800cc14:	f000 fc5c 	bl	800d4d0 <__i2b>
 800cc18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	4606      	mov	r6, r0
 800cc1e:	f340 8088 	ble.w	800cd32 <_dtoa_r+0x8c2>
 800cc22:	461a      	mov	r2, r3
 800cc24:	4601      	mov	r1, r0
 800cc26:	4620      	mov	r0, r4
 800cc28:	f000 fd12 	bl	800d650 <__pow5mult>
 800cc2c:	9b06      	ldr	r3, [sp, #24]
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	4606      	mov	r6, r0
 800cc32:	f340 8081 	ble.w	800cd38 <_dtoa_r+0x8c8>
 800cc36:	f04f 0800 	mov.w	r8, #0
 800cc3a:	6933      	ldr	r3, [r6, #16]
 800cc3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cc40:	6918      	ldr	r0, [r3, #16]
 800cc42:	f000 fbf5 	bl	800d430 <__hi0bits>
 800cc46:	f1c0 0020 	rsb	r0, r0, #32
 800cc4a:	9b05      	ldr	r3, [sp, #20]
 800cc4c:	4418      	add	r0, r3
 800cc4e:	f010 001f 	ands.w	r0, r0, #31
 800cc52:	f000 8092 	beq.w	800cd7a <_dtoa_r+0x90a>
 800cc56:	f1c0 0320 	rsb	r3, r0, #32
 800cc5a:	2b04      	cmp	r3, #4
 800cc5c:	f340 808a 	ble.w	800cd74 <_dtoa_r+0x904>
 800cc60:	f1c0 001c 	rsb	r0, r0, #28
 800cc64:	9b04      	ldr	r3, [sp, #16]
 800cc66:	4403      	add	r3, r0
 800cc68:	9304      	str	r3, [sp, #16]
 800cc6a:	9b05      	ldr	r3, [sp, #20]
 800cc6c:	4403      	add	r3, r0
 800cc6e:	4405      	add	r5, r0
 800cc70:	9305      	str	r3, [sp, #20]
 800cc72:	9b04      	ldr	r3, [sp, #16]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	dd07      	ble.n	800cc88 <_dtoa_r+0x818>
 800cc78:	ee18 1a10 	vmov	r1, s16
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	4620      	mov	r0, r4
 800cc80:	f000 fd40 	bl	800d704 <__lshift>
 800cc84:	ee08 0a10 	vmov	s16, r0
 800cc88:	9b05      	ldr	r3, [sp, #20]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	dd05      	ble.n	800cc9a <_dtoa_r+0x82a>
 800cc8e:	4631      	mov	r1, r6
 800cc90:	461a      	mov	r2, r3
 800cc92:	4620      	mov	r0, r4
 800cc94:	f000 fd36 	bl	800d704 <__lshift>
 800cc98:	4606      	mov	r6, r0
 800cc9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d06e      	beq.n	800cd7e <_dtoa_r+0x90e>
 800cca0:	ee18 0a10 	vmov	r0, s16
 800cca4:	4631      	mov	r1, r6
 800cca6:	f000 fd9d 	bl	800d7e4 <__mcmp>
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	da67      	bge.n	800cd7e <_dtoa_r+0x90e>
 800ccae:	9b00      	ldr	r3, [sp, #0]
 800ccb0:	3b01      	subs	r3, #1
 800ccb2:	ee18 1a10 	vmov	r1, s16
 800ccb6:	9300      	str	r3, [sp, #0]
 800ccb8:	220a      	movs	r2, #10
 800ccba:	2300      	movs	r3, #0
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	f000 fb71 	bl	800d3a4 <__multadd>
 800ccc2:	9b08      	ldr	r3, [sp, #32]
 800ccc4:	ee08 0a10 	vmov	s16, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f000 81b1 	beq.w	800d030 <_dtoa_r+0xbc0>
 800ccce:	2300      	movs	r3, #0
 800ccd0:	4639      	mov	r1, r7
 800ccd2:	220a      	movs	r2, #10
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	f000 fb65 	bl	800d3a4 <__multadd>
 800ccda:	9b02      	ldr	r3, [sp, #8]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	4607      	mov	r7, r0
 800cce0:	f300 808e 	bgt.w	800ce00 <_dtoa_r+0x990>
 800cce4:	9b06      	ldr	r3, [sp, #24]
 800cce6:	2b02      	cmp	r3, #2
 800cce8:	dc51      	bgt.n	800cd8e <_dtoa_r+0x91e>
 800ccea:	e089      	b.n	800ce00 <_dtoa_r+0x990>
 800ccec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ccee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ccf2:	e74b      	b.n	800cb8c <_dtoa_r+0x71c>
 800ccf4:	9b03      	ldr	r3, [sp, #12]
 800ccf6:	1e5e      	subs	r6, r3, #1
 800ccf8:	9b07      	ldr	r3, [sp, #28]
 800ccfa:	42b3      	cmp	r3, r6
 800ccfc:	bfbf      	itttt	lt
 800ccfe:	9b07      	ldrlt	r3, [sp, #28]
 800cd00:	9607      	strlt	r6, [sp, #28]
 800cd02:	1af2      	sublt	r2, r6, r3
 800cd04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cd06:	bfb6      	itet	lt
 800cd08:	189b      	addlt	r3, r3, r2
 800cd0a:	1b9e      	subge	r6, r3, r6
 800cd0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cd0e:	9b03      	ldr	r3, [sp, #12]
 800cd10:	bfb8      	it	lt
 800cd12:	2600      	movlt	r6, #0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	bfb7      	itett	lt
 800cd18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cd1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cd20:	1a9d      	sublt	r5, r3, r2
 800cd22:	2300      	movlt	r3, #0
 800cd24:	e734      	b.n	800cb90 <_dtoa_r+0x720>
 800cd26:	9e07      	ldr	r6, [sp, #28]
 800cd28:	9d04      	ldr	r5, [sp, #16]
 800cd2a:	9f08      	ldr	r7, [sp, #32]
 800cd2c:	e73b      	b.n	800cba6 <_dtoa_r+0x736>
 800cd2e:	9a07      	ldr	r2, [sp, #28]
 800cd30:	e767      	b.n	800cc02 <_dtoa_r+0x792>
 800cd32:	9b06      	ldr	r3, [sp, #24]
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	dc18      	bgt.n	800cd6a <_dtoa_r+0x8fa>
 800cd38:	f1ba 0f00 	cmp.w	sl, #0
 800cd3c:	d115      	bne.n	800cd6a <_dtoa_r+0x8fa>
 800cd3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd42:	b993      	cbnz	r3, 800cd6a <_dtoa_r+0x8fa>
 800cd44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cd48:	0d1b      	lsrs	r3, r3, #20
 800cd4a:	051b      	lsls	r3, r3, #20
 800cd4c:	b183      	cbz	r3, 800cd70 <_dtoa_r+0x900>
 800cd4e:	9b04      	ldr	r3, [sp, #16]
 800cd50:	3301      	adds	r3, #1
 800cd52:	9304      	str	r3, [sp, #16]
 800cd54:	9b05      	ldr	r3, [sp, #20]
 800cd56:	3301      	adds	r3, #1
 800cd58:	9305      	str	r3, [sp, #20]
 800cd5a:	f04f 0801 	mov.w	r8, #1
 800cd5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f47f af6a 	bne.w	800cc3a <_dtoa_r+0x7ca>
 800cd66:	2001      	movs	r0, #1
 800cd68:	e76f      	b.n	800cc4a <_dtoa_r+0x7da>
 800cd6a:	f04f 0800 	mov.w	r8, #0
 800cd6e:	e7f6      	b.n	800cd5e <_dtoa_r+0x8ee>
 800cd70:	4698      	mov	r8, r3
 800cd72:	e7f4      	b.n	800cd5e <_dtoa_r+0x8ee>
 800cd74:	f43f af7d 	beq.w	800cc72 <_dtoa_r+0x802>
 800cd78:	4618      	mov	r0, r3
 800cd7a:	301c      	adds	r0, #28
 800cd7c:	e772      	b.n	800cc64 <_dtoa_r+0x7f4>
 800cd7e:	9b03      	ldr	r3, [sp, #12]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	dc37      	bgt.n	800cdf4 <_dtoa_r+0x984>
 800cd84:	9b06      	ldr	r3, [sp, #24]
 800cd86:	2b02      	cmp	r3, #2
 800cd88:	dd34      	ble.n	800cdf4 <_dtoa_r+0x984>
 800cd8a:	9b03      	ldr	r3, [sp, #12]
 800cd8c:	9302      	str	r3, [sp, #8]
 800cd8e:	9b02      	ldr	r3, [sp, #8]
 800cd90:	b96b      	cbnz	r3, 800cdae <_dtoa_r+0x93e>
 800cd92:	4631      	mov	r1, r6
 800cd94:	2205      	movs	r2, #5
 800cd96:	4620      	mov	r0, r4
 800cd98:	f000 fb04 	bl	800d3a4 <__multadd>
 800cd9c:	4601      	mov	r1, r0
 800cd9e:	4606      	mov	r6, r0
 800cda0:	ee18 0a10 	vmov	r0, s16
 800cda4:	f000 fd1e 	bl	800d7e4 <__mcmp>
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	f73f adbb 	bgt.w	800c924 <_dtoa_r+0x4b4>
 800cdae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdb0:	9d01      	ldr	r5, [sp, #4]
 800cdb2:	43db      	mvns	r3, r3
 800cdb4:	9300      	str	r3, [sp, #0]
 800cdb6:	f04f 0800 	mov.w	r8, #0
 800cdba:	4631      	mov	r1, r6
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	f000 facf 	bl	800d360 <_Bfree>
 800cdc2:	2f00      	cmp	r7, #0
 800cdc4:	f43f aea4 	beq.w	800cb10 <_dtoa_r+0x6a0>
 800cdc8:	f1b8 0f00 	cmp.w	r8, #0
 800cdcc:	d005      	beq.n	800cdda <_dtoa_r+0x96a>
 800cdce:	45b8      	cmp	r8, r7
 800cdd0:	d003      	beq.n	800cdda <_dtoa_r+0x96a>
 800cdd2:	4641      	mov	r1, r8
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	f000 fac3 	bl	800d360 <_Bfree>
 800cdda:	4639      	mov	r1, r7
 800cddc:	4620      	mov	r0, r4
 800cdde:	f000 fabf 	bl	800d360 <_Bfree>
 800cde2:	e695      	b.n	800cb10 <_dtoa_r+0x6a0>
 800cde4:	2600      	movs	r6, #0
 800cde6:	4637      	mov	r7, r6
 800cde8:	e7e1      	b.n	800cdae <_dtoa_r+0x93e>
 800cdea:	9700      	str	r7, [sp, #0]
 800cdec:	4637      	mov	r7, r6
 800cdee:	e599      	b.n	800c924 <_dtoa_r+0x4b4>
 800cdf0:	40240000 	.word	0x40240000
 800cdf4:	9b08      	ldr	r3, [sp, #32]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	f000 80ca 	beq.w	800cf90 <_dtoa_r+0xb20>
 800cdfc:	9b03      	ldr	r3, [sp, #12]
 800cdfe:	9302      	str	r3, [sp, #8]
 800ce00:	2d00      	cmp	r5, #0
 800ce02:	dd05      	ble.n	800ce10 <_dtoa_r+0x9a0>
 800ce04:	4639      	mov	r1, r7
 800ce06:	462a      	mov	r2, r5
 800ce08:	4620      	mov	r0, r4
 800ce0a:	f000 fc7b 	bl	800d704 <__lshift>
 800ce0e:	4607      	mov	r7, r0
 800ce10:	f1b8 0f00 	cmp.w	r8, #0
 800ce14:	d05b      	beq.n	800cece <_dtoa_r+0xa5e>
 800ce16:	6879      	ldr	r1, [r7, #4]
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f000 fa61 	bl	800d2e0 <_Balloc>
 800ce1e:	4605      	mov	r5, r0
 800ce20:	b928      	cbnz	r0, 800ce2e <_dtoa_r+0x9be>
 800ce22:	4b87      	ldr	r3, [pc, #540]	; (800d040 <_dtoa_r+0xbd0>)
 800ce24:	4602      	mov	r2, r0
 800ce26:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ce2a:	f7ff bb3b 	b.w	800c4a4 <_dtoa_r+0x34>
 800ce2e:	693a      	ldr	r2, [r7, #16]
 800ce30:	3202      	adds	r2, #2
 800ce32:	0092      	lsls	r2, r2, #2
 800ce34:	f107 010c 	add.w	r1, r7, #12
 800ce38:	300c      	adds	r0, #12
 800ce3a:	f7fe faff 	bl	800b43c <memcpy>
 800ce3e:	2201      	movs	r2, #1
 800ce40:	4629      	mov	r1, r5
 800ce42:	4620      	mov	r0, r4
 800ce44:	f000 fc5e 	bl	800d704 <__lshift>
 800ce48:	9b01      	ldr	r3, [sp, #4]
 800ce4a:	f103 0901 	add.w	r9, r3, #1
 800ce4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ce52:	4413      	add	r3, r2
 800ce54:	9305      	str	r3, [sp, #20]
 800ce56:	f00a 0301 	and.w	r3, sl, #1
 800ce5a:	46b8      	mov	r8, r7
 800ce5c:	9304      	str	r3, [sp, #16]
 800ce5e:	4607      	mov	r7, r0
 800ce60:	4631      	mov	r1, r6
 800ce62:	ee18 0a10 	vmov	r0, s16
 800ce66:	f7ff fa77 	bl	800c358 <quorem>
 800ce6a:	4641      	mov	r1, r8
 800ce6c:	9002      	str	r0, [sp, #8]
 800ce6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ce72:	ee18 0a10 	vmov	r0, s16
 800ce76:	f000 fcb5 	bl	800d7e4 <__mcmp>
 800ce7a:	463a      	mov	r2, r7
 800ce7c:	9003      	str	r0, [sp, #12]
 800ce7e:	4631      	mov	r1, r6
 800ce80:	4620      	mov	r0, r4
 800ce82:	f000 fccb 	bl	800d81c <__mdiff>
 800ce86:	68c2      	ldr	r2, [r0, #12]
 800ce88:	f109 3bff 	add.w	fp, r9, #4294967295
 800ce8c:	4605      	mov	r5, r0
 800ce8e:	bb02      	cbnz	r2, 800ced2 <_dtoa_r+0xa62>
 800ce90:	4601      	mov	r1, r0
 800ce92:	ee18 0a10 	vmov	r0, s16
 800ce96:	f000 fca5 	bl	800d7e4 <__mcmp>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	4629      	mov	r1, r5
 800ce9e:	4620      	mov	r0, r4
 800cea0:	9207      	str	r2, [sp, #28]
 800cea2:	f000 fa5d 	bl	800d360 <_Bfree>
 800cea6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ceaa:	ea43 0102 	orr.w	r1, r3, r2
 800ceae:	9b04      	ldr	r3, [sp, #16]
 800ceb0:	430b      	orrs	r3, r1
 800ceb2:	464d      	mov	r5, r9
 800ceb4:	d10f      	bne.n	800ced6 <_dtoa_r+0xa66>
 800ceb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ceba:	d02a      	beq.n	800cf12 <_dtoa_r+0xaa2>
 800cebc:	9b03      	ldr	r3, [sp, #12]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	dd02      	ble.n	800cec8 <_dtoa_r+0xa58>
 800cec2:	9b02      	ldr	r3, [sp, #8]
 800cec4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cec8:	f88b a000 	strb.w	sl, [fp]
 800cecc:	e775      	b.n	800cdba <_dtoa_r+0x94a>
 800cece:	4638      	mov	r0, r7
 800ced0:	e7ba      	b.n	800ce48 <_dtoa_r+0x9d8>
 800ced2:	2201      	movs	r2, #1
 800ced4:	e7e2      	b.n	800ce9c <_dtoa_r+0xa2c>
 800ced6:	9b03      	ldr	r3, [sp, #12]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	db04      	blt.n	800cee6 <_dtoa_r+0xa76>
 800cedc:	9906      	ldr	r1, [sp, #24]
 800cede:	430b      	orrs	r3, r1
 800cee0:	9904      	ldr	r1, [sp, #16]
 800cee2:	430b      	orrs	r3, r1
 800cee4:	d122      	bne.n	800cf2c <_dtoa_r+0xabc>
 800cee6:	2a00      	cmp	r2, #0
 800cee8:	ddee      	ble.n	800cec8 <_dtoa_r+0xa58>
 800ceea:	ee18 1a10 	vmov	r1, s16
 800ceee:	2201      	movs	r2, #1
 800cef0:	4620      	mov	r0, r4
 800cef2:	f000 fc07 	bl	800d704 <__lshift>
 800cef6:	4631      	mov	r1, r6
 800cef8:	ee08 0a10 	vmov	s16, r0
 800cefc:	f000 fc72 	bl	800d7e4 <__mcmp>
 800cf00:	2800      	cmp	r0, #0
 800cf02:	dc03      	bgt.n	800cf0c <_dtoa_r+0xa9c>
 800cf04:	d1e0      	bne.n	800cec8 <_dtoa_r+0xa58>
 800cf06:	f01a 0f01 	tst.w	sl, #1
 800cf0a:	d0dd      	beq.n	800cec8 <_dtoa_r+0xa58>
 800cf0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cf10:	d1d7      	bne.n	800cec2 <_dtoa_r+0xa52>
 800cf12:	2339      	movs	r3, #57	; 0x39
 800cf14:	f88b 3000 	strb.w	r3, [fp]
 800cf18:	462b      	mov	r3, r5
 800cf1a:	461d      	mov	r5, r3
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cf22:	2a39      	cmp	r2, #57	; 0x39
 800cf24:	d071      	beq.n	800d00a <_dtoa_r+0xb9a>
 800cf26:	3201      	adds	r2, #1
 800cf28:	701a      	strb	r2, [r3, #0]
 800cf2a:	e746      	b.n	800cdba <_dtoa_r+0x94a>
 800cf2c:	2a00      	cmp	r2, #0
 800cf2e:	dd07      	ble.n	800cf40 <_dtoa_r+0xad0>
 800cf30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cf34:	d0ed      	beq.n	800cf12 <_dtoa_r+0xaa2>
 800cf36:	f10a 0301 	add.w	r3, sl, #1
 800cf3a:	f88b 3000 	strb.w	r3, [fp]
 800cf3e:	e73c      	b.n	800cdba <_dtoa_r+0x94a>
 800cf40:	9b05      	ldr	r3, [sp, #20]
 800cf42:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cf46:	4599      	cmp	r9, r3
 800cf48:	d047      	beq.n	800cfda <_dtoa_r+0xb6a>
 800cf4a:	ee18 1a10 	vmov	r1, s16
 800cf4e:	2300      	movs	r3, #0
 800cf50:	220a      	movs	r2, #10
 800cf52:	4620      	mov	r0, r4
 800cf54:	f000 fa26 	bl	800d3a4 <__multadd>
 800cf58:	45b8      	cmp	r8, r7
 800cf5a:	ee08 0a10 	vmov	s16, r0
 800cf5e:	f04f 0300 	mov.w	r3, #0
 800cf62:	f04f 020a 	mov.w	r2, #10
 800cf66:	4641      	mov	r1, r8
 800cf68:	4620      	mov	r0, r4
 800cf6a:	d106      	bne.n	800cf7a <_dtoa_r+0xb0a>
 800cf6c:	f000 fa1a 	bl	800d3a4 <__multadd>
 800cf70:	4680      	mov	r8, r0
 800cf72:	4607      	mov	r7, r0
 800cf74:	f109 0901 	add.w	r9, r9, #1
 800cf78:	e772      	b.n	800ce60 <_dtoa_r+0x9f0>
 800cf7a:	f000 fa13 	bl	800d3a4 <__multadd>
 800cf7e:	4639      	mov	r1, r7
 800cf80:	4680      	mov	r8, r0
 800cf82:	2300      	movs	r3, #0
 800cf84:	220a      	movs	r2, #10
 800cf86:	4620      	mov	r0, r4
 800cf88:	f000 fa0c 	bl	800d3a4 <__multadd>
 800cf8c:	4607      	mov	r7, r0
 800cf8e:	e7f1      	b.n	800cf74 <_dtoa_r+0xb04>
 800cf90:	9b03      	ldr	r3, [sp, #12]
 800cf92:	9302      	str	r3, [sp, #8]
 800cf94:	9d01      	ldr	r5, [sp, #4]
 800cf96:	ee18 0a10 	vmov	r0, s16
 800cf9a:	4631      	mov	r1, r6
 800cf9c:	f7ff f9dc 	bl	800c358 <quorem>
 800cfa0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cfa4:	9b01      	ldr	r3, [sp, #4]
 800cfa6:	f805 ab01 	strb.w	sl, [r5], #1
 800cfaa:	1aea      	subs	r2, r5, r3
 800cfac:	9b02      	ldr	r3, [sp, #8]
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	dd09      	ble.n	800cfc6 <_dtoa_r+0xb56>
 800cfb2:	ee18 1a10 	vmov	r1, s16
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	220a      	movs	r2, #10
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f000 f9f2 	bl	800d3a4 <__multadd>
 800cfc0:	ee08 0a10 	vmov	s16, r0
 800cfc4:	e7e7      	b.n	800cf96 <_dtoa_r+0xb26>
 800cfc6:	9b02      	ldr	r3, [sp, #8]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	bfc8      	it	gt
 800cfcc:	461d      	movgt	r5, r3
 800cfce:	9b01      	ldr	r3, [sp, #4]
 800cfd0:	bfd8      	it	le
 800cfd2:	2501      	movle	r5, #1
 800cfd4:	441d      	add	r5, r3
 800cfd6:	f04f 0800 	mov.w	r8, #0
 800cfda:	ee18 1a10 	vmov	r1, s16
 800cfde:	2201      	movs	r2, #1
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f000 fb8f 	bl	800d704 <__lshift>
 800cfe6:	4631      	mov	r1, r6
 800cfe8:	ee08 0a10 	vmov	s16, r0
 800cfec:	f000 fbfa 	bl	800d7e4 <__mcmp>
 800cff0:	2800      	cmp	r0, #0
 800cff2:	dc91      	bgt.n	800cf18 <_dtoa_r+0xaa8>
 800cff4:	d102      	bne.n	800cffc <_dtoa_r+0xb8c>
 800cff6:	f01a 0f01 	tst.w	sl, #1
 800cffa:	d18d      	bne.n	800cf18 <_dtoa_r+0xaa8>
 800cffc:	462b      	mov	r3, r5
 800cffe:	461d      	mov	r5, r3
 800d000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d004:	2a30      	cmp	r2, #48	; 0x30
 800d006:	d0fa      	beq.n	800cffe <_dtoa_r+0xb8e>
 800d008:	e6d7      	b.n	800cdba <_dtoa_r+0x94a>
 800d00a:	9a01      	ldr	r2, [sp, #4]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d184      	bne.n	800cf1a <_dtoa_r+0xaaa>
 800d010:	9b00      	ldr	r3, [sp, #0]
 800d012:	3301      	adds	r3, #1
 800d014:	9300      	str	r3, [sp, #0]
 800d016:	2331      	movs	r3, #49	; 0x31
 800d018:	7013      	strb	r3, [r2, #0]
 800d01a:	e6ce      	b.n	800cdba <_dtoa_r+0x94a>
 800d01c:	4b09      	ldr	r3, [pc, #36]	; (800d044 <_dtoa_r+0xbd4>)
 800d01e:	f7ff ba95 	b.w	800c54c <_dtoa_r+0xdc>
 800d022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d024:	2b00      	cmp	r3, #0
 800d026:	f47f aa6e 	bne.w	800c506 <_dtoa_r+0x96>
 800d02a:	4b07      	ldr	r3, [pc, #28]	; (800d048 <_dtoa_r+0xbd8>)
 800d02c:	f7ff ba8e 	b.w	800c54c <_dtoa_r+0xdc>
 800d030:	9b02      	ldr	r3, [sp, #8]
 800d032:	2b00      	cmp	r3, #0
 800d034:	dcae      	bgt.n	800cf94 <_dtoa_r+0xb24>
 800d036:	9b06      	ldr	r3, [sp, #24]
 800d038:	2b02      	cmp	r3, #2
 800d03a:	f73f aea8 	bgt.w	800cd8e <_dtoa_r+0x91e>
 800d03e:	e7a9      	b.n	800cf94 <_dtoa_r+0xb24>
 800d040:	0800e333 	.word	0x0800e333
 800d044:	0800e290 	.word	0x0800e290
 800d048:	0800e2b4 	.word	0x0800e2b4

0800d04c <__sflush_r>:
 800d04c:	898a      	ldrh	r2, [r1, #12]
 800d04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d052:	4605      	mov	r5, r0
 800d054:	0710      	lsls	r0, r2, #28
 800d056:	460c      	mov	r4, r1
 800d058:	d458      	bmi.n	800d10c <__sflush_r+0xc0>
 800d05a:	684b      	ldr	r3, [r1, #4]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	dc05      	bgt.n	800d06c <__sflush_r+0x20>
 800d060:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d062:	2b00      	cmp	r3, #0
 800d064:	dc02      	bgt.n	800d06c <__sflush_r+0x20>
 800d066:	2000      	movs	r0, #0
 800d068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d06c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d06e:	2e00      	cmp	r6, #0
 800d070:	d0f9      	beq.n	800d066 <__sflush_r+0x1a>
 800d072:	2300      	movs	r3, #0
 800d074:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d078:	682f      	ldr	r7, [r5, #0]
 800d07a:	602b      	str	r3, [r5, #0]
 800d07c:	d032      	beq.n	800d0e4 <__sflush_r+0x98>
 800d07e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d080:	89a3      	ldrh	r3, [r4, #12]
 800d082:	075a      	lsls	r2, r3, #29
 800d084:	d505      	bpl.n	800d092 <__sflush_r+0x46>
 800d086:	6863      	ldr	r3, [r4, #4]
 800d088:	1ac0      	subs	r0, r0, r3
 800d08a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d08c:	b10b      	cbz	r3, 800d092 <__sflush_r+0x46>
 800d08e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d090:	1ac0      	subs	r0, r0, r3
 800d092:	2300      	movs	r3, #0
 800d094:	4602      	mov	r2, r0
 800d096:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d098:	6a21      	ldr	r1, [r4, #32]
 800d09a:	4628      	mov	r0, r5
 800d09c:	47b0      	blx	r6
 800d09e:	1c43      	adds	r3, r0, #1
 800d0a0:	89a3      	ldrh	r3, [r4, #12]
 800d0a2:	d106      	bne.n	800d0b2 <__sflush_r+0x66>
 800d0a4:	6829      	ldr	r1, [r5, #0]
 800d0a6:	291d      	cmp	r1, #29
 800d0a8:	d82c      	bhi.n	800d104 <__sflush_r+0xb8>
 800d0aa:	4a2a      	ldr	r2, [pc, #168]	; (800d154 <__sflush_r+0x108>)
 800d0ac:	40ca      	lsrs	r2, r1
 800d0ae:	07d6      	lsls	r6, r2, #31
 800d0b0:	d528      	bpl.n	800d104 <__sflush_r+0xb8>
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	6062      	str	r2, [r4, #4]
 800d0b6:	04d9      	lsls	r1, r3, #19
 800d0b8:	6922      	ldr	r2, [r4, #16]
 800d0ba:	6022      	str	r2, [r4, #0]
 800d0bc:	d504      	bpl.n	800d0c8 <__sflush_r+0x7c>
 800d0be:	1c42      	adds	r2, r0, #1
 800d0c0:	d101      	bne.n	800d0c6 <__sflush_r+0x7a>
 800d0c2:	682b      	ldr	r3, [r5, #0]
 800d0c4:	b903      	cbnz	r3, 800d0c8 <__sflush_r+0x7c>
 800d0c6:	6560      	str	r0, [r4, #84]	; 0x54
 800d0c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0ca:	602f      	str	r7, [r5, #0]
 800d0cc:	2900      	cmp	r1, #0
 800d0ce:	d0ca      	beq.n	800d066 <__sflush_r+0x1a>
 800d0d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0d4:	4299      	cmp	r1, r3
 800d0d6:	d002      	beq.n	800d0de <__sflush_r+0x92>
 800d0d8:	4628      	mov	r0, r5
 800d0da:	f7fe f9c5 	bl	800b468 <_free_r>
 800d0de:	2000      	movs	r0, #0
 800d0e0:	6360      	str	r0, [r4, #52]	; 0x34
 800d0e2:	e7c1      	b.n	800d068 <__sflush_r+0x1c>
 800d0e4:	6a21      	ldr	r1, [r4, #32]
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	47b0      	blx	r6
 800d0ec:	1c41      	adds	r1, r0, #1
 800d0ee:	d1c7      	bne.n	800d080 <__sflush_r+0x34>
 800d0f0:	682b      	ldr	r3, [r5, #0]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d0c4      	beq.n	800d080 <__sflush_r+0x34>
 800d0f6:	2b1d      	cmp	r3, #29
 800d0f8:	d001      	beq.n	800d0fe <__sflush_r+0xb2>
 800d0fa:	2b16      	cmp	r3, #22
 800d0fc:	d101      	bne.n	800d102 <__sflush_r+0xb6>
 800d0fe:	602f      	str	r7, [r5, #0]
 800d100:	e7b1      	b.n	800d066 <__sflush_r+0x1a>
 800d102:	89a3      	ldrh	r3, [r4, #12]
 800d104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d108:	81a3      	strh	r3, [r4, #12]
 800d10a:	e7ad      	b.n	800d068 <__sflush_r+0x1c>
 800d10c:	690f      	ldr	r7, [r1, #16]
 800d10e:	2f00      	cmp	r7, #0
 800d110:	d0a9      	beq.n	800d066 <__sflush_r+0x1a>
 800d112:	0793      	lsls	r3, r2, #30
 800d114:	680e      	ldr	r6, [r1, #0]
 800d116:	bf08      	it	eq
 800d118:	694b      	ldreq	r3, [r1, #20]
 800d11a:	600f      	str	r7, [r1, #0]
 800d11c:	bf18      	it	ne
 800d11e:	2300      	movne	r3, #0
 800d120:	eba6 0807 	sub.w	r8, r6, r7
 800d124:	608b      	str	r3, [r1, #8]
 800d126:	f1b8 0f00 	cmp.w	r8, #0
 800d12a:	dd9c      	ble.n	800d066 <__sflush_r+0x1a>
 800d12c:	6a21      	ldr	r1, [r4, #32]
 800d12e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d130:	4643      	mov	r3, r8
 800d132:	463a      	mov	r2, r7
 800d134:	4628      	mov	r0, r5
 800d136:	47b0      	blx	r6
 800d138:	2800      	cmp	r0, #0
 800d13a:	dc06      	bgt.n	800d14a <__sflush_r+0xfe>
 800d13c:	89a3      	ldrh	r3, [r4, #12]
 800d13e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d142:	81a3      	strh	r3, [r4, #12]
 800d144:	f04f 30ff 	mov.w	r0, #4294967295
 800d148:	e78e      	b.n	800d068 <__sflush_r+0x1c>
 800d14a:	4407      	add	r7, r0
 800d14c:	eba8 0800 	sub.w	r8, r8, r0
 800d150:	e7e9      	b.n	800d126 <__sflush_r+0xda>
 800d152:	bf00      	nop
 800d154:	20400001 	.word	0x20400001

0800d158 <_fflush_r>:
 800d158:	b538      	push	{r3, r4, r5, lr}
 800d15a:	690b      	ldr	r3, [r1, #16]
 800d15c:	4605      	mov	r5, r0
 800d15e:	460c      	mov	r4, r1
 800d160:	b913      	cbnz	r3, 800d168 <_fflush_r+0x10>
 800d162:	2500      	movs	r5, #0
 800d164:	4628      	mov	r0, r5
 800d166:	bd38      	pop	{r3, r4, r5, pc}
 800d168:	b118      	cbz	r0, 800d172 <_fflush_r+0x1a>
 800d16a:	6983      	ldr	r3, [r0, #24]
 800d16c:	b90b      	cbnz	r3, 800d172 <_fflush_r+0x1a>
 800d16e:	f7fe f897 	bl	800b2a0 <__sinit>
 800d172:	4b14      	ldr	r3, [pc, #80]	; (800d1c4 <_fflush_r+0x6c>)
 800d174:	429c      	cmp	r4, r3
 800d176:	d11b      	bne.n	800d1b0 <_fflush_r+0x58>
 800d178:	686c      	ldr	r4, [r5, #4]
 800d17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d0ef      	beq.n	800d162 <_fflush_r+0xa>
 800d182:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d184:	07d0      	lsls	r0, r2, #31
 800d186:	d404      	bmi.n	800d192 <_fflush_r+0x3a>
 800d188:	0599      	lsls	r1, r3, #22
 800d18a:	d402      	bmi.n	800d192 <_fflush_r+0x3a>
 800d18c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d18e:	f7fe f94a 	bl	800b426 <__retarget_lock_acquire_recursive>
 800d192:	4628      	mov	r0, r5
 800d194:	4621      	mov	r1, r4
 800d196:	f7ff ff59 	bl	800d04c <__sflush_r>
 800d19a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d19c:	07da      	lsls	r2, r3, #31
 800d19e:	4605      	mov	r5, r0
 800d1a0:	d4e0      	bmi.n	800d164 <_fflush_r+0xc>
 800d1a2:	89a3      	ldrh	r3, [r4, #12]
 800d1a4:	059b      	lsls	r3, r3, #22
 800d1a6:	d4dd      	bmi.n	800d164 <_fflush_r+0xc>
 800d1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1aa:	f7fe f93d 	bl	800b428 <__retarget_lock_release_recursive>
 800d1ae:	e7d9      	b.n	800d164 <_fflush_r+0xc>
 800d1b0:	4b05      	ldr	r3, [pc, #20]	; (800d1c8 <_fflush_r+0x70>)
 800d1b2:	429c      	cmp	r4, r3
 800d1b4:	d101      	bne.n	800d1ba <_fflush_r+0x62>
 800d1b6:	68ac      	ldr	r4, [r5, #8]
 800d1b8:	e7df      	b.n	800d17a <_fflush_r+0x22>
 800d1ba:	4b04      	ldr	r3, [pc, #16]	; (800d1cc <_fflush_r+0x74>)
 800d1bc:	429c      	cmp	r4, r3
 800d1be:	bf08      	it	eq
 800d1c0:	68ec      	ldreq	r4, [r5, #12]
 800d1c2:	e7da      	b.n	800d17a <_fflush_r+0x22>
 800d1c4:	0800e23c 	.word	0x0800e23c
 800d1c8:	0800e25c 	.word	0x0800e25c
 800d1cc:	0800e21c 	.word	0x0800e21c

0800d1d0 <_localeconv_r>:
 800d1d0:	4800      	ldr	r0, [pc, #0]	; (800d1d4 <_localeconv_r+0x4>)
 800d1d2:	4770      	bx	lr
 800d1d4:	20000164 	.word	0x20000164

0800d1d8 <_lseek_r>:
 800d1d8:	b538      	push	{r3, r4, r5, lr}
 800d1da:	4d07      	ldr	r5, [pc, #28]	; (800d1f8 <_lseek_r+0x20>)
 800d1dc:	4604      	mov	r4, r0
 800d1de:	4608      	mov	r0, r1
 800d1e0:	4611      	mov	r1, r2
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	602a      	str	r2, [r5, #0]
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	f7f4 faee 	bl	80017c8 <_lseek>
 800d1ec:	1c43      	adds	r3, r0, #1
 800d1ee:	d102      	bne.n	800d1f6 <_lseek_r+0x1e>
 800d1f0:	682b      	ldr	r3, [r5, #0]
 800d1f2:	b103      	cbz	r3, 800d1f6 <_lseek_r+0x1e>
 800d1f4:	6023      	str	r3, [r4, #0]
 800d1f6:	bd38      	pop	{r3, r4, r5, pc}
 800d1f8:	20005108 	.word	0x20005108

0800d1fc <__swhatbuf_r>:
 800d1fc:	b570      	push	{r4, r5, r6, lr}
 800d1fe:	460e      	mov	r6, r1
 800d200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d204:	2900      	cmp	r1, #0
 800d206:	b096      	sub	sp, #88	; 0x58
 800d208:	4614      	mov	r4, r2
 800d20a:	461d      	mov	r5, r3
 800d20c:	da08      	bge.n	800d220 <__swhatbuf_r+0x24>
 800d20e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d212:	2200      	movs	r2, #0
 800d214:	602a      	str	r2, [r5, #0]
 800d216:	061a      	lsls	r2, r3, #24
 800d218:	d410      	bmi.n	800d23c <__swhatbuf_r+0x40>
 800d21a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d21e:	e00e      	b.n	800d23e <__swhatbuf_r+0x42>
 800d220:	466a      	mov	r2, sp
 800d222:	f000 fd93 	bl	800dd4c <_fstat_r>
 800d226:	2800      	cmp	r0, #0
 800d228:	dbf1      	blt.n	800d20e <__swhatbuf_r+0x12>
 800d22a:	9a01      	ldr	r2, [sp, #4]
 800d22c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d230:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d234:	425a      	negs	r2, r3
 800d236:	415a      	adcs	r2, r3
 800d238:	602a      	str	r2, [r5, #0]
 800d23a:	e7ee      	b.n	800d21a <__swhatbuf_r+0x1e>
 800d23c:	2340      	movs	r3, #64	; 0x40
 800d23e:	2000      	movs	r0, #0
 800d240:	6023      	str	r3, [r4, #0]
 800d242:	b016      	add	sp, #88	; 0x58
 800d244:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d248 <__smakebuf_r>:
 800d248:	898b      	ldrh	r3, [r1, #12]
 800d24a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d24c:	079d      	lsls	r5, r3, #30
 800d24e:	4606      	mov	r6, r0
 800d250:	460c      	mov	r4, r1
 800d252:	d507      	bpl.n	800d264 <__smakebuf_r+0x1c>
 800d254:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d258:	6023      	str	r3, [r4, #0]
 800d25a:	6123      	str	r3, [r4, #16]
 800d25c:	2301      	movs	r3, #1
 800d25e:	6163      	str	r3, [r4, #20]
 800d260:	b002      	add	sp, #8
 800d262:	bd70      	pop	{r4, r5, r6, pc}
 800d264:	ab01      	add	r3, sp, #4
 800d266:	466a      	mov	r2, sp
 800d268:	f7ff ffc8 	bl	800d1fc <__swhatbuf_r>
 800d26c:	9900      	ldr	r1, [sp, #0]
 800d26e:	4605      	mov	r5, r0
 800d270:	4630      	mov	r0, r6
 800d272:	f7fe f965 	bl	800b540 <_malloc_r>
 800d276:	b948      	cbnz	r0, 800d28c <__smakebuf_r+0x44>
 800d278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d27c:	059a      	lsls	r2, r3, #22
 800d27e:	d4ef      	bmi.n	800d260 <__smakebuf_r+0x18>
 800d280:	f023 0303 	bic.w	r3, r3, #3
 800d284:	f043 0302 	orr.w	r3, r3, #2
 800d288:	81a3      	strh	r3, [r4, #12]
 800d28a:	e7e3      	b.n	800d254 <__smakebuf_r+0xc>
 800d28c:	4b0d      	ldr	r3, [pc, #52]	; (800d2c4 <__smakebuf_r+0x7c>)
 800d28e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d290:	89a3      	ldrh	r3, [r4, #12]
 800d292:	6020      	str	r0, [r4, #0]
 800d294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d298:	81a3      	strh	r3, [r4, #12]
 800d29a:	9b00      	ldr	r3, [sp, #0]
 800d29c:	6163      	str	r3, [r4, #20]
 800d29e:	9b01      	ldr	r3, [sp, #4]
 800d2a0:	6120      	str	r0, [r4, #16]
 800d2a2:	b15b      	cbz	r3, 800d2bc <__smakebuf_r+0x74>
 800d2a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2a8:	4630      	mov	r0, r6
 800d2aa:	f000 fd61 	bl	800dd70 <_isatty_r>
 800d2ae:	b128      	cbz	r0, 800d2bc <__smakebuf_r+0x74>
 800d2b0:	89a3      	ldrh	r3, [r4, #12]
 800d2b2:	f023 0303 	bic.w	r3, r3, #3
 800d2b6:	f043 0301 	orr.w	r3, r3, #1
 800d2ba:	81a3      	strh	r3, [r4, #12]
 800d2bc:	89a0      	ldrh	r0, [r4, #12]
 800d2be:	4305      	orrs	r5, r0
 800d2c0:	81a5      	strh	r5, [r4, #12]
 800d2c2:	e7cd      	b.n	800d260 <__smakebuf_r+0x18>
 800d2c4:	0800b239 	.word	0x0800b239

0800d2c8 <__malloc_lock>:
 800d2c8:	4801      	ldr	r0, [pc, #4]	; (800d2d0 <__malloc_lock+0x8>)
 800d2ca:	f7fe b8ac 	b.w	800b426 <__retarget_lock_acquire_recursive>
 800d2ce:	bf00      	nop
 800d2d0:	200050fc 	.word	0x200050fc

0800d2d4 <__malloc_unlock>:
 800d2d4:	4801      	ldr	r0, [pc, #4]	; (800d2dc <__malloc_unlock+0x8>)
 800d2d6:	f7fe b8a7 	b.w	800b428 <__retarget_lock_release_recursive>
 800d2da:	bf00      	nop
 800d2dc:	200050fc 	.word	0x200050fc

0800d2e0 <_Balloc>:
 800d2e0:	b570      	push	{r4, r5, r6, lr}
 800d2e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d2e4:	4604      	mov	r4, r0
 800d2e6:	460d      	mov	r5, r1
 800d2e8:	b976      	cbnz	r6, 800d308 <_Balloc+0x28>
 800d2ea:	2010      	movs	r0, #16
 800d2ec:	f7fe f89e 	bl	800b42c <malloc>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	6260      	str	r0, [r4, #36]	; 0x24
 800d2f4:	b920      	cbnz	r0, 800d300 <_Balloc+0x20>
 800d2f6:	4b18      	ldr	r3, [pc, #96]	; (800d358 <_Balloc+0x78>)
 800d2f8:	4818      	ldr	r0, [pc, #96]	; (800d35c <_Balloc+0x7c>)
 800d2fa:	2166      	movs	r1, #102	; 0x66
 800d2fc:	f000 fcf6 	bl	800dcec <__assert_func>
 800d300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d304:	6006      	str	r6, [r0, #0]
 800d306:	60c6      	str	r6, [r0, #12]
 800d308:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d30a:	68f3      	ldr	r3, [r6, #12]
 800d30c:	b183      	cbz	r3, 800d330 <_Balloc+0x50>
 800d30e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d310:	68db      	ldr	r3, [r3, #12]
 800d312:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d316:	b9b8      	cbnz	r0, 800d348 <_Balloc+0x68>
 800d318:	2101      	movs	r1, #1
 800d31a:	fa01 f605 	lsl.w	r6, r1, r5
 800d31e:	1d72      	adds	r2, r6, #5
 800d320:	0092      	lsls	r2, r2, #2
 800d322:	4620      	mov	r0, r4
 800d324:	f000 fb60 	bl	800d9e8 <_calloc_r>
 800d328:	b160      	cbz	r0, 800d344 <_Balloc+0x64>
 800d32a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d32e:	e00e      	b.n	800d34e <_Balloc+0x6e>
 800d330:	2221      	movs	r2, #33	; 0x21
 800d332:	2104      	movs	r1, #4
 800d334:	4620      	mov	r0, r4
 800d336:	f000 fb57 	bl	800d9e8 <_calloc_r>
 800d33a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d33c:	60f0      	str	r0, [r6, #12]
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d1e4      	bne.n	800d30e <_Balloc+0x2e>
 800d344:	2000      	movs	r0, #0
 800d346:	bd70      	pop	{r4, r5, r6, pc}
 800d348:	6802      	ldr	r2, [r0, #0]
 800d34a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d34e:	2300      	movs	r3, #0
 800d350:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d354:	e7f7      	b.n	800d346 <_Balloc+0x66>
 800d356:	bf00      	nop
 800d358:	0800e2c1 	.word	0x0800e2c1
 800d35c:	0800e344 	.word	0x0800e344

0800d360 <_Bfree>:
 800d360:	b570      	push	{r4, r5, r6, lr}
 800d362:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d364:	4605      	mov	r5, r0
 800d366:	460c      	mov	r4, r1
 800d368:	b976      	cbnz	r6, 800d388 <_Bfree+0x28>
 800d36a:	2010      	movs	r0, #16
 800d36c:	f7fe f85e 	bl	800b42c <malloc>
 800d370:	4602      	mov	r2, r0
 800d372:	6268      	str	r0, [r5, #36]	; 0x24
 800d374:	b920      	cbnz	r0, 800d380 <_Bfree+0x20>
 800d376:	4b09      	ldr	r3, [pc, #36]	; (800d39c <_Bfree+0x3c>)
 800d378:	4809      	ldr	r0, [pc, #36]	; (800d3a0 <_Bfree+0x40>)
 800d37a:	218a      	movs	r1, #138	; 0x8a
 800d37c:	f000 fcb6 	bl	800dcec <__assert_func>
 800d380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d384:	6006      	str	r6, [r0, #0]
 800d386:	60c6      	str	r6, [r0, #12]
 800d388:	b13c      	cbz	r4, 800d39a <_Bfree+0x3a>
 800d38a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d38c:	6862      	ldr	r2, [r4, #4]
 800d38e:	68db      	ldr	r3, [r3, #12]
 800d390:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d394:	6021      	str	r1, [r4, #0]
 800d396:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d39a:	bd70      	pop	{r4, r5, r6, pc}
 800d39c:	0800e2c1 	.word	0x0800e2c1
 800d3a0:	0800e344 	.word	0x0800e344

0800d3a4 <__multadd>:
 800d3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a8:	690d      	ldr	r5, [r1, #16]
 800d3aa:	4607      	mov	r7, r0
 800d3ac:	460c      	mov	r4, r1
 800d3ae:	461e      	mov	r6, r3
 800d3b0:	f101 0c14 	add.w	ip, r1, #20
 800d3b4:	2000      	movs	r0, #0
 800d3b6:	f8dc 3000 	ldr.w	r3, [ip]
 800d3ba:	b299      	uxth	r1, r3
 800d3bc:	fb02 6101 	mla	r1, r2, r1, r6
 800d3c0:	0c1e      	lsrs	r6, r3, #16
 800d3c2:	0c0b      	lsrs	r3, r1, #16
 800d3c4:	fb02 3306 	mla	r3, r2, r6, r3
 800d3c8:	b289      	uxth	r1, r1
 800d3ca:	3001      	adds	r0, #1
 800d3cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d3d0:	4285      	cmp	r5, r0
 800d3d2:	f84c 1b04 	str.w	r1, [ip], #4
 800d3d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d3da:	dcec      	bgt.n	800d3b6 <__multadd+0x12>
 800d3dc:	b30e      	cbz	r6, 800d422 <__multadd+0x7e>
 800d3de:	68a3      	ldr	r3, [r4, #8]
 800d3e0:	42ab      	cmp	r3, r5
 800d3e2:	dc19      	bgt.n	800d418 <__multadd+0x74>
 800d3e4:	6861      	ldr	r1, [r4, #4]
 800d3e6:	4638      	mov	r0, r7
 800d3e8:	3101      	adds	r1, #1
 800d3ea:	f7ff ff79 	bl	800d2e0 <_Balloc>
 800d3ee:	4680      	mov	r8, r0
 800d3f0:	b928      	cbnz	r0, 800d3fe <__multadd+0x5a>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	4b0c      	ldr	r3, [pc, #48]	; (800d428 <__multadd+0x84>)
 800d3f6:	480d      	ldr	r0, [pc, #52]	; (800d42c <__multadd+0x88>)
 800d3f8:	21b5      	movs	r1, #181	; 0xb5
 800d3fa:	f000 fc77 	bl	800dcec <__assert_func>
 800d3fe:	6922      	ldr	r2, [r4, #16]
 800d400:	3202      	adds	r2, #2
 800d402:	f104 010c 	add.w	r1, r4, #12
 800d406:	0092      	lsls	r2, r2, #2
 800d408:	300c      	adds	r0, #12
 800d40a:	f7fe f817 	bl	800b43c <memcpy>
 800d40e:	4621      	mov	r1, r4
 800d410:	4638      	mov	r0, r7
 800d412:	f7ff ffa5 	bl	800d360 <_Bfree>
 800d416:	4644      	mov	r4, r8
 800d418:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d41c:	3501      	adds	r5, #1
 800d41e:	615e      	str	r6, [r3, #20]
 800d420:	6125      	str	r5, [r4, #16]
 800d422:	4620      	mov	r0, r4
 800d424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d428:	0800e333 	.word	0x0800e333
 800d42c:	0800e344 	.word	0x0800e344

0800d430 <__hi0bits>:
 800d430:	0c03      	lsrs	r3, r0, #16
 800d432:	041b      	lsls	r3, r3, #16
 800d434:	b9d3      	cbnz	r3, 800d46c <__hi0bits+0x3c>
 800d436:	0400      	lsls	r0, r0, #16
 800d438:	2310      	movs	r3, #16
 800d43a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d43e:	bf04      	itt	eq
 800d440:	0200      	lsleq	r0, r0, #8
 800d442:	3308      	addeq	r3, #8
 800d444:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d448:	bf04      	itt	eq
 800d44a:	0100      	lsleq	r0, r0, #4
 800d44c:	3304      	addeq	r3, #4
 800d44e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d452:	bf04      	itt	eq
 800d454:	0080      	lsleq	r0, r0, #2
 800d456:	3302      	addeq	r3, #2
 800d458:	2800      	cmp	r0, #0
 800d45a:	db05      	blt.n	800d468 <__hi0bits+0x38>
 800d45c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d460:	f103 0301 	add.w	r3, r3, #1
 800d464:	bf08      	it	eq
 800d466:	2320      	moveq	r3, #32
 800d468:	4618      	mov	r0, r3
 800d46a:	4770      	bx	lr
 800d46c:	2300      	movs	r3, #0
 800d46e:	e7e4      	b.n	800d43a <__hi0bits+0xa>

0800d470 <__lo0bits>:
 800d470:	6803      	ldr	r3, [r0, #0]
 800d472:	f013 0207 	ands.w	r2, r3, #7
 800d476:	4601      	mov	r1, r0
 800d478:	d00b      	beq.n	800d492 <__lo0bits+0x22>
 800d47a:	07da      	lsls	r2, r3, #31
 800d47c:	d423      	bmi.n	800d4c6 <__lo0bits+0x56>
 800d47e:	0798      	lsls	r0, r3, #30
 800d480:	bf49      	itett	mi
 800d482:	085b      	lsrmi	r3, r3, #1
 800d484:	089b      	lsrpl	r3, r3, #2
 800d486:	2001      	movmi	r0, #1
 800d488:	600b      	strmi	r3, [r1, #0]
 800d48a:	bf5c      	itt	pl
 800d48c:	600b      	strpl	r3, [r1, #0]
 800d48e:	2002      	movpl	r0, #2
 800d490:	4770      	bx	lr
 800d492:	b298      	uxth	r0, r3
 800d494:	b9a8      	cbnz	r0, 800d4c2 <__lo0bits+0x52>
 800d496:	0c1b      	lsrs	r3, r3, #16
 800d498:	2010      	movs	r0, #16
 800d49a:	b2da      	uxtb	r2, r3
 800d49c:	b90a      	cbnz	r2, 800d4a2 <__lo0bits+0x32>
 800d49e:	3008      	adds	r0, #8
 800d4a0:	0a1b      	lsrs	r3, r3, #8
 800d4a2:	071a      	lsls	r2, r3, #28
 800d4a4:	bf04      	itt	eq
 800d4a6:	091b      	lsreq	r3, r3, #4
 800d4a8:	3004      	addeq	r0, #4
 800d4aa:	079a      	lsls	r2, r3, #30
 800d4ac:	bf04      	itt	eq
 800d4ae:	089b      	lsreq	r3, r3, #2
 800d4b0:	3002      	addeq	r0, #2
 800d4b2:	07da      	lsls	r2, r3, #31
 800d4b4:	d403      	bmi.n	800d4be <__lo0bits+0x4e>
 800d4b6:	085b      	lsrs	r3, r3, #1
 800d4b8:	f100 0001 	add.w	r0, r0, #1
 800d4bc:	d005      	beq.n	800d4ca <__lo0bits+0x5a>
 800d4be:	600b      	str	r3, [r1, #0]
 800d4c0:	4770      	bx	lr
 800d4c2:	4610      	mov	r0, r2
 800d4c4:	e7e9      	b.n	800d49a <__lo0bits+0x2a>
 800d4c6:	2000      	movs	r0, #0
 800d4c8:	4770      	bx	lr
 800d4ca:	2020      	movs	r0, #32
 800d4cc:	4770      	bx	lr
	...

0800d4d0 <__i2b>:
 800d4d0:	b510      	push	{r4, lr}
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	2101      	movs	r1, #1
 800d4d6:	f7ff ff03 	bl	800d2e0 <_Balloc>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	b928      	cbnz	r0, 800d4ea <__i2b+0x1a>
 800d4de:	4b05      	ldr	r3, [pc, #20]	; (800d4f4 <__i2b+0x24>)
 800d4e0:	4805      	ldr	r0, [pc, #20]	; (800d4f8 <__i2b+0x28>)
 800d4e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d4e6:	f000 fc01 	bl	800dcec <__assert_func>
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	6144      	str	r4, [r0, #20]
 800d4ee:	6103      	str	r3, [r0, #16]
 800d4f0:	bd10      	pop	{r4, pc}
 800d4f2:	bf00      	nop
 800d4f4:	0800e333 	.word	0x0800e333
 800d4f8:	0800e344 	.word	0x0800e344

0800d4fc <__multiply>:
 800d4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d500:	4691      	mov	r9, r2
 800d502:	690a      	ldr	r2, [r1, #16]
 800d504:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d508:	429a      	cmp	r2, r3
 800d50a:	bfb8      	it	lt
 800d50c:	460b      	movlt	r3, r1
 800d50e:	460c      	mov	r4, r1
 800d510:	bfbc      	itt	lt
 800d512:	464c      	movlt	r4, r9
 800d514:	4699      	movlt	r9, r3
 800d516:	6927      	ldr	r7, [r4, #16]
 800d518:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d51c:	68a3      	ldr	r3, [r4, #8]
 800d51e:	6861      	ldr	r1, [r4, #4]
 800d520:	eb07 060a 	add.w	r6, r7, sl
 800d524:	42b3      	cmp	r3, r6
 800d526:	b085      	sub	sp, #20
 800d528:	bfb8      	it	lt
 800d52a:	3101      	addlt	r1, #1
 800d52c:	f7ff fed8 	bl	800d2e0 <_Balloc>
 800d530:	b930      	cbnz	r0, 800d540 <__multiply+0x44>
 800d532:	4602      	mov	r2, r0
 800d534:	4b44      	ldr	r3, [pc, #272]	; (800d648 <__multiply+0x14c>)
 800d536:	4845      	ldr	r0, [pc, #276]	; (800d64c <__multiply+0x150>)
 800d538:	f240 115d 	movw	r1, #349	; 0x15d
 800d53c:	f000 fbd6 	bl	800dcec <__assert_func>
 800d540:	f100 0514 	add.w	r5, r0, #20
 800d544:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d548:	462b      	mov	r3, r5
 800d54a:	2200      	movs	r2, #0
 800d54c:	4543      	cmp	r3, r8
 800d54e:	d321      	bcc.n	800d594 <__multiply+0x98>
 800d550:	f104 0314 	add.w	r3, r4, #20
 800d554:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d558:	f109 0314 	add.w	r3, r9, #20
 800d55c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d560:	9202      	str	r2, [sp, #8]
 800d562:	1b3a      	subs	r2, r7, r4
 800d564:	3a15      	subs	r2, #21
 800d566:	f022 0203 	bic.w	r2, r2, #3
 800d56a:	3204      	adds	r2, #4
 800d56c:	f104 0115 	add.w	r1, r4, #21
 800d570:	428f      	cmp	r7, r1
 800d572:	bf38      	it	cc
 800d574:	2204      	movcc	r2, #4
 800d576:	9201      	str	r2, [sp, #4]
 800d578:	9a02      	ldr	r2, [sp, #8]
 800d57a:	9303      	str	r3, [sp, #12]
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d80c      	bhi.n	800d59a <__multiply+0x9e>
 800d580:	2e00      	cmp	r6, #0
 800d582:	dd03      	ble.n	800d58c <__multiply+0x90>
 800d584:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d05a      	beq.n	800d642 <__multiply+0x146>
 800d58c:	6106      	str	r6, [r0, #16]
 800d58e:	b005      	add	sp, #20
 800d590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d594:	f843 2b04 	str.w	r2, [r3], #4
 800d598:	e7d8      	b.n	800d54c <__multiply+0x50>
 800d59a:	f8b3 a000 	ldrh.w	sl, [r3]
 800d59e:	f1ba 0f00 	cmp.w	sl, #0
 800d5a2:	d024      	beq.n	800d5ee <__multiply+0xf2>
 800d5a4:	f104 0e14 	add.w	lr, r4, #20
 800d5a8:	46a9      	mov	r9, r5
 800d5aa:	f04f 0c00 	mov.w	ip, #0
 800d5ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d5b2:	f8d9 1000 	ldr.w	r1, [r9]
 800d5b6:	fa1f fb82 	uxth.w	fp, r2
 800d5ba:	b289      	uxth	r1, r1
 800d5bc:	fb0a 110b 	mla	r1, sl, fp, r1
 800d5c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d5c4:	f8d9 2000 	ldr.w	r2, [r9]
 800d5c8:	4461      	add	r1, ip
 800d5ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d5ce:	fb0a c20b 	mla	r2, sl, fp, ip
 800d5d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d5d6:	b289      	uxth	r1, r1
 800d5d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d5dc:	4577      	cmp	r7, lr
 800d5de:	f849 1b04 	str.w	r1, [r9], #4
 800d5e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d5e6:	d8e2      	bhi.n	800d5ae <__multiply+0xb2>
 800d5e8:	9a01      	ldr	r2, [sp, #4]
 800d5ea:	f845 c002 	str.w	ip, [r5, r2]
 800d5ee:	9a03      	ldr	r2, [sp, #12]
 800d5f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d5f4:	3304      	adds	r3, #4
 800d5f6:	f1b9 0f00 	cmp.w	r9, #0
 800d5fa:	d020      	beq.n	800d63e <__multiply+0x142>
 800d5fc:	6829      	ldr	r1, [r5, #0]
 800d5fe:	f104 0c14 	add.w	ip, r4, #20
 800d602:	46ae      	mov	lr, r5
 800d604:	f04f 0a00 	mov.w	sl, #0
 800d608:	f8bc b000 	ldrh.w	fp, [ip]
 800d60c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d610:	fb09 220b 	mla	r2, r9, fp, r2
 800d614:	4492      	add	sl, r2
 800d616:	b289      	uxth	r1, r1
 800d618:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d61c:	f84e 1b04 	str.w	r1, [lr], #4
 800d620:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d624:	f8be 1000 	ldrh.w	r1, [lr]
 800d628:	0c12      	lsrs	r2, r2, #16
 800d62a:	fb09 1102 	mla	r1, r9, r2, r1
 800d62e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d632:	4567      	cmp	r7, ip
 800d634:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d638:	d8e6      	bhi.n	800d608 <__multiply+0x10c>
 800d63a:	9a01      	ldr	r2, [sp, #4]
 800d63c:	50a9      	str	r1, [r5, r2]
 800d63e:	3504      	adds	r5, #4
 800d640:	e79a      	b.n	800d578 <__multiply+0x7c>
 800d642:	3e01      	subs	r6, #1
 800d644:	e79c      	b.n	800d580 <__multiply+0x84>
 800d646:	bf00      	nop
 800d648:	0800e333 	.word	0x0800e333
 800d64c:	0800e344 	.word	0x0800e344

0800d650 <__pow5mult>:
 800d650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d654:	4615      	mov	r5, r2
 800d656:	f012 0203 	ands.w	r2, r2, #3
 800d65a:	4606      	mov	r6, r0
 800d65c:	460f      	mov	r7, r1
 800d65e:	d007      	beq.n	800d670 <__pow5mult+0x20>
 800d660:	4c25      	ldr	r4, [pc, #148]	; (800d6f8 <__pow5mult+0xa8>)
 800d662:	3a01      	subs	r2, #1
 800d664:	2300      	movs	r3, #0
 800d666:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d66a:	f7ff fe9b 	bl	800d3a4 <__multadd>
 800d66e:	4607      	mov	r7, r0
 800d670:	10ad      	asrs	r5, r5, #2
 800d672:	d03d      	beq.n	800d6f0 <__pow5mult+0xa0>
 800d674:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d676:	b97c      	cbnz	r4, 800d698 <__pow5mult+0x48>
 800d678:	2010      	movs	r0, #16
 800d67a:	f7fd fed7 	bl	800b42c <malloc>
 800d67e:	4602      	mov	r2, r0
 800d680:	6270      	str	r0, [r6, #36]	; 0x24
 800d682:	b928      	cbnz	r0, 800d690 <__pow5mult+0x40>
 800d684:	4b1d      	ldr	r3, [pc, #116]	; (800d6fc <__pow5mult+0xac>)
 800d686:	481e      	ldr	r0, [pc, #120]	; (800d700 <__pow5mult+0xb0>)
 800d688:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d68c:	f000 fb2e 	bl	800dcec <__assert_func>
 800d690:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d694:	6004      	str	r4, [r0, #0]
 800d696:	60c4      	str	r4, [r0, #12]
 800d698:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d69c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d6a0:	b94c      	cbnz	r4, 800d6b6 <__pow5mult+0x66>
 800d6a2:	f240 2171 	movw	r1, #625	; 0x271
 800d6a6:	4630      	mov	r0, r6
 800d6a8:	f7ff ff12 	bl	800d4d0 <__i2b>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800d6b2:	4604      	mov	r4, r0
 800d6b4:	6003      	str	r3, [r0, #0]
 800d6b6:	f04f 0900 	mov.w	r9, #0
 800d6ba:	07eb      	lsls	r3, r5, #31
 800d6bc:	d50a      	bpl.n	800d6d4 <__pow5mult+0x84>
 800d6be:	4639      	mov	r1, r7
 800d6c0:	4622      	mov	r2, r4
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	f7ff ff1a 	bl	800d4fc <__multiply>
 800d6c8:	4639      	mov	r1, r7
 800d6ca:	4680      	mov	r8, r0
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	f7ff fe47 	bl	800d360 <_Bfree>
 800d6d2:	4647      	mov	r7, r8
 800d6d4:	106d      	asrs	r5, r5, #1
 800d6d6:	d00b      	beq.n	800d6f0 <__pow5mult+0xa0>
 800d6d8:	6820      	ldr	r0, [r4, #0]
 800d6da:	b938      	cbnz	r0, 800d6ec <__pow5mult+0x9c>
 800d6dc:	4622      	mov	r2, r4
 800d6de:	4621      	mov	r1, r4
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	f7ff ff0b 	bl	800d4fc <__multiply>
 800d6e6:	6020      	str	r0, [r4, #0]
 800d6e8:	f8c0 9000 	str.w	r9, [r0]
 800d6ec:	4604      	mov	r4, r0
 800d6ee:	e7e4      	b.n	800d6ba <__pow5mult+0x6a>
 800d6f0:	4638      	mov	r0, r7
 800d6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6f6:	bf00      	nop
 800d6f8:	0800e490 	.word	0x0800e490
 800d6fc:	0800e2c1 	.word	0x0800e2c1
 800d700:	0800e344 	.word	0x0800e344

0800d704 <__lshift>:
 800d704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d708:	460c      	mov	r4, r1
 800d70a:	6849      	ldr	r1, [r1, #4]
 800d70c:	6923      	ldr	r3, [r4, #16]
 800d70e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d712:	68a3      	ldr	r3, [r4, #8]
 800d714:	4607      	mov	r7, r0
 800d716:	4691      	mov	r9, r2
 800d718:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d71c:	f108 0601 	add.w	r6, r8, #1
 800d720:	42b3      	cmp	r3, r6
 800d722:	db0b      	blt.n	800d73c <__lshift+0x38>
 800d724:	4638      	mov	r0, r7
 800d726:	f7ff fddb 	bl	800d2e0 <_Balloc>
 800d72a:	4605      	mov	r5, r0
 800d72c:	b948      	cbnz	r0, 800d742 <__lshift+0x3e>
 800d72e:	4602      	mov	r2, r0
 800d730:	4b2a      	ldr	r3, [pc, #168]	; (800d7dc <__lshift+0xd8>)
 800d732:	482b      	ldr	r0, [pc, #172]	; (800d7e0 <__lshift+0xdc>)
 800d734:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d738:	f000 fad8 	bl	800dcec <__assert_func>
 800d73c:	3101      	adds	r1, #1
 800d73e:	005b      	lsls	r3, r3, #1
 800d740:	e7ee      	b.n	800d720 <__lshift+0x1c>
 800d742:	2300      	movs	r3, #0
 800d744:	f100 0114 	add.w	r1, r0, #20
 800d748:	f100 0210 	add.w	r2, r0, #16
 800d74c:	4618      	mov	r0, r3
 800d74e:	4553      	cmp	r3, sl
 800d750:	db37      	blt.n	800d7c2 <__lshift+0xbe>
 800d752:	6920      	ldr	r0, [r4, #16]
 800d754:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d758:	f104 0314 	add.w	r3, r4, #20
 800d75c:	f019 091f 	ands.w	r9, r9, #31
 800d760:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d764:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d768:	d02f      	beq.n	800d7ca <__lshift+0xc6>
 800d76a:	f1c9 0e20 	rsb	lr, r9, #32
 800d76e:	468a      	mov	sl, r1
 800d770:	f04f 0c00 	mov.w	ip, #0
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	fa02 f209 	lsl.w	r2, r2, r9
 800d77a:	ea42 020c 	orr.w	r2, r2, ip
 800d77e:	f84a 2b04 	str.w	r2, [sl], #4
 800d782:	f853 2b04 	ldr.w	r2, [r3], #4
 800d786:	4298      	cmp	r0, r3
 800d788:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d78c:	d8f2      	bhi.n	800d774 <__lshift+0x70>
 800d78e:	1b03      	subs	r3, r0, r4
 800d790:	3b15      	subs	r3, #21
 800d792:	f023 0303 	bic.w	r3, r3, #3
 800d796:	3304      	adds	r3, #4
 800d798:	f104 0215 	add.w	r2, r4, #21
 800d79c:	4290      	cmp	r0, r2
 800d79e:	bf38      	it	cc
 800d7a0:	2304      	movcc	r3, #4
 800d7a2:	f841 c003 	str.w	ip, [r1, r3]
 800d7a6:	f1bc 0f00 	cmp.w	ip, #0
 800d7aa:	d001      	beq.n	800d7b0 <__lshift+0xac>
 800d7ac:	f108 0602 	add.w	r6, r8, #2
 800d7b0:	3e01      	subs	r6, #1
 800d7b2:	4638      	mov	r0, r7
 800d7b4:	612e      	str	r6, [r5, #16]
 800d7b6:	4621      	mov	r1, r4
 800d7b8:	f7ff fdd2 	bl	800d360 <_Bfree>
 800d7bc:	4628      	mov	r0, r5
 800d7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d7c6:	3301      	adds	r3, #1
 800d7c8:	e7c1      	b.n	800d74e <__lshift+0x4a>
 800d7ca:	3904      	subs	r1, #4
 800d7cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7d0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d7d4:	4298      	cmp	r0, r3
 800d7d6:	d8f9      	bhi.n	800d7cc <__lshift+0xc8>
 800d7d8:	e7ea      	b.n	800d7b0 <__lshift+0xac>
 800d7da:	bf00      	nop
 800d7dc:	0800e333 	.word	0x0800e333
 800d7e0:	0800e344 	.word	0x0800e344

0800d7e4 <__mcmp>:
 800d7e4:	b530      	push	{r4, r5, lr}
 800d7e6:	6902      	ldr	r2, [r0, #16]
 800d7e8:	690c      	ldr	r4, [r1, #16]
 800d7ea:	1b12      	subs	r2, r2, r4
 800d7ec:	d10e      	bne.n	800d80c <__mcmp+0x28>
 800d7ee:	f100 0314 	add.w	r3, r0, #20
 800d7f2:	3114      	adds	r1, #20
 800d7f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d7f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d7fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d800:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d804:	42a5      	cmp	r5, r4
 800d806:	d003      	beq.n	800d810 <__mcmp+0x2c>
 800d808:	d305      	bcc.n	800d816 <__mcmp+0x32>
 800d80a:	2201      	movs	r2, #1
 800d80c:	4610      	mov	r0, r2
 800d80e:	bd30      	pop	{r4, r5, pc}
 800d810:	4283      	cmp	r3, r0
 800d812:	d3f3      	bcc.n	800d7fc <__mcmp+0x18>
 800d814:	e7fa      	b.n	800d80c <__mcmp+0x28>
 800d816:	f04f 32ff 	mov.w	r2, #4294967295
 800d81a:	e7f7      	b.n	800d80c <__mcmp+0x28>

0800d81c <__mdiff>:
 800d81c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d820:	460c      	mov	r4, r1
 800d822:	4606      	mov	r6, r0
 800d824:	4611      	mov	r1, r2
 800d826:	4620      	mov	r0, r4
 800d828:	4690      	mov	r8, r2
 800d82a:	f7ff ffdb 	bl	800d7e4 <__mcmp>
 800d82e:	1e05      	subs	r5, r0, #0
 800d830:	d110      	bne.n	800d854 <__mdiff+0x38>
 800d832:	4629      	mov	r1, r5
 800d834:	4630      	mov	r0, r6
 800d836:	f7ff fd53 	bl	800d2e0 <_Balloc>
 800d83a:	b930      	cbnz	r0, 800d84a <__mdiff+0x2e>
 800d83c:	4b3a      	ldr	r3, [pc, #232]	; (800d928 <__mdiff+0x10c>)
 800d83e:	4602      	mov	r2, r0
 800d840:	f240 2132 	movw	r1, #562	; 0x232
 800d844:	4839      	ldr	r0, [pc, #228]	; (800d92c <__mdiff+0x110>)
 800d846:	f000 fa51 	bl	800dcec <__assert_func>
 800d84a:	2301      	movs	r3, #1
 800d84c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d850:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d854:	bfa4      	itt	ge
 800d856:	4643      	movge	r3, r8
 800d858:	46a0      	movge	r8, r4
 800d85a:	4630      	mov	r0, r6
 800d85c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d860:	bfa6      	itte	ge
 800d862:	461c      	movge	r4, r3
 800d864:	2500      	movge	r5, #0
 800d866:	2501      	movlt	r5, #1
 800d868:	f7ff fd3a 	bl	800d2e0 <_Balloc>
 800d86c:	b920      	cbnz	r0, 800d878 <__mdiff+0x5c>
 800d86e:	4b2e      	ldr	r3, [pc, #184]	; (800d928 <__mdiff+0x10c>)
 800d870:	4602      	mov	r2, r0
 800d872:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d876:	e7e5      	b.n	800d844 <__mdiff+0x28>
 800d878:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d87c:	6926      	ldr	r6, [r4, #16]
 800d87e:	60c5      	str	r5, [r0, #12]
 800d880:	f104 0914 	add.w	r9, r4, #20
 800d884:	f108 0514 	add.w	r5, r8, #20
 800d888:	f100 0e14 	add.w	lr, r0, #20
 800d88c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d890:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d894:	f108 0210 	add.w	r2, r8, #16
 800d898:	46f2      	mov	sl, lr
 800d89a:	2100      	movs	r1, #0
 800d89c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d8a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d8a4:	fa1f f883 	uxth.w	r8, r3
 800d8a8:	fa11 f18b 	uxtah	r1, r1, fp
 800d8ac:	0c1b      	lsrs	r3, r3, #16
 800d8ae:	eba1 0808 	sub.w	r8, r1, r8
 800d8b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d8b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d8ba:	fa1f f888 	uxth.w	r8, r8
 800d8be:	1419      	asrs	r1, r3, #16
 800d8c0:	454e      	cmp	r6, r9
 800d8c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d8c6:	f84a 3b04 	str.w	r3, [sl], #4
 800d8ca:	d8e7      	bhi.n	800d89c <__mdiff+0x80>
 800d8cc:	1b33      	subs	r3, r6, r4
 800d8ce:	3b15      	subs	r3, #21
 800d8d0:	f023 0303 	bic.w	r3, r3, #3
 800d8d4:	3304      	adds	r3, #4
 800d8d6:	3415      	adds	r4, #21
 800d8d8:	42a6      	cmp	r6, r4
 800d8da:	bf38      	it	cc
 800d8dc:	2304      	movcc	r3, #4
 800d8de:	441d      	add	r5, r3
 800d8e0:	4473      	add	r3, lr
 800d8e2:	469e      	mov	lr, r3
 800d8e4:	462e      	mov	r6, r5
 800d8e6:	4566      	cmp	r6, ip
 800d8e8:	d30e      	bcc.n	800d908 <__mdiff+0xec>
 800d8ea:	f10c 0203 	add.w	r2, ip, #3
 800d8ee:	1b52      	subs	r2, r2, r5
 800d8f0:	f022 0203 	bic.w	r2, r2, #3
 800d8f4:	3d03      	subs	r5, #3
 800d8f6:	45ac      	cmp	ip, r5
 800d8f8:	bf38      	it	cc
 800d8fa:	2200      	movcc	r2, #0
 800d8fc:	441a      	add	r2, r3
 800d8fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d902:	b17b      	cbz	r3, 800d924 <__mdiff+0x108>
 800d904:	6107      	str	r7, [r0, #16]
 800d906:	e7a3      	b.n	800d850 <__mdiff+0x34>
 800d908:	f856 8b04 	ldr.w	r8, [r6], #4
 800d90c:	fa11 f288 	uxtah	r2, r1, r8
 800d910:	1414      	asrs	r4, r2, #16
 800d912:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d916:	b292      	uxth	r2, r2
 800d918:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d91c:	f84e 2b04 	str.w	r2, [lr], #4
 800d920:	1421      	asrs	r1, r4, #16
 800d922:	e7e0      	b.n	800d8e6 <__mdiff+0xca>
 800d924:	3f01      	subs	r7, #1
 800d926:	e7ea      	b.n	800d8fe <__mdiff+0xe2>
 800d928:	0800e333 	.word	0x0800e333
 800d92c:	0800e344 	.word	0x0800e344

0800d930 <__d2b>:
 800d930:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d934:	4689      	mov	r9, r1
 800d936:	2101      	movs	r1, #1
 800d938:	ec57 6b10 	vmov	r6, r7, d0
 800d93c:	4690      	mov	r8, r2
 800d93e:	f7ff fccf 	bl	800d2e0 <_Balloc>
 800d942:	4604      	mov	r4, r0
 800d944:	b930      	cbnz	r0, 800d954 <__d2b+0x24>
 800d946:	4602      	mov	r2, r0
 800d948:	4b25      	ldr	r3, [pc, #148]	; (800d9e0 <__d2b+0xb0>)
 800d94a:	4826      	ldr	r0, [pc, #152]	; (800d9e4 <__d2b+0xb4>)
 800d94c:	f240 310a 	movw	r1, #778	; 0x30a
 800d950:	f000 f9cc 	bl	800dcec <__assert_func>
 800d954:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d958:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d95c:	bb35      	cbnz	r5, 800d9ac <__d2b+0x7c>
 800d95e:	2e00      	cmp	r6, #0
 800d960:	9301      	str	r3, [sp, #4]
 800d962:	d028      	beq.n	800d9b6 <__d2b+0x86>
 800d964:	4668      	mov	r0, sp
 800d966:	9600      	str	r6, [sp, #0]
 800d968:	f7ff fd82 	bl	800d470 <__lo0bits>
 800d96c:	9900      	ldr	r1, [sp, #0]
 800d96e:	b300      	cbz	r0, 800d9b2 <__d2b+0x82>
 800d970:	9a01      	ldr	r2, [sp, #4]
 800d972:	f1c0 0320 	rsb	r3, r0, #32
 800d976:	fa02 f303 	lsl.w	r3, r2, r3
 800d97a:	430b      	orrs	r3, r1
 800d97c:	40c2      	lsrs	r2, r0
 800d97e:	6163      	str	r3, [r4, #20]
 800d980:	9201      	str	r2, [sp, #4]
 800d982:	9b01      	ldr	r3, [sp, #4]
 800d984:	61a3      	str	r3, [r4, #24]
 800d986:	2b00      	cmp	r3, #0
 800d988:	bf14      	ite	ne
 800d98a:	2202      	movne	r2, #2
 800d98c:	2201      	moveq	r2, #1
 800d98e:	6122      	str	r2, [r4, #16]
 800d990:	b1d5      	cbz	r5, 800d9c8 <__d2b+0x98>
 800d992:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d996:	4405      	add	r5, r0
 800d998:	f8c9 5000 	str.w	r5, [r9]
 800d99c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d9a0:	f8c8 0000 	str.w	r0, [r8]
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	b003      	add	sp, #12
 800d9a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9b0:	e7d5      	b.n	800d95e <__d2b+0x2e>
 800d9b2:	6161      	str	r1, [r4, #20]
 800d9b4:	e7e5      	b.n	800d982 <__d2b+0x52>
 800d9b6:	a801      	add	r0, sp, #4
 800d9b8:	f7ff fd5a 	bl	800d470 <__lo0bits>
 800d9bc:	9b01      	ldr	r3, [sp, #4]
 800d9be:	6163      	str	r3, [r4, #20]
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	6122      	str	r2, [r4, #16]
 800d9c4:	3020      	adds	r0, #32
 800d9c6:	e7e3      	b.n	800d990 <__d2b+0x60>
 800d9c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d9cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d9d0:	f8c9 0000 	str.w	r0, [r9]
 800d9d4:	6918      	ldr	r0, [r3, #16]
 800d9d6:	f7ff fd2b 	bl	800d430 <__hi0bits>
 800d9da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d9de:	e7df      	b.n	800d9a0 <__d2b+0x70>
 800d9e0:	0800e333 	.word	0x0800e333
 800d9e4:	0800e344 	.word	0x0800e344

0800d9e8 <_calloc_r>:
 800d9e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9ea:	fba1 2402 	umull	r2, r4, r1, r2
 800d9ee:	b94c      	cbnz	r4, 800da04 <_calloc_r+0x1c>
 800d9f0:	4611      	mov	r1, r2
 800d9f2:	9201      	str	r2, [sp, #4]
 800d9f4:	f7fd fda4 	bl	800b540 <_malloc_r>
 800d9f8:	9a01      	ldr	r2, [sp, #4]
 800d9fa:	4605      	mov	r5, r0
 800d9fc:	b930      	cbnz	r0, 800da0c <_calloc_r+0x24>
 800d9fe:	4628      	mov	r0, r5
 800da00:	b003      	add	sp, #12
 800da02:	bd30      	pop	{r4, r5, pc}
 800da04:	220c      	movs	r2, #12
 800da06:	6002      	str	r2, [r0, #0]
 800da08:	2500      	movs	r5, #0
 800da0a:	e7f8      	b.n	800d9fe <_calloc_r+0x16>
 800da0c:	4621      	mov	r1, r4
 800da0e:	f7fd fd23 	bl	800b458 <memset>
 800da12:	e7f4      	b.n	800d9fe <_calloc_r+0x16>

0800da14 <__sfputc_r>:
 800da14:	6893      	ldr	r3, [r2, #8]
 800da16:	3b01      	subs	r3, #1
 800da18:	2b00      	cmp	r3, #0
 800da1a:	b410      	push	{r4}
 800da1c:	6093      	str	r3, [r2, #8]
 800da1e:	da08      	bge.n	800da32 <__sfputc_r+0x1e>
 800da20:	6994      	ldr	r4, [r2, #24]
 800da22:	42a3      	cmp	r3, r4
 800da24:	db01      	blt.n	800da2a <__sfputc_r+0x16>
 800da26:	290a      	cmp	r1, #10
 800da28:	d103      	bne.n	800da32 <__sfputc_r+0x1e>
 800da2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da2e:	f7fe bbb1 	b.w	800c194 <__swbuf_r>
 800da32:	6813      	ldr	r3, [r2, #0]
 800da34:	1c58      	adds	r0, r3, #1
 800da36:	6010      	str	r0, [r2, #0]
 800da38:	7019      	strb	r1, [r3, #0]
 800da3a:	4608      	mov	r0, r1
 800da3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da40:	4770      	bx	lr

0800da42 <__sfputs_r>:
 800da42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da44:	4606      	mov	r6, r0
 800da46:	460f      	mov	r7, r1
 800da48:	4614      	mov	r4, r2
 800da4a:	18d5      	adds	r5, r2, r3
 800da4c:	42ac      	cmp	r4, r5
 800da4e:	d101      	bne.n	800da54 <__sfputs_r+0x12>
 800da50:	2000      	movs	r0, #0
 800da52:	e007      	b.n	800da64 <__sfputs_r+0x22>
 800da54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da58:	463a      	mov	r2, r7
 800da5a:	4630      	mov	r0, r6
 800da5c:	f7ff ffda 	bl	800da14 <__sfputc_r>
 800da60:	1c43      	adds	r3, r0, #1
 800da62:	d1f3      	bne.n	800da4c <__sfputs_r+0xa>
 800da64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da68 <_vfiprintf_r>:
 800da68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da6c:	460d      	mov	r5, r1
 800da6e:	b09d      	sub	sp, #116	; 0x74
 800da70:	4614      	mov	r4, r2
 800da72:	4698      	mov	r8, r3
 800da74:	4606      	mov	r6, r0
 800da76:	b118      	cbz	r0, 800da80 <_vfiprintf_r+0x18>
 800da78:	6983      	ldr	r3, [r0, #24]
 800da7a:	b90b      	cbnz	r3, 800da80 <_vfiprintf_r+0x18>
 800da7c:	f7fd fc10 	bl	800b2a0 <__sinit>
 800da80:	4b89      	ldr	r3, [pc, #548]	; (800dca8 <_vfiprintf_r+0x240>)
 800da82:	429d      	cmp	r5, r3
 800da84:	d11b      	bne.n	800dabe <_vfiprintf_r+0x56>
 800da86:	6875      	ldr	r5, [r6, #4]
 800da88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da8a:	07d9      	lsls	r1, r3, #31
 800da8c:	d405      	bmi.n	800da9a <_vfiprintf_r+0x32>
 800da8e:	89ab      	ldrh	r3, [r5, #12]
 800da90:	059a      	lsls	r2, r3, #22
 800da92:	d402      	bmi.n	800da9a <_vfiprintf_r+0x32>
 800da94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da96:	f7fd fcc6 	bl	800b426 <__retarget_lock_acquire_recursive>
 800da9a:	89ab      	ldrh	r3, [r5, #12]
 800da9c:	071b      	lsls	r3, r3, #28
 800da9e:	d501      	bpl.n	800daa4 <_vfiprintf_r+0x3c>
 800daa0:	692b      	ldr	r3, [r5, #16]
 800daa2:	b9eb      	cbnz	r3, 800dae0 <_vfiprintf_r+0x78>
 800daa4:	4629      	mov	r1, r5
 800daa6:	4630      	mov	r0, r6
 800daa8:	f7fe fbd8 	bl	800c25c <__swsetup_r>
 800daac:	b1c0      	cbz	r0, 800dae0 <_vfiprintf_r+0x78>
 800daae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dab0:	07dc      	lsls	r4, r3, #31
 800dab2:	d50e      	bpl.n	800dad2 <_vfiprintf_r+0x6a>
 800dab4:	f04f 30ff 	mov.w	r0, #4294967295
 800dab8:	b01d      	add	sp, #116	; 0x74
 800daba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dabe:	4b7b      	ldr	r3, [pc, #492]	; (800dcac <_vfiprintf_r+0x244>)
 800dac0:	429d      	cmp	r5, r3
 800dac2:	d101      	bne.n	800dac8 <_vfiprintf_r+0x60>
 800dac4:	68b5      	ldr	r5, [r6, #8]
 800dac6:	e7df      	b.n	800da88 <_vfiprintf_r+0x20>
 800dac8:	4b79      	ldr	r3, [pc, #484]	; (800dcb0 <_vfiprintf_r+0x248>)
 800daca:	429d      	cmp	r5, r3
 800dacc:	bf08      	it	eq
 800dace:	68f5      	ldreq	r5, [r6, #12]
 800dad0:	e7da      	b.n	800da88 <_vfiprintf_r+0x20>
 800dad2:	89ab      	ldrh	r3, [r5, #12]
 800dad4:	0598      	lsls	r0, r3, #22
 800dad6:	d4ed      	bmi.n	800dab4 <_vfiprintf_r+0x4c>
 800dad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dada:	f7fd fca5 	bl	800b428 <__retarget_lock_release_recursive>
 800dade:	e7e9      	b.n	800dab4 <_vfiprintf_r+0x4c>
 800dae0:	2300      	movs	r3, #0
 800dae2:	9309      	str	r3, [sp, #36]	; 0x24
 800dae4:	2320      	movs	r3, #32
 800dae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800daea:	f8cd 800c 	str.w	r8, [sp, #12]
 800daee:	2330      	movs	r3, #48	; 0x30
 800daf0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dcb4 <_vfiprintf_r+0x24c>
 800daf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800daf8:	f04f 0901 	mov.w	r9, #1
 800dafc:	4623      	mov	r3, r4
 800dafe:	469a      	mov	sl, r3
 800db00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db04:	b10a      	cbz	r2, 800db0a <_vfiprintf_r+0xa2>
 800db06:	2a25      	cmp	r2, #37	; 0x25
 800db08:	d1f9      	bne.n	800dafe <_vfiprintf_r+0x96>
 800db0a:	ebba 0b04 	subs.w	fp, sl, r4
 800db0e:	d00b      	beq.n	800db28 <_vfiprintf_r+0xc0>
 800db10:	465b      	mov	r3, fp
 800db12:	4622      	mov	r2, r4
 800db14:	4629      	mov	r1, r5
 800db16:	4630      	mov	r0, r6
 800db18:	f7ff ff93 	bl	800da42 <__sfputs_r>
 800db1c:	3001      	adds	r0, #1
 800db1e:	f000 80aa 	beq.w	800dc76 <_vfiprintf_r+0x20e>
 800db22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db24:	445a      	add	r2, fp
 800db26:	9209      	str	r2, [sp, #36]	; 0x24
 800db28:	f89a 3000 	ldrb.w	r3, [sl]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	f000 80a2 	beq.w	800dc76 <_vfiprintf_r+0x20e>
 800db32:	2300      	movs	r3, #0
 800db34:	f04f 32ff 	mov.w	r2, #4294967295
 800db38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db3c:	f10a 0a01 	add.w	sl, sl, #1
 800db40:	9304      	str	r3, [sp, #16]
 800db42:	9307      	str	r3, [sp, #28]
 800db44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db48:	931a      	str	r3, [sp, #104]	; 0x68
 800db4a:	4654      	mov	r4, sl
 800db4c:	2205      	movs	r2, #5
 800db4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db52:	4858      	ldr	r0, [pc, #352]	; (800dcb4 <_vfiprintf_r+0x24c>)
 800db54:	f7f2 fb64 	bl	8000220 <memchr>
 800db58:	9a04      	ldr	r2, [sp, #16]
 800db5a:	b9d8      	cbnz	r0, 800db94 <_vfiprintf_r+0x12c>
 800db5c:	06d1      	lsls	r1, r2, #27
 800db5e:	bf44      	itt	mi
 800db60:	2320      	movmi	r3, #32
 800db62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db66:	0713      	lsls	r3, r2, #28
 800db68:	bf44      	itt	mi
 800db6a:	232b      	movmi	r3, #43	; 0x2b
 800db6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db70:	f89a 3000 	ldrb.w	r3, [sl]
 800db74:	2b2a      	cmp	r3, #42	; 0x2a
 800db76:	d015      	beq.n	800dba4 <_vfiprintf_r+0x13c>
 800db78:	9a07      	ldr	r2, [sp, #28]
 800db7a:	4654      	mov	r4, sl
 800db7c:	2000      	movs	r0, #0
 800db7e:	f04f 0c0a 	mov.w	ip, #10
 800db82:	4621      	mov	r1, r4
 800db84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db88:	3b30      	subs	r3, #48	; 0x30
 800db8a:	2b09      	cmp	r3, #9
 800db8c:	d94e      	bls.n	800dc2c <_vfiprintf_r+0x1c4>
 800db8e:	b1b0      	cbz	r0, 800dbbe <_vfiprintf_r+0x156>
 800db90:	9207      	str	r2, [sp, #28]
 800db92:	e014      	b.n	800dbbe <_vfiprintf_r+0x156>
 800db94:	eba0 0308 	sub.w	r3, r0, r8
 800db98:	fa09 f303 	lsl.w	r3, r9, r3
 800db9c:	4313      	orrs	r3, r2
 800db9e:	9304      	str	r3, [sp, #16]
 800dba0:	46a2      	mov	sl, r4
 800dba2:	e7d2      	b.n	800db4a <_vfiprintf_r+0xe2>
 800dba4:	9b03      	ldr	r3, [sp, #12]
 800dba6:	1d19      	adds	r1, r3, #4
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	9103      	str	r1, [sp, #12]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	bfbb      	ittet	lt
 800dbb0:	425b      	neglt	r3, r3
 800dbb2:	f042 0202 	orrlt.w	r2, r2, #2
 800dbb6:	9307      	strge	r3, [sp, #28]
 800dbb8:	9307      	strlt	r3, [sp, #28]
 800dbba:	bfb8      	it	lt
 800dbbc:	9204      	strlt	r2, [sp, #16]
 800dbbe:	7823      	ldrb	r3, [r4, #0]
 800dbc0:	2b2e      	cmp	r3, #46	; 0x2e
 800dbc2:	d10c      	bne.n	800dbde <_vfiprintf_r+0x176>
 800dbc4:	7863      	ldrb	r3, [r4, #1]
 800dbc6:	2b2a      	cmp	r3, #42	; 0x2a
 800dbc8:	d135      	bne.n	800dc36 <_vfiprintf_r+0x1ce>
 800dbca:	9b03      	ldr	r3, [sp, #12]
 800dbcc:	1d1a      	adds	r2, r3, #4
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	9203      	str	r2, [sp, #12]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	bfb8      	it	lt
 800dbd6:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbda:	3402      	adds	r4, #2
 800dbdc:	9305      	str	r3, [sp, #20]
 800dbde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dcc4 <_vfiprintf_r+0x25c>
 800dbe2:	7821      	ldrb	r1, [r4, #0]
 800dbe4:	2203      	movs	r2, #3
 800dbe6:	4650      	mov	r0, sl
 800dbe8:	f7f2 fb1a 	bl	8000220 <memchr>
 800dbec:	b140      	cbz	r0, 800dc00 <_vfiprintf_r+0x198>
 800dbee:	2340      	movs	r3, #64	; 0x40
 800dbf0:	eba0 000a 	sub.w	r0, r0, sl
 800dbf4:	fa03 f000 	lsl.w	r0, r3, r0
 800dbf8:	9b04      	ldr	r3, [sp, #16]
 800dbfa:	4303      	orrs	r3, r0
 800dbfc:	3401      	adds	r4, #1
 800dbfe:	9304      	str	r3, [sp, #16]
 800dc00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc04:	482c      	ldr	r0, [pc, #176]	; (800dcb8 <_vfiprintf_r+0x250>)
 800dc06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc0a:	2206      	movs	r2, #6
 800dc0c:	f7f2 fb08 	bl	8000220 <memchr>
 800dc10:	2800      	cmp	r0, #0
 800dc12:	d03f      	beq.n	800dc94 <_vfiprintf_r+0x22c>
 800dc14:	4b29      	ldr	r3, [pc, #164]	; (800dcbc <_vfiprintf_r+0x254>)
 800dc16:	bb1b      	cbnz	r3, 800dc60 <_vfiprintf_r+0x1f8>
 800dc18:	9b03      	ldr	r3, [sp, #12]
 800dc1a:	3307      	adds	r3, #7
 800dc1c:	f023 0307 	bic.w	r3, r3, #7
 800dc20:	3308      	adds	r3, #8
 800dc22:	9303      	str	r3, [sp, #12]
 800dc24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc26:	443b      	add	r3, r7
 800dc28:	9309      	str	r3, [sp, #36]	; 0x24
 800dc2a:	e767      	b.n	800dafc <_vfiprintf_r+0x94>
 800dc2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc30:	460c      	mov	r4, r1
 800dc32:	2001      	movs	r0, #1
 800dc34:	e7a5      	b.n	800db82 <_vfiprintf_r+0x11a>
 800dc36:	2300      	movs	r3, #0
 800dc38:	3401      	adds	r4, #1
 800dc3a:	9305      	str	r3, [sp, #20]
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	f04f 0c0a 	mov.w	ip, #10
 800dc42:	4620      	mov	r0, r4
 800dc44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc48:	3a30      	subs	r2, #48	; 0x30
 800dc4a:	2a09      	cmp	r2, #9
 800dc4c:	d903      	bls.n	800dc56 <_vfiprintf_r+0x1ee>
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d0c5      	beq.n	800dbde <_vfiprintf_r+0x176>
 800dc52:	9105      	str	r1, [sp, #20]
 800dc54:	e7c3      	b.n	800dbde <_vfiprintf_r+0x176>
 800dc56:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc5a:	4604      	mov	r4, r0
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	e7f0      	b.n	800dc42 <_vfiprintf_r+0x1da>
 800dc60:	ab03      	add	r3, sp, #12
 800dc62:	9300      	str	r3, [sp, #0]
 800dc64:	462a      	mov	r2, r5
 800dc66:	4b16      	ldr	r3, [pc, #88]	; (800dcc0 <_vfiprintf_r+0x258>)
 800dc68:	a904      	add	r1, sp, #16
 800dc6a:	4630      	mov	r0, r6
 800dc6c:	f7fd fd7c 	bl	800b768 <_printf_float>
 800dc70:	4607      	mov	r7, r0
 800dc72:	1c78      	adds	r0, r7, #1
 800dc74:	d1d6      	bne.n	800dc24 <_vfiprintf_r+0x1bc>
 800dc76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc78:	07d9      	lsls	r1, r3, #31
 800dc7a:	d405      	bmi.n	800dc88 <_vfiprintf_r+0x220>
 800dc7c:	89ab      	ldrh	r3, [r5, #12]
 800dc7e:	059a      	lsls	r2, r3, #22
 800dc80:	d402      	bmi.n	800dc88 <_vfiprintf_r+0x220>
 800dc82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc84:	f7fd fbd0 	bl	800b428 <__retarget_lock_release_recursive>
 800dc88:	89ab      	ldrh	r3, [r5, #12]
 800dc8a:	065b      	lsls	r3, r3, #25
 800dc8c:	f53f af12 	bmi.w	800dab4 <_vfiprintf_r+0x4c>
 800dc90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc92:	e711      	b.n	800dab8 <_vfiprintf_r+0x50>
 800dc94:	ab03      	add	r3, sp, #12
 800dc96:	9300      	str	r3, [sp, #0]
 800dc98:	462a      	mov	r2, r5
 800dc9a:	4b09      	ldr	r3, [pc, #36]	; (800dcc0 <_vfiprintf_r+0x258>)
 800dc9c:	a904      	add	r1, sp, #16
 800dc9e:	4630      	mov	r0, r6
 800dca0:	f7fe f806 	bl	800bcb0 <_printf_i>
 800dca4:	e7e4      	b.n	800dc70 <_vfiprintf_r+0x208>
 800dca6:	bf00      	nop
 800dca8:	0800e23c 	.word	0x0800e23c
 800dcac:	0800e25c 	.word	0x0800e25c
 800dcb0:	0800e21c 	.word	0x0800e21c
 800dcb4:	0800e49c 	.word	0x0800e49c
 800dcb8:	0800e4a6 	.word	0x0800e4a6
 800dcbc:	0800b769 	.word	0x0800b769
 800dcc0:	0800da43 	.word	0x0800da43
 800dcc4:	0800e4a2 	.word	0x0800e4a2

0800dcc8 <_read_r>:
 800dcc8:	b538      	push	{r3, r4, r5, lr}
 800dcca:	4d07      	ldr	r5, [pc, #28]	; (800dce8 <_read_r+0x20>)
 800dccc:	4604      	mov	r4, r0
 800dcce:	4608      	mov	r0, r1
 800dcd0:	4611      	mov	r1, r2
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	602a      	str	r2, [r5, #0]
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	f7f3 fd16 	bl	8001708 <_read>
 800dcdc:	1c43      	adds	r3, r0, #1
 800dcde:	d102      	bne.n	800dce6 <_read_r+0x1e>
 800dce0:	682b      	ldr	r3, [r5, #0]
 800dce2:	b103      	cbz	r3, 800dce6 <_read_r+0x1e>
 800dce4:	6023      	str	r3, [r4, #0]
 800dce6:	bd38      	pop	{r3, r4, r5, pc}
 800dce8:	20005108 	.word	0x20005108

0800dcec <__assert_func>:
 800dcec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dcee:	4614      	mov	r4, r2
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	4b09      	ldr	r3, [pc, #36]	; (800dd18 <__assert_func+0x2c>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	4605      	mov	r5, r0
 800dcf8:	68d8      	ldr	r0, [r3, #12]
 800dcfa:	b14c      	cbz	r4, 800dd10 <__assert_func+0x24>
 800dcfc:	4b07      	ldr	r3, [pc, #28]	; (800dd1c <__assert_func+0x30>)
 800dcfe:	9100      	str	r1, [sp, #0]
 800dd00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd04:	4906      	ldr	r1, [pc, #24]	; (800dd20 <__assert_func+0x34>)
 800dd06:	462b      	mov	r3, r5
 800dd08:	f000 f80e 	bl	800dd28 <fiprintf>
 800dd0c:	f000 f85f 	bl	800ddce <abort>
 800dd10:	4b04      	ldr	r3, [pc, #16]	; (800dd24 <__assert_func+0x38>)
 800dd12:	461c      	mov	r4, r3
 800dd14:	e7f3      	b.n	800dcfe <__assert_func+0x12>
 800dd16:	bf00      	nop
 800dd18:	20000010 	.word	0x20000010
 800dd1c:	0800e4ad 	.word	0x0800e4ad
 800dd20:	0800e4ba 	.word	0x0800e4ba
 800dd24:	0800e4e8 	.word	0x0800e4e8

0800dd28 <fiprintf>:
 800dd28:	b40e      	push	{r1, r2, r3}
 800dd2a:	b503      	push	{r0, r1, lr}
 800dd2c:	4601      	mov	r1, r0
 800dd2e:	ab03      	add	r3, sp, #12
 800dd30:	4805      	ldr	r0, [pc, #20]	; (800dd48 <fiprintf+0x20>)
 800dd32:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd36:	6800      	ldr	r0, [r0, #0]
 800dd38:	9301      	str	r3, [sp, #4]
 800dd3a:	f7ff fe95 	bl	800da68 <_vfiprintf_r>
 800dd3e:	b002      	add	sp, #8
 800dd40:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd44:	b003      	add	sp, #12
 800dd46:	4770      	bx	lr
 800dd48:	20000010 	.word	0x20000010

0800dd4c <_fstat_r>:
 800dd4c:	b538      	push	{r3, r4, r5, lr}
 800dd4e:	4d07      	ldr	r5, [pc, #28]	; (800dd6c <_fstat_r+0x20>)
 800dd50:	2300      	movs	r3, #0
 800dd52:	4604      	mov	r4, r0
 800dd54:	4608      	mov	r0, r1
 800dd56:	4611      	mov	r1, r2
 800dd58:	602b      	str	r3, [r5, #0]
 800dd5a:	f7f3 fd1a 	bl	8001792 <_fstat>
 800dd5e:	1c43      	adds	r3, r0, #1
 800dd60:	d102      	bne.n	800dd68 <_fstat_r+0x1c>
 800dd62:	682b      	ldr	r3, [r5, #0]
 800dd64:	b103      	cbz	r3, 800dd68 <_fstat_r+0x1c>
 800dd66:	6023      	str	r3, [r4, #0]
 800dd68:	bd38      	pop	{r3, r4, r5, pc}
 800dd6a:	bf00      	nop
 800dd6c:	20005108 	.word	0x20005108

0800dd70 <_isatty_r>:
 800dd70:	b538      	push	{r3, r4, r5, lr}
 800dd72:	4d06      	ldr	r5, [pc, #24]	; (800dd8c <_isatty_r+0x1c>)
 800dd74:	2300      	movs	r3, #0
 800dd76:	4604      	mov	r4, r0
 800dd78:	4608      	mov	r0, r1
 800dd7a:	602b      	str	r3, [r5, #0]
 800dd7c:	f7f3 fd19 	bl	80017b2 <_isatty>
 800dd80:	1c43      	adds	r3, r0, #1
 800dd82:	d102      	bne.n	800dd8a <_isatty_r+0x1a>
 800dd84:	682b      	ldr	r3, [r5, #0]
 800dd86:	b103      	cbz	r3, 800dd8a <_isatty_r+0x1a>
 800dd88:	6023      	str	r3, [r4, #0]
 800dd8a:	bd38      	pop	{r3, r4, r5, pc}
 800dd8c:	20005108 	.word	0x20005108

0800dd90 <__ascii_mbtowc>:
 800dd90:	b082      	sub	sp, #8
 800dd92:	b901      	cbnz	r1, 800dd96 <__ascii_mbtowc+0x6>
 800dd94:	a901      	add	r1, sp, #4
 800dd96:	b142      	cbz	r2, 800ddaa <__ascii_mbtowc+0x1a>
 800dd98:	b14b      	cbz	r3, 800ddae <__ascii_mbtowc+0x1e>
 800dd9a:	7813      	ldrb	r3, [r2, #0]
 800dd9c:	600b      	str	r3, [r1, #0]
 800dd9e:	7812      	ldrb	r2, [r2, #0]
 800dda0:	1e10      	subs	r0, r2, #0
 800dda2:	bf18      	it	ne
 800dda4:	2001      	movne	r0, #1
 800dda6:	b002      	add	sp, #8
 800dda8:	4770      	bx	lr
 800ddaa:	4610      	mov	r0, r2
 800ddac:	e7fb      	b.n	800dda6 <__ascii_mbtowc+0x16>
 800ddae:	f06f 0001 	mvn.w	r0, #1
 800ddb2:	e7f8      	b.n	800dda6 <__ascii_mbtowc+0x16>

0800ddb4 <__ascii_wctomb>:
 800ddb4:	b149      	cbz	r1, 800ddca <__ascii_wctomb+0x16>
 800ddb6:	2aff      	cmp	r2, #255	; 0xff
 800ddb8:	bf85      	ittet	hi
 800ddba:	238a      	movhi	r3, #138	; 0x8a
 800ddbc:	6003      	strhi	r3, [r0, #0]
 800ddbe:	700a      	strbls	r2, [r1, #0]
 800ddc0:	f04f 30ff 	movhi.w	r0, #4294967295
 800ddc4:	bf98      	it	ls
 800ddc6:	2001      	movls	r0, #1
 800ddc8:	4770      	bx	lr
 800ddca:	4608      	mov	r0, r1
 800ddcc:	4770      	bx	lr

0800ddce <abort>:
 800ddce:	b508      	push	{r3, lr}
 800ddd0:	2006      	movs	r0, #6
 800ddd2:	f000 f82b 	bl	800de2c <raise>
 800ddd6:	2001      	movs	r0, #1
 800ddd8:	f7f3 fc8c 	bl	80016f4 <_exit>

0800dddc <_raise_r>:
 800dddc:	291f      	cmp	r1, #31
 800ddde:	b538      	push	{r3, r4, r5, lr}
 800dde0:	4604      	mov	r4, r0
 800dde2:	460d      	mov	r5, r1
 800dde4:	d904      	bls.n	800ddf0 <_raise_r+0x14>
 800dde6:	2316      	movs	r3, #22
 800dde8:	6003      	str	r3, [r0, #0]
 800ddea:	f04f 30ff 	mov.w	r0, #4294967295
 800ddee:	bd38      	pop	{r3, r4, r5, pc}
 800ddf0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ddf2:	b112      	cbz	r2, 800ddfa <_raise_r+0x1e>
 800ddf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ddf8:	b94b      	cbnz	r3, 800de0e <_raise_r+0x32>
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	f000 f830 	bl	800de60 <_getpid_r>
 800de00:	462a      	mov	r2, r5
 800de02:	4601      	mov	r1, r0
 800de04:	4620      	mov	r0, r4
 800de06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de0a:	f000 b817 	b.w	800de3c <_kill_r>
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d00a      	beq.n	800de28 <_raise_r+0x4c>
 800de12:	1c59      	adds	r1, r3, #1
 800de14:	d103      	bne.n	800de1e <_raise_r+0x42>
 800de16:	2316      	movs	r3, #22
 800de18:	6003      	str	r3, [r0, #0]
 800de1a:	2001      	movs	r0, #1
 800de1c:	e7e7      	b.n	800ddee <_raise_r+0x12>
 800de1e:	2400      	movs	r4, #0
 800de20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800de24:	4628      	mov	r0, r5
 800de26:	4798      	blx	r3
 800de28:	2000      	movs	r0, #0
 800de2a:	e7e0      	b.n	800ddee <_raise_r+0x12>

0800de2c <raise>:
 800de2c:	4b02      	ldr	r3, [pc, #8]	; (800de38 <raise+0xc>)
 800de2e:	4601      	mov	r1, r0
 800de30:	6818      	ldr	r0, [r3, #0]
 800de32:	f7ff bfd3 	b.w	800dddc <_raise_r>
 800de36:	bf00      	nop
 800de38:	20000010 	.word	0x20000010

0800de3c <_kill_r>:
 800de3c:	b538      	push	{r3, r4, r5, lr}
 800de3e:	4d07      	ldr	r5, [pc, #28]	; (800de5c <_kill_r+0x20>)
 800de40:	2300      	movs	r3, #0
 800de42:	4604      	mov	r4, r0
 800de44:	4608      	mov	r0, r1
 800de46:	4611      	mov	r1, r2
 800de48:	602b      	str	r3, [r5, #0]
 800de4a:	f7f3 fc43 	bl	80016d4 <_kill>
 800de4e:	1c43      	adds	r3, r0, #1
 800de50:	d102      	bne.n	800de58 <_kill_r+0x1c>
 800de52:	682b      	ldr	r3, [r5, #0]
 800de54:	b103      	cbz	r3, 800de58 <_kill_r+0x1c>
 800de56:	6023      	str	r3, [r4, #0]
 800de58:	bd38      	pop	{r3, r4, r5, pc}
 800de5a:	bf00      	nop
 800de5c:	20005108 	.word	0x20005108

0800de60 <_getpid_r>:
 800de60:	f7f3 bc30 	b.w	80016c4 <_getpid>

0800de64 <_init>:
 800de64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de66:	bf00      	nop
 800de68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de6a:	bc08      	pop	{r3}
 800de6c:	469e      	mov	lr, r3
 800de6e:	4770      	bx	lr

0800de70 <_fini>:
 800de70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de72:	bf00      	nop
 800de74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de76:	bc08      	pop	{r3}
 800de78:	469e      	mov	lr, r3
 800de7a:	4770      	bx	lr
